// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');

    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }
  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
      return func;
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 8400;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } }, { func: function() { __GLOBAL__sub_I_Scene_cpp() } }, { func: function() { __GLOBAL__sub_I_Render_cpp() } }, { func: function() { __GLOBAL__sub_I_Precompiled_cpp() } }, { func: function() { __GLOBAL__sub_I_Manifold_cpp() } }, { func: function() { __GLOBAL__sub_I_Collision_cpp() } }, { func: function() { __GLOBAL__sub_I_Clock_cpp() } }, { func: function() { __GLOBAL__sub_I_Body_cpp() } });
  

/* memory initializer */ allocate([88,3,0,0,93,4,0,0,128,3,0,0,78,4,0,0,8,0,0,0,0,0,0,0,128,3,0,0,209,4,0,0,8,0,0,0,0,0,0,0,88,3,0,0,215,14,0,0,128,3,0,0,240,14,0,0,216,0,0,0,0,0,0,0,128,3,0,0,7,15,0,0,48,0,0,0,0,0,0,0,128,3,0,0,30,15,0,0,72,0,0,0,0,0,0,0,128,3,0,0,108,15,0,0,72,0,0,0,0,0,0,0,88,3,0,0,199,16,0,0,128,3,0,0,165,16,0,0,160,0,0,0,0,0,0,0,128,3,0,0,82,16,0,0,128,0,0,0,0,0,0,0,128,3,0,0,119,16,0,0,176,0,0,0,0,0,0,0,88,3,0,0,152,16,0,0,128,3,0,0,191,17,0,0,120,0,0,0,0,0,0,0,128,3,0,0,219,17,0,0,120,0,0,0,0,0,0,0,128,3,0,0,235,17,0,0,120,0,0,0,0,0,0,0,128,3,0,0,253,17,0,0,200,0,0,0,0,0,0,0,128,3,0,0,14,18,0,0,200,0,0,0,0,0,0,0,128,3,0,0,67,18,0,0,160,0,0,0,0,0,0,0,128,3,0,0,31,18,0,0,8,1,0,0,0,0,0,0,0,0,0,0,16,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,32,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,156,1,0,0,5,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,20,0,0,0,198,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,20,0,0,0,206,28,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,88,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,0,0,0,0,104,0,0,0,26,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,30,0,0,0,31,0,0,0,36,0,0,0,37,0,0,0,0,0,0,0,128,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,0,0,0,0,144,0,0,0,38,0,0,0,46,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,212,16,0,0,0,0,0,0,184,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,0,0,0,0,200,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,0,0,0,0,216,0,0,0,56,0,0,0,57,0,0,0,25,0,0,0,0,0,0,0,232,0,0,0,53,0,0,0,58,0,0,0,55,0,0,0,0,0,0,0,248,0,0,0,53,0,0,0,59,0,0,0,55,0,0,0,76,101,102,116,32,99,108,105,99,107,32,116,111,32,115,112,97,119,110,32,97,32,112,111,108,121,103,111,110,0,82,105,103,104,116,32,99,108,105,99,107,32,116,111,32,115,112,97,119,110,32,97,32,99,105,114,99,108,101,0,80,104,121,69,110,103,105,110,101,0,49,50,80,111,108,121,103,111,110,83,104,97,112,101,0,53,83,104,97,112,101,0,99,111,117,110,116,32,62,32,50,32,38,38,32,99,111,117,110,116,32,60,61,32,77,97,120,80,111,108,121,86,101,114,116,101,120,67,111,117,110,116,0,73,109,112,117,108,115,101,69,110,103,105,110,101,45,109,97,115,116,101,114,47,83,104,97,112,101,46,104,0,83,101,116,0,102,97,99,101,46,76,101,110,83,113,114,40,32,41,32,62,32,69,80,83,73,76,79,78,32,42,32,69,80,83,73,76,79,78,0,54,67,105,114,99,108,101,0,115,104,97,112,101,0,73,109,112,117,108,115,101,69,110,103,105,110,101,45,109,97,115,116,101,114,47,83,99,101,110,101,46,99,112,112,0,65,100,100,0,115,112,32,33,61,32,51,0,73,109,112,117,108,115,101,69,110,103,105,110,101,45,109,97,115,116,101,114,47,67,111,108,108,105,115,105,111,110,46,99,112,112,0,67,108,105,112,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,99,108,111,99,107,95,103,101,116,116,105,109,101,40,67,76,79,67,75,95,77,79,78,79,84,79,78,73,67,41,32,102,97,105,108,101,100,0,118,101,99,116,111,114,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,78,83,116,51,95,95,49,50,52,95,95,103,101,110,101,114,105,99,95,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,103,101,110,101,114,105,99,0,117,110,115,112,101,99,105,102,105,101,100,32,103,101,110,101,114,105,99,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,78,83,116,51,95,95,49,50,51,95,95,115,121,115,116,101,109,95,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,115,121,115,116,101,109,0,117,110,115,112,101,99,105,102,105,101,100,32,115,121,115,116,101,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,58,32,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,101,120,99,101,112,116,105,111,110,0,117,110,99,97,117,103,104,116,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,83,116,57,98,97,100,95,97,108,108,111,99,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,32,99,111,110,115,116,0,32,118,111,108,97,116,105,108,101,0,32,114,101,115,116,114,105,99,116,0,118,111,105,100,0,119,99,104,97,114,95,116,0,98,111,111,108,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,108,111,110,103,32,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,108,111,110,103,0,95,95,105,110,116,49,50,56,0,117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,50,56,0,102,108,111,97,116,0,100,111,117,98,108,101,0,108,111,110,103,32,100,111,117,98,108,101,0,95,95,102,108,111,97,116,49,50,56,0,46,46,46,0,95,71,76,79,66,65,76,95,95,78,0,40,97,110,111,110,121,109,111,117,115,32,110,97,109,101,115,112,97,99,101,41,0,100,101,99,105,109,97,108,54,52,0,100,101,99,105,109,97,108,49,50,56,0,100,101,99,105,109,97,108,51,50,0,100,101,99,105,109,97,108,49,54,0,99,104,97,114,51,50,95,116,0,99,104,97,114,49,54,95,116,0,97,117,116,111,0,115,116,100,58,58,110,117,108,108,112,116,114,95,116,0,32,91,0,32,91,93,0,93,0,40,0,41,0,102,97,108,115,101,0,116,114,117,101,0,117,0,108,0,117,108,0,108,108,0,117,108,108,0,37,97,102,0,37,97,0,37,76,97,76,0,102,112,0,38,38,0,62,0,41,32,0,32,40,0,38,0,38,61,0,61,0,97,108,105,103,110,111,102,32,40,0,99,111,110,115,116,95,99,97,115,116,60,0,62,40,0,44,0,126,0,41,40,0,58,58,0,100,101,108,101,116,101,91,93,32,0,100,121,110,97,109,105,99,95,99,97,115,116,60,0,42,0,100,101,108,101,116,101,32,0,111,112,101,114,97,116,111,114,38,38,0,111,112,101,114,97,116,111,114,38,0,111,112,101,114,97,116,111,114,38,61,0,111,112,101,114,97,116,111,114,61,0,111,112,101,114,97,116,111,114,40,41,0,111,112,101,114,97,116,111,114,44,0,111,112,101,114,97,116,111,114,126,0,111,112,101,114,97,116,111,114,32,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,91,93,0,111,112,101,114,97,116,111,114,42,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,0,111,112,101,114,97,116,111,114,47,0,111,112,101,114,97,116,111,114,47,61,0,111,112,101,114,97,116,111,114,94,0,111,112,101,114,97,116,111,114,94,61,0,111,112,101,114,97,116,111,114,61,61,0,111,112,101,114,97,116,111,114,62,61,0,111,112,101,114,97,116,111,114,62,0,111,112,101,114,97,116,111,114,91,93,0,111,112,101,114,97,116,111,114,60,61,0,111,112,101,114,97,116,111,114,34,34,32,0,111,112,101,114,97,116,111,114,60,60,0,111,112,101,114,97,116,111,114,60,60,61,0,111,112,101,114,97,116,111,114,60,0,111,112,101,114,97,116,111,114,45,0,111,112,101,114,97,116,111,114,45,61,0,111,112,101,114,97,116,111,114,42,61,0,111,112,101,114,97,116,111,114,45,45,0,111,112,101,114,97,116,111,114,32,110,101,119,91,93,0,111,112,101,114,97,116,111,114,33,61,0,111,112,101,114,97,116,111,114,33,0,111,112,101,114,97,116,111,114,32,110,101,119,0,111,112,101,114,97,116,111,114,124,124,0,111,112,101,114,97,116,111,114,124,0,111,112,101,114,97,116,111,114,124,61,0,111,112,101,114,97,116,111,114,45,62,42,0,111,112,101,114,97,116,111,114,43,0,111,112,101,114,97,116,111,114,43,61,0,111,112,101,114,97,116,111,114,43,43,0,111,112,101,114,97,116,111,114,45,62,0,111,112,101,114,97,116,111,114,63,0,111,112,101,114,97,116,111,114,37,0,111,112,101,114,97,116,111,114,37,61,0,111,112,101,114,97,116,111,114,62,62,0,111,112,101,114,97,116,111,114,62,62,61,0,60,0,44,32,0,32,62,0,100,101,99,108,116,121,112,101,40,0,115,116,100,58,58,97,108,108,111,99,97,116,111,114,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,105,115,116,114,101,97,109,0,115,116,100,58,58,111,115,116,114,101,97,109,0,115,116,100,58,58,105,111,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,44,32,115,116,100,58,58,97,108,108,111,99,97,116,111,114,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,105,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,111,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,105,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,111,115,116,114,101,97,109,0,39,117,110,110,97,109,101,100,0,39,108,97,109,98,100,97,39,40,0,115,116,100,58,58,0,46,42,0,46,0,47,0,47,61,0,94,0,94,61,0,61,61,0,62,61,0,41,91,0,60,61,0,60,60,0,60,60,61,0,45,0,45,61,0,42,61,0,45,45,0,41,45,45,0,91,93,32,0,32,0,33,61,0,33,0,110,111,101,120,99,101,112,116,32,40,0,124,124,0,124,0,124,61,0,45,62,42,0,43,0,43,61,0,43,43,0,41,43,43,0,45,62,0,41,32,63,32,40,0,41,32,58,32,40,0,114,101,105,110,116,101,114,112,114,101,116,95,99,97,115,116,60,0,37,0,37,61,0,62,62,0,62,62,61,0,115,116,97,116,105,99,95,99,97,115,116,60,0,115,105,122,101,111,102,32,40,0,115,105,122,101,111,102,46,46,46,40,0,116,121,112,101,105,100,40,0,116,104,114,111,119,0,116,104,114,111,119,32,0,32,99,111,109,112,108,101,120,0,32,38,0,32,38,38,0,32,105,109,97,103,105,110,97,114,121,0,58,58,42,0,111,98,106,99,95,111,98,106,101,99,116,60,0,105,100,0,111,98,106,99,112,114,111,116,111,0,115,116,100,0,58,58,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0,32,118,101,99,116,111,114,91,0,112,105,120,101,108,32,118,101,99,116,111,114,91,0,118,116,97,98,108,101,32,102,111,114,32,0,86,84,84,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,110,97,109,101,32,102,111,114,32,0,99,111,118,97,114,105,97,110,116,32,114,101,116,117,114,110,32,116,104,117,110,107,32,116,111,32,0,99,111,110,115,116,114,117,99,116,105,111,110,32,118,116,97,98,108,101,32,102,111,114,32,0,45,105,110,45,0,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,110,111,110,45,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,103,117,97,114,100,32,118,97,114,105,97,98,108,101,32,102,111,114,32,0,114,101,102,101,114,101,110,99,101,32,116,101,109,112,111,114,97,114,121,32,102,111,114,32,0,95,98,108,111,99,107,95,105,110,118,111,107,101,0,105,110,118,111,99,97,116,105,111,110,32,102,117,110,99,116,105,111,110,32,102,111,114,32,98,108,111,99,107,32,105,110,32,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return self['performance']['now'](); };
        } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return performance['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var GLUT={initTime:null,idleFunc:null,displayFunc:null,keyboardFunc:null,keyboardUpFunc:null,specialFunc:null,specialUpFunc:null,reshapeFunc:null,motionFunc:null,passiveMotionFunc:null,mouseFunc:null,buttons:0,modifiers:0,initWindowWidth:256,initWindowHeight:256,initDisplayMode:18,windowX:0,windowY:0,windowWidth:0,windowHeight:0,requestedAnimationFrame:false,saveModifiers:function (event) {
        GLUT.modifiers = 0;
        if (event['shiftKey'])
          GLUT.modifiers += 1; /* GLUT_ACTIVE_SHIFT */
        if (event['ctrlKey'])
          GLUT.modifiers += 2; /* GLUT_ACTIVE_CTRL */
        if (event['altKey'])
          GLUT.modifiers += 4; /* GLUT_ACTIVE_ALT */
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
        if (newX == lastX && newY == lastY) return;
  
        if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('vii', GLUT.passiveMotionFunc, [lastX, lastY]);
        } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('vii', GLUT.motionFunc, [lastX, lastY]);
        }
      },getSpecialKey:function (keycode) {
          var key = null;
          switch (keycode) {
            case 8:  key = 120 /* backspace */; break;
            case 46: key = 111 /* delete */; break;
  
            case 0x70 /*DOM_VK_F1*/: key = 1 /* GLUT_KEY_F1 */; break;
            case 0x71 /*DOM_VK_F2*/: key = 2 /* GLUT_KEY_F2 */; break;
            case 0x72 /*DOM_VK_F3*/: key = 3 /* GLUT_KEY_F3 */; break;
            case 0x73 /*DOM_VK_F4*/: key = 4 /* GLUT_KEY_F4 */; break;
            case 0x74 /*DOM_VK_F5*/: key = 5 /* GLUT_KEY_F5 */; break;
            case 0x75 /*DOM_VK_F6*/: key = 6 /* GLUT_KEY_F6 */; break;
            case 0x76 /*DOM_VK_F7*/: key = 7 /* GLUT_KEY_F7 */; break;
            case 0x77 /*DOM_VK_F8*/: key = 8 /* GLUT_KEY_F8 */; break;
            case 0x78 /*DOM_VK_F9*/: key = 9 /* GLUT_KEY_F9 */; break;
            case 0x79 /*DOM_VK_F10*/: key = 10 /* GLUT_KEY_F10 */; break;
            case 0x7a /*DOM_VK_F11*/: key = 11 /* GLUT_KEY_F11 */; break;
            case 0x7b /*DOM_VK_F12*/: key = 12 /* GLUT_KEY_F12 */; break;
            case 0x25 /*DOM_VK_LEFT*/: key = 100 /* GLUT_KEY_LEFT */; break;
            case 0x26 /*DOM_VK_UP*/: key = 101 /* GLUT_KEY_UP */; break;
            case 0x27 /*DOM_VK_RIGHT*/: key = 102 /* GLUT_KEY_RIGHT */; break;
            case 0x28 /*DOM_VK_DOWN*/: key = 103 /* GLUT_KEY_DOWN */; break;
            case 0x21 /*DOM_VK_PAGE_UP*/: key = 104 /* GLUT_KEY_PAGE_UP */; break;
            case 0x22 /*DOM_VK_PAGE_DOWN*/: key = 105 /* GLUT_KEY_PAGE_DOWN */; break;
            case 0x24 /*DOM_VK_HOME*/: key = 106 /* GLUT_KEY_HOME */; break;
            case 0x23 /*DOM_VK_END*/: key = 107 /* GLUT_KEY_END */; break;
            case 0x2d /*DOM_VK_INSERT*/: key = 108 /* GLUT_KEY_INSERT */; break;
  
            case 16   /*DOM_VK_SHIFT*/:
            case 0x05 /*DOM_VK_LEFT_SHIFT*/:
              key = 112 /* GLUT_KEY_SHIFT_L */;
              break;
            case 0x06 /*DOM_VK_RIGHT_SHIFT*/:
              key = 113 /* GLUT_KEY_SHIFT_R */;
              break;
  
            case 17   /*DOM_VK_CONTROL*/:
            case 0x03 /*DOM_VK_LEFT_CONTROL*/:
              key = 114 /* GLUT_KEY_CONTROL_L */;
              break;
            case 0x04 /*DOM_VK_RIGHT_CONTROL*/:
              key = 115 /* GLUT_KEY_CONTROL_R */;
              break;
  
            case 18   /*DOM_VK_ALT*/:
            case 0x02 /*DOM_VK_LEFT_ALT*/:
              key = 116 /* GLUT_KEY_ALT_L */;
              break;
            case 0x01 /*DOM_VK_RIGHT_ALT*/:
              key = 117 /* GLUT_KEY_ALT_R */;
              break;
          };
          return key;
      },getASCIIKey:function (event) {
        if (event['ctrlKey'] || event['altKey'] || event['metaKey']) return null;
  
        var keycode = event['keyCode'];
  
        /* The exact list is soooo hard to find in a canonical place! */
  
        if (48 <= keycode && keycode <= 57)
          return keycode; // numeric  TODO handle shift?
        if (65 <= keycode && keycode <= 90)
          return event['shiftKey'] ? keycode : keycode + 32;
        if (96 <= keycode && keycode <= 105)
          return keycode - 48; // numpad numbers    
        if (106 <= keycode && keycode <= 111)
          return keycode - 106 + 42; // *,+-./  TODO handle shift?
  
        switch (keycode) {
          case 9:  // tab key
          case 13: // return key
          case 27: // escape
          case 32: // space
          case 61: // equal
            return keycode;
        }
  
        var s = event['shiftKey'];
        switch (keycode) {
          case 186: return s ? 58 : 59; // colon / semi-colon
          case 187: return s ? 43 : 61; // add / equal (these two may be wrong)
          case 188: return s ? 60 : 44; // less-than / comma
          case 189: return s ? 95 : 45; // dash
          case 190: return s ? 62 : 46; // greater-than / period
          case 191: return s ? 63 : 47; // forward slash
          case 219: return s ? 123 : 91; // open bracket
          case 220: return s ? 124 : 47; // back slash
          case 221: return s ? 125 : 93; // close braket
          case 222: return s ? 34 : 39; // single quote
        }
  
        return null;
      },onKeydown:function (event) {
        if (GLUT.specialFunc || GLUT.keyboardFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if( GLUT.specialFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.specialFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.keyboardFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
        }
      },onKeyup:function (event) {
        if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if(GLUT.specialUpFunc) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.specialUpFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardUpFunc ) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Runtime.dynCall('viii', GLUT.keyboardUpFunc, [key, Browser.mouseX, Browser.mouseY]);
            }
          }
        }
      },onMouseButtonDown:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons |= (1 << event['button']);
  
        if (event.target == Module["canvas"] && GLUT.mouseFunc) {
          try {
            event.target.setCapture();
          } catch (e) {}
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [event['button'], 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY]);
        }
      },onMouseButtonUp:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons &= ~(1 << event['button']);
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [event['button'], 1/*GLUT_UP*/, Browser.mouseX, Browser.mouseY]);
        }
      },onMouseWheel:function (event) {
        Browser.calculateMouseEvent(event);
  
        // cross-browser wheel delta
        var e = window.event || event; // old IE support
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
        var button = 3; // wheel up
        if (delta < 0) {
          button = 4; // wheel down
        }
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Runtime.dynCall('viiii', GLUT.mouseFunc, [button, 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY]);
        }
      },onFullScreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        } else {
          width = GLUT.windowWidth;
          height = GLUT.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLUT.onFullScreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLUT.onFullScreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLUT.onFullScreenEventChange, true);
        }
        Browser.setCanvasSize(width, height);
        /* Can't call _glutReshapeWindow as that requests cancelling fullscreen. */
        if (GLUT.reshapeFunc) {
          // console.log("GLUT.reshapeFunc (from FS): " + width + ", " + height);
          Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
        }
        _glutPostRedisplay();
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
                  (function() {});
        CFS.apply(document, []);
      }};function _glutSwapBuffers() {}

  
  
  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,numTempVertexBuffersPerSize:64,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for(var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads, context) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        context.tempVertexBufferCounters1 = [];
        context.tempVertexBufferCounters2 = [];
        context.tempVertexBufferCounters1.length = context.tempVertexBufferCounters2.length = largestIndex+1;
        context.tempVertexBuffers1 = [];
        context.tempVertexBuffers2 = [];
        context.tempVertexBuffers1.length = context.tempVertexBuffers2.length = largestIndex+1;
        context.tempIndexBuffers = [];
        context.tempIndexBuffers.length = largestIndex+1;
        for(var i = 0; i <= largestIndex; ++i) {
          context.tempIndexBuffers[i] = null; // Created on-demand
          context.tempVertexBufferCounters1[i] = context.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          context.tempVertexBuffers1[i] = [];
          context.tempVertexBuffers2[i] = [];
          var ringbuffer1 = context.tempVertexBuffers1[i];
          var ringbuffer2 = context.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for(var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          context.tempQuadIndexBuffer = GLctx.createBuffer();
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, context.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          context.GLctx.bufferData(context.GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, context.GLctx.STATIC_DRAW);
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.currentContext.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.currentContext.tempVertexBufferCounters1[idx];
        GL.currentContext.tempVertexBufferCounters1[idx] = (GL.currentContext.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.currentContext.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.currentContext.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.currentContext.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.currentContext.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        if (!GL.currentContext) {
          return;
        }
        var vb = GL.currentContext.tempVertexBuffers1;
        GL.currentContext.tempVertexBuffers1 = GL.currentContext.tempVertexBuffers2;
        GL.currentContext.tempVertexBuffers2 = vb;
        vb = GL.currentContext.tempVertexBufferCounters1;
        GL.currentContext.tempVertexBufferCounters1 = GL.currentContext.tempVertexBufferCounters2;
        GL.currentContext.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for(var i = 0; i <= largestIndex; ++i) {
          GL.currentContext.tempVertexBufferCounters1[i] = 0;
        }
      },findToken:function (source, token) {
        function isIdentChar(ch) {
          if (ch >= 48 && ch <= 57) // 0-9
            return true;
          if (ch >= 65 && ch <= 90) // A-Z
            return true;
          if (ch >= 97 && ch <= 122) // a-z
            return true;
          return false;
        }
        var i = -1;
        do {
          i = source.indexOf(token, i + 1);
          if (i < 0) {
            break;
          }
          if (i > 0 && isIdentChar(source[i - 1])) {
            continue;
          }
          i += token.length;
          if (i < source.length - 1 && isIdentChar(source[i + 1])) {
            continue;
          }
          return true;
        } while (true);
        return false;
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        // Let's see if we need to enable the standard derivatives extension
        type = GLctx.getShaderParameter(GL.shaders[shader], 0x8B4F /* GL_SHADER_TYPE */);
        if (type == 0x8B30 /* GL_FRAGMENT_SHADER */) {
          if (GL.findToken(source, "dFdx") ||
              GL.findToken(source, "dFdy") ||
              GL.findToken(source, "fwidth")) {
            source = "#extension GL_OES_standard_derivatives : enable\n" + source;
            var extension = GLctx.getExtension("OES_standard_derivatives");
          }
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc');
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic');
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};
  
  
  function _glEnable(x0) { GLctx.enable(x0) }
  
  function _glDisable(x0) { GLctx.disable(x0) }
  
  function _glIsEnabled(x0) { return GLctx.isEnabled(x0) }
  
  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats.length;
          break;
        case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
          ret = 0x1401; // GL_UNSIGNED_BYTE
          break;
        case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
          ret = 0x1908; // GL_RGBA
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else if (result instanceof WebGLBuffer ||
                       result instanceof WebGLProgram ||
                       result instanceof WebGLFramebuffer ||
                       result instanceof WebGLRenderbuffer ||
                       result instanceof WebGLTexture) {
              ret = result.name | 0;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }
  
  function _glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }
  
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // Map WebGL GL_SHADING_LANGUAGE_VERSION string format to GLES format.
          if (glslVersion.indexOf('WebGL GLSL ES 1.0') != -1) glslVersion = 'OpenGL ES GLSL ES 1.00 (WebGL)';
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }
  
  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }
  
  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }
  
  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }
  
  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }
  
  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }
  
  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }
  
  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }
  
  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
      if (target == GLctx.ARRAY_BUFFER) {
        GL.currArrayBuffer = buffer;
        GLImmediate.lastArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, bufferObj);
    }
  
  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }
  
  function _glHint(x0, x1) { GLctx.hint(x0, x1) }
  
  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }
  
  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }
  
  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }
  
  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }var GLEmulation={fogStart:0,fogEnd:1,fogDensity:1,fogColor:null,fogMode:2048,fogEnabled:false,vaos:[],currentVao:null,enabledVertexAttribArrays:{},hasRunInit:false,init:function () {
        // Do not activate immediate/emulation code (e.g. replace glDrawElements) when in FULL_ES2 mode.
        // We do not need full emulation, we instead emulate client-side arrays etc. in FULL_ES2 code in
        // a straightforward manner, and avoid not having a bound buffer be ambiguous between es2 emulation
        // code and legacy gl emulation code.
  
        if (GLEmulation.hasRunInit) {
          return;
        }
        GLEmulation.hasRunInit = true;
  
        GLEmulation.fogColor = new Float32Array(4);
  
        // Add some emulation workarounds
        Module.printErr('WARNING: using emscripten GL emulation. This is a collection of limited workarounds, do not expect it to work.');
        Module.printErr('WARNING: using emscripten GL emulation unsafe opts. If weirdness happens, try -s GL_UNSAFE_OPTS=0');
  
        // XXX some of the capabilities we don't support may lead to incorrect rendering, if we do not emulate them in shaders
        var validCapabilities = {
          0x0B44: 1, // GL_CULL_FACE
          0x0BE2: 1, // GL_BLEND
          0x0BD0: 1, // GL_DITHER,
          0x0B90: 1, // GL_STENCIL_TEST
          0x0B71: 1, // GL_DEPTH_TEST
          0x0C11: 1, // GL_SCISSOR_TEST
          0x8037: 1, // GL_POLYGON_OFFSET_FILL
          0x809E: 1, // GL_SAMPLE_ALPHA_TO_COVERAGE
          0x80A0: 1  // GL_SAMPLE_COVERAGE
        };
  
  
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          // Clean up the renderer on any change to the rendering state. The optimization of
          // skipping renderer setup is aimed at the case of multiple glDraw* right after each other
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != true) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = true;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glEnableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glEnableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glEnable(cap);
        };
        
  
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != false) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = false;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glDisableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glDisableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glDisable(cap);
        };
        
  
        _glIsEnabled = _emscripten_glIsEnabled = function _glIsEnabled(cap) {
          if (cap == 0x0B60 /* GL_FOG */) {
            return GLEmulation.fogEnabled ? 1 : 0;
          } else if (!(cap in validCapabilities)) {
            return 0;
          }
          return GLctx.isEnabled(cap);
        };
        
  
        var glGetBooleanv = _glGetBooleanv;
        _glGetBooleanv = _emscripten_glGetBooleanv = function _glGetBooleanv(pname, p) {
          var attrib = GLEmulation.getAttributeFromCapability(pname);
          if (attrib !== null) {
            var result = GLImmediate.enabledClientAttributes[attrib];
            HEAP8[((p)>>0)]=result === true ? 1 : 0;
            return;
          }
          glGetBooleanv(pname, p);
        };
        
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x84E2: pname = GLctx.MAX_TEXTURE_IMAGE_UNITS /* fake it */; break; // GL_MAX_TEXTURE_UNITS
            case 0x8B4A: { // GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VERTEX_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B49: { // GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_FRAGMENT_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B4B: { // GL_MAX_VARYING_FLOATS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VARYING_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8871: pname = GLctx.MAX_COMBINED_TEXTURE_IMAGE_UNITS /* close enough */; break; // GL_MAX_TEXTURE_COORDS
            case 0x807A: { // GL_VERTEX_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x807B: { // GL_VERTEX_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x807C: { // GL_VERTEX_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8081: { // GL_COLOR_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8082: { // GL_COLOR_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x8083: { // GL_COLOR_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8088: { // GL_TEXTURE_COORD_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8089: { // GL_TEXTURE_COORD_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x808A: { // GL_TEXTURE_COORD_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
          }
          glGetIntegerv(pname, params);
        };
        
  
        var glGetString = _glGetString;
        _glGetString = _emscripten_glGetString = function _glGetString(name_) {
          if (GL.stringCache[name_]) return GL.stringCache[name_];
          switch(name_) {
            case 0x1F03 /* GL_EXTENSIONS */: // Add various extensions that we can support
              var ret = allocate(intArrayFromString(GLctx.getSupportedExtensions().join(' ') +
                     ' GL_EXT_texture_env_combine GL_ARB_texture_env_crossbar GL_ATI_texture_env_combine3 GL_NV_texture_env_combine4 GL_EXT_texture_env_dot3 GL_ARB_multitexture GL_ARB_vertex_buffer_object GL_EXT_framebuffer_object GL_ARB_vertex_program GL_ARB_fragment_program GL_ARB_shading_language_100 GL_ARB_shader_objects GL_ARB_vertex_shader GL_ARB_fragment_shader GL_ARB_texture_cube_map GL_EXT_draw_range_elements' +
                     (GL.currentContext.compressionExt ? ' GL_ARB_texture_compression GL_EXT_texture_compression_s3tc' : '') +
                     (GL.currentContext.anisotropicExt ? ' GL_EXT_texture_filter_anisotropic' : '')
              ), 'i8', ALLOC_NORMAL);
              GL.stringCache[name_] = ret;
              return ret;
          }
          return glGetString(name_);
        };
        
  
        // Do some automatic rewriting to work around GLSL differences. Note that this must be done in
        // tandem with the rest of the program, by itself it cannot suffice.
        // Note that we need to remember shader types for this rewriting, saving sources makes it easier to debug.
        GL.shaderInfos = {};
        var glCreateShader = _glCreateShader;
        _glCreateShader = _emscripten_glCreateShader = function _glCreateShader(shaderType) {
          var id = glCreateShader(shaderType);
          GL.shaderInfos[id] = {
            type: shaderType,
            ftransform: false
          };
          return id;
        };
        
  
        function ensurePrecision(source) {
          if (!/precision +(low|medium|high)p +float *;/.test(source)) {
            source = 'precision mediump float;\n' + source;
          }
          return source;
        }
  
        var glShaderSource = _glShaderSource;
        _glShaderSource = _emscripten_glShaderSource = function _glShaderSource(shader, count, string, length) {
          var source = GL.getSource(shader, count, string, length);
          // XXX We add attributes and uniforms to shaders. The program can ask for the # of them, and see the
          // ones we generated, potentially confusing it? Perhaps we should hide them.
          if (GL.shaderInfos[shader].type == GLctx.VERTEX_SHADER) {
            // Replace ftransform() with explicit project/modelview transforms, and add position and matrix info.
            var has_pm = source.search(/u_projection/) >= 0;
            var has_mm = source.search(/u_modelView/) >= 0;
            var has_pv = source.search(/a_position/) >= 0;
            var need_pm = 0, need_mm = 0, need_pv = 0;
            var old = source;
            source = source.replace(/ftransform\(\)/g, '(u_projection * u_modelView * a_position)');
            if (old != source) need_pm = need_mm = need_pv = 1;
            old = source;
            source = source.replace(/gl_ProjectionMatrix/g, 'u_projection');
            if (old != source) need_pm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrixTranspose\[2\]/g, 'vec4(u_modelView[0][2], u_modelView[1][2], u_modelView[2][2], u_modelView[3][2])'); // XXX extremely inefficient
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrix/g, 'u_modelView');
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_Vertex/g, 'a_position');
            if (old != source) need_pv = 1;
            old = source;
            source = source.replace(/gl_ModelViewProjectionMatrix/g, '(u_projection * u_modelView)');
            if (old != source) need_pm = need_mm = 1;
            if (need_pv && !has_pv) source = 'attribute vec4 a_position; \n' + source;
            if (need_mm && !has_mm) source = 'uniform mat4 u_modelView; \n' + source;
            if (need_pm && !has_pm) source = 'uniform mat4 u_projection; \n' + source;
            GL.shaderInfos[shader].ftransform = need_pm || need_mm || need_pv; // we will need to provide the fixed function stuff as attributes and uniforms
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              // XXX To handle both regular texture mapping and cube mapping, we use vec4 for tex coordinates.
              var old = source;
              var need_vtc = source.search('v_texCoord' + i) == -1;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i)
                             .replace(new RegExp('gl_MultiTexCoord' + i, 'g'), 'a_texCoord' + i);
              if (source != old) {
                source = 'attribute vec4 a_texCoord' + i + '; \n' + source;
                if (need_vtc) {
                  source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
                }
              }
  
              old = source;
              source = source.replace(new RegExp('gl_TextureMatrix\\[' + i + '\\]', 'g'), 'u_textureMatrix' + i);
              if (source != old) {
                source = 'uniform mat4 u_textureMatrix' + i + '; \n' + source;
              }
            }
            if (source.indexOf('gl_FrontColor') >= 0) {
              source = 'varying vec4 v_color; \n' +
                       source.replace(/gl_FrontColor/g, 'v_color');
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'attribute vec4 a_color; \n' +
                       source.replace(/gl_Color/g, 'a_color');
            }
            if (source.indexOf('gl_Normal') >= 0) {
              source = 'attribute vec3 a_normal; \n' +
                       source.replace(/gl_Normal/g, 'a_normal');
            }
            // fog
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          } else { // Fragment shader
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              var old = source;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i);
              if (source != old) {
                source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
              }
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'varying vec4 v_color; \n' + source.replace(/gl_Color/g, 'v_color');
            }
            if (source.indexOf('gl_Fog.color') >= 0) {
              source = 'uniform vec4 u_fogColor;   \n' +
                       source.replace(/gl_Fog.color/g, 'u_fogColor');
            }
            if (source.indexOf('gl_Fog.end') >= 0) {
              source = 'uniform float u_fogEnd;   \n' +
                       source.replace(/gl_Fog.end/g, 'u_fogEnd');
            }
            if (source.indexOf('gl_Fog.scale') >= 0) {
              source = 'uniform float u_fogScale;   \n' +
                       source.replace(/gl_Fog.scale/g, 'u_fogScale');
            }
            if (source.indexOf('gl_Fog.density') >= 0) {
              source = 'uniform float u_fogDensity;   \n' +
                       source.replace(/gl_Fog.density/g, 'u_fogDensity');
            }
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          }
          GLctx.shaderSource(GL.shaders[shader], source);
        };
        
  
        var glCompileShader = _glCompileShader;
        _glCompileShader = _emscripten_glCompileShader = function _glCompileShader(shader) {
          GLctx.compileShader(GL.shaders[shader]);
        };
        
  
        GL.programShaders = {};
        var glAttachShader = _glAttachShader;
        _glAttachShader = _emscripten_glAttachShader = function _glAttachShader(program, shader) {
          if (!GL.programShaders[program]) GL.programShaders[program] = [];
          GL.programShaders[program].push(shader);
          glAttachShader(program, shader);
        };
        
  
        var glDetachShader = _glDetachShader;
        _glDetachShader = _emscripten_glDetachShader = function _glDetachShader(program, shader) {
          var programShader = GL.programShaders[program];
          if (!programShader) {
            Module.printErr('WARNING: _glDetachShader received invalid program: ' + program);
            return;
          }
          var index = programShader.indexOf(shader);
          programShader.splice(index, 1);
          glDetachShader(program, shader);
        };
        
  
        var glUseProgram = _glUseProgram;
        _glUseProgram = _emscripten_glUseProgram = function _glUseProgram(program) {
          if (GL.currProgram != program) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = program;
            GLImmediate.fixedFunctionProgram = 0;
            glUseProgram(program);
          }
        }
        
  
        var glDeleteProgram = _glDeleteProgram;
        _glDeleteProgram = _emscripten_glDeleteProgram = function _glDeleteProgram(program) {
          glDeleteProgram(program);
          if (program == GL.currProgram) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = 0;
          }
        };
        
  
        // If attribute 0 was not bound, bind it to 0 for WebGL performance reasons. Track if 0 is free for that.
        var zeroUsedPrograms = {};
        var glBindAttribLocation = _glBindAttribLocation;
        _glBindAttribLocation = _emscripten_glBindAttribLocation = function _glBindAttribLocation(program, index, name) {
          if (index == 0) zeroUsedPrograms[program] = true;
          glBindAttribLocation(program, index, name);
        };
        
  
        var glLinkProgram = _glLinkProgram;
        _glLinkProgram = _emscripten_glLinkProgram = function _glLinkProgram(program) {
          if (!(program in zeroUsedPrograms)) {
            GLctx.bindAttribLocation(GL.programs[program], 0, 'a_position');
          }
          glLinkProgram(program);
        };
        
  
        var glBindBuffer = _glBindBuffer;
        _glBindBuffer = _emscripten_glBindBuffer = function _glBindBuffer(target, buffer) {
          glBindBuffer(target, buffer);
          if (target == GLctx.ARRAY_BUFFER) {
            if (GLEmulation.currentVao) {
              assert(GLEmulation.currentVao.arrayBuffer == buffer || GLEmulation.currentVao.arrayBuffer == 0 || buffer == 0, 'TODO: support for multiple array buffers in vao');
              GLEmulation.currentVao.arrayBuffer = buffer;
            }
          } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
            if (GLEmulation.currentVao) GLEmulation.currentVao.elementArrayBuffer = buffer;
          }
        };
        
  
        var glGetFloatv = _glGetFloatv;
        _glGetFloatv = _emscripten_glGetFloatv = function _glGetFloatv(pname, params) {
          if (pname == 0x0BA6) { // GL_MODELVIEW_MATRIX
            HEAPF32.set(GLImmediate.matrix[0/*m*/], params >> 2);
          } else if (pname == 0x0BA7) { // GL_PROJECTION_MATRIX
            HEAPF32.set(GLImmediate.matrix[1/*p*/], params >> 2);
          } else if (pname == 0x0BA8) { // GL_TEXTURE_MATRIX
            HEAPF32.set(GLImmediate.matrix[2/*t*/ + GLImmediate.clientActiveTexture], params >> 2);
          } else if (pname == 0x0B66) { // GL_FOG_COLOR
            HEAPF32.set(GLEmulation.fogColor, params >> 2);
          } else if (pname == 0x0B63) { // GL_FOG_START
            HEAPF32[((params)>>2)]=GLEmulation.fogStart;
          } else if (pname == 0x0B64) { // GL_FOG_END
            HEAPF32[((params)>>2)]=GLEmulation.fogEnd;
          } else if (pname == 0x0B62) { // GL_FOG_DENSITY
            HEAPF32[((params)>>2)]=GLEmulation.fogDensity;
          } else if (pname == 0x0B65) { // GL_FOG_MODE
            HEAPF32[((params)>>2)]=GLEmulation.fogMode;
          } else {
            glGetFloatv(pname, params);
          }
        };
        
  
        var glHint = _glHint;
        _glHint = _emscripten_glHint = function _glHint(target, mode) {
          if (target == 0x84EF) { // GL_TEXTURE_COMPRESSION_HINT
            return;
          }
          glHint(target, mode);
        };
        
  
        var glEnableVertexAttribArray = _glEnableVertexAttribArray;
        _glEnableVertexAttribArray = _emscripten_glEnableVertexAttribArray = function _glEnableVertexAttribArray(index) {
          glEnableVertexAttribArray(index);
          GLEmulation.enabledVertexAttribArrays[index] = 1;
          if (GLEmulation.currentVao) GLEmulation.currentVao.enabledVertexAttribArrays[index] = 1;
        };
        
  
        var glDisableVertexAttribArray = _glDisableVertexAttribArray;
        _glDisableVertexAttribArray = _emscripten_glDisableVertexAttribArray = function _glDisableVertexAttribArray(index) {
          glDisableVertexAttribArray(index);
          delete GLEmulation.enabledVertexAttribArrays[index];
          if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledVertexAttribArrays[index];
        };
        
  
        var glVertexAttribPointer = _glVertexAttribPointer;
        _glVertexAttribPointer = _emscripten_glVertexAttribPointer = function _glVertexAttribPointer(index, size, type, normalized, stride, pointer) {
          glVertexAttribPointer(index, size, type, normalized, stride, pointer);
          if (GLEmulation.currentVao) { // TODO: avoid object creation here? likely not hot though
            GLEmulation.currentVao.vertexAttribPointers[index] = [index, size, type, normalized, stride, pointer];
          }
        };
        
      },getAttributeFromCapability:function (cap) {
        var attrib = null;
        switch (cap) {
          case 0x0de1: // GL_TEXTURE_2D - XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support it
            abort("GL_TEXTURE_2D is not a spec-defined capability for gl{Enable,Disable}ClientState.");
            // Fall through:
          case 0x8078: // GL_TEXTURE_COORD_ARRAY
            attrib = GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture; break;
          case 0x8074: // GL_VERTEX_ARRAY
            attrib = GLImmediate.VERTEX; break;
          case 0x8075: // GL_NORMAL_ARRAY
            attrib = GLImmediate.NORMAL; break;
          case 0x8076: // GL_COLOR_ARRAY
            attrib = GLImmediate.COLOR; break;
        }
        return attrib;
      }};var GLImmediate={MapTreeLib:null,spawnMapTreeLib:function () {
        /* A naive implementation of a map backed by an array, and accessed by
         * naive iteration along the array. (hashmap with only one bucket)
         */
        function CNaiveListMap() {
          var list = [];
  
          this.insert = function CNaiveListMap_insert(key, val) {
            if (this.contains(key|0)) return false;
            list.push([key, val]);
            return true;
          };
  
          var __contains_i;
          this.contains = function CNaiveListMap_contains(key) {
            for (__contains_i = 0; __contains_i < list.length; ++__contains_i) {
              if (list[__contains_i][0] === key) return true;
            }
            return false;
          };
  
          var __get_i;
          this.get = function CNaiveListMap_get(key) {
            for (__get_i = 0; __get_i < list.length; ++__get_i) {
              if (list[__get_i][0] === key) return list[__get_i][1];
            }
            return undefined;
          };
        };
  
        /* A tree of map nodes.
          Uses `KeyView`s to allow descending the tree without garbage.
          Example: {
            // Create our map object.
            var map = new ObjTreeMap();
  
            // Grab the static keyView for the map.
            var keyView = map.GetStaticKeyView();
  
            // Let's make a map for:
            // root: <undefined>
            //   1: <undefined>
            //     2: <undefined>
            //       5: "Three, sir!"
            //       3: "Three!"
  
            // Note how we can chain together `Reset` and `Next` to
            // easily descend based on multiple key fragments.
            keyView.Reset().Next(1).Next(2).Next(5).Set("Three, sir!");
            keyView.Reset().Next(1).Next(2).Next(3).Set("Three!");
          }
        */
        function CMapTree() {
          function CNLNode() {
            var map = new CNaiveListMap();
  
            this.child = function CNLNode_child(keyFrag) {
              if (!map.contains(keyFrag|0)) {
                map.insert(keyFrag|0, new CNLNode());
              }
              return map.get(keyFrag|0);
            };
  
            this.value = undefined;
            this.get = function CNLNode_get() {
              return this.value;
            };
  
            this.set = function CNLNode_set(val) {
              this.value = val;
            };
          }
  
          function CKeyView(root) {
            var cur;
  
            this.reset = function CKeyView_reset() {
              cur = root;
              return this;
            };
            this.reset();
  
            this.next = function CKeyView_next(keyFrag) {
              cur = cur.child(keyFrag);
              return this;
            };
  
            this.get = function CKeyView_get() {
              return cur.get();
            };
  
            this.set = function CKeyView_set(val) {
              cur.set(val);
            };
          };
  
          var root;
          var staticKeyView;
  
          this.createKeyView = function CNLNode_createKeyView() {
            return new CKeyView(root);
          }
  
          this.clear = function CNLNode_clear() {
            root = new CNLNode();
            staticKeyView = this.createKeyView();
          };
          this.clear();
  
          this.getStaticKeyView = function CNLNode_getStaticKeyView() {
            staticKeyView.reset();
            return staticKeyView;
          };
        };
  
        // Exports:
        return {
          create: function() {
            return new CMapTree();
          },
        };
      },TexEnvJIT:null,spawnTexEnvJIT:function () {
        // GL defs:
        var GL_TEXTURE0 = 0x84C0;
        var GL_TEXTURE_1D = 0x0DE0;
        var GL_TEXTURE_2D = 0x0DE1;
        var GL_TEXTURE_3D = 0x806f;
        var GL_TEXTURE_CUBE_MAP = 0x8513;
        var GL_TEXTURE_ENV = 0x2300;
        var GL_TEXTURE_ENV_MODE = 0x2200;
        var GL_TEXTURE_ENV_COLOR = 0x2201;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
  
        var GL_SRC0_RGB = 0x8580;
        var GL_SRC1_RGB = 0x8581;
        var GL_SRC2_RGB = 0x8582;
  
        var GL_SRC0_ALPHA = 0x8588;
        var GL_SRC1_ALPHA = 0x8589;
        var GL_SRC2_ALPHA = 0x858A;
  
        var GL_OPERAND0_RGB = 0x8590;
        var GL_OPERAND1_RGB = 0x8591;
        var GL_OPERAND2_RGB = 0x8592;
  
        var GL_OPERAND0_ALPHA = 0x8598;
        var GL_OPERAND1_ALPHA = 0x8599;
        var GL_OPERAND2_ALPHA = 0x859A;
  
        var GL_COMBINE_RGB = 0x8571;
        var GL_COMBINE_ALPHA = 0x8572;
  
        var GL_RGB_SCALE = 0x8573;
        var GL_ALPHA_SCALE = 0x0D1C;
  
        // env.mode
        var GL_ADD      = 0x0104;
        var GL_BLEND    = 0x0BE2;
        var GL_REPLACE  = 0x1E01;
        var GL_MODULATE = 0x2100;
        var GL_DECAL    = 0x2101;
        var GL_COMBINE  = 0x8570;
  
        // env.color/alphaCombiner
        //var GL_ADD         = 0x0104;
        //var GL_REPLACE     = 0x1E01;
        //var GL_MODULATE    = 0x2100;
        var GL_SUBTRACT    = 0x84E7;
        var GL_INTERPOLATE = 0x8575;
  
        // env.color/alphaSrc
        var GL_TEXTURE       = 0x1702;
        var GL_CONSTANT      = 0x8576;
        var GL_PRIMARY_COLOR = 0x8577;
        var GL_PREVIOUS      = 0x8578;
  
        // env.color/alphaOp
        var GL_SRC_COLOR           = 0x0300;
        var GL_ONE_MINUS_SRC_COLOR = 0x0301;
        var GL_SRC_ALPHA           = 0x0302;
        var GL_ONE_MINUS_SRC_ALPHA = 0x0303;
  
        var GL_RGB  = 0x1907;
        var GL_RGBA = 0x1908;
  
        // Our defs:
        var TEXENVJIT_NAMESPACE_PREFIX = "tej_";
        // Not actually constant, as they can be changed between JIT passes:
        var TEX_UNIT_UNIFORM_PREFIX = "uTexUnit";
        var TEX_COORD_VARYING_PREFIX = "vTexCoord";
        var PRIM_COLOR_VARYING = "vPrimColor";
        var TEX_MATRIX_UNIFORM_PREFIX = "uTexMatrix";
  
        // Static vars:
        var s_texUnits = null; //[];
        var s_activeTexture = 0;
  
        var s_requiredTexUnitsForPass = [];
  
        // Static funcs:
        function abort(info) {
          assert(false, "[TexEnvJIT] ABORT: " + info);
        }
  
        function abort_noSupport(info) {
          abort("No support: " + info);
        }
  
        function abort_sanity(info) {
          abort("Sanity failure: " + info);
        }
  
        function genTexUnitSampleExpr(texUnitID) {
          var texUnit = s_texUnits[texUnitID];
          var texType = texUnit.getTexType();
  
          var func = null;
          switch (texType) {
            case GL_TEXTURE_1D:
              func = "texture2D";
              break;
            case GL_TEXTURE_2D:
              func = "texture2D";
              break;
            case GL_TEXTURE_3D:
              return abort_noSupport("No support for 3D textures.");
            case GL_TEXTURE_CUBE_MAP:
              func = "textureCube";
              break;
            default:
              return abort_sanity("Unknown texType: 0x" + texType.toString(16));
          }
  
          var texCoordExpr = TEX_COORD_VARYING_PREFIX + texUnitID;
          if (TEX_MATRIX_UNIFORM_PREFIX != null) {
            texCoordExpr = "(" + TEX_MATRIX_UNIFORM_PREFIX + texUnitID + " * " + texCoordExpr + ")";
          }
          return func + "(" + TEX_UNIT_UNIFORM_PREFIX + texUnitID + ", " + texCoordExpr + ".xy)";
        }
  
        function getTypeFromCombineOp(op) {
          switch (op) {
            case GL_SRC_COLOR:
            case GL_ONE_MINUS_SRC_COLOR:
              return "vec3";
            case GL_SRC_ALPHA:
            case GL_ONE_MINUS_SRC_ALPHA:
              return "float";
          }
  
          return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
        }
  
        function getCurTexUnit() {
          return s_texUnits[s_activeTexture];
        }
  
        function genCombinerSourceExpr(texUnitID, constantExpr, previousVar,
                                       src, op)
        {
          var srcExpr = null;
          switch (src) {
            case GL_TEXTURE:
              srcExpr = genTexUnitSampleExpr(texUnitID);
              break;
            case GL_CONSTANT:
              srcExpr = constantExpr;
              break;
            case GL_PRIMARY_COLOR:
              srcExpr = PRIM_COLOR_VARYING;
              break;
            case GL_PREVIOUS:
              srcExpr = previousVar;
              break;
            default:
                return abort_noSupport("Unsupported combiner src: 0x" + src.toString(16));
          }
  
          var expr = null;
          switch (op) {
            case GL_SRC_COLOR:
              expr = srcExpr + ".rgb";
              break;
            case GL_ONE_MINUS_SRC_COLOR:
              expr = "(vec3(1.0) - " + srcExpr + ".rgb)";
              break;
            case GL_SRC_ALPHA:
              expr = srcExpr + ".a";
              break;
            case GL_ONE_MINUS_SRC_ALPHA:
              expr = "(1.0 - " + srcExpr + ".a)";
              break;
            default:
              return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
          }
  
          return expr;
        }
  
        function valToFloatLiteral(val) {
          if (val == Math.round(val)) return val + '.0';
          return val;
        }
  
  
        // Classes:
        function CTexEnv() {
          this.mode = GL_MODULATE;
          this.colorCombiner = GL_MODULATE;
          this.alphaCombiner = GL_MODULATE;
          this.colorScale = 1;
          this.alphaScale = 1;
          this.envColor = [0, 0, 0, 0];
  
          this.colorSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.alphaSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.colorOp = [
            GL_SRC_COLOR,
            GL_SRC_COLOR,
            GL_SRC_ALPHA
          ];
          this.alphaOp = [
            GL_SRC_ALPHA,
            GL_SRC_ALPHA,
            GL_SRC_ALPHA
          ];
  
          // Map GLenums to small values to efficiently pack the enums to bits for tighter access.
          this.traverseKey = {
            // mode
            0x1E01 /* GL_REPLACE */: 0,
            0x2100 /* GL_MODULATE */: 1,
            0x0104 /* GL_ADD */: 2,
            0x0BE2 /* GL_BLEND */: 3,
            0x2101 /* GL_DECAL */: 4,
            0x8570 /* GL_COMBINE */: 5,
  
            // additional color and alpha combiners
            0x84E7 /* GL_SUBTRACT */: 3,
            0x8575 /* GL_INTERPOLATE */: 4,
  
            // color and alpha src
            0x1702 /* GL_TEXTURE */: 0,
            0x8576 /* GL_CONSTANT */: 1,
            0x8577 /* GL_PRIMARY_COLOR */: 2,
            0x8578 /* GL_PREVIOUS */: 3,
  
            // color and alpha op
            0x0300 /* GL_SRC_COLOR */: 0,
            0x0301 /* GL_ONE_MINUS_SRC_COLOR */: 1,
            0x0302 /* GL_SRC_ALPHA */: 2,
            0x0300 /* GL_ONE_MINUS_SRC_ALPHA */: 3
          };
  
          // The tuple (key0,key1,key2) uniquely identifies the state of the variables in CTexEnv.
          // -1 on key0 denotes 'the whole cached key is dirty'
          this.key0 = -1;
          this.key1 = 0;
          this.key2 = 0;
  
          this.computeKey0 = function() {
            var k = this.traverseKey;
            var key = k[this.mode] * 1638400; // 6 distinct values.
            key += k[this.colorCombiner] * 327680; // 5 distinct values.
            key += k[this.alphaCombiner] * 65536; // 5 distinct values.
            // The above three fields have 6*5*5=150 distinct values -> 8 bits.
            key += (this.colorScale-1) * 16384; // 10 bits used.
            key += (this.alphaScale-1) * 4096; // 12 bits used.
            key += k[this.colorSrc[0]] * 1024; // 14
            key += k[this.colorSrc[1]] * 256; // 16
            key += k[this.colorSrc[2]] * 64; // 18
            key += k[this.alphaSrc[0]] * 16; // 20
            key += k[this.alphaSrc[1]] * 4; // 22
            key += k[this.alphaSrc[2]]; // 24 bits used total.
            return key;
          }
          this.computeKey1 = function() {
            var k = this.traverseKey;
            key = k[this.colorOp[0]] * 4096;
            key += k[this.colorOp[1]] * 1024;             
            key += k[this.colorOp[2]] * 256;
            key += k[this.alphaOp[0]] * 16;
            key += k[this.alphaOp[1]] * 4;
            key += k[this.alphaOp[2]];
            return key;            
          }
          // TODO: remove this. The color should not be part of the key!
          this.computeKey2 = function() {
            return this.envColor[0] * 16777216 + this.envColor[1] * 65536 + this.envColor[2] * 256 + 1 + this.envColor[3];
          }
          this.recomputeKey = function() {
            this.key0 = this.computeKey0();
            this.key1 = this.computeKey1();
            this.key2 = this.computeKey2();
          }
          this.invalidateKey = function() {
            this.key0 = -1; // The key of this texture unit must be recomputed when rendering the next time.
            GLImmediate.currentRenderer = null; // The currently used renderer must be re-evaluated at next render.
          }
        }
  
        function CTexUnit() {
          this.env = new CTexEnv();
          this.enabled_tex1D   = false;
          this.enabled_tex2D   = false;
          this.enabled_tex3D   = false;
          this.enabled_texCube = false;
          this.texTypesEnabled = 0; // A bitfield combination of the four flags above, used for fast access to operations.
  
          this.traverseState = function CTexUnit_traverseState(keyView) {
            if (this.texTypesEnabled) {
              if (this.env.key0 == -1) {
                this.env.recomputeKey();
              }
              keyView.next(this.texTypesEnabled | (this.env.key0 << 4));
              keyView.next(this.env.key1);
              keyView.next(this.env.key2);
            } else {
              // For correctness, must traverse a zero value, theoretically a subsequent integer key could collide with this value otherwise.
              keyView.next(0);
            }
          };
        };
  
        // Class impls:
        CTexUnit.prototype.enabled = function CTexUnit_enabled() {
          return this.texTypesEnabled;
        }
  
        CTexUnit.prototype.genPassLines = function CTexUnit_genPassLines(passOutputVar, passInputVar, texUnitID) {
          if (!this.enabled()) {
            return ["vec4 " + passOutputVar + " = " + passInputVar + ";"];
          }
          var lines = this.env.genPassLines(passOutputVar, passInputVar, texUnitID).join('\n');
  
          var texLoadLines = '';
          var texLoadRegex = /(texture.*?\(.*?\))/g;
          var loadCounter = 0;
          var load;
  
          // As an optimization, merge duplicate identical texture loads to one var.
          while(load = texLoadRegex.exec(lines)) {
            var texLoadExpr = load[1];
            var secondOccurrence = lines.slice(load.index+1).indexOf(texLoadExpr);
            if (secondOccurrence != -1) { // And also has a second occurrence of same load expression..
              // Create new var to store the common load.
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texLoadVar = prefix + 'texload' + loadCounter++;
              var texLoadLine = 'vec4 ' + texLoadVar + ' = ' + texLoadExpr + ';\n';
              texLoadLines += texLoadLine + '\n'; // Store the generated texture load statements in a temp string to not confuse regex search in progress.
              lines = lines.split(texLoadExpr).join(texLoadVar);
              // Reset regex search, since we modified the string.
              texLoadRegex = /(texture.*\(.*\))/g;
            }
          }
          return [texLoadLines + lines];
        }
  
        CTexUnit.prototype.getTexType = function CTexUnit_getTexType() {
          if (this.enabled_texCube) {
            return GL_TEXTURE_CUBE_MAP;
          } else if (this.enabled_tex3D) {
            return GL_TEXTURE_3D;
          } else if (this.enabled_tex2D) {
            return GL_TEXTURE_2D;
          } else if (this.enabled_tex1D) {
            return GL_TEXTURE_1D;
          }
          return 0;
        }
  
        CTexEnv.prototype.genPassLines = function CTexEnv_genPassLines(passOutputVar, passInputVar, texUnitID) {
          switch (this.mode) {
            case GL_REPLACE: {
              /* RGB:
               * Cv = Cs
               * Av = Ap // Note how this is different, and that we'll
               *            need to track the bound texture internalFormat
               *            to get this right.
               *
               * RGBA:
               * Cv = Cs
               * Av = As
               */
              return [
                "vec4 " + passOutputVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
              ];
            }
            case GL_ADD: {
              /* RGBA:
               * Cv = Cp + Cs
               * Av = ApAs
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                "vec3 " + colorVar + " = " + passInputVar + ".rgb + " + texVar + ".rgb;",
                "float " + alphaVar + " = " + passInputVar + ".a * " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_MODULATE: {
              /* RGBA:
               * Cv = CpCs
               * Av = ApAs
               */
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  passInputVar,
                  " * ",
                  genTexUnitSampleExpr(texUnitID),
                ";",
              ];
              return [line.join("")];
            }
            case GL_DECAL: {
              /* RGBA:
               * Cv = Cp(1 - As) + CsAs
               * Av = Ap
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".a)",
                      " + ",
                    texVar + ".rgb * " + texVar + ".a",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + passInputVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_BLEND: {
              /* RGBA:
               * Cv = Cp(1 - Cs) + CcCs
               * Av = As
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".rgb)",
                      " + ",
                    PRIM_COLOR_VARYING + ".rgb * " + texVar + ".rgb",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_COMBINE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
              var colorLines = this.genCombinerLines(true, colorVar,
                                                     passInputVar, texUnitID,
                                                     this.colorCombiner, this.colorSrc, this.colorOp);
              var alphaLines = this.genCombinerLines(false, alphaVar,
                                                     passInputVar, texUnitID,
                                                     this.alphaCombiner, this.alphaSrc, this.alphaOp);
  
              // Generate scale, but avoid generating an identity op that multiplies by one.
              var scaledColor = (this.colorScale == 1) ? colorVar : (colorVar + " * " + valToFloatLiteral(this.colorScale));
              var scaledAlpha = (this.alphaScale == 1) ? alphaVar : (alphaVar + " * " + valToFloatLiteral(this.alphaScale));
  
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  "vec4(",
                      scaledColor,
                      ", ",
                      scaledAlpha,
                  ")",
                ";",
              ].join("");
              return [].concat(colorLines, alphaLines, [line]);
            }
          }
  
          return abort_noSupport("Unsupported TexEnv mode: 0x" + this.mode.toString(16));
        }
  
        CTexEnv.prototype.genCombinerLines = function CTexEnv_getCombinerLines(isColor, outputVar,
                                                                               passInputVar, texUnitID,
                                                                               combiner, srcArr, opArr)
        {
          var argsNeeded = null;
          switch (combiner) {
            case GL_REPLACE:
              argsNeeded = 1;
              break;
  
            case GL_MODULATE:
            case GL_ADD:
            case GL_SUBTRACT:
              argsNeeded = 2;
              break;
  
            case GL_INTERPOLATE:
              argsNeeded = 3;
              break;
  
            default:
              return abort_noSupport("Unsupported combiner: 0x" + combiner.toString(16));
          }
  
          var constantExpr = [
            "vec4(",
              valToFloatLiteral(this.envColor[0]),
              ", ",
              valToFloatLiteral(this.envColor[1]),
              ", ",
              valToFloatLiteral(this.envColor[2]),
              ", ",
              valToFloatLiteral(this.envColor[3]),
            ")",
          ].join("");
          var src0Expr = (argsNeeded >= 1) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[0], opArr[0])
                                           : null;
          var src1Expr = (argsNeeded >= 2) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[1], opArr[1])
                                           : null;
          var src2Expr = (argsNeeded >= 3) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[2], opArr[2])
                                           : null;
  
          var outputType = isColor ? "vec3" : "float";
          var lines = null;
          switch (combiner) {
            case GL_REPLACE: {
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_MODULATE: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " * " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_ADD: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " + " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_SUBTRACT: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " - " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_INTERPOLATE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var arg2Var = prefix + "colorSrc2";
              var arg2Line = getTypeFromCombineOp(this.colorOp[2]) + " " + arg2Var + " = " + src2Expr + ";";
  
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr + " * " + arg2Var,
                  " + ",
                  src1Expr + " * (1.0 - " + arg2Var + ")",
                ";",
              ];
              lines = [
                arg2Line,
                line.join(""),
              ];
              break;
            }
  
            default:
              return abort_sanity("Unmatched TexEnv.colorCombiner?");
          }
  
          return lines;
        }
  
        return {
          // Exports:
          init: function(gl, specifiedMaxTextureImageUnits) {
            var maxTexUnits = 0;
            if (specifiedMaxTextureImageUnits) {
              maxTexUnits = specifiedMaxTextureImageUnits;
            } else if (gl) {
              maxTexUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            }
            assert(maxTexUnits > 0);
            s_texUnits = [];
            for (var i = 0; i < maxTexUnits; i++) {
              s_texUnits.push(new CTexUnit());
            }
          },
  
          setGLSLVars: function(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix) {
            TEX_UNIT_UNIFORM_PREFIX   = uTexUnitPrefix;
            TEX_COORD_VARYING_PREFIX  = vTexCoordPrefix;
            PRIM_COLOR_VARYING        = vPrimColor;
            TEX_MATRIX_UNIFORM_PREFIX = uTexMatrixPrefix;
          },
  
          genAllPassLines: function(resultDest, indentSize) {
            indentSize = indentSize || 0;
  
            s_requiredTexUnitsForPass.length = 0; // Clear the list.
            var lines = [];
            var lastPassVar = PRIM_COLOR_VARYING;
            for (var i = 0; i < s_texUnits.length; i++) {
              if (!s_texUnits[i].enabled()) continue;
  
              s_requiredTexUnitsForPass.push(i);
  
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + i + "_";
              var passOutputVar = prefix + "result";
  
              var newLines = s_texUnits[i].genPassLines(passOutputVar, lastPassVar, i);
              lines = lines.concat(newLines, [""]);
  
              lastPassVar = passOutputVar;
            }
            lines.push(resultDest + " = " + lastPassVar + ";");
  
            var indent = "";
            for (var i = 0; i < indentSize; i++) indent += " ";
  
            var output = indent + lines.join("\n" + indent);
  
            return output;
          },
  
          getUsedTexUnitList: function() {
            return s_requiredTexUnitsForPass;
          },
  
          traverseState: function(keyView) {
            for (var i = 0; i < s_texUnits.length; i++) {
              s_texUnits[i].traverseState(keyView);
            }
          },
  
          getTexUnitType: function(texUnitID) {
            assert(texUnitID >= 0 &&
                   texUnitID < s_texUnits.length);
            return s_texUnits[texUnitID].getTexType();
          },
  
          // Hooks:
          hook_activeTexture: function(texture) {
            s_activeTexture = texture - GL_TEXTURE0;
          },
  
          hook_enable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (!cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = true;
                  cur.texTypesEnabled |= 1;
                }
                break;
              case GL_TEXTURE_2D:
                if (!cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = true;
                  cur.texTypesEnabled |= 2;
                }
                break;
              case GL_TEXTURE_3D:
                if (!cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = true;
                  cur.texTypesEnabled |= 4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (!cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = true;
                  cur.texTypesEnabled |= 8;
                }
                break;
            }
          },
  
          hook_disable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = false;
                  cur.texTypesEnabled &= ~1;
                }
                break;
              case GL_TEXTURE_2D:
                if (cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = false;
                  cur.texTypesEnabled &= ~2;
                }
                break;
              case GL_TEXTURE_3D:
                if (cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = false;
                  cur.texTypesEnabled &= ~4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = false;
                  cur.texTypesEnabled &= ~8;
                }
                break;
            }
          },
  
          hook_texEnvf: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvf`.');
            }
          },
  
          hook_texEnvi: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                if (env.mode != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.mode = param;
                }
                break;
  
              case GL_COMBINE_RGB:
                if (env.colorCombiner != param) {
                  env.invalidateKey();
                  env.colorCombiner = param;
                }
                break;
              case GL_COMBINE_ALPHA:
                if (env.alphaCombiner != param) {
                  env.invalidateKey();
                  env.alphaCombiner = param;
                }
                break;
  
              case GL_SRC0_RGB:
                if (env.colorSrc[0] != param) {
                  env.invalidateKey();
                  env.colorSrc[0] = param;
                }
                break;
              case GL_SRC1_RGB:
                if (env.colorSrc[1] != param) {
                  env.invalidateKey();
                  env.colorSrc[1] = param;
                }
                break;
              case GL_SRC2_RGB:
                if (env.colorSrc[2] != param) {
                  env.invalidateKey();
                  env.colorSrc[2] = param;
                }
                break;
  
              case GL_SRC0_ALPHA:
                if (env.alphaSrc[0] != param) {
                  env.invalidateKey();
                  env.alphaSrc[0] = param;
                }
                break;
              case GL_SRC1_ALPHA:
                if (env.alphaSrc[1] != param) {
                  env.invalidateKey();
                  env.alphaSrc[1] = param;
                }
                break;
              case GL_SRC2_ALPHA:
                if (env.alphaSrc[2] != param) {
                  env.invalidateKey();
                  env.alphaSrc[2] = param;
                }
                break;
  
              case GL_OPERAND0_RGB:
                if (env.colorOp[0] != param) {
                  env.invalidateKey();
                  env.colorOp[0] = param;
                }
                break;
              case GL_OPERAND1_RGB:
                if (env.colorOp[1] != param) {
                  env.invalidateKey();
                  env.colorOp[1] = param;
                }
                break;
              case GL_OPERAND2_RGB:
                if (env.colorOp[2] != param) {
                  env.invalidateKey();
                  env.colorOp[2] = param;
                }
                break;
  
              case GL_OPERAND0_ALPHA:
                if (env.alphaOp[0] != param) {
                  env.invalidateKey();
                  env.alphaOp[0] = param;
                }
                break;
              case GL_OPERAND1_ALPHA:
                if (env.alphaOp[1] != param) {
                  env.invalidateKey();
                  env.alphaOp[1] = param;
                }
                break;
              case GL_OPERAND2_ALPHA:
                if (env.alphaOp[2] != param) {
                  env.invalidateKey();
                  env.alphaOp[2] = param;
                }
                break;
  
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey();
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvi`.');
            }
          },
  
          hook_texEnvfv: function(target, pname, params) {
            if (target != GL_TEXTURE_ENV) return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR: {
                for (var i = 0; i < 4; i++) {
                  var param = HEAPF32[(((params)+(i*4))>>2)];
                  if (env.envColor[i] != param) {
                    env.invalidateKey(); // We changed FFP emulation renderer state.
                    env.envColor[i] = param;
                  }
                }
                break
              }
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvfv`.');
            }
          },
  
          hook_getTexEnviv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                HEAP32[((param)>>2)]=env.mode;
                return;
  
              case GL_TEXTURE_ENV_COLOR:
                HEAP32[((param)>>2)]=Math.max(Math.min(env.envColor[0]*255, 255, -255));
                HEAP32[(((param)+(1))>>2)]=Math.max(Math.min(env.envColor[1]*255, 255, -255));
                HEAP32[(((param)+(2))>>2)]=Math.max(Math.min(env.envColor[2]*255, 255, -255));
                HEAP32[(((param)+(3))>>2)]=Math.max(Math.min(env.envColor[3]*255, 255, -255));
                return;
  
              case GL_COMBINE_RGB:
                HEAP32[((param)>>2)]=env.colorCombiner;
                return;
  
              case GL_COMBINE_ALPHA:
                HEAP32[((param)>>2)]=env.alphaCombiner;
                return;
  
              case GL_SRC0_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[0];
                return;
  
              case GL_SRC1_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[1];
                return;
  
              case GL_SRC2_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[2];
                return;
  
              case GL_SRC0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[0];
                return;
  
              case GL_SRC1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[1];
                return;
  
              case GL_SRC2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[2];
                return;
  
              case GL_OPERAND0_RGB:
                HEAP32[((param)>>2)]=env.colorOp[0];
                return;
  
              case GL_OPERAND1_RGB:
                HEAP32[((param)>>2)]=env.colorOp[1];
                return;
  
              case GL_OPERAND2_RGB:
                HEAP32[((param)>>2)]=env.colorOp[2];
                return;
  
              case GL_OPERAND0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[0];
                return;
  
              case GL_OPERAND1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[1];
                return;
  
              case GL_OPERAND2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[2];
                return;
  
              case GL_RGB_SCALE:
                HEAP32[((param)>>2)]=env.colorScale;
                return;
  
              case GL_ALPHA_SCALE:
                HEAP32[((param)>>2)]=env.alphaScale;
                return;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glGetTexEnvi`.');
            }
          },
  
          hook_getTexEnvfv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR:
                HEAPF32[((param)>>2)]=env.envColor[0];
                HEAPF32[(((param)+(4))>>2)]=env.envColor[1];
                HEAPF32[(((param)+(8))>>2)]=env.envColor[2];
                HEAPF32[(((param)+(12))>>2)]=env.envColor[3];
                return;
            }
          }
        };
      },vertexData:null,vertexDataU8:null,tempData:null,indexData:null,vertexCounter:0,mode:-1,rendererCache:null,rendererComponents:[],rendererComponentPointer:0,lastRenderer:null,lastArrayBuffer:null,lastProgram:null,lastStride:-1,matrix:[],matrixStack:[],currentMatrix:0,tempMatrix:null,matricesModified:false,useTextureMatrix:false,VERTEX:0,NORMAL:1,COLOR:2,TEXTURE0:3,NUM_ATTRIBUTES:-1,MAX_TEXTURES:-1,totalEnabledClientAttributes:0,enabledClientAttributes:[0,0],clientAttributes:[],liveClientAttributes:[],currentRenderer:null,modifiedClientAttributes:false,clientActiveTexture:0,clientColor:null,usedTexUnitList:[],fixedFunctionProgram:null,setClientAttribute:function setClientAttribute(name, size, type, stride, pointer) {
        var attrib = GLImmediate.clientAttributes[name];
        if (!attrib) {
          for (var i = 0; i <= name; i++) { // keep flat
            if (!GLImmediate.clientAttributes[i]) {
              GLImmediate.clientAttributes[i] = {
                name: name,
                size: size,
                type: type,
                stride: stride,
                pointer: pointer,
                offset: 0
              };
            }
          }
        } else {
          attrib.name = name;
          attrib.size = size;
          attrib.type = type;
          attrib.stride = stride;
          attrib.pointer = pointer;
          attrib.offset = 0;
        }
        GLImmediate.modifiedClientAttributes = true;
      },addRendererComponent:function addRendererComponent(name, size, type) {
        if (!GLImmediate.rendererComponents[name]) {
          GLImmediate.rendererComponents[name] = 1;
          if (GLImmediate.enabledClientAttributes[name]) {
            console.log("Warning: glTexCoord used after EnableClientState for TEXTURE_COORD_ARRAY for TEXTURE0. Disabling TEXTURE_COORD_ARRAY...");
          }
          GLImmediate.enabledClientAttributes[name] = true;
          GLImmediate.setClientAttribute(name, size, type, 0, GLImmediate.rendererComponentPointer);
          GLImmediate.rendererComponentPointer += size * GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        } else {
          GLImmediate.rendererComponents[name]++;
        }
      },disableBeginEndClientAttributes:function disableBeginEndClientAttributes() {
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          if (GLImmediate.rendererComponents[i]) GLImmediate.enabledClientAttributes[i] = false;
        }
      },getRenderer:function getRenderer() {
        // If no FFP state has changed that would have forced to re-evaluate which FFP emulation shader to use,
        // we have the currently used renderer in cache, and can immediately return that.
        if (GLImmediate.currentRenderer) {
          return GLImmediate.currentRenderer;
        }
        // return a renderer object given the liveClientAttributes
        // we maintain a cache of renderers, optimized to not generate garbage
        var attributes = GLImmediate.liveClientAttributes;
        var cacheMap = GLImmediate.rendererCache;
        var keyView = cacheMap.getStaticKeyView().reset();
  
        // By attrib state:
        var enabledAttributesKey = 0;
        for (var i = 0; i < attributes.length; i++) {
          enabledAttributesKey |= 1 << attributes[i].name;
        }
  
        // By fog state:
        var fogParam = 0;
        if (GLEmulation.fogEnabled) {
          switch (GLEmulation.fogMode) {
            case 0x0801: // GL_EXP2
              fogParam = 1;
              break;
            case 0x2601: // GL_LINEAR
              fogParam = 2;
              break;
            default: // default to GL_EXP
              fogParam = 3;
              break;
          }
        }
        keyView.next((enabledAttributesKey << 2) | fogParam);
  
        // By cur program:
        keyView.next(GL.currProgram);
        if (!GL.currProgram) {
          GLImmediate.TexEnvJIT.traverseState(keyView);
        }
  
        // If we don't already have it, create it.
        var renderer = keyView.get();
        if (!renderer) {
          renderer = GLImmediate.createRenderer();
          GLImmediate.currentRenderer = renderer;
          keyView.set(renderer);
          return renderer;
        }
        GLImmediate.currentRenderer = renderer; // Cache the currently used renderer, so later lookups without state changes can get this fast.
        return renderer;
      },createRenderer:function createRenderer(renderer) {
        var useCurrProgram = !!GL.currProgram;
        var hasTextures = false;
        for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
          var texAttribName = GLImmediate.TEXTURE0 + i;
          if (!GLImmediate.enabledClientAttributes[texAttribName])
            continue;
  
          if (!useCurrProgram) {
            if (GLImmediate.TexEnvJIT.getTexUnitType(i) == 0) {
               Runtime.warnOnce("GL_TEXTURE" + i + " coords are supplied, but that texture unit is disabled in the fixed-function pipeline.");
            }
          }
  
          hasTextures = true;
        }
  
        var ret = {
          init: function init() {
            // For fixed-function shader generation.
            var uTexUnitPrefix = 'u_texUnit';
            var aTexCoordPrefix = 'a_texCoord';
            var vTexCoordPrefix = 'v_texCoord';
            var vPrimColor = 'v_color';
            var uTexMatrixPrefix = GLImmediate.useTextureMatrix ? 'u_textureMatrix' : null;
  
            if (useCurrProgram) {
              if (GL.shaderInfos[GL.programShaders[GL.currProgram][0]].type == GLctx.VERTEX_SHADER) {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
              } else {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
              }
              this.program = GL.programs[GL.currProgram];
              this.usedTexUnitList = [];
            } else {
              // IMPORTANT NOTE: If you parameterize the shader source based on any runtime values
              // in order to create the least expensive shader possible based on the features being
              // used, you should also update the code in the beginning of getRenderer to make sure
              // that you cache the renderer based on the said parameters.
              if (GLEmulation.fogEnabled) {
                switch (GLEmulation.fogMode) {
                  case 0x0801: // GL_EXP2
                    // fog = exp(-(gl_Fog.density * gl_FogFragCoord)^2)
                    var fogFormula = '  float fog = exp(-u_fogDensity * u_fogDensity * ecDistance * ecDistance); \n';
                    break;
                  case 0x2601: // GL_LINEAR
                    // fog = (gl_Fog.end - gl_FogFragCoord) * gl_fog.scale
                    var fogFormula = '  float fog = (u_fogEnd - ecDistance) * u_fogScale; \n';
                    break;
                  default: // default to GL_EXP
                    // fog = exp(-gl_Fog.density * gl_FogFragCoord)
                    var fogFormula = '  float fog = exp(-u_fogDensity * ecDistance); \n';
                    break;
                }
              }
  
              GLImmediate.TexEnvJIT.setGLSLVars(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix);
              var fsTexEnvPass = GLImmediate.TexEnvJIT.genAllPassLines('gl_FragColor', 2);
  
              var texUnitAttribList = '';
              var texUnitVaryingList = '';
              var texUnitUniformList = '';
              var vsTexCoordInits = '';
              this.usedTexUnitList = GLImmediate.TexEnvJIT.getUsedTexUnitList();
              for (var i = 0; i < this.usedTexUnitList.length; i++) {
                var texUnit = this.usedTexUnitList[i];
                texUnitAttribList += 'attribute vec4 ' + aTexCoordPrefix + texUnit + ';\n';
                texUnitVaryingList += 'varying vec4 ' + vTexCoordPrefix + texUnit + ';\n';
                texUnitUniformList += 'uniform sampler2D ' + uTexUnitPrefix + texUnit + ';\n';
                vsTexCoordInits += '  ' + vTexCoordPrefix + texUnit + ' = ' + aTexCoordPrefix + texUnit + ';\n';
  
                if (GLImmediate.useTextureMatrix) {
                  texUnitUniformList += 'uniform mat4 ' + uTexMatrixPrefix + texUnit + ';\n';
                }
              }
  
              var vsFogVaryingInit = null;
              if (GLEmulation.fogEnabled) {
                vsFogVaryingInit = '  v_fogFragCoord = abs(ecPosition.z);\n';
              }
  
              var vsSource = [
                'attribute vec4 a_position;',
                'attribute vec4 a_color;',
                'varying vec4 v_color;',
                texUnitAttribList,
                texUnitVaryingList,
                (GLEmulation.fogEnabled ? 'varying float v_fogFragCoord;' : null),
                'uniform mat4 u_modelView;',
                'uniform mat4 u_projection;',
                'void main()',
                '{',
                '  vec4 ecPosition = u_modelView * a_position;', // eye-coordinate position
                '  gl_Position = u_projection * ecPosition;',
                '  v_color = a_color;',
                vsTexCoordInits,
                vsFogVaryingInit,
                '}',
                ''
              ].join('\n').replace(/\n\n+/g, '\n');
  
              this.vertexShader = GLctx.createShader(GLctx.VERTEX_SHADER);
              GLctx.shaderSource(this.vertexShader, vsSource);
              GLctx.compileShader(this.vertexShader);
  
              var fogHeaderIfNeeded = null;
              if (GLEmulation.fogEnabled) {
                fogHeaderIfNeeded = [
                  '',
                  'varying float v_fogFragCoord; ',
                  'uniform vec4 u_fogColor;      ',
                  'uniform float u_fogEnd;       ',
                  'uniform float u_fogScale;     ',
                  'uniform float u_fogDensity;   ',
                  'float ffog(in float ecDistance) { ',
                  fogFormula,
                  '  fog = clamp(fog, 0.0, 1.0); ',
                  '  return fog;                 ',
                  '}',
                  '',
                ].join("\n");
              }
  
              var fogPass = null;
              if (GLEmulation.fogEnabled) {
                fogPass = 'gl_FragColor = vec4(mix(u_fogColor.rgb, gl_FragColor.rgb, ffog(v_fogFragCoord)), gl_FragColor.a);\n';
              }
  
              var fsSource = [
                'precision mediump float;',
                texUnitVaryingList,
                texUnitUniformList,
                'varying vec4 v_color;',
                fogHeaderIfNeeded,
                'void main()',
                '{',
                fsTexEnvPass,
                fogPass,
                '}',
                ''
              ].join("\n").replace(/\n\n+/g, '\n');
  
              this.fragmentShader = GLctx.createShader(GLctx.FRAGMENT_SHADER);
              GLctx.shaderSource(this.fragmentShader, fsSource);
              GLctx.compileShader(this.fragmentShader);
  
              this.program = GLctx.createProgram();
              GLctx.attachShader(this.program, this.vertexShader);
              GLctx.attachShader(this.program, this.fragmentShader);
  
              // As optimization, bind all attributes to prespecified locations, so that the FFP emulation
              // code can submit attributes to any generated FFP shader without having to examine each shader in turn.
              // These prespecified locations are only assumed if GL_FFP_ONLY is specified, since user could also create their
              // own shaders that didn't have attributes in the same locations.
              GLctx.bindAttribLocation(this.program, GLImmediate.VERTEX, 'a_position');
              GLctx.bindAttribLocation(this.program, GLImmediate.COLOR, 'a_color');
              GLctx.bindAttribLocation(this.program, GLImmediate.NORMAL, 'a_normal');
              var maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
              for (var i = 0; i < GLImmediate.MAX_TEXTURES && GLImmediate.TEXTURE0 + i < maxVertexAttribs; i++) {
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, 'a_texCoord'+i);
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, aTexCoordPrefix+i);
              }
              GLctx.linkProgram(this.program);
            }
  
            // Stores an array that remembers which matrix uniforms are up-to-date in this FFP renderer, so they don't need to be resubmitted
            // each time we render with this program.
            this.textureMatrixVersion = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
  
            this.positionLocation = GLctx.getAttribLocation(this.program, 'a_position');
  
            this.texCoordLocations = [];
  
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              if (!GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0 + i]) {
                this.texCoordLocations[i] = -1;
                continue;
              }
  
              if (useCurrProgram) {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, 'a_texCoord' + i);
              } else {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, aTexCoordPrefix + i);
              }
            }
            this.colorLocation = GLctx.getAttribLocation(this.program, 'a_color');
            if (!useCurrProgram) {
              // Temporarily switch to the program so we can set our sampler uniforms early.
              var prevBoundProg = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              GLctx.useProgram(this.program);
              {
                for (var i = 0; i < this.usedTexUnitList.length; i++) {
                  var texUnitID = this.usedTexUnitList[i];
                  var texSamplerLoc = GLctx.getUniformLocation(this.program, uTexUnitPrefix + texUnitID);
                  GLctx.uniform1i(texSamplerLoc, texUnitID);
                }
              }
              // The default color attribute value is not the same as the default for all other attribute streams (0,0,0,1) but (1,1,1,1),
              // so explicitly set it right at start.
              GLctx.vertexAttrib4fv(this.colorLocation, [1,1,1,1]);
              GLctx.useProgram(prevBoundProg);
            }
  
            this.textureMatrixLocations = [];
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              this.textureMatrixLocations[i] = GLctx.getUniformLocation(this.program, 'u_textureMatrix' + i);
            }
            this.normalLocation = GLctx.getAttribLocation(this.program, 'a_normal');
  
            this.modelViewLocation = GLctx.getUniformLocation(this.program, 'u_modelView');
            this.projectionLocation = GLctx.getUniformLocation(this.program, 'u_projection');
  
            this.hasTextures = hasTextures;
            this.hasNormal = GLImmediate.enabledClientAttributes[GLImmediate.NORMAL] &&
                             GLImmediate.clientAttributes[GLImmediate.NORMAL].size > 0 &&
                             this.normalLocation >= 0;
            this.hasColor = (this.colorLocation === 0) || this.colorLocation > 0;
  
            this.floatType = GLctx.FLOAT; // minor optimization
  
            this.fogColorLocation = GLctx.getUniformLocation(this.program, 'u_fogColor');
            this.fogEndLocation = GLctx.getUniformLocation(this.program, 'u_fogEnd');
            this.fogScaleLocation = GLctx.getUniformLocation(this.program, 'u_fogScale');
            this.fogDensityLocation = GLctx.getUniformLocation(this.program, 'u_fogDensity');
            this.hasFog = !!(this.fogColorLocation || this.fogEndLocation ||
                             this.fogScaleLocation || this.fogDensityLocation);
          },
  
          prepare: function prepare() {
            // Calculate the array buffer
            var arrayBuffer;
            if (!GL.currArrayBuffer) {
              var start = GLImmediate.firstVertex*GLImmediate.stride;
              var end = GLImmediate.lastVertex*GLImmediate.stride;
              assert(end <= GL.MAX_TEMP_BUFFER_SIZE, 'too much vertex data');
              arrayBuffer = GL.getTempVertexBuffer(end);
              // TODO: consider using the last buffer we bound, if it was larger. downside is larger buffer, but we might avoid rebinding and preparing
            } else {
              arrayBuffer = GL.currArrayBuffer;
            }
  
            // If the array buffer is unchanged and the renderer as well, then we can avoid all the work here
            // XXX We use some heuristics here, and this may not work in all cases. Try disabling GL_UNSAFE_OPTS if you
            // have odd glitches
            var lastRenderer = GLImmediate.lastRenderer;
            var canSkip = this == lastRenderer &&
                          arrayBuffer == GLImmediate.lastArrayBuffer &&
                          (GL.currProgram || this.program) == GLImmediate.lastProgram &&
                          GLImmediate.stride == GLImmediate.lastStride &&
                          !GLImmediate.matricesModified;
            if (!canSkip && lastRenderer) lastRenderer.cleanup();
            if (!GL.currArrayBuffer) {
              // Bind the array buffer and upload data after cleaning up the previous renderer
  
              if (arrayBuffer != GLImmediate.lastArrayBuffer) {
                GLctx.bindBuffer(GLctx.ARRAY_BUFFER, arrayBuffer);
                GLImmediate.lastArrayBuffer = arrayBuffer;
              }
  
              GLctx.bufferSubData(GLctx.ARRAY_BUFFER, start, GLImmediate.vertexData.subarray(start >> 2, end >> 2));
            }
            if (canSkip) return;
            GLImmediate.lastRenderer = this;
            GLImmediate.lastProgram = GL.currProgram || this.program;
            GLImmediate.lastStride == GLImmediate.stride;
            GLImmediate.matricesModified = false;
  
            if (!GL.currProgram) {
              if (GLImmediate.fixedFunctionProgram != this.program) {
                GLctx.useProgram(this.program);
                GLImmediate.fixedFunctionProgram = this.program;
              }
            }
  
            if (this.modelViewLocation && this.modelViewMatrixVersion != GLImmediate.matrixVersion[0/*m*/]) {
              this.modelViewMatrixVersion = GLImmediate.matrixVersion[0/*m*/];
              GLctx.uniformMatrix4fv(this.modelViewLocation, false, GLImmediate.matrix[0/*m*/]);
            }
            if (this.projectionLocation && this.projectionMatrixVersion != GLImmediate.matrixVersion[1/*p*/]) {
              this.projectionMatrixVersion = GLImmediate.matrixVersion[1/*p*/];
              GLctx.uniformMatrix4fv(this.projectionLocation, false, GLImmediate.matrix[1/*p*/]);
            }
  
            var clientAttributes = GLImmediate.clientAttributes;
            var posAttr = clientAttributes[GLImmediate.VERTEX];
  
  
            GLctx.vertexAttribPointer(this.positionLocation, posAttr.size, posAttr.type, false, GLImmediate.stride, posAttr.offset);
            GLctx.enableVertexAttribArray(this.positionLocation);
            if (this.hasNormal) {
              var normalAttr = clientAttributes[GLImmediate.NORMAL];
              GLctx.vertexAttribPointer(this.normalLocation, normalAttr.size, normalAttr.type, true, GLImmediate.stride, normalAttr.offset);
              GLctx.enableVertexAttribArray(this.normalLocation);
            }
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                var attribLoc = this.texCoordLocations[i];
                if (attribLoc === undefined || attribLoc < 0) continue;
                var texAttr = clientAttributes[GLImmediate.TEXTURE0+i];
  
                if (texAttr.size) {
                  GLctx.vertexAttribPointer(attribLoc, texAttr.size, texAttr.type, false, GLImmediate.stride, texAttr.offset);
                  GLctx.enableVertexAttribArray(attribLoc);
                } else {
                  // These two might be dangerous, but let's try them.
                  GLctx.vertexAttrib4f(attribLoc, 0, 0, 0, 1);
                  GLctx.disableVertexAttribArray(attribLoc);
                }
                var t = 2/*t*/+i;
                if (this.textureMatrixLocations[i] && this.textureMatrixVersion[t] != GLImmediate.matrixVersion[t]) { // XXX might we need this even without the condition we are currently in?
                  this.textureMatrixVersion[t] = GLImmediate.matrixVersion[t];
                  GLctx.uniformMatrix4fv(this.textureMatrixLocations[i], false, GLImmediate.matrix[t]);
                }
              }
            }
            if (GLImmediate.enabledClientAttributes[GLImmediate.COLOR]) {
              var colorAttr = clientAttributes[GLImmediate.COLOR];
              GLctx.vertexAttribPointer(this.colorLocation, colorAttr.size, colorAttr.type, true, GLImmediate.stride, colorAttr.offset);
              GLctx.enableVertexAttribArray(this.colorLocation);
            }
            else if (this.hasColor) {
              GLctx.disableVertexAttribArray(this.colorLocation);
              GLctx.vertexAttrib4fv(this.colorLocation, GLImmediate.clientColor);
            }
            if (this.hasFog) {
              if (this.fogColorLocation) GLctx.uniform4fv(this.fogColorLocation, GLEmulation.fogColor);
              if (this.fogEndLocation) GLctx.uniform1f(this.fogEndLocation, GLEmulation.fogEnd);
              if (this.fogScaleLocation) GLctx.uniform1f(this.fogScaleLocation, 1/(GLEmulation.fogEnd - GLEmulation.fogStart));
              if (this.fogDensityLocation) GLctx.uniform1f(this.fogDensityLocation, GLEmulation.fogDensity);
            }
          },
  
          cleanup: function cleanup() {
            GLctx.disableVertexAttribArray(this.positionLocation);
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                if (GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0+i] && this.texCoordLocations[i] >= 0) {
                  GLctx.disableVertexAttribArray(this.texCoordLocations[i]);
                }
              }
            }
            if (this.hasColor) {
              GLctx.disableVertexAttribArray(this.colorLocation);
            }
            if (this.hasNormal) {
              GLctx.disableVertexAttribArray(this.normalLocation);
            }
            if (!GL.currProgram) {
              GLctx.useProgram(null);
              GLImmediate.fixedFunctionProgram = 0;
            }
            if (!GL.currArrayBuffer) {
              GLctx.bindBuffer(GLctx.ARRAY_BUFFER, null);
              GLImmediate.lastArrayBuffer = null;
            }
  
            GLImmediate.lastRenderer = null;
            GLImmediate.lastProgram = null;
            GLImmediate.matricesModified = true;
          }
        };
        ret.init();
        return ret;
      },setupFuncs:function () {
        // Replace some functions with immediate-mode aware versions. If there are no client
        // attributes enabled, and we use webgl-friendly modes (no GL_QUADS), then no need
        // for emulation
        _glDrawArrays = _emscripten_glDrawArrays = function _glDrawArrays(mode, first, count) {
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6) {
            GLctx.drawArrays(mode, first, count);
            return;
          }
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.vertexData = HEAPF32.subarray((GLImmediate.vertexPointer)>>2,(GLImmediate.vertexPointer + (first+count)*GLImmediate.stride)>>2); // XXX assuming float
            GLImmediate.firstVertex = first;
            GLImmediate.lastVertex = first + count;
          }
          GLImmediate.flush(null, first);
          GLImmediate.mode = -1;
        };
        
  
        _glDrawElements = _emscripten_glDrawElements = function _glDrawElements(mode, count, type, indices, start, end) { // start, end are given if we come from glDrawRangeElements
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6 && GL.currElementArrayBuffer) {
            GLctx.drawElements(mode, count, type, indices);
            return;
          }
          if (!GL.currElementArrayBuffer) {
            assert(type == GLctx.UNSIGNED_SHORT); // We can only emulate buffers of this kind, for now
          }
          console.log("DrawElements doesn't actually prepareClientAttributes properly.");
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.firstVertex = end ? start : TOTAL_MEMORY; // if we don't know the start, set an invalid value and we will calculate it later from the indices
            GLImmediate.lastVertex = end ? end+1 : 0;
            GLImmediate.vertexData = HEAPF32.subarray(GLImmediate.vertexPointer >> 2, end ? (GLImmediate.vertexPointer + (end+1)*GLImmediate.stride) >> 2 : undefined); // XXX assuming float
          }
          GLImmediate.flush(count, 0, indices);
          GLImmediate.mode = -1;
        };
        
  
        // TexEnv stuff needs to be prepared early, so do it here.
        // init() is too late for -O2, since it freezes the GL functions
        // by that point.
        GLImmediate.MapTreeLib = GLImmediate.spawnMapTreeLib();
        GLImmediate.spawnMapTreeLib = null;
  
        GLImmediate.TexEnvJIT = GLImmediate.spawnTexEnvJIT();
        GLImmediate.spawnTexEnvJIT = null;
  
        GLImmediate.setupHooks();
      },setupHooks:function () {
        if (!GLEmulation.hasRunInit) {
          GLEmulation.init();
        }
  
        var glActiveTexture = _glActiveTexture;
        _glActiveTexture = _emscripten_glActiveTexture = function _glActiveTexture(texture) {
          GLImmediate.TexEnvJIT.hook_activeTexture(texture);
          glActiveTexture(texture);
        };
        
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          GLImmediate.TexEnvJIT.hook_enable(cap);
          glEnable(cap);
        };
        
  
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          GLImmediate.TexEnvJIT.hook_disable(cap);
          glDisable(cap);
        };
        
  
        var glTexEnvf = (typeof(_glTexEnvf) != 'undefined') ? _glTexEnvf : function(){};
        _glTexEnvf = _emscripten_glTexEnvf = function _glTexEnvf(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvf(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvf(target, pname, param);
        };
        
  
        var glTexEnvi = (typeof(_glTexEnvi) != 'undefined') ? _glTexEnvi : function(){};
        _glTexEnvi = _emscripten_glTexEnvi = function _glTexEnvi(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvi(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvi(target, pname, param);
        };
        
  
        var glTexEnvfv = (typeof(_glTexEnvfv) != 'undefined') ? _glTexEnvfv : function(){};
        _glTexEnvfv = _emscripten_glTexEnvfv = function _glTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvfv(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvfv(target, pname, param);
        };
        
  
        _glGetTexEnviv = function _glGetTexEnviv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnviv(target, pname, param);
        };
        
  
        _glGetTexEnvfv = function _glGetTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnvfv(target, pname, param);
        };
        
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x8B8D: { // GL_CURRENT_PROGRAM
              // Just query directly so we're working with WebGL objects.
              var cur = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              if (cur == GLImmediate.fixedFunctionProgram) {
                // Pretend we're not using a program.
                HEAP32[((params)>>2)]=0;
                return;
              }
              break;
            }
          }
          glGetIntegerv(pname, params);
        };
        
      },initted:false,init:function () {
        Module.printErr('WARNING: using emscripten GL immediate mode emulation. This is very limited in what it supports');
        GLImmediate.initted = true;
  
        if (!Module.useWebGL) return; // a 2D canvas may be currently used TODO: make sure we are actually called in that case
  
        // User can override the maximum number of texture units that we emulate. Using fewer texture units increases runtime performance
        // slightly, so it is advantageous to choose as small value as needed.
        GLImmediate.MAX_TEXTURES = Module['GL_MAX_TEXTURE_IMAGE_UNITS'] || GLctx.getParameter(GLctx.MAX_TEXTURE_IMAGE_UNITS);
  
        GLImmediate.TexEnvJIT.init(GLctx, GLImmediate.MAX_TEXTURES);
  
        GLImmediate.NUM_ATTRIBUTES = 3 /*pos+normal+color attributes*/ + GLImmediate.MAX_TEXTURES;
        GLImmediate.clientAttributes = [];
        GLEmulation.enabledClientAttribIndices = [];
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          GLImmediate.clientAttributes.push({});
          GLEmulation.enabledClientAttribIndices.push(false);
        }
  
        // Initialize matrix library
        // When user sets a matrix, increment a 'version number' on the new data, and when rendering, submit
        // the matrices to the shader program only if they have an old version of the data.
        GLImmediate.matrix = [];
        GLImmediate.matrixStack = [];
        GLImmediate.matrixVersion = [];
        for (var i = 0; i < 2 + GLImmediate.MAX_TEXTURES; i++) { // Modelview, Projection, plus one matrix for each texture coordinate.
          GLImmediate.matrixStack.push([]);
          GLImmediate.matrixVersion.push(0);
          GLImmediate.matrix.push(GLImmediate.matrixLib.mat4.create());
          GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[i]);
        }
  
        // Renderer cache
        GLImmediate.rendererCache = GLImmediate.MapTreeLib.create();
  
        // Buffers for data
        GLImmediate.tempData = new Float32Array(GL.MAX_TEMP_BUFFER_SIZE >> 2);
        GLImmediate.indexData = new Uint16Array(GL.MAX_TEMP_BUFFER_SIZE >> 1);
  
        GLImmediate.vertexDataU8 = new Uint8Array(GLImmediate.tempData.buffer);
  
        GL.generateTempBuffers(true, GL.currentContext);
  
        GLImmediate.clientColor = new Float32Array([1, 1, 1, 1]);
      },prepareClientAttributes:function prepareClientAttributes(count, beginEnd) {
        // If no client attributes were modified since we were last called, do nothing. Note that this
        // does not work for glBegin/End, where we generate renderer components dynamically and then
        // disable them ourselves, but it does help with glDrawElements/Arrays.
        if (!GLImmediate.modifiedClientAttributes) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
          return;
        }
        GLImmediate.modifiedClientAttributes = false;
  
        // The role of prepareClientAttributes is to examine the set of client-side vertex attribute buffers
        // that user code has submitted, and to prepare them to be uploaded to a VBO in GPU memory
        // (since WebGL does not support client-side rendering, i.e. rendering from vertex data in CPU memory)
        // User can submit vertex data generally in three different configurations:
        // 1. Fully planar: all attributes are in their own separate tightly-packed arrays in CPU memory.
        // 2. Fully interleaved: all attributes share a single array where data is interleaved something like (pos,uv,normal), (pos,uv,normal), ...
        // 3. Complex hybrid: Multiple separate arrays that either are sparsely strided, and/or partially interleave vertex attributes.
  
        // For simplicity, we support the case (2) as the fast case. For (1) and (3), we do a memory copy of the
        // vertex data here to prepare a relayouted buffer that is of the structure in case (2). The reason
        // for this is that it allows the emulation code to get away with using just one VBO buffer for rendering,
        // and not have to maintain multiple ones. Therefore cases (1) and (3) will be very slow, and case (2) is fast.
  
        // Detect which case we are in by using a quick heuristic by examining the strides of the buffers. If all the buffers have identical 
        // stride, we assume we have case (2), otherwise we have something more complex.
        var clientStartPointer = 0x7FFFFFFF;
        var bytes = 0; // Total number of bytes taken up by a single vertex.
        var minStride = 0x7FFFFFFF;
        var maxStride = 0;
        var attributes = GLImmediate.liveClientAttributes;
        attributes.length = 0;
        for (var i = 0; i < 3+GLImmediate.MAX_TEXTURES; i++) {
          if (GLImmediate.enabledClientAttributes[i]) {
            var attr = GLImmediate.clientAttributes[i];
            attributes.push(attr);
            clientStartPointer = Math.min(clientStartPointer, attr.pointer);
            attr.sizeBytes = attr.size * GL.byteSizeByType[attr.type - GL.byteSizeByTypeRoot];
            bytes += attr.sizeBytes;
            minStride = Math.min(minStride, attr.stride);
            maxStride = Math.max(maxStride, attr.stride);
          }
        }
  
        if ((minStride != maxStride || maxStride < bytes) && !beginEnd) {
          // We are in cases (1) or (3): slow path, shuffle the data around into a single interleaved vertex buffer.
          // The immediate-mode glBegin()/glEnd() vertex submission gets automatically generated in appropriate layout,
          // so never need to come down this path if that was used.
          if (!GLImmediate.restrideBuffer) GLImmediate.restrideBuffer = _malloc(GL.MAX_TEMP_BUFFER_SIZE);
          var start = GLImmediate.restrideBuffer;
          bytes = 0;
          // calculate restrided offsets and total size
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var size = attr.sizeBytes;
            if (size % 4 != 0) size += 4 - (size % 4); // align everything
            attr.offset = bytes;
            bytes += size;
          }
          // copy out the data (we need to know the stride for that, and define attr.pointer)
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var srcStride = Math.max(attr.sizeBytes, attr.stride);
            if ((srcStride & 3) == 0 && (attr.sizeBytes & 3) == 0) {
              var size4 = attr.sizeBytes>>2;
              var srcStride4 = Math.max(attr.sizeBytes, attr.stride)>>2;
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < size4; k++) { // copy in chunks of 4 bytes, our alignment makes this possible
                  HEAP32[((start + attr.offset + bytes*j)>>2) + k] = HEAP32[(attr.pointer>>2) + j*srcStride4 + k];
                }
              }
            } else {
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < attr.sizeBytes; k++) { // source data was not aligned to multiples of 4, must copy byte by byte.
                  HEAP8[start + attr.offset + bytes*j + k] = HEAP8[attr.pointer + j*srcStride + k];
                }
              }
            }
            attr.pointer = start + attr.offset;
          }
          GLImmediate.stride = bytes;
          GLImmediate.vertexPointer = start;
        } else {
          // case (2): fast path, all data is interleaved to a single vertex array so we can get away with a single VBO upload.
          if (GL.currArrayBuffer) {
            GLImmediate.vertexPointer = 0;
          } else {
            GLImmediate.vertexPointer = clientStartPointer;
          }
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            attr.offset = attr.pointer - GLImmediate.vertexPointer; // Compute what will be the offset of this attribute in the VBO after we upload.
          }
          GLImmediate.stride = Math.max(maxStride, bytes);
        }
        if (!beginEnd) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
        }
      },flush:function flush(numProvidedIndexes, startIndex, ptr) {
        assert(numProvidedIndexes >= 0 || !numProvidedIndexes);
        startIndex = startIndex || 0;
        ptr = ptr || 0;
  
        var renderer = GLImmediate.getRenderer();
  
        // Generate index data in a format suitable for GLES 2.0/WebGL
        var numVertexes = 4 * GLImmediate.vertexCounter / GLImmediate.stride;
        if (!numVertexes) return;
        assert(numVertexes % 1 == 0, "`numVertexes` must be an integer.");
        var emulatedElementArrayBuffer = false;
        var numIndexes = 0;
        if (numProvidedIndexes) {
          numIndexes = numProvidedIndexes;
          if (!GL.currArrayBuffer && GLImmediate.firstVertex > GLImmediate.lastVertex) {
            // Figure out the first and last vertex from the index data
            assert(!GL.currElementArrayBuffer); // If we are going to upload array buffer data, we need to find which range to
                                                // upload based on the indices. If they are in a buffer on the GPU, that is very
                                                // inconvenient! So if you do not have an array buffer, you should also not have
                                                // an element array buffer. But best is to use both buffers!
            for (var i = 0; i < numProvidedIndexes; i++) {
              var currIndex = HEAPU16[(((ptr)+(i*2))>>1)];
              GLImmediate.firstVertex = Math.min(GLImmediate.firstVertex, currIndex);
              GLImmediate.lastVertex = Math.max(GLImmediate.lastVertex, currIndex+1);
            }
          }
          if (!GL.currElementArrayBuffer) {
            // If no element array buffer is bound, then indices is a literal pointer to clientside data
            assert(numProvidedIndexes << 1 <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (a)');
            var indexBuffer = GL.getTempIndexBuffer(numProvidedIndexes << 1);
            GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, indexBuffer);
            GLctx.bufferSubData(GLctx.ELEMENT_ARRAY_BUFFER, 0, HEAPU16.subarray((ptr)>>1,(ptr + (numProvidedIndexes << 1))>>1));
            ptr = 0;
            emulatedElementArrayBuffer = true;
          }
        } else if (GLImmediate.mode > 6) { // above GL_TRIANGLE_FAN are the non-GL ES modes
          if (GLImmediate.mode != 7) throw 'unsupported immediate mode ' + GLImmediate.mode; // GL_QUADS
          // GLImmediate.firstVertex is the first vertex we want. Quad indexes are in the pattern
          // 0 1 2, 0 2 3, 4 5 6, 4 6 7, so we need to look at index firstVertex * 1.5 to see it.
          // Then since indexes are 2 bytes each, that means 3
          assert(GLImmediate.firstVertex % 4 == 0);
          ptr = GLImmediate.firstVertex*3;
          var numQuads = numVertexes / 4;
          numIndexes = numQuads * 6; // 0 1 2, 0 2 3 pattern
          assert(ptr + (numIndexes << 1) <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (b)');
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.currentContext.tempQuadIndexBuffer);
          emulatedElementArrayBuffer = true;
        }
  
        renderer.prepare();
  
        if (numIndexes) {
          GLctx.drawElements(GLctx.TRIANGLES, numIndexes, GLctx.UNSIGNED_SHORT, ptr);
        } else {
          GLctx.drawArrays(GLImmediate.mode, startIndex, numVertexes);
        }
  
        if (emulatedElementArrayBuffer) {
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.buffers[GL.currElementArrayBuffer] || null);
        }
  
      }};
  GLImmediate.matrixLib = (function() {
  
  /**
   * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL
   * @author Brandon Jones
   * @version 1.2.4
   */
  
  // Modifed for emscripten: Global scoping etc.
  
  /*
   * Copyright (c) 2011 Brandon Jones
   *
   * This software is provided 'as-is', without any express or implied
   * warranty. In no event will the authors be held liable for any damages
   * arising from the use of this software.
   *
   * Permission is granted to anyone to use this software for any purpose,
   * including commercial applications, and to alter it and redistribute it
   * freely, subject to the following restrictions:
   *
   *    1. The origin of this software must not be misrepresented; you must not
   *    claim that you wrote the original software. If you use this software
   *    in a product, an acknowledgment in the product documentation would be
   *    appreciated but is not required.
   *
   *    2. Altered source versions must be plainly marked as such, and must not
   *    be misrepresented as being the original software.
   *
   *    3. This notice may not be removed or altered from any source
   *    distribution.
   */
  
  
  /**
   * @class 3 Dimensional Vector
   * @name vec3
   */
  var vec3 = {};
  
  /**
   * @class 3x3 Matrix
   * @name mat3
   */
  var mat3 = {};
  
  /**
   * @class 4x4 Matrix
   * @name mat4
   */
  var mat4 = {};
  
  /**
   * @class Quaternion
   * @name quat4
   */
  var quat4 = {};
  
  var MatrixArray = Float32Array;
  
  /*
   * vec3
   */
   
  /**
   * Creates a new instance of a vec3 using the default array type
   * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3
   *
   * @param {vec3} [vec] vec3 containing values to initialize with
   *
   * @returns {vec3} New vec3
   */
  vec3.create = function (vec) {
      var dest = new MatrixArray(3);
  
      if (vec) {
          dest[0] = vec[0];
          dest[1] = vec[1];
          dest[2] = vec[2];
      } else {
          dest[0] = dest[1] = dest[2] = 0;
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one vec3 to another
   *
   * @param {vec3} vec vec3 containing values to copy
   * @param {vec3} dest vec3 receiving copied values
   *
   * @returns {vec3} dest
   */
  vec3.set = function (vec, dest) {
      dest[0] = vec[0];
      dest[1] = vec[1];
      dest[2] = vec[2];
  
      return dest;
  };
  
  /**
   * Performs a vector addition
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.add = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] += vec2[0];
          vec[1] += vec2[1];
          vec[2] += vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] + vec2[0];
      dest[1] = vec[1] + vec2[1];
      dest[2] = vec[2] + vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector subtraction
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.subtract = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] -= vec2[0];
          vec[1] -= vec2[1];
          vec[2] -= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] - vec2[0];
      dest[1] = vec[1] - vec2[1];
      dest[2] = vec[2] - vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector multiplication
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.multiply = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] *= vec2[0];
          vec[1] *= vec2[1];
          vec[2] *= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] * vec2[0];
      dest[1] = vec[1] * vec2[1];
      dest[2] = vec[2] * vec2[2];
      return dest;
  };
  
  /**
   * Negates the components of a vec3
   *
   * @param {vec3} vec vec3 to negate
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.negate = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = -vec[0];
      dest[1] = -vec[1];
      dest[2] = -vec[2];
      return dest;
  };
  
  /**
   * Multiplies the components of a vec3 by a scalar value
   *
   * @param {vec3} vec vec3 to scale
   * @param {number} val Value to scale by
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.scale = function (vec, val, dest) {
      if (!dest || vec === dest) {
          vec[0] *= val;
          vec[1] *= val;
          vec[2] *= val;
          return vec;
      }
  
      dest[0] = vec[0] * val;
      dest[1] = vec[1] * val;
      dest[2] = vec[2] * val;
      return dest;
  };
  
  /**
   * Generates a unit vector of the same direction as the provided vec3
   * If vector length is 0, returns [0, 0, 0]
   *
   * @param {vec3} vec vec3 to normalize
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.normalize = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      } else if (len === 1) {
          dest[0] = x;
          dest[1] = y;
          dest[2] = z;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Generates the cross product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.cross = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          x2 = vec2[0], y2 = vec2[1], z2 = vec2[2];
  
      dest[0] = y * z2 - z * y2;
      dest[1] = z * x2 - x * z2;
      dest[2] = x * y2 - y * x2;
      return dest;
  };
  
  /**
   * Caclulates the length of a vec3
   *
   * @param {vec3} vec vec3 to calculate length of
   *
   * @returns {number} Length of vec
   */
  vec3.length = function (vec) {
      var x = vec[0], y = vec[1], z = vec[2];
      return Math.sqrt(x * x + y * y + z * z);
  };
  
  /**
   * Caclulates the dot product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   *
   * @returns {number} Dot product of vec and vec2
   */
  vec3.dot = function (vec, vec2) {
      return vec[0] * vec2[0] + vec[1] * vec2[1] + vec[2] * vec2[2];
  };
  
  /**
   * Generates a unit vector pointing from one vector to another
   *
   * @param {vec3} vec Origin vec3
   * @param {vec3} vec2 vec3 to point to
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.direction = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0] - vec2[0],
          y = vec[1] - vec2[1],
          z = vec[2] - vec2[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Performs a linear interpolation between two vec3
   *
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   * @param {number} lerp Interpolation amount between the two inputs
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.lerp = function (vec, vec2, lerp, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);
      dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);
      dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);
  
      return dest;
  };
  
  /**
   * Calculates the euclidian distance between two vec3
   *
   * Params:
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   *
   * @returns {number} Distance between vec and vec2
   */
  vec3.dist = function (vec, vec2) {
      var x = vec2[0] - vec[0],
          y = vec2[1] - vec[1],
          z = vec2[2] - vec[2];
          
      return Math.sqrt(x*x + y*y + z*z);
  };
  
  /**
   * Projects the specified vec3 from screen space into object space
   * Based on the <a href="http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup">Mesa gluUnProject implementation</a>
   *
   * @param {vec3} vec Screen-space vector to project
   * @param {mat4} view View matrix
   * @param {mat4} proj Projection matrix
   * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]
   * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.unproject = function (vec, view, proj, viewport, dest) {
      if (!dest) { dest = vec; }
  
      var m = mat4.create();
      var v = new MatrixArray(4);
      
      v[0] = (vec[0] - viewport[0]) * 2.0 / viewport[2] - 1.0;
      v[1] = (vec[1] - viewport[1]) * 2.0 / viewport[3] - 1.0;
      v[2] = 2.0 * vec[2] - 1.0;
      v[3] = 1.0;
      
      mat4.multiply(proj, view, m);
      if(!mat4.inverse(m)) { return null; }
      
      mat4.multiplyVec4(m, v);
      if(v[3] === 0.0) { return null; }
  
      dest[0] = v[0] / v[3];
      dest[1] = v[1] / v[3];
      dest[2] = v[2] / v[3];
      
      return dest;
  };
  
  /**
   * Returns a string representation of a vector
   *
   * @param {vec3} vec Vector to represent as a string
   *
   * @returns {string} String representation of vec
   */
  vec3.str = function (vec) {
      return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ']';
  };
  
  /*
   * mat3
   */
  
  /**
   * Creates a new instance of a mat3 using the default array type
   * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3
   *
   * @param {mat3} [mat] mat3 containing values to initialize with
   *
   * @returns {mat3} New mat3
   */
  mat3.create = function (mat) {
      var dest = new MatrixArray(9);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat3 to another
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat3} dest mat3 receiving copied values
   *
   * @returns {mat3} dest
   */
  mat3.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Sets a mat3 to an identity matrix
   *
   * @param {mat3} dest mat3 to set
   *
   * @returns dest if specified, otherwise a new mat3
   */
  mat3.identity = function (dest) {
      if (!dest) { dest = mat3.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 1;
      dest[5] = 0;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat3 (flips the values over the diagonal)
   *
   * Params:
   * @param {mat3} mat mat3 to transpose
   * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat
   *
   * @returns {mat3} dest is specified, mat otherwise
   */
  mat3.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2],
              a12 = mat[5];
  
          mat[1] = mat[3];
          mat[2] = mat[6];
          mat[3] = a01;
          mat[5] = mat[7];
          mat[6] = a02;
          mat[7] = a12;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[3];
      dest[2] = mat[6];
      dest[3] = mat[1];
      dest[4] = mat[4];
      dest[5] = mat[7];
      dest[6] = mat[2];
      dest[7] = mat[5];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Copies the elements of a mat3 into the upper 3x3 elements of a mat4
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat3.toMat4 = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[15] = 1;
      dest[14] = 0;
      dest[13] = 0;
      dest[12] = 0;
  
      dest[11] = 0;
      dest[10] = mat[8];
      dest[9] = mat[7];
      dest[8] = mat[6];
  
      dest[7] = 0;
      dest[6] = mat[5];
      dest[5] = mat[4];
      dest[4] = mat[3];
  
      dest[3] = 0;
      dest[2] = mat[2];
      dest[1] = mat[1];
      dest[0] = mat[0];
  
      return dest;
  };
  
  /**
   * Returns a string representation of a mat3
   *
   * @param {mat3} mat mat3 to represent as a string
   *
   * @param {string} String representation of mat
   */
  mat3.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] +
          ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] +
          ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ']';
  };
  
  /*
   * mat4
   */
  
  /**
   * Creates a new instance of a mat4 using the default array type
   * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4
   *
   * @param {mat4} [mat] mat4 containing values to initialize with
   *
   * @returns {mat4} New mat4
   */
  mat4.create = function (mat) {
      var dest = new MatrixArray(16);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat4 to another
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} dest mat4 receiving copied values
   *
   * @returns {mat4} dest
   */
  mat4.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Sets a mat4 to an identity matrix
   *
   * @param {mat4} dest mat4 to set
   *
   * @returns {mat4} dest
   */
  mat4.identity = function (dest) {
      if (!dest) { dest = mat4.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 1;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = 1;
      dest[11] = 0;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat4 (flips the values over the diagonal)
   *
   * @param {mat4} mat mat4 to transpose
   * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise
   */
  mat4.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2], a03 = mat[3],
              a12 = mat[6], a13 = mat[7],
              a23 = mat[11];
  
          mat[1] = mat[4];
          mat[2] = mat[8];
          mat[3] = mat[12];
          mat[4] = a01;
          mat[6] = mat[9];
          mat[7] = mat[13];
          mat[8] = a02;
          mat[9] = a12;
          mat[11] = mat[14];
          mat[12] = a03;
          mat[13] = a13;
          mat[14] = a23;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[4];
      dest[2] = mat[8];
      dest[3] = mat[12];
      dest[4] = mat[1];
      dest[5] = mat[5];
      dest[6] = mat[9];
      dest[7] = mat[13];
      dest[8] = mat[2];
      dest[9] = mat[6];
      dest[10] = mat[10];
      dest[11] = mat[14];
      dest[12] = mat[3];
      dest[13] = mat[7];
      dest[14] = mat[11];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Calculates the determinant of a mat4
   *
   * @param {mat4} mat mat4 to calculate determinant of
   *
   * @returns {number} determinant of mat
   */
  mat4.determinant = function (mat) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
  
      return (a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +
              a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +
              a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +
              a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +
              a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +
              a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33);
  };
  
  /**
   * Calculates the inverse matrix of a mat4
   *
   * @param {mat4} mat mat4 to calculate inverse of
   * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted
   */
  mat4.inverse = function (mat, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = a00 * a11 - a01 * a10,
          b01 = a00 * a12 - a02 * a10,
          b02 = a00 * a13 - a03 * a10,
          b03 = a01 * a12 - a02 * a11,
          b04 = a01 * a13 - a03 * a11,
          b05 = a02 * a13 - a03 * a12,
          b06 = a20 * a31 - a21 * a30,
          b07 = a20 * a32 - a22 * a30,
          b08 = a20 * a33 - a23 * a30,
          b09 = a21 * a32 - a22 * a31,
          b10 = a21 * a33 - a23 * a31,
          b11 = a22 * a33 - a23 * a32,
  
          d = (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06),
          invDet;
  
          // Calculate the determinant
          if (!d) { return null; }
          invDet = 1 / d;
  
      dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
      dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
      dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
      dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
      dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into another mat4
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest is specified, a new mat4 otherwise
   */
  mat4.toRotationMat = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into a mat3
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat3} [dest] mat3 receiving copied values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise
   */
  mat4.toMat3 = function (mat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[4];
      dest[4] = mat[5];
      dest[5] = mat[6];
      dest[6] = mat[8];
      dest[7] = mat[9];
      dest[8] = mat[10];
  
      return dest;
  };
  
  /**
   * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3
   * The resulting matrix is useful for calculating transformed normals
   *
   * Params:
   * @param {mat4} mat mat4 containing values to invert and copy
   * @param {mat3} [dest] mat3 receiving values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted
   */
  mat4.toInverseMat3 = function (mat, dest) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2],
          a10 = mat[4], a11 = mat[5], a12 = mat[6],
          a20 = mat[8], a21 = mat[9], a22 = mat[10],
  
          b01 = a22 * a11 - a12 * a21,
          b11 = -a22 * a10 + a12 * a20,
          b21 = a21 * a10 - a11 * a20,
  
          d = a00 * b01 + a01 * b11 + a02 * b21,
          id;
  
      if (!d) { return null; }
      id = 1 / d;
  
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = b01 * id;
      dest[1] = (-a22 * a01 + a02 * a21) * id;
      dest[2] = (a12 * a01 - a02 * a11) * id;
      dest[3] = b11 * id;
      dest[4] = (a22 * a00 - a02 * a20) * id;
      dest[5] = (-a12 * a00 + a02 * a10) * id;
      dest[6] = b21 * id;
      dest[7] = (-a21 * a00 + a01 * a20) * id;
      dest[8] = (a11 * a00 - a01 * a10) * id;
  
      return dest;
  };
  
  /**
   * Performs a matrix multiplication
   *
   * @param {mat4} mat First operand
   * @param {mat4} mat2 Second operand
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.multiply = function (mat, mat2, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b03 = mat2[3],
          b10 = mat2[4], b11 = mat2[5], b12 = mat2[6], b13 = mat2[7],
          b20 = mat2[8], b21 = mat2[9], b22 = mat2[10], b23 = mat2[11],
          b30 = mat2[12], b31 = mat2[13], b32 = mat2[14], b33 = mat2[15];
  
      dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
      dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
      dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
      dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
      dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
      dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
      dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
      dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
      dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
      dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
      dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
      dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
      dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
      dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
      dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
      dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given matrix
   * 4th vector component is implicitly '1'
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  mat4.multiplyVec3 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
  
      return dest;
  };
  
  /**
   * Transforms a vec4 with the given matrix
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec4} vec vec4 to transform
   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec4} dest if specified, vec otherwise
   */
  mat4.multiplyVec4 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2], w = vec[3];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;
      dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;
  
      return dest;
  };
  
  /**
   * Translates a matrix by the given vector
   *
   * @param {mat4} mat mat4 to translate
   * @param {vec3} vec vec3 specifying the translation
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.translate = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2],
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23;
  
      if (!dest || mat === dest) {
          mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
          mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
          mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
          mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];
          return mat;
      }
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      dest[0] = a00; dest[1] = a01; dest[2] = a02; dest[3] = a03;
      dest[4] = a10; dest[5] = a11; dest[6] = a12; dest[7] = a13;
      dest[8] = a20; dest[9] = a21; dest[10] = a22; dest[11] = a23;
  
      dest[12] = a00 * x + a10 * y + a20 * z + mat[12];
      dest[13] = a01 * x + a11 * y + a21 * z + mat[13];
      dest[14] = a02 * x + a12 * y + a22 * z + mat[14];
      dest[15] = a03 * x + a13 * y + a23 * z + mat[15];
      return dest;
  };
  
  /**
   * Scales a matrix by the given vector
   *
   * @param {mat4} mat mat4 to scale
   * @param {vec3} vec vec3 specifying the scale for each axis
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @param {mat4} dest if specified, mat otherwise
   */
  mat4.scale = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2];
  
      if (!dest || mat === dest) {
          mat[0] *= x;
          mat[1] *= x;
          mat[2] *= x;
          mat[3] *= x;
          mat[4] *= y;
          mat[5] *= y;
          mat[6] *= y;
          mat[7] *= y;
          mat[8] *= z;
          mat[9] *= z;
          mat[10] *= z;
          mat[11] *= z;
          return mat;
      }
  
      dest[0] = mat[0] * x;
      dest[1] = mat[1] * x;
      dest[2] = mat[2] * x;
      dest[3] = mat[3] * x;
      dest[4] = mat[4] * y;
      dest[5] = mat[5] * y;
      dest[6] = mat[6] * y;
      dest[7] = mat[7] * y;
      dest[8] = mat[8] * z;
      dest[9] = mat[9] * z;
      dest[10] = mat[10] * z;
      dest[11] = mat[11] * z;
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the specified axis
   * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {vec3} axis vec3 representing the axis to rotate around 
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotate = function (mat, angle, axis, dest) {
      var x = axis[0], y = axis[1], z = axis[2],
          len = Math.sqrt(x * x + y * y + z * z),
          s, c, t,
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23,
          b00, b01, b02,
          b10, b11, b12,
          b20, b21, b22;
  
      if (!len) { return null; }
      if (len !== 1) {
          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
      }
  
      s = Math.sin(angle);
      c = Math.cos(angle);
      t = 1 - c;
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      // Construct the elements of the rotation matrix
      b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
      b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
      b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform rotation-specific matrix multiplication
      dest[0] = a00 * b00 + a10 * b01 + a20 * b02;
      dest[1] = a01 * b00 + a11 * b01 + a21 * b02;
      dest[2] = a02 * b00 + a12 * b01 + a22 * b02;
      dest[3] = a03 * b00 + a13 * b01 + a23 * b02;
  
      dest[4] = a00 * b10 + a10 * b11 + a20 * b12;
      dest[5] = a01 * b10 + a11 * b11 + a21 * b12;
      dest[6] = a02 * b10 + a12 * b11 + a22 * b12;
      dest[7] = a03 * b10 + a13 * b11 + a23 * b12;
  
      dest[8] = a00 * b20 + a10 * b21 + a20 * b22;
      dest[9] = a01 * b20 + a11 * b21 + a21 * b22;
      dest[10] = a02 * b20 + a12 * b21 + a22 * b22;
      dest[11] = a03 * b20 + a13 * b21 + a23 * b22;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the X axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateX = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[4] = a10 * c + a20 * s;
      dest[5] = a11 * c + a21 * s;
      dest[6] = a12 * c + a22 * s;
      dest[7] = a13 * c + a23 * s;
  
      dest[8] = a10 * -s + a20 * c;
      dest[9] = a11 * -s + a21 * c;
      dest[10] = a12 * -s + a22 * c;
      dest[11] = a13 * -s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Y axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateY = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a20 * -s;
      dest[1] = a01 * c + a21 * -s;
      dest[2] = a02 * c + a22 * -s;
      dest[3] = a03 * c + a23 * -s;
  
      dest[8] = a00 * s + a20 * c;
      dest[9] = a01 * s + a21 * c;
      dest[10] = a02 * s + a22 * c;
      dest[11] = a03 * s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Z axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateZ = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a10 * s;
      dest[1] = a01 * c + a11 * s;
      dest[2] = a02 * c + a12 * s;
      dest[3] = a03 * c + a13 * s;
  
      dest[4] = a00 * -s + a10 * c;
      dest[5] = a01 * -s + a11 * c;
      dest[6] = a02 * -s + a12 * c;
      dest[7] = a03 * -s + a13 * c;
  
      return dest;
  };
  
  /**
   * Generates a frustum matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.frustum = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = (near * 2) / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = (near * 2) / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = (right + left) / rl;
      dest[9] = (top + bottom) / tb;
      dest[10] = -(far + near) / fn;
      dest[11] = -1;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = -(far * near * 2) / fn;
      dest[15] = 0;
      return dest;
  };
  
  /**
   * Generates a perspective projection matrix with the given bounds
   *
   * @param {number} fovy Vertical field of view
   * @param {number} aspect Aspect ratio. typically viewport width/height
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.perspective = function (fovy, aspect, near, far, dest) {
      var top = near * Math.tan(fovy * Math.PI / 360.0),
          right = top * aspect;
      return mat4.frustum(-right, right, -top, top, near, far, dest);
  };
  
  /**
   * Generates a orthogonal projection matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.ortho = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = 2 / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 2 / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = -2 / fn;
      dest[11] = 0;
      dest[12] = -(left + right) / rl;
      dest[13] = -(top + bottom) / tb;
      dest[14] = -(far + near) / fn;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Generates a look-at matrix with the given eye position, focal point, and up axis
   *
   * @param {vec3} eye Position of the viewer
   * @param {vec3} center Point the viewer is looking at
   * @param {vec3} up vec3 pointing "up"
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.lookAt = function (eye, center, up, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
          eyex = eye[0],
          eyey = eye[1],
          eyez = eye[2],
          upx = up[0],
          upy = up[1],
          upz = up[2],
          centerx = center[0],
          centery = center[1],
          centerz = center[2];
  
      if (eyex === centerx && eyey === centery && eyez === centerz) {
          return mat4.identity(dest);
      }
  
      //vec3.direction(eye, center, z);
      z0 = eyex - centerx;
      z1 = eyey - centery;
      z2 = eyez - centerz;
  
      // normalize (no check needed for 0 because of early return)
      len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
      z0 *= len;
      z1 *= len;
      z2 *= len;
  
      //vec3.normalize(vec3.cross(up, z, x));
      x0 = upy * z2 - upz * z1;
      x1 = upz * z0 - upx * z2;
      x2 = upx * z1 - upy * z0;
      len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
      if (!len) {
          x0 = 0;
          x1 = 0;
          x2 = 0;
      } else {
          len = 1 / len;
          x0 *= len;
          x1 *= len;
          x2 *= len;
      }
  
      //vec3.normalize(vec3.cross(z, x, y));
      y0 = z1 * x2 - z2 * x1;
      y1 = z2 * x0 - z0 * x2;
      y2 = z0 * x1 - z1 * x0;
  
      len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
      if (!len) {
          y0 = 0;
          y1 = 0;
          y2 = 0;
      } else {
          len = 1 / len;
          y0 *= len;
          y1 *= len;
          y2 *= len;
      }
  
      dest[0] = x0;
      dest[1] = y0;
      dest[2] = z0;
      dest[3] = 0;
      dest[4] = x1;
      dest[5] = y1;
      dest[6] = z1;
      dest[7] = 0;
      dest[8] = x2;
      dest[9] = y2;
      dest[10] = z2;
      dest[11] = 0;
      dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
      dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
      dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Creates a matrix from a quaternion rotation and vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     var quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *
   * @param {quat4} quat Rotation quaternion
   * @param {vec3} vec Translation vector
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.fromRotationTranslation = function (quat, vec, dest) {
      if (!dest) { dest = mat4.create(); }
  
      // Quaternion math
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
      dest[12] = vec[0];
      dest[13] = vec[1];
      dest[14] = vec[2];
      dest[15] = 1;
      
      return dest;
  };
  
  /**
   * Returns a string representation of a mat4
   *
   * @param {mat4} mat mat4 to represent as a string
   *
   * @returns {string} String representation of mat
   */
  mat4.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] +
          ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] +
          ', ' + mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] +
          ', ' + mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';
  };
  
  /*
   * quat4
   */
  
  /**
   * Creates a new instance of a quat4 using the default array type
   * Any javascript array containing at least 4 numeric elements can serve as a quat4
   *
   * @param {quat4} [quat] quat4 containing values to initialize with
   *
   * @returns {quat4} New quat4
   */
  quat4.create = function (quat) {
      var dest = new MatrixArray(4);
  
      if (quat) {
          dest[0] = quat[0];
          dest[1] = quat[1];
          dest[2] = quat[2];
          dest[3] = quat[3];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one quat4 to another
   *
   * @param {quat4} quat quat4 containing values to copy
   * @param {quat4} dest quat4 receiving copied values
   *
   * @returns {quat4} dest
   */
  quat4.set = function (quat, dest) {
      dest[0] = quat[0];
      dest[1] = quat[1];
      dest[2] = quat[2];
      dest[3] = quat[3];
  
      return dest;
  };
  
  /**
   * Calculates the W component of a quat4 from the X, Y, and Z components.
   * Assumes that quaternion is 1 unit in length. 
   * Any existing W component will be ignored. 
   *
   * @param {quat4} quat quat4 to calculate W component of
   * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.calculateW = function (quat, dest) {
      var x = quat[0], y = quat[1], z = quat[2];
  
      if (!dest || quat === dest) {
          quat[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
          return quat;
      }
      dest[0] = x;
      dest[1] = y;
      dest[2] = z;
      dest[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return dest;
  };
  
  /**
   * Calculates the dot product of two quaternions
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   *
   * @return {number} Dot product of quat and quat2
   */
  quat4.dot = function(quat, quat2){
      return quat[0]*quat2[0] + quat[1]*quat2[1] + quat[2]*quat2[2] + quat[3]*quat2[3];
  };
  
  /**
   * Calculates the inverse of a quat4
   *
   * @param {quat4} quat quat4 to calculate inverse of
   * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.inverse = function(quat, dest) {
      var q0 = quat[0], q1 = quat[1], q2 = quat[2], q3 = quat[3],
          dot = q0*q0 + q1*q1 + q2*q2 + q3*q3,
          invDot = dot ? 1.0/dot : 0;
      
      // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
      
      if(!dest || quat === dest) {
          quat[0] *= -invDot;
          quat[1] *= -invDot;
          quat[2] *= -invDot;
          quat[3] *= invDot;
          return quat;
      }
      dest[0] = -quat[0]*invDot;
      dest[1] = -quat[1]*invDot;
      dest[2] = -quat[2]*invDot;
      dest[3] = quat[3]*invDot;
      return dest;
  };
  
  
  /**
   * Calculates the conjugate of a quat4
   * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.
   *
   * @param {quat4} quat quat4 to calculate conjugate of
   * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.conjugate = function (quat, dest) {
      if (!dest || quat === dest) {
          quat[0] *= -1;
          quat[1] *= -1;
          quat[2] *= -1;
          return quat;
      }
      dest[0] = -quat[0];
      dest[1] = -quat[1];
      dest[2] = -quat[2];
      dest[3] = quat[3];
      return dest;
  };
  
  /**
   * Calculates the length of a quat4
   *
   * Params:
   * @param {quat4} quat quat4 to calculate length of
   *
   * @returns Length of quat
   */
  quat4.length = function (quat) {
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3];
      return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  
  /**
   * Generates a unit quaternion of the same direction as the provided quat4
   * If quaternion length is 0, returns [0, 0, 0, 0]
   *
   * @param {quat4} quat quat4 to normalize
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.normalize = function (quat, dest) {
      if (!dest) { dest = quat; }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          len = Math.sqrt(x * x + y * y + z * z + w * w);
      if (len === 0) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          dest[3] = 0;
          return dest;
      }
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      dest[3] = w * len;
  
      return dest;
  };
  
  /**
   * Performs quaternion addition
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.add = function (quat, quat2, dest) {
      if(!dest || quat === dest) {
          quat[0] += quat2[0];
          quat[1] += quat2[1];
          quat[2] += quat2[2];
          quat[3] += quat2[3];
          return quat;
      }
      dest[0] = quat[0]+quat2[0];
      dest[1] = quat[1]+quat2[1];
      dest[2] = quat[2]+quat2[2];
      dest[3] = quat[3]+quat2[3];
      return dest;
  };
  
  /**
   * Performs a quaternion multiplication
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.multiply = function (quat, quat2, dest) {
      if (!dest) { dest = quat; }
  
      var qax = quat[0], qay = quat[1], qaz = quat[2], qaw = quat[3],
          qbx = quat2[0], qby = quat2[1], qbz = quat2[2], qbw = quat2[3];
  
      dest[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      dest[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      dest[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      dest[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given quaternion
   *
   * @param {quat4} quat quat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns dest if specified, vec otherwise
   */
  quat4.multiplyVec3 = function (quat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          qx = quat[0], qy = quat[1], qz = quat[2], qw = quat[3],
  
          // calculate quat * vec
          ix = qw * x + qy * z - qz * y,
          iy = qw * y + qz * x - qx * z,
          iz = qw * z + qx * y - qy * x,
          iw = -qx * x - qy * y - qz * z;
  
      // calculate result * inverse quat
      dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  
      return dest;
  };
  
  /**
   * Multiplies the components of a quaternion by a scalar value
   *
   * @param {quat4} quat to scale
   * @param {number} val Value to scale by
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.scale = function (quat, val, dest) {
      if(!dest || quat === dest) {
          quat[0] *= val;
          quat[1] *= val;
          quat[2] *= val;
          quat[3] *= val;
          return quat;
      }
      dest[0] = quat[0]*val;
      dest[1] = quat[1]*val;
      dest[2] = quat[2]*val;
      dest[3] = quat[3]*val;
      return dest;
  };
  
  /**
   * Calculates a 3x3 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat3} [dest] mat3 receiving operation result
   *
   * @returns {mat3} dest if specified, a new mat3 otherwise
   */
  quat4.toMat3 = function (quat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
  
      dest[3] = xy - wz;
      dest[4] = 1 - (xx + zz);
      dest[5] = yz + wx;
  
      dest[6] = xz + wy;
      dest[7] = yz - wx;
      dest[8] = 1 - (xx + yy);
  
      return dest;
  };
  
  /**
   * Calculates a 4x4 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat4} [dest] mat4 receiving operation result
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  quat4.toMat4 = function (quat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
  
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
  
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
  
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Performs a spherical linear interpolation between two quat4
   *
   * @param {quat4} quat First quaternion
   * @param {quat4} quat2 Second quaternion
   * @param {number} slerp Interpolation amount between the two inputs
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.slerp = function (quat, quat2, slerp, dest) {
      if (!dest) { dest = quat; }
  
      var cosHalfTheta = quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3],
          halfTheta,
          sinHalfTheta,
          ratioA,
          ratioB;
  
      if (Math.abs(cosHalfTheta) >= 1.0) {
          if (dest !== quat) {
              dest[0] = quat[0];
              dest[1] = quat[1];
              dest[2] = quat[2];
              dest[3] = quat[3];
          }
          return dest;
      }
  
      halfTheta = Math.acos(cosHalfTheta);
      sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
  
      if (Math.abs(sinHalfTheta) < 0.001) {
          dest[0] = (quat[0] * 0.5 + quat2[0] * 0.5);
          dest[1] = (quat[1] * 0.5 + quat2[1] * 0.5);
          dest[2] = (quat[2] * 0.5 + quat2[2] * 0.5);
          dest[3] = (quat[3] * 0.5 + quat2[3] * 0.5);
          return dest;
      }
  
      ratioA = Math.sin((1 - slerp) * halfTheta) / sinHalfTheta;
      ratioB = Math.sin(slerp * halfTheta) / sinHalfTheta;
  
      dest[0] = (quat[0] * ratioA + quat2[0] * ratioB);
      dest[1] = (quat[1] * ratioA + quat2[1] * ratioB);
      dest[2] = (quat[2] * ratioA + quat2[2] * ratioB);
      dest[3] = (quat[3] * ratioA + quat2[3] * ratioB);
  
      return dest;
  };
  
  /**
   * Returns a string representation of a quaternion
   *
   * @param {quat4} quat quat4 to represent as a string
   *
   * @returns {string} String representation of quat
   */
  quat4.str = function (quat) {
      return '[' + quat[0] + ', ' + quat[1] + ', ' + quat[2] + ', ' + quat[3] + ']';
  };
  
  
  return {
    vec3: vec3,
    mat3: mat3,
    mat4: mat4,
    quat4: quat4
  };
  
  })();
  
  ;
  var GLImmediateSetup={};function _glBegin(mode) {
      // Push the old state:
      GLImmediate.enabledClientAttributes_preBegin = GLImmediate.enabledClientAttributes;
      GLImmediate.enabledClientAttributes = [];
  
      GLImmediate.clientAttributes_preBegin = GLImmediate.clientAttributes;
      GLImmediate.clientAttributes = []
      for (var i = 0; i < GLImmediate.clientAttributes_preBegin.length; i++) {
        GLImmediate.clientAttributes.push({});
      }
  
      GLImmediate.mode = mode;
      GLImmediate.vertexCounter = 0;
      var components = GLImmediate.rendererComponents = [];
      for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
        components[i] = 0;
      }
      GLImmediate.rendererComponentPointer = 0;
      GLImmediate.vertexData = GLImmediate.tempData;
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  var PTHREAD_SPECIFIC={};
  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _glClear(x0) { GLctx.clear(x0) }

  function _glutInitWindowSize(width, height) {
      Browser.setCanvasSize( GLUT.initWindowWidth = width,
                             GLUT.initWindowHeight = height );
    }

  function _glutInitDisplayMode(mode) {
      GLUT.initDisplayMode = mode;
    }

  function _glutMouseFunc(func) {
      GLUT.mouseFunc = func;
    }

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _glutCreateWindow(name) {
      var contextAttributes = {
        antialias: ((GLUT.initDisplayMode & 0x0080 /*GLUT_MULTISAMPLE*/) != 0),
        depth: ((GLUT.initDisplayMode & 0x0010 /*GLUT_DEPTH*/) != 0),
        stencil: ((GLUT.initDisplayMode & 0x0020 /*GLUT_STENCIL*/) != 0)
      };
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return Module.ctx ? 1 /* a new GLUT window ID for the created context */ : 0 /* failure */;
    }

  function _glutInit(argcp, argv) {
      // Ignore arguments
      GLUT.initTime = Date.now();
  
      var isTouchDevice = 'ontouchstart' in document.documentElement;
  
      window.addEventListener("keydown", GLUT.onKeydown, true);
      window.addEventListener("keyup", GLUT.onKeyup, true);
      if (isTouchDevice) {
        window.addEventListener("touchmove", GLUT.onMousemove, true);
        window.addEventListener("touchstart", GLUT.onMouseButtonDown, true);
        window.addEventListener("touchend", GLUT.onMouseButtonUp, true);
      } else {
        window.addEventListener("mousemove", GLUT.onMousemove, true);
        window.addEventListener("mousedown", GLUT.onMouseButtonDown, true);
        window.addEventListener("mouseup", GLUT.onMouseButtonUp, true);
        // IE9, Chrome, Safari, Opera
        window.addEventListener("mousewheel", GLUT.onMouseWheel, true);
        // Firefox
        window.addEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
      }
  
      Browser.resizeListeners.push(function(width, height) {
        if (GLUT.reshapeFunc) {
        	Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
        }
      });
  
      __ATEXIT__.push(function() {
        window.removeEventListener("keydown", GLUT.onKeydown, true);
        window.removeEventListener("keyup", GLUT.onKeyup, true);
        if (isTouchDevice) {
          window.removeEventListener("touchmove", GLUT.onMousemove, true);
          window.removeEventListener("touchstart", GLUT.onMouseButtonDown, true);
          window.removeEventListener("touchend", GLUT.onMouseButtonUp, true);
        } else {
          window.removeEventListener("mousemove", GLUT.onMousemove, true);
          window.removeEventListener("mousedown", GLUT.onMouseButtonDown, true);
          window.removeEventListener("mouseup", GLUT.onMouseButtonUp, true);
          // IE9, Chrome, Safari, Opera
          window.removeEventListener("mousewheel", GLUT.onMouseWheel, true);
          // Firefox
          window.removeEventListener("DOMMouseScroll", GLUT.onMouseWheel, true);
        }
        Module["canvas"].width = Module["canvas"].height = 1;
      });
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _glutDisplayFunc(func) {
      GLUT.displayFunc = func;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___gxx_personality_v0() {
    }

  function ___cxa_guard_release() {}


  function _glVertex2f(x, y, z) {
      assert(GLImmediate.mode >= 0); // must be in begin/end
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = x;
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = y;
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = z || 0;
      assert(GLImmediate.vertexCounter << 2 < GL.MAX_TEMP_BUFFER_SIZE);
      GLImmediate.addRendererComponent(GLImmediate.VERTEX, 3, GLctx.FLOAT);
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}

  function _glutIdleFunc(func) {
      function callback() {
        if (GLUT.idleFunc) {
          Runtime.dynCall('v', GLUT.idleFunc);
          Browser.safeSetTimeout(callback, 4); // HTML spec specifies a 4ms minimum delay on the main thread; workers might get more, but we standardize here
        }
      }
      if (!GLUT.idleFunc) {
        Browser.safeSetTimeout(callback, 0);
      }
      GLUT.idleFunc = func;
    }

  function _glPointSize() {
  Module['printErr']('missing function: glPointSize'); abort(-1);
  }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _glLoadIdentity() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[GLImmediate.currentMatrix]);
    }

  function _glRasterPos2i() {
  Module['printErr']('missing function: glRasterPos2i'); abort(-1);
  }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  function _emscripten_glColor4f(r, g, b, a) {
      r = Math.max(Math.min(r, 1), 0);
      g = Math.max(Math.min(g, 1), 0);
      b = Math.max(Math.min(b, 1), 0);
      a = Math.max(Math.min(a, 1), 0);
  
      // TODO: make ub the default, not f, save a few mathops
      if (GLImmediate.mode >= 0) {
        var start = GLImmediate.vertexCounter << 2;
        GLImmediate.vertexDataU8[start + 0] = r * 255;
        GLImmediate.vertexDataU8[start + 1] = g * 255;
        GLImmediate.vertexDataU8[start + 2] = b * 255;
        GLImmediate.vertexDataU8[start + 3] = a * 255;
        GLImmediate.vertexCounter++;
        GLImmediate.addRendererComponent(GLImmediate.COLOR, 4, GLctx.UNSIGNED_BYTE);
      } else {
        GLImmediate.clientColor[0] = r;
        GLImmediate.clientColor[1] = g;
        GLImmediate.clientColor[2] = b;
        GLImmediate.clientColor[3] = a;
      }
    }function _glColor3f(r, g, b) {
      _emscripten_glColor4f(r, g, b, 1);
    }

  
  
  function _glutPostRedisplay() {
      if (GLUT.displayFunc && !GLUT.requestedAnimationFrame) {
        GLUT.requestedAnimationFrame = true;
        Browser.requestAnimationFrame(function() {
          GLUT.requestedAnimationFrame = false;
          Browser.mainLoop.runIter(function() {
            Runtime.dynCall('v', GLUT.displayFunc);
          });
        });
      }
    }function _glutReshapeWindow(width, height) {
      GLUT.cancelFullScreen();
      Browser.setCanvasSize(width, height);
      if (GLUT.reshapeFunc) {
        Runtime.dynCall('vii', GLUT.reshapeFunc, [width, height]);
      }
      _glutPostRedisplay();
    }function _glutMainLoop() {
      _glutReshapeWindow(Module['canvas'].width, Module['canvas'].height);
      _glutPostRedisplay();
      throw 'SimulateInfiniteLoop';
    }

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  function _emscripten_glOrtho(left, right, bottom, top_, nearVal, farVal) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.multiply(GLImmediate.matrix[GLImmediate.currentMatrix],
          GLImmediate.matrixLib.mat4.ortho(left, right, bottom, top_, nearVal, farVal));
    }function _gluOrtho2D(left, right, bottom, top) {
      _emscripten_glOrtho(left, right, bottom, top, -1, 1);
    }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _glPushMatrix() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixStack[GLImmediate.currentMatrix].push(
          Array.prototype.slice.call(GLImmediate.matrix[GLImmediate.currentMatrix]));
    }

  function _glMatrixMode(mode) {
      if (mode == 0x1700 /* GL_MODELVIEW */) {
        GLImmediate.currentMatrix = 0/*m*/;
      } else if (mode == 0x1701 /* GL_PROJECTION */) {
        GLImmediate.currentMatrix = 1/*p*/;
      } else if (mode == 0x1702) { // GL_TEXTURE
        GLImmediate.useTextureMatrix = true;
        GLImmediate.currentMatrix = 2/*t*/ + GLImmediate.clientActiveTexture;
      } else {
        throw "Wrong mode " + mode + " passed to glMatrixMode";
      }
    }

  function _glEnd() {
      GLImmediate.prepareClientAttributes(GLImmediate.rendererComponents[GLImmediate.VERTEX], true);
      GLImmediate.firstVertex = 0;
      GLImmediate.lastVertex = GLImmediate.vertexCounter / (GLImmediate.stride >> 2);
      GLImmediate.flush();
      GLImmediate.disableBeginEndClientAttributes();
      GLImmediate.mode = -1;
  
      // Pop the old state:
      GLImmediate.enabledClientAttributes = GLImmediate.enabledClientAttributes_preBegin;
      GLImmediate.clientAttributes = GLImmediate.clientAttributes_preBegin;
      GLImmediate.currentRenderer = null; // The set of active client attributes changed, we must re-lookup the renderer to use.
      GLImmediate.modifiedClientAttributes = true;
    }

  function _glutBitmapCharacter() {
  Module['printErr']('missing function: glutBitmapCharacter'); abort(-1);
  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffer) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glutKeyboardFunc(func) {
      GLUT.keyboardFunc = func;
    }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;

  function _glutBitmap9By15() {
  Module['printErr']('missing function: glutBitmap9By15'); abort(-1);
  }

Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
GLImmediate.setupFuncs(); Browser.moduleContextCreatedCallbacks.push(function() { GLImmediate.init() });;
var GLctx; GL.init();
GLEmulation.init();;
/* flush anything remaining in the buffer during shutdown */ __ATEXIT__.push(function() { var fflush = Module["_fflush"]; if (fflush) fflush(0); var printChar = ___syscall146.printChar; if (!printChar) return; var buffers = ___syscall146.buffers; if (buffers[1].length) printChar(1, 10); if (buffers[2].length) printChar(2, 10); });;
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vid": nullFunc_vid, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_vid": invoke_vid, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "___cxa_guard_acquire": ___cxa_guard_acquire, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_glRasterPos2i": _glRasterPos2i, "_glBindBuffer": _glBindBuffer, "_clock_gettime": _clock_gettime, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_glutReshapeWindow": _glutReshapeWindow, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "___cxa_begin_catch": ___cxa_begin_catch, "_glCreateShader": _glCreateShader, "_glutSwapBuffers": _glutSwapBuffers, "_sysconf": _sysconf, "_glLoadIdentity": _glLoadIdentity, "_glShaderSource": _glShaderSource, "___cxa_atexit": ___cxa_atexit, "_pthread_cleanup_push": _pthread_cleanup_push, "_glGetBooleanv": _glGetBooleanv, "_glutCreateWindow": _glutCreateWindow, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_glHint": _glHint, "_glutDisplayFunc": _glutDisplayFunc, "_glBegin": _glBegin, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_guard_release": ___cxa_guard_release, "_glutInitDisplayMode": _glutInitDisplayMode, "___setErrNo": ___setErrNo, "___resumeException": ___resumeException, "_glPointSize": _glPointSize, "___cxa_call_unexpected": ___cxa_call_unexpected, "_pthread_once": _pthread_once, "_glGetIntegerv": _glGetIntegerv, "_glEnable": _glEnable, "emscriptenWebGLGet": emscriptenWebGLGet, "_emscripten_get_now": _emscripten_get_now, "_glAttachShader": _glAttachShader, "___lock": ___lock, "___syscall6": ___syscall6, "_time": _time, "_glColor3f": _glColor3f, "_glDetachShader": _glDetachShader, "_exit": _exit, "_glGetString": _glGetString, "___syscall54": ___syscall54, "_glVertex2f": _glVertex2f, "___cxa_allocate_exception": ___cxa_allocate_exception, "_glVertexAttribPointer": _glVertexAttribPointer, "_emscripten_glOrtho": _emscripten_glOrtho, "_glIsEnabled": _glIsEnabled, "___cxa_end_catch": ___cxa_end_catch, "_glGetFloatv": _glGetFloatv, "_pthread_getspecific": _pthread_getspecific, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_glutPostRedisplay": _glutPostRedisplay, "_glutMouseFunc": _glutMouseFunc, "_pthread_key_create": _pthread_key_create, "_glActiveTexture": _glActiveTexture, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_abort": _abort, "_glutMainLoop": _glutMainLoop, "___cxa_pure_virtual": ___cxa_pure_virtual, "_glutIdleFunc": _glutIdleFunc, "_glutKeyboardFunc": _glutKeyboardFunc, "___gxx_personality_v0": ___gxx_personality_v0, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "_glLinkProgram": _glLinkProgram, "_glutInitWindowSize": _glutInitWindowSize, "_glClear": _glClear, "_glMatrixMode": _glMatrixMode, "__exit": __exit, "_glBindAttribLocation": _glBindAttribLocation, "_emscripten_glColor4f": _emscripten_glColor4f, "_pthread_self": _pthread_self, "_glutBitmapCharacter": _glutBitmapCharacter, "_glEnd": _glEnd, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_gluOrtho2D": _gluOrtho2D, "_pthread_setspecific": _pthread_setspecific, "___cxa_throw": ___cxa_throw, "_glutInit": _glutInit, "_glDisable": _glDisable, "_glPushMatrix": _glPushMatrix, "_atexit": _atexit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle, "_glutBitmap9By15": _glutBitmap9By15 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _glutBitmap9By15=env._glutBitmap9By15|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vid=env.invoke_vid;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _glRasterPos2i=env._glRasterPos2i;
  var _glBindBuffer=env._glBindBuffer;
  var _clock_gettime=env._clock_gettime;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _glutReshapeWindow=env._glutReshapeWindow;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _glCreateShader=env._glCreateShader;
  var _glutSwapBuffers=env._glutSwapBuffers;
  var _sysconf=env._sysconf;
  var _glLoadIdentity=env._glLoadIdentity;
  var _glShaderSource=env._glShaderSource;
  var ___cxa_atexit=env.___cxa_atexit;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _glGetBooleanv=env._glGetBooleanv;
  var _glutCreateWindow=env._glutCreateWindow;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _glHint=env._glHint;
  var _glutDisplayFunc=env._glutDisplayFunc;
  var _glBegin=env._glBegin;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _glutInitDisplayMode=env._glutInitDisplayMode;
  var ___setErrNo=env.___setErrNo;
  var ___resumeException=env.___resumeException;
  var _glPointSize=env._glPointSize;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _pthread_once=env._pthread_once;
  var _glGetIntegerv=env._glGetIntegerv;
  var _glEnable=env._glEnable;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var _emscripten_get_now=env._emscripten_get_now;
  var _glAttachShader=env._glAttachShader;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var _time=env._time;
  var _glColor3f=env._glColor3f;
  var _glDetachShader=env._glDetachShader;
  var _exit=env._exit;
  var _glGetString=env._glGetString;
  var ___syscall54=env.___syscall54;
  var _glVertex2f=env._glVertex2f;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _emscripten_glOrtho=env._emscripten_glOrtho;
  var _glIsEnabled=env._glIsEnabled;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _glGetFloatv=env._glGetFloatv;
  var _pthread_getspecific=env._pthread_getspecific;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _glutPostRedisplay=env._glutPostRedisplay;
  var _glutMouseFunc=env._glutMouseFunc;
  var _pthread_key_create=env._pthread_key_create;
  var _glActiveTexture=env._glActiveTexture;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _abort=env._abort;
  var _glutMainLoop=env._glutMainLoop;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _glutIdleFunc=env._glutIdleFunc;
  var _glutKeyboardFunc=env._glutKeyboardFunc;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var _glLinkProgram=env._glLinkProgram;
  var _glutInitWindowSize=env._glutInitWindowSize;
  var _glClear=env._glClear;
  var _glMatrixMode=env._glMatrixMode;
  var __exit=env.__exit;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var _emscripten_glColor4f=env._emscripten_glColor4f;
  var _pthread_self=env._pthread_self;
  var _glutBitmapCharacter=env._glutBitmapCharacter;
  var _glEnd=env._glEnd;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _gluOrtho2D=env._gluOrtho2D;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_throw=env.___cxa_throw;
  var _glutInit=env._glutInit;
  var _glDisable=env._glDisable;
  var _glPushMatrix=env._glPushMatrix;
  var _atexit=env._atexit;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4Vec2C2Eff(6696,0.0,50.0);
 return;
}
function __ZN4Vec2C2Eff($this,$x_,$y_) {
 $this = $this|0;
 $x_ = +$x_;
 $y_ = +$y_;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x_;
 $2 = $y_;
 $3 = $0;
 $4 = $1;
 HEAPF32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $2;
 HEAPF32[$5>>2] = $6;
 STACKTOP = sp;return;
}
function ___cxx_global_var_init_1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5SceneC2Efj(6704,0.01666666753590107,10);
 (___cxa_atexit((60|0),(6704|0),(___dso_handle|0))|0);
 return;
}
function __ZN5SceneC2Efj($this,$dt,$iterations) {
 $this = $this|0;
 $dt = +$dt;
 $iterations = $iterations|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 200|0;
 $6 = sp + 184|0;
 $10 = sp + 168|0;
 $15 = sp + 148|0;
 $18 = sp + 136|0;
 $21 = sp + 124|0;
 $22 = sp + 120|0;
 $23 = sp + 116|0;
 $27 = sp + 100|0;
 $31 = sp + 84|0;
 $35 = sp + 68|0;
 $40 = sp + 48|0;
 $43 = sp + 36|0;
 $46 = sp + 24|0;
 $47 = sp + 20|0;
 $48 = sp + 16|0;
 $50 = $this;
 $51 = $dt;
 $52 = $iterations;
 $53 = $50;
 $54 = $51;
 HEAPF32[$53>>2] = $54;
 $55 = ((($53)) + 4|0);
 $56 = $52;
 HEAP32[$55>>2] = $56;
 $57 = ((($53)) + 8|0);
 $49 = $57;
 $58 = $49;
 $45 = $58;
 $59 = $45;
 $44 = $59;
 $25 = $27;
 $26 = -1;
 $60 = $25;
 HEAP32[$60>>2] = 0;
 $61 = HEAP32[$27>>2]|0;
 HEAP32[$46>>2] = $61;
 $28 = $46;
 HEAP32[$59>>2] = 0;
 $62 = ((($59)) + 4|0);
 $29 = $31;
 $30 = -1;
 $63 = $29;
 HEAP32[$63>>2] = 0;
 $64 = HEAP32[$31>>2]|0;
 HEAP32[$47>>2] = $64;
 $32 = $47;
 HEAP32[$62>>2] = 0;
 $65 = ((($59)) + 8|0);
 $33 = $35;
 $34 = -1;
 $66 = $33;
 HEAP32[$66>>2] = 0;
 $67 = HEAP32[$35>>2]|0;
 HEAP32[$48>>2] = $67;
 $36 = $48;
 $42 = $65;
 HEAP32[$43>>2] = 0;
 $68 = $42;
 $41 = $43;
 $69 = $41;
 $70 = HEAP32[$69>>2]|0;
 $39 = $68;
 HEAP32[$40>>2] = $70;
 $71 = $39;
 $38 = $71;
 $37 = $40;
 $72 = $37;
 $73 = HEAP32[$72>>2]|0;
 HEAP32[$71>>2] = $73;
 $74 = ((($53)) + 20|0);
 $24 = $74;
 $75 = $24;
 $20 = $75;
 $76 = $20;
 $19 = $76;
 $0 = $2;
 $1 = -1;
 $77 = $0;
 HEAP32[$77>>2] = 0;
 $78 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $78;
 $3 = $21;
 HEAP32[$76>>2] = 0;
 $79 = ((($76)) + 4|0);
 $4 = $6;
 $5 = -1;
 $80 = $4;
 HEAP32[$80>>2] = 0;
 $81 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $81;
 $7 = $22;
 HEAP32[$79>>2] = 0;
 $82 = ((($76)) + 8|0);
 $8 = $10;
 $9 = -1;
 $83 = $8;
 HEAP32[$83>>2] = 0;
 $84 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $84;
 $11 = $23;
 $17 = $82;
 HEAP32[$18>>2] = 0;
 $85 = $17;
 $16 = $18;
 $86 = $16;
 $87 = HEAP32[$86>>2]|0;
 $14 = $85;
 HEAP32[$15>>2] = $87;
 $88 = $14;
 $13 = $88;
 $12 = $15;
 $89 = $12;
 $90 = HEAP32[$89>>2]|0;
 HEAP32[$88>>2] = $90;
 STACKTOP = sp;return;
}
function __ZN5SceneD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = ((($3)) + 20|0);
 __THREW__ = 0;
 invoke_vi(61,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = ((($3)) + 8|0);
  __ZNSt3__16vectorIP4BodyNS_9allocatorIS2_EEED2Ev($7);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch_2()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 $10 = ((($3)) + 8|0);
 __THREW__ = 0;
 invoke_vi(62,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $15 = ___cxa_find_matching_catch_3(0|0)|0;
  $16 = tempRet0;
  ___clang_call_terminate($15);
  // unreachable;
 } else {
  $13 = $1;
  $14 = $2;
  ___resumeException($13|0);
  // unreachable;
 }
}
function ___cxx_global_var_init_2() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5ClockC2Ev(6640);
 (___cxa_atexit((63|0),(6640|0),(___dso_handle|0))|0);
 return;
}
function __Z5Mouseiiii($button,$state,$x,$y) {
 $button = $button|0;
 $state = $state|0;
 $x = $x|0;
 $y = $y|0;
 var $$arith = 0, $$overflow = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $b = 0, $b1 = 0, $c = 0, $count = 0, $e = 0.0, $i = 0, $poly = 0, $vertices = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $poly = sp + 64|0;
 $c = sp + 4|0;
 $0 = $button;
 $1 = $state;
 $2 = $x;
 $3 = $y;
 $6 = $2;
 $7 = (+($6|0));
 $8 = $7 / 10.0;
 $9 = (~~(($8)));
 $2 = $9;
 $10 = $3;
 $11 = (+($10|0));
 $12 = $11 / 10.0;
 $13 = (~~(($12)));
 $3 = $13;
 $14 = $1;
 $15 = ($14|0)==(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $0;
 switch ($16|0) {
 case 0:  {
  __ZN12PolygonShapeC2Ev($poly);
  $17 = (+__Z6Randomff(3.0,64.0));
  $18 = (~~(($17))>>>0);
  $count = $18;
  $19 = $count;
  $$arith = $19<<3;
  $$overflow = ($19>>>0)>(536870911);
  $20 = $$overflow ? -1 : $$arith;
  $21 = (__Znaj($20)|0);
  $22 = ($19|0)==(0);
  L6: do {
   if (!($22)) {
    $23 = (($21) + ($19<<3)|0);
    $24 = $21;
    while(1) {
     __THREW__ = 0;
     invoke_vi(64,($24|0));
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      break;
     }
     $27 = ((($24)) + 8|0);
     $28 = ($27|0)==($23|0);
     if ($28) {
      break L6;
     } else {
      $24 = $27;
     }
    }
    $46 = ___cxa_find_matching_catch_2()|0;
    $47 = tempRet0;
    $4 = $46;
    $5 = $47;
    __ZdaPv($21);
    $48 = $4;
    $49 = $5;
    ___resumeException($48|0);
    // unreachable;
   }
  } while(0);
  $vertices = $21;
  $29 = (+__Z6Randomff(5.0,10.0));
  $e = $29;
  $i = 0;
  while(1) {
   $30 = $i;
   $31 = $count;
   $32 = ($30>>>0)<($31>>>0);
   if (!($32)) {
    break;
   }
   $33 = $i;
   $34 = $vertices;
   $35 = (($34) + ($33<<3)|0);
   $36 = $e;
   $37 = -$36;
   $38 = $e;
   $39 = (+__Z6Randomff($37,$38));
   $40 = $e;
   $41 = -$40;
   $42 = $e;
   $43 = (+__Z6Randomff($41,$42));
   __ZN4Vec23SetEff($35,$39,$43);
   $44 = $i;
   $45 = (($44) + 1)|0;
   $i = $45;
  }
  $50 = $vertices;
  $51 = $count;
  __ZN12PolygonShape3SetEP4Vec2j($poly,$50,$51);
  $52 = $2;
  $53 = $3;
  $54 = (__ZN5Scene3AddEP5Shapejj(6704,$poly,$52,$53)|0);
  $b = $54;
  $55 = $b;
  $56 = (+__Z6Randomff(-3.1415927410125732,3.1415927410125732));
  __ZN4Body9SetOrientEf($55,$56);
  $57 = $b;
  $58 = ((($57)) + 60|0);
  HEAPF32[$58>>2] = 0.20000000298023224;
  $59 = $b;
  $60 = ((($59)) + 56|0);
  HEAPF32[$60>>2] = 0.20000000298023224;
  $61 = $b;
  $62 = ((($61)) + 52|0);
  HEAPF32[$62>>2] = 0.40000000596046448;
  $63 = $vertices;
  $64 = ($63|0)==(0|0);
  if ($64) {
   STACKTOP = sp;return;
  }
  __ZdaPv($63);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $65 = (+__Z6Randomff(1.0,3.0));
  __ZN6CircleC2Ef($c,$65);
  $66 = $2;
  $67 = $3;
  $68 = (__ZN5Scene3AddEP5Shapejj(6704,$c,$66,$67)|0);
  $b1 = $68;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZN12PolygonShapeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN5ShapeC2Ev($1);
 $2 = 304;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 32|0);
 $4 = ((($3)) + 512|0);
 $5 = $3;
 while(1) {
  __ZN4Vec2C2Ev($5);
  $6 = ((($5)) + 8|0);
  $7 = ($6|0)==($4|0);
  if ($7) {
   break;
  } else {
   $5 = $6;
  }
 }
 $8 = ((($1)) + 544|0);
 $9 = ((($8)) + 512|0);
 $10 = $8;
 while(1) {
  __ZN4Vec2C2Ev($10);
  $11 = ((($10)) + 8|0);
  $12 = ($11|0)==($9|0);
  if ($12) {
   break;
  } else {
   $10 = $11;
  }
 }
 STACKTOP = sp;return;
}
function __Z6Randomff($l,$h) {
 $l = +$l;
 $h = +$h;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $l;
 $1 = $h;
 $2 = (_rand()|0);
 $3 = (+($2|0));
 $a = $3;
 $4 = $a;
 $5 = $4 / 2147483648.0;
 $a = $5;
 $6 = $1;
 $7 = $0;
 $8 = $6 - $7;
 $9 = $a;
 $10 = $8 * $9;
 $11 = $0;
 $12 = $10 + $11;
 $a = $12;
 $13 = $a;
 STACKTOP = sp;return (+$13);
}
function __ZN4Vec2C2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN4Vec23SetEff($this,$x_,$y_) {
 $this = $this|0;
 $x_ = +$x_;
 $y_ = +$y_;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $x_;
 $2 = $y_;
 $3 = $0;
 $4 = $1;
 HEAPF32[$3>>2] = $4;
 $5 = $2;
 $6 = ((($3)) + 4|0);
 HEAPF32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN12PolygonShape3SetEP4Vec2j($this,$vertices,$count) {
 $this = $this|0;
 $vertices = $vertices|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0;
 var $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $c = 0.0, $e1 = 0, $e2 = 0;
 var $face = 0, $highestXCoord = 0.0, $hull = 0, $i = 0, $i1 = 0, $i13 = 0, $i2 = 0, $i24 = 0, $indexHull = 0, $nextHullIndex = 0, $or$cond = 0, $outCount = 0, $rightMost = 0, $x = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 392|0;
 $12 = sp + 348|0;
 $13 = sp + 344|0;
 $hull = sp + 72|0;
 $e1 = sp + 48|0;
 $e2 = sp + 40|0;
 $face = sp + 16|0;
 $14 = sp + 8|0;
 $9 = $this;
 $10 = $vertices;
 $11 = $count;
 $15 = $9;
 $16 = $11;
 $17 = ($16>>>0)>(2);
 $18 = $11;
 $19 = ($18>>>0)<=(64);
 $or$cond = $17 & $19;
 if (!($or$cond)) {
  ___assert_fail((1124|0),(1165|0),221,(1194|0));
  // unreachable;
 }
 $20 = $11;
 HEAP32[$12>>2] = $20;
 HEAP32[$13>>2] = 64;
 $6 = $12;
 $7 = $13;
 $21 = $6;
 $22 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $21;
 $4 = $22;
 $23 = $4;
 $24 = $3;
 $0 = $5;
 $1 = $23;
 $2 = $24;
 $25 = $1;
 $26 = HEAP32[$25>>2]|0;
 $27 = $2;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($26|0)<($28|0);
 $30 = $4;
 $31 = $3;
 $32 = $29 ? $30 : $31;
 $33 = HEAP32[$32>>2]|0;
 $11 = $33;
 $rightMost = 0;
 $34 = $10;
 $35 = +HEAPF32[$34>>2];
 $highestXCoord = $35;
 $i = 1;
 while(1) {
  $36 = $i;
  $37 = $11;
  $38 = ($36>>>0)<($37>>>0);
  if (!($38)) {
   break;
  }
  $39 = $i;
  $40 = $10;
  $41 = (($40) + ($39<<3)|0);
  $42 = +HEAPF32[$41>>2];
  $x = $42;
  $43 = $x;
  $44 = $highestXCoord;
  $45 = $43 > $44;
  $46 = $x;
  if ($45) {
   $highestXCoord = $46;
   $47 = $i;
   $rightMost = $47;
  } else {
   $48 = $highestXCoord;
   $49 = $46 == $48;
   if ($49) {
    $50 = $i;
    $51 = $10;
    $52 = (($51) + ($50<<3)|0);
    $53 = ((($52)) + 4|0);
    $54 = +HEAPF32[$53>>2];
    $55 = $rightMost;
    $56 = $10;
    $57 = (($56) + ($55<<3)|0);
    $58 = ((($57)) + 4|0);
    $59 = +HEAPF32[$58>>2];
    $60 = $54 < $59;
    if ($60) {
     $61 = $i;
     $rightMost = $61;
    }
   }
  }
  $62 = $i;
  $63 = (($62) + 1)|0;
  $i = $63;
 }
 $outCount = 0;
 $64 = $rightMost;
 $indexHull = $64;
 while(1) {
  $65 = $indexHull;
  $66 = $outCount;
  $67 = (($hull) + ($66<<2)|0);
  HEAP32[$67>>2] = $65;
  $nextHullIndex = 0;
  $i1 = 1;
  while(1) {
   $68 = $i1;
   $69 = $11;
   $70 = ($68|0)<($69|0);
   if (!($70)) {
    break;
   }
   $71 = $nextHullIndex;
   $72 = $indexHull;
   $73 = ($71|0)==($72|0);
   if ($73) {
    $74 = $i1;
    $nextHullIndex = $74;
   } else {
    $75 = $nextHullIndex;
    $76 = $10;
    $77 = (($76) + ($75<<3)|0);
    $78 = $outCount;
    $79 = (($hull) + ($78<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $10;
    $82 = (($81) + ($80<<3)|0);
    __ZNK4Vec2miERKS_($e1,$77,$82);
    $83 = $i1;
    $84 = $10;
    $85 = (($84) + ($83<<3)|0);
    $86 = $outCount;
    $87 = (($hull) + ($86<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $10;
    $90 = (($89) + ($88<<3)|0);
    __ZNK4Vec2miERKS_($e2,$85,$90);
    $91 = (+__Z5CrossRK4Vec2S1_($e1,$e2));
    $c = $91;
    $92 = $c;
    $93 = $92 < 0.0;
    if ($93) {
     $94 = $i1;
     $nextHullIndex = $94;
    }
    $95 = $c;
    $96 = $95 == 0.0;
    if ($96) {
     $97 = (+__ZNK4Vec26LenSqrEv($e2));
     $98 = (+__ZNK4Vec26LenSqrEv($e1));
     $99 = $97 > $98;
     if ($99) {
      $100 = $i1;
      $nextHullIndex = $100;
     }
    }
   }
   $101 = $i1;
   $102 = (($101) + 1)|0;
   $i1 = $102;
  }
  $103 = $outCount;
  $104 = (($103) + 1)|0;
  $outCount = $104;
  $105 = $nextHullIndex;
  $indexHull = $105;
  $106 = $nextHullIndex;
  $107 = $rightMost;
  $108 = ($106|0)==($107|0);
  if ($108) {
   break;
  }
 }
 $109 = $outCount;
 $110 = ((($15)) + 28|0);
 HEAP32[$110>>2] = $109;
 $i2 = 0;
 while(1) {
  $111 = $i2;
  $112 = ((($15)) + 28|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($111>>>0)<($113>>>0);
  if (!($114)) {
   break;
  }
  $115 = $i2;
  $116 = ((($15)) + 32|0);
  $117 = (($116) + ($115<<3)|0);
  $118 = $i2;
  $119 = (($hull) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $10;
  $122 = (($121) + ($120<<3)|0);
  ;HEAP32[$117>>2]=HEAP32[$122>>2]|0;HEAP32[$117+4>>2]=HEAP32[$122+4>>2]|0;
  $123 = $i2;
  $124 = (($123) + 1)|0;
  $i2 = $124;
 }
 $i13 = 0;
 while(1) {
  $125 = $i13;
  $126 = ((($15)) + 28|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($125>>>0)<($127>>>0);
  if (!($128)) {
   label = 31;
   break;
  }
  $129 = $i13;
  $130 = (($129) + 1)|0;
  $131 = ((($15)) + 28|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($130>>>0)<($132>>>0);
  $134 = $i13;
  $135 = (($134) + 1)|0;
  $136 = $133 ? $135 : 0;
  $i24 = $136;
  $137 = $i24;
  $138 = ((($15)) + 32|0);
  $139 = (($138) + ($137<<3)|0);
  $140 = $i13;
  $141 = ((($15)) + 32|0);
  $142 = (($141) + ($140<<3)|0);
  __ZNK4Vec2miERKS_($face,$139,$142);
  $143 = (+__ZNK4Vec26LenSqrEv($face));
  $144 = $143 > 9.9999990510468705E-9;
  if (!($144)) {
   label = 29;
   break;
  }
  $145 = $i13;
  $146 = ((($15)) + 544|0);
  $147 = (($146) + ($145<<3)|0);
  $148 = ((($face)) + 4|0);
  $149 = +HEAPF32[$148>>2];
  $150 = +HEAPF32[$face>>2];
  $151 = -$150;
  __ZN4Vec2C2Eff($14,$149,$151);
  ;HEAP32[$147>>2]=HEAP32[$14>>2]|0;HEAP32[$147+4>>2]=HEAP32[$14+4>>2]|0;
  $152 = $i13;
  $153 = ((($15)) + 544|0);
  $154 = (($153) + ($152<<3)|0);
  __ZN4Vec29NormalizeEv($154);
  $155 = $i13;
  $156 = (($155) + 1)|0;
  $i13 = $156;
 }
 if ((label|0) == 29) {
  ___assert_fail((1198|0),(1165|0),302,(1194|0));
  // unreachable;
 }
 else if ((label|0) == 31) {
  STACKTOP = sp;return;
 }
}
function __ZN6CircleC2Ef($this,$r) {
 $this = $this|0;
 $r = +$r;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $r;
 $2 = $0;
 __ZN5ShapeC2Ev($2);
 $3 = 368;
 HEAP32[$2>>2] = $3;
 $4 = $1;
 $5 = ((($2)) + 8|0);
 HEAPF32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function __Z8Keyboardhii($key,$x,$y) {
 $key = $key|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $key;
 $1 = $x;
 $2 = $y;
 $3 = $0;
 $4 = $3&255;
 switch ($4|0) {
 case 27:  {
  _exit(0);
  // unreachable;
  break;
 }
 case 32:  {
  HEAP8[7357] = 1;
  break;
 }
 case 102:  {
  $5 = HEAP8[7356]|0;
  $6 = $5&1;
  $7 = $6 ? 0 : 1;
  $8 = $7&1;
  HEAP8[7356] = $8;
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function __Z11PhysicsLoopv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 32|0;
 $8 = sp + 24|0;
 $9 = sp + 16|0;
 $11 = sp + 88|0;
 $15 = sp + 8|0;
 $16 = sp + 40|0;
 $17 = sp;
 _glClear(16640);
 __Z12RenderStringiiPKc(1,2,1032);
 __Z12RenderStringiiPKc(1,4,1062);
 $18 = (__ZN5Clock7ElapsedEv(6640)|0);
 $19 = tempRet0;
 $20 = (+($18>>>0)) + (4294967296.0*(+($19|0)));
 HEAP32[$16>>2] = 1;
 $12 = $15;
 $13 = $16;
 $14 = 0;
 $21 = $12;
 $22 = $13;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)<(0);
 $25 = $24 << 31 >> 31;
 $26 = $21;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = $25;
 $10 = $15;
 $30 = $10;
 $6 = $11;
 $7 = $30;
 $31 = $7;
 $4 = $31;
 $32 = $4;
 $33 = $32;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (___muldi3(($35|0),($38|0),1000000000,0)|0);
 $40 = tempRet0;
 $41 = $8;
 $42 = $41;
 HEAP32[$42>>2] = $39;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = $40;
 $1 = $5;
 $2 = $8;
 $3 = 0;
 $45 = $1;
 $46 = $2;
 $47 = $46;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($47) + 4)|0;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = $45;
 $54 = $53;
 HEAP32[$54>>2] = $49;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = $52;
 $57 = $5;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($57) + 4)|0;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = $9;
 $64 = $63;
 HEAP32[$64>>2] = $59;
 $65 = (($63) + 4)|0;
 $66 = $65;
 HEAP32[$66>>2] = $62;
 $67 = $9;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = (($67) + 4)|0;
 $71 = $70;
 $72 = HEAP32[$71>>2]|0;
 $73 = $17;
 $74 = $73;
 HEAP32[$74>>2] = $69;
 $75 = (($73) + 4)|0;
 $76 = $75;
 HEAP32[$76>>2] = $72;
 $0 = $17;
 $77 = $0;
 $78 = $77;
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78) + 4)|0;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = (+($80>>>0)) + (4294967296.0*(+($83|0)));
 $85 = $20 / $84;
 $86 = +HEAPF64[833];
 $87 = $86 + $85;
 HEAPF64[833] = $87;
 __ZN5Clock5StartEv(6640);
 $88 = +HEAPF64[833];
 $89 = $88;
 $90 = (+__Z5Clampfff(0.0,0.10000000149011612,$89));
 $91 = $90;
 HEAPF64[833] = $91;
 while(1) {
  $92 = +HEAPF64[833];
  $93 = $92 >= 0.01666666753590107;
  if (!($93)) {
   break;
  }
  $94 = HEAP8[7356]|0;
  $95 = $94&1;
  if ($95) {
   $96 = HEAP8[7357]|0;
   $97 = $96&1;
   if ($97) {
    __ZN5Scene4StepEv(6704);
    HEAP8[7357] = 0;
   }
  } else {
   __ZN5Scene4StepEv(6704);
  }
  $98 = +HEAPF64[833];
  $99 = $98 - 0.01666666753590107;
  HEAPF64[833] = $99;
 }
 __ZN5Clock4StopEv(6640);
 __ZN5Scene6RenderEv(6704);
 _glutSwapBuffers();
 STACKTOP = sp;return;
}
function __Z5Clampfff($min,$max,$a) {
 $min = +$min;
 $max = +$max;
 $a = +$a;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $min;
 $2 = $max;
 $3 = $a;
 $4 = $3;
 $5 = $1;
 $6 = $4 < $5;
 do {
  if ($6) {
   $7 = $1;
   $0 = $7;
  } else {
   $8 = $3;
   $9 = $2;
   $10 = $8 > $9;
   if ($10) {
    $11 = $2;
    $0 = $11;
    break;
   } else {
    $12 = $3;
    $0 = $12;
    break;
   }
  }
 } while(0);
 $13 = $0;
 STACKTOP = sp;return (+$13);
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $b = 0, $c = 0, $poly = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 1092|0;
 $c = sp + 1060|0;
 $poly = sp;
 $0 = 0;
 HEAP32[$1>>2] = $argc;
 $2 = $argv;
 $3 = $2;
 _glutInit(($1|0),($3|0));
 _glutInitDisplayMode(2);
 _glutInitWindowSize(800,600);
 (_glutCreateWindow((1092|0))|0);
 _glutDisplayFunc((65|0));
 _glutKeyboardFunc((66|0));
 _glutMouseFunc((67|0));
 _glutIdleFunc((65|0));
 _glMatrixMode(5889);
 _glPushMatrix();
 _glLoadIdentity();
 _gluOrtho2D(0.0,80.0,60.0,0.0);
 _glMatrixMode(5888);
 _glPushMatrix();
 _glLoadIdentity();
 __ZN6CircleC2Ef($c,5.0);
 $4 = (__ZN5Scene3AddEP5Shapejj(6704,$c,40,40)|0);
 $b = $4;
 $5 = $b;
 __ZN4Body9SetStaticEv($5);
 __ZN12PolygonShapeC2Ev($poly);
 __ZN12PolygonShape6SetBoxEff($poly,30.0,1.0);
 $6 = (__ZN5Scene3AddEP5Shapejj(6704,$poly,40,55)|0);
 $b = $6;
 $7 = $b;
 __ZN4Body9SetStaticEv($7);
 $8 = $b;
 __ZN4Body9SetOrientEf($8,0.0);
 _srand(1);
 _glutMainLoop();
 STACKTOP = sp;return 0;
}
function __ZN4Body9SetStaticEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 HEAPF32[$2>>2] = 0.0;
 $3 = ((($1)) + 40|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = ((($1)) + 44|0);
 HEAPF32[$4>>2] = 0.0;
 $5 = ((($1)) + 48|0);
 HEAPF32[$5>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN12PolygonShape6SetBoxEff($this,$hw,$hh) {
 $this = $this|0;
 $hw = +$hw;
 $hh = +$hh;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $hw;
 $2 = $hh;
 $3 = $0;
 $4 = ((($3)) + 28|0);
 HEAP32[$4>>2] = 4;
 $5 = ((($3)) + 32|0);
 $6 = $1;
 $7 = -$6;
 $8 = $2;
 $9 = -$8;
 __ZN4Vec23SetEff($5,$7,$9);
 $10 = ((($3)) + 32|0);
 $11 = ((($10)) + 8|0);
 $12 = $1;
 $13 = $2;
 $14 = -$13;
 __ZN4Vec23SetEff($11,$12,$14);
 $15 = ((($3)) + 32|0);
 $16 = ((($15)) + 16|0);
 $17 = $1;
 $18 = $2;
 __ZN4Vec23SetEff($16,$17,$18);
 $19 = ((($3)) + 32|0);
 $20 = ((($19)) + 24|0);
 $21 = $1;
 $22 = -$21;
 $23 = $2;
 __ZN4Vec23SetEff($20,$22,$23);
 $24 = ((($3)) + 544|0);
 __ZN4Vec23SetEff($24,0.0,-1.0);
 $25 = ((($3)) + 544|0);
 $26 = ((($25)) + 8|0);
 __ZN4Vec23SetEff($26,1.0,0.0);
 $27 = ((($3)) + 544|0);
 $28 = ((($27)) + 16|0);
 __ZN4Vec23SetEff($28,0.0,1.0);
 $29 = ((($3)) + 544|0);
 $30 = ((($29)) + 24|0);
 __ZN4Vec23SetEff($30,-1.0,0.0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP4BodyNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIP4BodyNS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__113__vector_baseIP4BodyNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -4|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = ((($55)) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 4)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8ManifoldNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI8ManifoldNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI8ManifoldNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 12|0;
 $32 = sp + 4|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = ((($40)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = ((($45)) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = ((($40)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -52|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = ((($55)) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = ((($61)) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 52)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZN5ShapeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 336;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 12|0);
 __ZN4Mat2C2Ev($3);
 STACKTOP = sp;return;
}
function __ZNK12PolygonShape5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $poly = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(1056)|0);
 _memset(($4|0),0,1056)|0;
 __THREW__ = 0;
 invoke_vi(68,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = tempRet0;
  $1 = $30;
  $2 = $31;
  __ZdlPv($4);
  $32 = $1;
  $33 = $2;
  ___resumeException($32|0);
  // unreachable;
 }
 $poly = $4;
 $7 = $poly;
 $8 = ((($7)) + 12|0);
 $9 = ((($3)) + 12|0);
 ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$9+12>>2]|0;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ((($3)) + 28|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $poly;
  $16 = ((($15)) + 32|0);
  $17 = (($16) + ($14<<3)|0);
  $18 = $i;
  $19 = ((($3)) + 32|0);
  $20 = (($19) + ($18<<3)|0);
  ;HEAP32[$17>>2]=HEAP32[$20>>2]|0;HEAP32[$17+4>>2]=HEAP32[$20+4>>2]|0;
  $21 = $i;
  $22 = $poly;
  $23 = ((($22)) + 544|0);
  $24 = (($23) + ($21<<3)|0);
  $25 = $i;
  $26 = ((($3)) + 544|0);
  $27 = (($26) + ($25<<3)|0);
  ;HEAP32[$24>>2]=HEAP32[$27>>2]|0;HEAP32[$24+4>>2]=HEAP32[$27+4>>2]|0;
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 $34 = ((($3)) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $poly;
 $37 = ((($36)) + 28|0);
 HEAP32[$37>>2] = $35;
 $38 = $poly;
 STACKTOP = sp;return ($38|0);
}
function __ZN12PolygonShape10InitializeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vid[$4 & 127]($1,1.0);
 STACKTOP = sp;return;
}
function __ZN12PolygonShape11ComputeMassEf($this,$density) {
 $this = $this|0;
 $density = +$density;
 var $0 = 0, $1 = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $D = 0.0, $I = 0.0, $area = 0.0, $c = 0, $i = 0, $i1 = 0, $i2 = 0, $intx2 = 0.0, $inty2 = 0.0, $k_inv3 = 0.0, $p1 = 0, $p2 = 0, $triangleArea = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 80|0;
 $p1 = sp + 56|0;
 $p2 = sp + 40|0;
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 $0 = $this;
 $1 = $density;
 $4 = $0;
 __ZN4Vec2C2Eff($c,0.0,0.0);
 $area = 0.0;
 $I = 0.0;
 $k_inv3 = 0.3333333432674408;
 $i1 = 0;
 while(1) {
  $5 = $i1;
  $6 = ((($4)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $i1;
  $10 = ((($4)) + 32|0);
  $11 = (($10) + ($9<<3)|0);
  ;HEAP32[$p1>>2]=HEAP32[$11>>2]|0;HEAP32[$p1+4>>2]=HEAP32[$11+4>>2]|0;
  $12 = $i1;
  $13 = (($12) + 1)|0;
  $14 = ((($4)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($13>>>0)<($15>>>0);
  $17 = $i1;
  $18 = (($17) + 1)|0;
  $19 = $16 ? $18 : 0;
  $i2 = $19;
  $20 = $i2;
  $21 = ((($4)) + 32|0);
  $22 = (($21) + ($20<<3)|0);
  ;HEAP32[$p2>>2]=HEAP32[$22>>2]|0;HEAP32[$p2+4>>2]=HEAP32[$22+4>>2]|0;
  $23 = (+__Z5CrossRK4Vec2S1_($p1,$p2));
  $D = $23;
  $24 = $D;
  $25 = 0.5 * $24;
  $triangleArea = $25;
  $26 = $triangleArea;
  $27 = $area;
  $28 = $27 + $26;
  $area = $28;
  $29 = $triangleArea;
  $30 = $29 * 0.3333333432674408;
  __ZNK4Vec2plERKS_($3,$p1,$p2);
  __ZmlfRK4Vec2($2,$30,$3);
  __ZN4Vec2pLERKS_($c,$2);
  $31 = +HEAPF32[$p1>>2];
  $32 = +HEAPF32[$p1>>2];
  $33 = $31 * $32;
  $34 = +HEAPF32[$p2>>2];
  $35 = +HEAPF32[$p1>>2];
  $36 = $34 * $35;
  $37 = $33 + $36;
  $38 = +HEAPF32[$p2>>2];
  $39 = +HEAPF32[$p2>>2];
  $40 = $38 * $39;
  $41 = $37 + $40;
  $intx2 = $41;
  $42 = ((($p1)) + 4|0);
  $43 = +HEAPF32[$42>>2];
  $44 = ((($p1)) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $43 * $45;
  $47 = ((($p2)) + 4|0);
  $48 = +HEAPF32[$47>>2];
  $49 = ((($p1)) + 4|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $48 * $50;
  $52 = $46 + $51;
  $53 = ((($p2)) + 4|0);
  $54 = +HEAPF32[$53>>2];
  $55 = ((($p2)) + 4|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $54 * $56;
  $58 = $52 + $57;
  $inty2 = $58;
  $59 = $D;
  $60 = 0.083333335816860198 * $59;
  $61 = $intx2;
  $62 = $inty2;
  $63 = $61 + $62;
  $64 = $60 * $63;
  $65 = $I;
  $66 = $65 + $64;
  $I = $66;
  $67 = $i1;
  $68 = (($67) + 1)|0;
  $i1 = $68;
 }
 $69 = $area;
 $70 = 1.0 / $69;
 __ZN4Vec2mLEf($c,$70);
 $i = 0;
 while(1) {
  $71 = $i;
  $72 = ((($4)) + 28|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($71>>>0)<($73>>>0);
  if (!($74)) {
   break;
  }
  $75 = $i;
  $76 = ((($4)) + 32|0);
  $77 = (($76) + ($75<<3)|0);
  __ZN4Vec2mIERKS_($77,$c);
  $78 = $i;
  $79 = (($78) + 1)|0;
  $i = $79;
 }
 $80 = $1;
 $81 = $area;
 $82 = $80 * $81;
 $83 = ((($4)) + 4|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($84)) + 44|0);
 HEAPF32[$85>>2] = $82;
 $86 = ((($4)) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($87)) + 44|0);
 $89 = +HEAPF32[$88>>2];
 $90 = $89 != 0.0;
 if ($90) {
  $91 = ((($4)) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ((($92)) + 44|0);
  $94 = +HEAPF32[$93>>2];
  $95 = 1.0 / $94;
  $99 = $95;
 } else {
  $99 = 0.0;
 }
 $96 = ((($4)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ((($97)) + 48|0);
 HEAPF32[$98>>2] = $99;
 $100 = $I;
 $101 = $1;
 $102 = $100 * $101;
 $103 = ((($4)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ((($104)) + 36|0);
 HEAPF32[$105>>2] = $102;
 $106 = ((($4)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ((($107)) + 36|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $109 != 0.0;
 if (!($110)) {
  $119 = 0.0;
  $116 = ((($4)) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ((($117)) + 40|0);
  HEAPF32[$118>>2] = $119;
  STACKTOP = sp;return;
 }
 $111 = ((($4)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ((($112)) + 36|0);
 $114 = +HEAPF32[$113>>2];
 $115 = 1.0 / $114;
 $119 = $115;
 $116 = ((($4)) + 4|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ((($117)) + 40|0);
 HEAPF32[$118>>2] = $119;
 STACKTOP = sp;return;
}
function __ZN12PolygonShape9SetOrientEf($this,$radians) {
 $this = $this|0;
 $radians = +$radians;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $radians;
 $2 = $0;
 $3 = ((($2)) + 12|0);
 $4 = $1;
 __ZN4Mat23SetEf($3,$4);
 STACKTOP = sp;return;
}
function __ZNK12PolygonShape4DrawEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp + 8|0;
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 68|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 72|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($2)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 76|0);
 $14 = +HEAPF32[$13>>2];
 _glColor3f((+$6),(+$10),(+$14));
 _glBegin(2);
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = ((($2)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = ((($2)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($2)) + 12|0);
  $22 = $i;
  $23 = ((($2)) + 32|0);
  $24 = (($23) + ($22<<3)|0);
  __ZNK4Mat2mlERK4Vec2($1,$21,$24);
  __ZNK4Vec2plERKS_($v,$20,$1);
  $25 = +HEAPF32[$v>>2];
  $26 = ((($v)) + 4|0);
  $27 = +HEAPF32[$26>>2];
  _glVertex2f((+$25),(+$27));
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 _glEnd();
 STACKTOP = sp;return;
}
function __ZNK12PolygonShape7GetTypeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZN4Mat2C2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __Z5CrossRK4Vec2S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $3 * $6;
 $8 = $0;
 $9 = ((($8)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1;
 $12 = +HEAPF32[$11>>2];
 $13 = $10 * $12;
 $14 = $7 - $13;
 STACKTOP = sp;return (+$14);
}
function __ZN4Vec2pLERKS_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 + $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = ((($2)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 + $9;
 HEAPF32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZmlfRK4Vec2($agg$result,$s,$v) {
 $agg$result = $agg$result|0;
 $s = +$s;
 $v = $v|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $v;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = $2 * $4;
 $6 = $0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $6 * $9;
 __ZN4Vec2C2Eff($agg$result,$5,$10);
 STACKTOP = sp;return;
}
function __ZNK4Vec2plERKS_($agg$result,$this,$rhs) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 $7 = ((($2)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 + $11;
 __ZN4Vec2C2Eff($agg$result,$6,$12);
 STACKTOP = sp;return;
}
function __ZN4Vec2mLEf($this,$s) {
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$2>>2];
 $5 = $4 * $3;
 HEAPF32[$2>>2] = $5;
 $6 = $1;
 $7 = ((($2)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 * $6;
 HEAPF32[$7>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN4Vec2mIERKS_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$2>>2];
 $6 = $5 - $4;
 HEAPF32[$2>>2] = $6;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = ((($2)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 - $9;
 HEAPF32[$10>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN4Mat23SetEf($this,$radians) {
 $this = $this|0;
 $radians = +$radians;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $c = 0.0;
 var $s = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $radians;
 $4 = $2;
 $5 = $3;
 $1 = $5;
 $6 = $1;
 $7 = (+Math_cos((+$6)));
 $c = $7;
 $8 = $3;
 $0 = $8;
 $9 = $0;
 $10 = (+Math_sin((+$9)));
 $s = $10;
 $11 = $c;
 HEAPF32[$4>>2] = $11;
 $12 = $s;
 $13 = -$12;
 $14 = ((($4)) + 4|0);
 HEAPF32[$14>>2] = $13;
 $15 = $s;
 $16 = ((($4)) + 8|0);
 HEAPF32[$16>>2] = $15;
 $17 = $c;
 $18 = ((($4)) + 12|0);
 HEAPF32[$18>>2] = $17;
 STACKTOP = sp;return;
}
function __ZNK4Mat2mlERK4Vec2($agg$result,$this,$rhs) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $3 = 0.0;
 var $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = ((($2)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 * $11;
 $13 = $6 + $12;
 $14 = ((($2)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $1;
 $17 = +HEAPF32[$16>>2];
 $18 = $15 * $17;
 $19 = ((($2)) + 12|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $1;
 $22 = ((($21)) + 4|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $20 * $23;
 $25 = $18 + $24;
 __ZN4Vec2C2Eff($agg$result,$13,$25);
 STACKTOP = sp;return;
}
function __ZNK4Vec2miERKS_($agg$result,$this,$rhs) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 - $5;
 $7 = ((($2)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 - $11;
 __ZN4Vec2C2Eff($agg$result,$6,$12);
 STACKTOP = sp;return;
}
function __ZNK4Vec26LenSqrEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 * $3;
 $5 = ((($1)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($1)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 $10 = $4 + $9;
 STACKTOP = sp;return (+$10);
}
function __ZN4Vec29NormalizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $invLen = 0.0, $len = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (+__ZNK4Vec23LenEv($1));
 $len = $2;
 $3 = $len;
 $4 = $3 > 9.9999997473787516E-5;
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $len;
 $6 = 1.0 / $5;
 $invLen = $6;
 $7 = $invLen;
 $8 = +HEAPF32[$1>>2];
 $9 = $8 * $7;
 HEAPF32[$1>>2] = $9;
 $10 = $invLen;
 $11 = ((($1)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $12 * $10;
 HEAPF32[$11>>2] = $13;
 STACKTOP = sp;return;
}
function __ZNK4Vec23LenEv($this) {
 $this = $this|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = +HEAPF32[$2>>2];
 $4 = +HEAPF32[$2>>2];
 $5 = $3 * $4;
 $6 = ((($2)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($2)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 * $9;
 $11 = $5 + $10;
 $0 = $11;
 $12 = $0;
 $13 = (+Math_sqrt((+$12)));
 STACKTOP = sp;return (+$13);
}
function __ZNK6Circle5CloneEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__Znwj(28)|0);
 $5 = ((($3)) + 8|0);
 $6 = +HEAPF32[$5>>2];
 __THREW__ = 0;
 invoke_vid(69,($4|0),(+$6));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  $1 = $9;
  $2 = $10;
  __ZdlPv($4);
  $11 = $1;
  $12 = $2;
  ___resumeException($11|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN6Circle10InitializeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vid[$4 & 127]($1,1.0);
 STACKTOP = sp;return;
}
function __ZN6Circle11ComputeMassEf($this,$density) {
 $this = $this|0;
 $density = +$density;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $density;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = 3.1415927410125732 * $4;
 $6 = ((($2)) + 8|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $5 * $7;
 $9 = $1;
 $10 = $8 * $9;
 $11 = ((($2)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 44|0);
 HEAPF32[$13>>2] = $10;
 $14 = ((($2)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 44|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 != 0.0;
 if ($18) {
  $19 = ((($2)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 44|0);
  $22 = +HEAPF32[$21>>2];
  $23 = 1.0 / $22;
  $27 = $23;
 } else {
  $27 = 0.0;
 }
 $24 = ((($2)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 48|0);
 HEAPF32[$26>>2] = $27;
 $28 = ((($2)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 44|0);
 $31 = +HEAPF32[$30>>2];
 $32 = ((($2)) + 8|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $31 * $33;
 $35 = ((($2)) + 8|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $34 * $36;
 $38 = ((($2)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 36|0);
 HEAPF32[$40>>2] = $37;
 $41 = ((($2)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 36|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $44 != 0.0;
 if (!($45)) {
  $54 = 0.0;
  $51 = ((($2)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 40|0);
  HEAPF32[$53>>2] = $54;
  STACKTOP = sp;return;
 }
 $46 = ((($2)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 36|0);
 $49 = +HEAPF32[$48>>2];
 $50 = 1.0 / $49;
 $54 = $50;
 $51 = ((($2)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 40|0);
 HEAPF32[$53>>2] = $54;
 STACKTOP = sp;return;
}
function __ZN6Circle9SetOrientEf($this,$radians) {
 $this = $this|0;
 $radians = +$radians;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $radians;
 STACKTOP = sp;return;
}
function __ZNK6Circle4DrawEv($this) {
 $this = $this|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $9 = 0, $c = 0.0, $i = 0, $inc = 0.0, $k_segments = 0, $p = 0, $r = 0, $s = 0.0, $theta = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp + 24|0;
 $r = sp + 16|0;
 $5 = sp;
 $4 = $this;
 $6 = $4;
 $k_segments = 20;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 68|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($6)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 72|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($6)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 76|0);
 $18 = +HEAPF32[$17>>2];
 _glColor3f((+$10),(+$14),(+$18));
 _glBegin(2);
 $19 = ((($6)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 24|0);
 $22 = +HEAPF32[$21>>2];
 $theta = $22;
 $inc = 0.31415927410125732;
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = ($23>>>0)<(20);
  if (!($24)) {
   break;
  }
  $25 = $inc;
  $26 = $theta;
  $27 = $26 + $25;
  $theta = $27;
  $28 = $theta;
  $3 = $28;
  $29 = $3;
  $30 = (+Math_cos((+$29)));
  $31 = $theta;
  $2 = $31;
  $32 = $2;
  $33 = (+Math_sin((+$32)));
  __ZN4Vec2C2Eff($p,$30,$33);
  $34 = ((($6)) + 8|0);
  $35 = +HEAPF32[$34>>2];
  __ZN4Vec2mLEf($p,$35);
  $36 = ((($6)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  __ZN4Vec2pLERKS_($p,$37);
  $38 = +HEAPF32[$p>>2];
  $39 = ((($p)) + 4|0);
  $40 = +HEAPF32[$39>>2];
  _glVertex2f((+$38),(+$40));
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 _glEnd();
 _glBegin(3);
 __ZN4Vec2C2Eff($r,0.0,1.0);
 $43 = ((($6)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 24|0);
 $46 = +HEAPF32[$45>>2];
 $1 = $46;
 $47 = $1;
 $48 = (+Math_cos((+$47)));
 $c = $48;
 $49 = ((($6)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($50)) + 24|0);
 $52 = +HEAPF32[$51>>2];
 $0 = $52;
 $53 = $0;
 $54 = (+Math_sin((+$53)));
 $s = $54;
 $55 = +HEAPF32[$r>>2];
 $56 = $c;
 $57 = $55 * $56;
 $58 = ((($r)) + 4|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $s;
 $61 = $59 * $60;
 $62 = $57 - $61;
 $63 = +HEAPF32[$r>>2];
 $64 = $s;
 $65 = $63 * $64;
 $66 = ((($r)) + 4|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $c;
 $69 = $67 * $68;
 $70 = $65 + $69;
 __ZN4Vec23SetEff($r,$62,$70);
 $71 = ((($6)) + 8|0);
 $72 = +HEAPF32[$71>>2];
 __ZN4Vec2mLEf($r,$72);
 $73 = ((($6)) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 __ZNK4Vec2plERKS_($5,$r,$74);
 ;HEAP32[$r>>2]=HEAP32[$5>>2]|0;HEAP32[$r+4>>2]=HEAP32[$5+4>>2]|0;
 $75 = ((($6)) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = +HEAPF32[$76>>2];
 $78 = ((($6)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($79)) + 4|0);
 $81 = +HEAPF32[$80>>2];
 _glVertex2f((+$77),(+$81));
 $82 = +HEAPF32[$r>>2];
 $83 = ((($r)) + 4|0);
 $84 = +HEAPF32[$83>>2];
 _glVertex2f((+$82),(+$84));
 _glEnd();
 STACKTOP = sp;return;
}
function __ZNK6Circle7GetTypeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __GLOBAL__sub_I_main_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 ___cxx_global_var_init_1();
 ___cxx_global_var_init_2();
 return;
}
function __GLOBAL__sub_I_Scene_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_3();
 return;
}
function ___cxx_global_var_init_3() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4Vec2C2Eff(6736,0.0,50.0);
 return;
}
function __Z15IntegrateForcesP4Bodyf($b,$dt) {
 $b = $b|0;
 $dt = +$dt;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $b;
 $1 = $dt;
 $5 = $0;
 $6 = ((($5)) + 48|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7 == 0.0;
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = $0;
 $12 = ((($11)) + 28|0);
 $13 = $0;
 $14 = ((($13)) + 48|0);
 $15 = +HEAPF32[$14>>2];
 __ZNK4Vec2mlEf($3,$12,$15);
 __ZNK4Vec2plERKS_($4,$3,6736);
 $16 = $1;
 $17 = $16 / 2.0;
 __ZNK4Vec2mlEf($2,$4,$17);
 __ZN4Vec2pLERKS_($10,$2);
 $18 = $0;
 $19 = ((($18)) + 20|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $0;
 $22 = ((($21)) + 40|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $20 * $23;
 $25 = $1;
 $26 = $25 / 2.0;
 $27 = $24 * $26;
 $28 = $0;
 $29 = ((($28)) + 16|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $30 + $27;
 HEAPF32[$29>>2] = $31;
 STACKTOP = sp;return;
}
function __ZNK4Vec2mlEf($agg$result,$this,$s) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = $3 * $4;
 $6 = ((($2)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = $7 * $8;
 __ZN4Vec2C2Eff($agg$result,$5,$9);
 STACKTOP = sp;return;
}
function __Z17IntegrateVelocityP4Bodyf($b,$dt) {
 $b = $b|0;
 $dt = +$dt;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $b;
 $1 = $dt;
 $3 = $0;
 $4 = ((($3)) + 48|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $5 == 0.0;
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = $0;
 $9 = ((($8)) + 8|0);
 $10 = $1;
 __ZNK4Vec2mlEf($2,$9,$10);
 __ZN4Vec2pLERKS_($7,$2);
 $11 = $0;
 $12 = ((($11)) + 16|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $1;
 $15 = $13 * $14;
 $16 = $0;
 $17 = ((($16)) + 24|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $18 + $15;
 HEAPF32[$17>>2] = $19;
 $20 = $0;
 $21 = $0;
 $22 = ((($21)) + 24|0);
 $23 = +HEAPF32[$22>>2];
 __ZN4Body9SetOrientEf($20,$23);
 $24 = $0;
 $25 = $1;
 __Z15IntegrateForcesP4Bodyf($24,$25);
 STACKTOP = sp;return;
}
function __ZN5Scene4StepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $A = 0, $B = 0, $__annotator$i = 0;
 var $__old_size$i = 0, $b = 0, $i = 0, $i1 = 0, $i2 = 0, $i4 = 0, $i5 = 0, $i6 = 0, $i7 = 0, $j = 0, $j3 = 0, $m = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 321|0;
 $39 = sp;
 $42 = sp + 320|0;
 $m = sp + 36|0;
 $54 = $this;
 $55 = $54;
 $56 = ((($55)) + 20|0);
 $51 = $56;
 $57 = $51;
 $50 = $57;
 $58 = $50;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = HEAP32[$58>>2]|0;
 $62 = $60;
 $63 = $61;
 $64 = (($62) - ($63))|0;
 $65 = (($64|0) / 52)&-1;
 $__old_size$i = $65;
 $48 = $57;
 $66 = $48;
 $67 = HEAP32[$66>>2]|0;
 $46 = $66;
 $47 = $67;
 $68 = $46;
 while(1) {
  $69 = $47;
  $70 = ((($68)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69|0)!=($71|0);
  if (!($72)) {
   break;
  }
  $45 = $68;
  $73 = $45;
  $74 = ((($73)) + 8|0);
  $44 = $74;
  $75 = $44;
  $43 = $75;
  $76 = $43;
  $77 = ((($68)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($78)) + -52|0);
  HEAP32[$77>>2] = $79;
  $36 = $79;
  $80 = $36;
  $40 = $76;
  $41 = $80;
  $81 = $40;
  $82 = $41;
  ;HEAP8[$39>>0]=HEAP8[$42>>0]|0;
  $37 = $81;
  $38 = $82;
 }
 $83 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(70,($57|0),($83|0));
 $84 = __THREW__; __THREW__ = 0;
 $85 = $84&1;
 if ($85) {
  $86 = ___cxa_find_matching_catch_2()|0;
  $87 = tempRet0;
  $52 = $86;
  $53 = $87;
  $88 = $52;
  ___cxa_call_unexpected(($88|0));
  // unreachable;
 }
 $49 = $57;
 $i = 0;
 while(1) {
  $89 = $i;
  $90 = ((($55)) + 8|0);
  $35 = $90;
  $91 = $35;
  $92 = ((($91)) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = HEAP32[$91>>2]|0;
  $95 = $93;
  $96 = $94;
  $97 = (($95) - ($96))|0;
  $98 = (($97|0) / 4)&-1;
  $99 = ($89>>>0)<($98>>>0);
  if (!($99)) {
   break;
  }
  $100 = ((($55)) + 8|0);
  $101 = $i;
  $33 = $100;
  $34 = $101;
  $102 = $33;
  $103 = $34;
  $104 = HEAP32[$102>>2]|0;
  $105 = (($104) + ($103<<2)|0);
  $106 = HEAP32[$105>>2]|0;
  $A = $106;
  $107 = $i;
  $108 = (($107) + 1)|0;
  $j = $108;
  while(1) {
   $109 = $j;
   $110 = ((($55)) + 8|0);
   $32 = $110;
   $111 = $32;
   $112 = ((($111)) + 4|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = HEAP32[$111>>2]|0;
   $115 = $113;
   $116 = $114;
   $117 = (($115) - ($116))|0;
   $118 = (($117|0) / 4)&-1;
   $119 = ($109>>>0)<($118>>>0);
   if (!($119)) {
    break;
   }
   $120 = ((($55)) + 8|0);
   $121 = $j;
   $24 = $120;
   $25 = $121;
   $122 = $24;
   $123 = $25;
   $124 = HEAP32[$122>>2]|0;
   $125 = (($124) + ($123<<2)|0);
   $126 = HEAP32[$125>>2]|0;
   $B = $126;
   $127 = $A;
   $128 = ((($127)) + 48|0);
   $129 = +HEAPF32[$128>>2];
   $130 = $129 == 0.0;
   if ($130) {
    $131 = $B;
    $132 = ((($131)) + 48|0);
    $133 = +HEAPF32[$132>>2];
    $134 = $133 == 0.0;
    if (!($134)) {
     label = 12;
    }
   } else {
    label = 12;
   }
   do {
    if ((label|0) == 12) {
     label = 0;
     $135 = $A;
     $136 = $B;
     __ZN8ManifoldC2EP4BodyS1_($m,$135,$136);
     __ZN8Manifold5SolveEv($m);
     $137 = ((($m)) + 36|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)!=(0);
     if ($139) {
      $140 = ((($55)) + 20|0);
      $13 = $140;
      $14 = $m;
      $141 = $13;
      $142 = ((($141)) + 4|0);
      $143 = HEAP32[$142>>2]|0;
      $12 = $141;
      $144 = $12;
      $145 = ((($144)) + 8|0);
      $11 = $145;
      $146 = $11;
      $10 = $146;
      $147 = $10;
      $148 = HEAP32[$147>>2]|0;
      $149 = ($143|0)!=($148|0);
      if ($149) {
       __ZNSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator$i,$141,1);
       $9 = $141;
       $150 = $9;
       $151 = ((($150)) + 8|0);
       $8 = $151;
       $152 = $8;
       $7 = $152;
       $153 = $7;
       $154 = ((($141)) + 4|0);
       $155 = HEAP32[$154>>2]|0;
       $6 = $155;
       $156 = $6;
       $157 = $14;
       $3 = $153;
       $4 = $156;
       $5 = $157;
       $158 = $4;
       $159 = $5;
       dest=$158; src=$159; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
       __ZNSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
       $160 = ((($141)) + 4|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ((($161)) + 52|0);
       HEAP32[$160>>2] = $162;
       break;
      } else {
       $163 = $14;
       __ZNSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($141,$163);
       break;
      }
     }
    }
   } while(0);
   $164 = $j;
   $165 = (($164) + 1)|0;
   $j = $165;
  }
  $166 = $i;
  $167 = (($166) + 1)|0;
  $i = $167;
 }
 $i1 = 0;
 while(1) {
  $168 = $i1;
  $169 = ((($55)) + 8|0);
  $2 = $169;
  $170 = $2;
  $171 = ((($170)) + 4|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = HEAP32[$170>>2]|0;
  $174 = $172;
  $175 = $173;
  $176 = (($174) - ($175))|0;
  $177 = (($176|0) / 4)&-1;
  $178 = ($168>>>0)<($177>>>0);
  if (!($178)) {
   break;
  }
  $179 = ((($55)) + 8|0);
  $180 = $i1;
  $0 = $179;
  $1 = $180;
  $181 = $0;
  $182 = $1;
  $183 = HEAP32[$181>>2]|0;
  $184 = (($183) + ($182<<2)|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = +HEAPF32[$55>>2];
  __Z15IntegrateForcesP4Bodyf($185,$186);
  $187 = $i1;
  $188 = (($187) + 1)|0;
  $i1 = $188;
 }
 $i2 = 0;
 while(1) {
  $189 = $i2;
  $190 = ((($55)) + 20|0);
  $15 = $190;
  $191 = $15;
  $192 = ((($191)) + 4|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = HEAP32[$191>>2]|0;
  $195 = $193;
  $196 = $194;
  $197 = (($195) - ($196))|0;
  $198 = (($197|0) / 52)&-1;
  $199 = ($189>>>0)<($198>>>0);
  if (!($199)) {
   break;
  }
  $200 = ((($55)) + 20|0);
  $201 = $i2;
  $16 = $200;
  $17 = $201;
  $202 = $16;
  $203 = $17;
  $204 = HEAP32[$202>>2]|0;
  $205 = (($204) + (($203*52)|0)|0);
  __ZN8Manifold10InitializeEv($205);
  $206 = $i2;
  $207 = (($206) + 1)|0;
  $i2 = $207;
 }
 $j3 = 0;
 while(1) {
  $208 = $j3;
  $209 = ((($55)) + 4|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = ($208>>>0)<($210>>>0);
  if (!($211)) {
   break;
  }
  $i4 = 0;
  while(1) {
   $212 = $i4;
   $213 = ((($55)) + 20|0);
   $18 = $213;
   $214 = $18;
   $215 = ((($214)) + 4|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = HEAP32[$214>>2]|0;
   $218 = $216;
   $219 = $217;
   $220 = (($218) - ($219))|0;
   $221 = (($220|0) / 52)&-1;
   $222 = ($212>>>0)<($221>>>0);
   if (!($222)) {
    break;
   }
   $223 = ((($55)) + 20|0);
   $224 = $i4;
   $19 = $223;
   $20 = $224;
   $225 = $19;
   $226 = $20;
   $227 = HEAP32[$225>>2]|0;
   $228 = (($227) + (($226*52)|0)|0);
   __ZN8Manifold12ApplyImpulseEv($228);
   $229 = $i4;
   $230 = (($229) + 1)|0;
   $i4 = $230;
  }
  $231 = $j3;
  $232 = (($231) + 1)|0;
  $j3 = $232;
 }
 $i5 = 0;
 while(1) {
  $233 = $i5;
  $234 = ((($55)) + 8|0);
  $21 = $234;
  $235 = $21;
  $236 = ((($235)) + 4|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = HEAP32[$235>>2]|0;
  $239 = $237;
  $240 = $238;
  $241 = (($239) - ($240))|0;
  $242 = (($241|0) / 4)&-1;
  $243 = ($233>>>0)<($242>>>0);
  if (!($243)) {
   break;
  }
  $244 = ((($55)) + 8|0);
  $245 = $i5;
  $22 = $244;
  $23 = $245;
  $246 = $22;
  $247 = $23;
  $248 = HEAP32[$246>>2]|0;
  $249 = (($248) + ($247<<2)|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = +HEAPF32[$55>>2];
  __Z17IntegrateVelocityP4Bodyf($250,$251);
  $252 = $i5;
  $253 = (($252) + 1)|0;
  $i5 = $253;
 }
 $i6 = 0;
 while(1) {
  $254 = $i6;
  $255 = ((($55)) + 20|0);
  $26 = $255;
  $256 = $26;
  $257 = ((($256)) + 4|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = HEAP32[$256>>2]|0;
  $260 = $258;
  $261 = $259;
  $262 = (($260) - ($261))|0;
  $263 = (($262|0) / 52)&-1;
  $264 = ($254>>>0)<($263>>>0);
  if (!($264)) {
   break;
  }
  $265 = ((($55)) + 20|0);
  $266 = $i6;
  $27 = $265;
  $28 = $266;
  $267 = $27;
  $268 = $28;
  $269 = HEAP32[$267>>2]|0;
  $270 = (($269) + (($268*52)|0)|0);
  __ZN8Manifold20PositionalCorrectionEv($270);
  $271 = $i6;
  $272 = (($271) + 1)|0;
  $i6 = $272;
 }
 $i7 = 0;
 while(1) {
  $273 = $i7;
  $274 = ((($55)) + 8|0);
  $29 = $274;
  $275 = $29;
  $276 = ((($275)) + 4|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = HEAP32[$275>>2]|0;
  $279 = $277;
  $280 = $278;
  $281 = (($279) - ($280))|0;
  $282 = (($281|0) / 4)&-1;
  $283 = ($273>>>0)<($282>>>0);
  if (!($283)) {
   break;
  }
  $284 = ((($55)) + 8|0);
  $285 = $i7;
  $30 = $284;
  $31 = $285;
  $286 = $30;
  $287 = $31;
  $288 = HEAP32[$286>>2]|0;
  $289 = (($288) + ($287<<2)|0);
  $290 = HEAP32[$289>>2]|0;
  $b = $290;
  $291 = $b;
  $292 = ((($291)) + 28|0);
  __ZN4Vec23SetEff($292,0.0,0.0);
  $293 = $b;
  $294 = ((($293)) + 20|0);
  HEAPF32[$294>>2] = 0.0;
  $295 = $i7;
  $296 = (($295) + 1)|0;
  $i7 = $296;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 52)&-1;
 $35 = (($22) + (($34*52)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*52)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 52)&-1;
 $52 = (($43) + (($51*52)|0)|0);
 __ZNKSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN8ManifoldC2EP4BodyS1_($this,$a,$b) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $2;
 HEAP32[$5>>2] = $6;
 $7 = ((($3)) + 12|0);
 __ZN4Vec2C2Ev($7);
 $8 = ((($3)) + 20|0);
 $9 = ((($8)) + 16|0);
 $10 = $8;
 while(1) {
  __ZN4Vec2C2Ev($10);
  $11 = ((($10)) + 8|0);
  $12 = ($11|0)==($9|0);
  if ($12) {
   break;
  } else {
   $10 = $11;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = ((($33)) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 52)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = ((($53)) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 52)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  $79 = $10;
  $80 = $9;
  $81 = $78 ? $79 : $80;
  $82 = HEAP32[$81>>2]|0;
  $20 = $82;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 52)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferI8ManifoldRNS_9allocatorIS1_EEEC2EjjS4_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = ((($__v)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = $2;
 dest=$99; src=$100; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $101 = ((($__v)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($102)) + 52|0);
 HEAP32[$101>>2] = $103;
 __THREW__ = 0;
 invoke_vii(71,($32|0),($__v|0));
 $104 = __THREW__; __THREW__ = 0;
 $105 = $104&1;
 if (!($105)) {
  __ZNSt3__114__split_bufferI8ManifoldRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $106 = ___cxa_find_matching_catch_2()|0;
 $107 = tempRet0;
 $30 = $106;
 $31 = $107;
 __THREW__ = 0;
 invoke_vi(72,($__v|0));
 $108 = __THREW__; __THREW__ = 0;
 $109 = $108&1;
 if ($109) {
  $112 = ___cxa_find_matching_catch_3(0|0)|0;
  $113 = tempRet0;
  ___clang_call_terminate($112);
  // unreachable;
 } else {
  $110 = $30;
  $111 = $31;
  ___resumeException($110|0);
  // unreachable;
 }
}
function __ZNKSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = 82595524;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferI8ManifoldRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = ($63*52)|0;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + (($71*52)|0)|0);
 $73 = ((($36)) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($36)) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + (($76*52)|0)|0);
 $26 = $36;
 $78 = $26;
 $79 = ((($78)) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 52)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + (($51*52)|0)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = ($56*52)|0;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 52)&-1;
 __ZNKSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 52)&-1;
 $39 = (($26) + (($38*52)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 52)&-1;
 $51 = (($42) + (($50*52)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 52)&-1;
 $67 = (($54) + (($66*52)|0)|0);
 __ZNKSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 52)&-1;
 $39 = (($26) + (($38*52)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 52)&-1;
 $55 = (($42) + (($54*52)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*52)|0)|0);
 __ZNKSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI8ManifoldRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -52|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = ((($57)) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 52)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZN5Scene6RenderEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $b = 0, $c = 0, $c5 = 0, $i = 0, $i1 = 0, $i2 = 0, $j = 0, $j4 = 0, $m = 0, $m3 = 0, $n = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 32|0;
 $n = sp + 16|0;
 $c5 = sp;
 $9 = $this;
 $10 = $9;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ((($10)) + 8|0);
  $8 = $12;
  $13 = $8;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$13>>2]|0;
  $17 = $15;
  $18 = $16;
  $19 = (($17) - ($18))|0;
  $20 = (($19|0) / 4)&-1;
  $21 = ($11>>>0)<($20>>>0);
  if (!($21)) {
   break;
  }
  $22 = ((($10)) + 8|0);
  $23 = $i;
  $6 = $22;
  $7 = $23;
  $24 = $6;
  $25 = $7;
  $26 = HEAP32[$24>>2]|0;
  $27 = (($26) + ($25<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $b = $28;
  $29 = $b;
  $30 = ((($29)) + 64|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  FUNCTION_TABLE_vi[$34 & 127]($31);
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 _glPointSize(4.0);
 _glBegin(0);
 _glColor3f(1.0,0.0,0.0);
 $i1 = 0;
 while(1) {
  $37 = $i1;
  $38 = ((($10)) + 20|0);
  $5 = $38;
  $39 = $5;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$39>>2]|0;
  $43 = $41;
  $44 = $42;
  $45 = (($43) - ($44))|0;
  $46 = (($45|0) / 52)&-1;
  $47 = ($37>>>0)<($46>>>0);
  if (!($47)) {
   break;
  }
  $48 = ((($10)) + 20|0);
  $49 = $i1;
  $0 = $48;
  $1 = $49;
  $50 = $0;
  $51 = $1;
  $52 = HEAP32[$50>>2]|0;
  $53 = (($52) + (($51*52)|0)|0);
  $m = $53;
  $j = 0;
  while(1) {
   $54 = $j;
   $55 = $m;
   $56 = ((($55)) + 36|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($54>>>0)<($57>>>0);
   if (!($58)) {
    break;
   }
   $59 = $j;
   $60 = $m;
   $61 = ((($60)) + 20|0);
   $62 = (($61) + ($59<<3)|0);
   ;HEAP32[$c>>2]=HEAP32[$62>>2]|0;HEAP32[$c+4>>2]=HEAP32[$62+4>>2]|0;
   $63 = +HEAPF32[$c>>2];
   $64 = ((($c)) + 4|0);
   $65 = +HEAPF32[$64>>2];
   _glVertex2f((+$63),(+$65));
   $66 = $j;
   $67 = (($66) + 1)|0;
   $j = $67;
  }
  $68 = $i1;
  $69 = (($68) + 1)|0;
  $i1 = $69;
 }
 _glEnd();
 _glPointSize(1.0);
 _glBegin(1);
 _glColor3f(0.0,1.0,0.0);
 $i2 = 0;
 while(1) {
  $70 = $i2;
  $71 = ((($10)) + 20|0);
  $2 = $71;
  $72 = $2;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = HEAP32[$72>>2]|0;
  $76 = $74;
  $77 = $75;
  $78 = (($76) - ($77))|0;
  $79 = (($78|0) / 52)&-1;
  $80 = ($70>>>0)<($79>>>0);
  if (!($80)) {
   break;
  }
  $81 = ((($10)) + 20|0);
  $82 = $i2;
  $3 = $81;
  $4 = $82;
  $83 = $3;
  $84 = $4;
  $85 = HEAP32[$83>>2]|0;
  $86 = (($85) + (($84*52)|0)|0);
  $m3 = $86;
  $87 = $m3;
  $88 = ((($87)) + 12|0);
  ;HEAP32[$n>>2]=HEAP32[$88>>2]|0;HEAP32[$n+4>>2]=HEAP32[$88+4>>2]|0;
  $j4 = 0;
  while(1) {
   $89 = $j4;
   $90 = $m3;
   $91 = ((($90)) + 36|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($89>>>0)<($92>>>0);
   if (!($93)) {
    break;
   }
   $94 = $j4;
   $95 = $m3;
   $96 = ((($95)) + 20|0);
   $97 = (($96) + ($94<<3)|0);
   ;HEAP32[$c5>>2]=HEAP32[$97>>2]|0;HEAP32[$c5+4>>2]=HEAP32[$97+4>>2]|0;
   $98 = +HEAPF32[$c5>>2];
   $99 = ((($c5)) + 4|0);
   $100 = +HEAPF32[$99>>2];
   _glVertex2f((+$98),(+$100));
   __ZN4Vec2mLEf($n,0.75);
   __ZN4Vec2pLERKS_($c5,$n);
   $101 = +HEAPF32[$c5>>2];
   $102 = ((($c5)) + 4|0);
   $103 = +HEAPF32[$102>>2];
   _glVertex2f((+$101),(+$103));
   $104 = $j4;
   $105 = (($104) + 1)|0;
   $j4 = $105;
  }
  $106 = $i2;
  $107 = (($106) + 1)|0;
  $i2 = $107;
 }
 _glEnd();
 STACKTOP = sp;return;
}
function __ZN5Scene3AddEP5Shapejj($this,$shape,$x,$y) {
 $this = $this|0;
 $shape = $shape|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator$i = 0, $b = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 76|0;
 $b = sp + 8|0;
 $12 = $this;
 $13 = $shape;
 $14 = $x;
 $15 = $y;
 $18 = $12;
 $19 = $13;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((1241|0),(1247|0),148,(1278|0));
  // unreachable;
 }
 $21 = (__Znwj(80)|0);
 $22 = $13;
 $23 = $14;
 $24 = $15;
 __THREW__ = 0;
 invoke_viiii(73,($21|0),($22|0),($23|0),($24|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $53 = ___cxa_find_matching_catch_2()|0;
  $54 = tempRet0;
  $16 = $53;
  $17 = $54;
  __ZdlPv($21);
  $55 = $16;
  $56 = $17;
  ___resumeException($55|0);
  // unreachable;
 }
 HEAP32[$b>>2] = $21;
 $27 = ((($18)) + 8|0);
 $10 = $27;
 $11 = $b;
 $28 = $10;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $9 = $28;
 $31 = $9;
 $32 = ((($31)) + 8|0);
 $8 = $32;
 $33 = $8;
 $7 = $33;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($30|0)!=($35|0);
 if ($36) {
  __ZNSt3__16vectorIP4BodyNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i,$28,1);
  $6 = $28;
  $37 = $6;
  $38 = ((($37)) + 8|0);
  $5 = $38;
  $39 = $5;
  $4 = $39;
  $40 = $4;
  $41 = ((($28)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $3 = $42;
  $43 = $3;
  $44 = $11;
  $0 = $40;
  $1 = $43;
  $2 = $44;
  $45 = $1;
  $46 = $2;
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$45>>2] = $47;
  __ZNSt3__16vectorIP4BodyNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $48 = ((($28)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 4|0);
  HEAP32[$48>>2] = $50;
  $52 = HEAP32[$b>>2]|0;
  STACKTOP = sp;return ($52|0);
 } else {
  $51 = $11;
  __ZNSt3__16vectorIP4BodyNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($28,$51);
  $52 = HEAP32[$b>>2]|0;
  STACKTOP = sp;return ($52|0);
 }
 return (0)|0;
}
function __ZNSt3__16vectorIP4BodyNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP4BodyNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP4BodyNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 72|0;
 $23 = sp + 60|0;
 $__v = sp + 12|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = ((($33)) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIP4BodyNS_9allocatorIS2_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = ((($53)) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11>>0]=HEAP8[$14>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  $79 = $10;
  $80 = $9;
  $81 = $78 ? $79 : $80;
  $82 = HEAP32[$81>>2]|0;
  $20 = $82;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIP4BodyRNS_9allocatorIS2_EEEC2EjjS5_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = ((($__v)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = $2;
 $101 = HEAP32[$100>>2]|0;
 HEAP32[$99>>2] = $101;
 $102 = ((($__v)) + 8|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ((($103)) + 4|0);
 HEAP32[$102>>2] = $104;
 __THREW__ = 0;
 invoke_vii(74,($32|0),($__v|0));
 $105 = __THREW__; __THREW__ = 0;
 $106 = $105&1;
 if (!($106)) {
  __ZNSt3__114__split_bufferIP4BodyRNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $107 = ___cxa_find_matching_catch_2()|0;
 $108 = tempRet0;
 $30 = $107;
 $31 = $108;
 __THREW__ = 0;
 invoke_vi(75,($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $113 = ___cxa_find_matching_catch_3(0|0)|0;
  $114 = tempRet0;
  ___clang_call_terminate($113);
  // unreachable;
 } else {
  $111 = $30;
  $112 = $31;
  ___resumeException($111|0);
  // unreachable;
 }
}
function __ZNKSt3__16vectorIP4BodyNS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 77|0;
 $10 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $3 = $24;
 $25 = $3;
 ;HEAP8[$2>>0]=HEAP8[$4>>0]|0;
 $1 = $25;
 $26 = $1;
 $0 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $11 = $18;
 $12 = $19;
 $28 = $11;
 $29 = $12;
 ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
 $8 = $28;
 $9 = $29;
 $30 = $9;
 $31 = $8;
 $5 = $10;
 $6 = $30;
 $7 = $31;
 $32 = $6;
 $33 = HEAP32[$32>>2]|0;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $9;
 $38 = $8;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIP4BodyRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 124|0;
 $8 = sp + 108|0;
 $22 = sp + 52|0;
 $29 = sp + 24|0;
 $34 = sp + 4|0;
 $35 = sp;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = ((($36)) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = ((($46)) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = ((($54)) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<2;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<2)|0);
 $73 = ((($36)) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($36)) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<2)|0);
 $26 = $36;
 $78 = $26;
 $79 = ((($78)) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP4BodyNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIP4BodyNS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIP4BodyNS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP4BodyNS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIP4BodyNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP4BodyNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP4BodyNS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIP4BodyNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP4BodyRNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 8|0;
 $20 = sp + 125|0;
 $26 = sp;
 $29 = sp + 124|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26>>0]=HEAP8[$29>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = ((($38)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = ((($43)) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($38)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -4|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = ((($57)) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_Render_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_13();
 return;
}
function ___cxx_global_var_init_13() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4Vec2C2Eff(6744,0.0,50.0);
 return;
}
function __Z12RenderStringiiPKc($x,$y,$s) {
 $x = $x|0;
 $y = $y|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $l = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $s;
 _glColor3f(0.5,0.5,0.89999997615814208);
 $3 = $0;
 $4 = $1;
 _glRasterPos2i(($3|0),($4|0));
 $5 = $2;
 $6 = (_strlen($5)|0);
 $l = $6;
 $i = 0;
 while(1) {
  $7 = $i;
  $8 = $l;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = $i;
  $12 = (($10) + ($11)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  _glutBitmapCharacter((_glutBitmap9By15|0),($14|0));
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_Precompiled_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_18();
 return;
}
function ___cxx_global_var_init_18() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4Vec2C2Eff(6752,0.0,50.0);
 return;
}
function __GLOBAL__sub_I_Manifold_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_21();
 return;
}
function ___cxx_global_var_init_21() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4Vec2C2Eff(6760,0.0,50.0);
 return;
}
function __ZN8Manifold5SolveEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 63]($5)|0);
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_ii[$15 & 63]($12)|0);
 $17 = (392 + ($16<<3)|0);
 $18 = (($17) + ($9<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$1>>2]|0;
 $21 = ((($1)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 FUNCTION_TABLE_viii[$19 & 127]($1,$20,$22);
 STACKTOP = sp;return;
}
function __ZN8Manifold10InitializeEv($this) {
 $this = $this|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $i = 0, $ra = 0, $rb = 0, $rv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp;
 $10 = sp + 116|0;
 $ra = sp + 64|0;
 $rb = sp + 56|0;
 $rv = sp + 48|0;
 $12 = sp + 40|0;
 $13 = sp + 32|0;
 $14 = sp + 24|0;
 $15 = sp + 16|0;
 $16 = sp + 8|0;
 $11 = $this;
 $17 = $11;
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 60|0);
 $20 = ((($17)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($21)) + 60|0);
 $8 = $19;
 $9 = $22;
 $23 = $8;
 $24 = $9;
 ;HEAP8[$7>>0]=HEAP8[$10>>0]|0;
 $5 = $23;
 $6 = $24;
 $25 = $6;
 $26 = $5;
 $2 = $7;
 $3 = $25;
 $4 = $26;
 $27 = $3;
 $28 = +HEAPF32[$27>>2];
 $29 = $4;
 $30 = +HEAPF32[$29>>2];
 $31 = $28 < $30;
 $32 = $6;
 $33 = $5;
 $34 = $31 ? $32 : $33;
 $35 = +HEAPF32[$34>>2];
 $36 = ((($17)) + 40|0);
 HEAPF32[$36>>2] = $35;
 $37 = HEAP32[$17>>2]|0;
 $38 = ((($37)) + 52|0);
 $39 = +HEAPF32[$38>>2];
 $40 = ((($17)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 52|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $39 * $43;
 $1 = $44;
 $45 = $1;
 $46 = (+Math_sqrt((+$45)));
 $47 = ((($17)) + 48|0);
 HEAPF32[$47>>2] = $46;
 $48 = HEAP32[$17>>2]|0;
 $49 = ((($48)) + 56|0);
 $50 = +HEAPF32[$49>>2];
 $51 = ((($17)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 56|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $50 * $54;
 $0 = $55;
 $56 = $0;
 $57 = (+Math_sqrt((+$56)));
 $58 = ((($17)) + 44|0);
 HEAPF32[$58>>2] = $57;
 $i = 0;
 while(1) {
  $59 = $i;
  $60 = ((($17)) + 36|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($59>>>0)<($61>>>0);
  if (!($62)) {
   break;
  }
  $63 = $i;
  $64 = ((($17)) + 20|0);
  $65 = (($64) + ($63<<3)|0);
  $66 = HEAP32[$17>>2]|0;
  __ZNK4Vec2miERKS_($ra,$65,$66);
  $67 = $i;
  $68 = ((($17)) + 20|0);
  $69 = (($68) + ($67<<3)|0);
  $70 = ((($17)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  __ZNK4Vec2miERKS_($rb,$69,$71);
  $72 = ((($17)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 8|0);
  $75 = ((($17)) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($76)) + 16|0);
  $78 = +HEAPF32[$77>>2];
  __Z5CrossfRK4Vec2($12,$78,$rb);
  __ZNK4Vec2plERKS_($13,$74,$12);
  $79 = HEAP32[$17>>2]|0;
  $80 = ((($79)) + 8|0);
  __ZNK4Vec2miERKS_($14,$13,$80);
  $81 = HEAP32[$17>>2]|0;
  $82 = ((($81)) + 16|0);
  $83 = +HEAPF32[$82>>2];
  __Z5CrossfRK4Vec2($15,$83,$ra);
  __ZNK4Vec2miERKS_($rv,$14,$15);
  $84 = (+__ZNK4Vec26LenSqrEv($rv));
  __ZmlfRK4Vec2($16,0.01666666753590107,6760);
  $85 = (+__ZNK4Vec26LenSqrEv($16));
  $86 = $85 + 9.9999997473787516E-5;
  $87 = $84 < $86;
  if ($87) {
   $88 = ((($17)) + 40|0);
   HEAPF32[$88>>2] = 0.0;
  }
  $89 = $i;
  $90 = (($89) + 1)|0;
  $i = $90;
 }
 STACKTOP = sp;return;
}
function __Z5CrossfRK4Vec2($agg$result,$a,$v) {
 $agg$result = $agg$result|0;
 $a = +$a;
 $v = $v|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $v;
 $2 = $0;
 $3 = -$2;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $3 * $6;
 $8 = $0;
 $9 = $1;
 $10 = +HEAPF32[$9>>2];
 $11 = $8 * $10;
 __ZN4Vec2C2Eff($agg$result,$7,$11);
 STACKTOP = sp;return;
}
function __ZN8Manifold12ApplyImpulseEv($this) {
 $this = $this|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0;
 var $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0;
 var $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, $contactVel = 0.0, $i = 0, $impulse = 0, $invMassSum = 0.0, $j = 0.0, $jt = 0.0, $ra = 0, $raCrossN = 0.0, $rb = 0, $rbCrossN = 0.0, $rv = 0, $t = 0, $tangentImpulse = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ra = sp + 192|0;
 $rb = sp + 184|0;
 $rv = sp + 176|0;
 $2 = sp + 168|0;
 $3 = sp + 160|0;
 $4 = sp + 152|0;
 $5 = sp + 144|0;
 $impulse = sp + 112|0;
 $6 = sp + 104|0;
 $7 = sp + 96|0;
 $8 = sp + 88|0;
 $9 = sp + 80|0;
 $10 = sp + 72|0;
 $11 = sp + 64|0;
 $t = sp + 56|0;
 $12 = sp + 48|0;
 $tangentImpulse = sp + 32|0;
 $13 = sp + 24|0;
 $14 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp;
 $1 = $this;
 $17 = $1;
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 48|0);
 $20 = +HEAPF32[$19>>2];
 $21 = ((($17)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 48|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $20 + $24;
 $26 = (__Z5Equalff($25,0.0)|0);
 if ($26) {
  __ZN8Manifold22InfiniteMassCorrectionEv($17);
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $27 = $i;
  $28 = ((($17)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($27>>>0)<($29>>>0);
  if (!($30)) {
   label = 11;
   break;
  }
  $31 = $i;
  $32 = ((($17)) + 20|0);
  $33 = (($32) + ($31<<3)|0);
  $34 = HEAP32[$17>>2]|0;
  __ZNK4Vec2miERKS_($ra,$33,$34);
  $35 = $i;
  $36 = ((($17)) + 20|0);
  $37 = (($36) + ($35<<3)|0);
  $38 = ((($17)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  __ZNK4Vec2miERKS_($rb,$37,$39);
  $40 = ((($17)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 8|0);
  $43 = ((($17)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($44)) + 16|0);
  $46 = +HEAPF32[$45>>2];
  __Z5CrossfRK4Vec2($2,$46,$rb);
  __ZNK4Vec2plERKS_($3,$42,$2);
  $47 = HEAP32[$17>>2]|0;
  $48 = ((($47)) + 8|0);
  __ZNK4Vec2miERKS_($4,$3,$48);
  $49 = HEAP32[$17>>2]|0;
  $50 = ((($49)) + 16|0);
  $51 = +HEAPF32[$50>>2];
  __Z5CrossfRK4Vec2($5,$51,$ra);
  __ZNK4Vec2miERKS_($rv,$4,$5);
  $52 = ((($17)) + 12|0);
  $53 = (+__Z3DotRK4Vec2S1_($rv,$52));
  $contactVel = $53;
  $54 = $contactVel;
  $55 = $54 > 0.0;
  if ($55) {
   label = 11;
   break;
  }
  $56 = ((($17)) + 12|0);
  $57 = (+__Z5CrossRK4Vec2S1_($ra,$56));
  $raCrossN = $57;
  $58 = ((($17)) + 12|0);
  $59 = (+__Z5CrossRK4Vec2S1_($rb,$58));
  $rbCrossN = $59;
  $60 = HEAP32[$17>>2]|0;
  $61 = ((($60)) + 48|0);
  $62 = +HEAPF32[$61>>2];
  $63 = ((($17)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($64)) + 48|0);
  $66 = +HEAPF32[$65>>2];
  $67 = $62 + $66;
  $68 = $raCrossN;
  $69 = (+__Z3Sqrf($68));
  $70 = HEAP32[$17>>2]|0;
  $71 = ((($70)) + 40|0);
  $72 = +HEAPF32[$71>>2];
  $73 = $69 * $72;
  $74 = $67 + $73;
  $75 = $rbCrossN;
  $76 = (+__Z3Sqrf($75));
  $77 = ((($17)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($78)) + 40|0);
  $80 = +HEAPF32[$79>>2];
  $81 = $76 * $80;
  $82 = $74 + $81;
  $invMassSum = $82;
  $83 = ((($17)) + 40|0);
  $84 = +HEAPF32[$83>>2];
  $85 = 1.0 + $84;
  $86 = -$85;
  $87 = $contactVel;
  $88 = $86 * $87;
  $j = $88;
  $89 = $invMassSum;
  $90 = $j;
  $91 = $90 / $89;
  $j = $91;
  $92 = ((($17)) + 36|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (+($93>>>0));
  $95 = $j;
  $96 = $95 / $94;
  $j = $96;
  $97 = ((($17)) + 12|0);
  $98 = $j;
  __ZNK4Vec2mlEf($impulse,$97,$98);
  $99 = HEAP32[$17>>2]|0;
  __ZNK4Vec2ngEv($6,$impulse);
  __ZN4Body12ApplyImpulseERK4Vec2S2_($99,$6,$ra);
  $100 = ((($17)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  __ZN4Body12ApplyImpulseERK4Vec2S2_($101,$impulse,$rb);
  $102 = ((($17)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ((($103)) + 8|0);
  $105 = ((($17)) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ((($106)) + 16|0);
  $108 = +HEAPF32[$107>>2];
  __Z5CrossfRK4Vec2($8,$108,$rb);
  __ZNK4Vec2plERKS_($9,$104,$8);
  $109 = HEAP32[$17>>2]|0;
  $110 = ((($109)) + 8|0);
  __ZNK4Vec2miERKS_($10,$9,$110);
  $111 = HEAP32[$17>>2]|0;
  $112 = ((($111)) + 16|0);
  $113 = +HEAPF32[$112>>2];
  __Z5CrossfRK4Vec2($11,$113,$ra);
  __ZNK4Vec2miERKS_($7,$10,$11);
  ;HEAP32[$rv>>2]=HEAP32[$7>>2]|0;HEAP32[$rv+4>>2]=HEAP32[$7+4>>2]|0;
  $114 = ((($17)) + 12|0);
  $115 = ((($17)) + 12|0);
  $116 = (+__Z3DotRK4Vec2S1_($rv,$115));
  __ZNK4Vec2mlEf($12,$114,$116);
  __ZNK4Vec2miERKS_($t,$rv,$12);
  __ZN4Vec29NormalizeEv($t);
  $117 = (+__Z3DotRK4Vec2S1_($rv,$t));
  $118 = -$117;
  $jt = $118;
  $119 = $invMassSum;
  $120 = $jt;
  $121 = $120 / $119;
  $jt = $121;
  $122 = ((($17)) + 36|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (+($123>>>0));
  $125 = $jt;
  $126 = $125 / $124;
  $jt = $126;
  $127 = $jt;
  $128 = (__Z5Equalff($127,0.0)|0);
  if ($128) {
   label = 11;
   break;
  }
  __ZN4Vec2C2Ev($tangentImpulse);
  $129 = $jt;
  $0 = $129;
  $130 = $0;
  $131 = (+Math_abs((+$130)));
  $132 = $j;
  $133 = ((($17)) + 48|0);
  $134 = +HEAPF32[$133>>2];
  $135 = $132 * $134;
  $136 = $131 < $135;
  if ($136) {
   $137 = $jt;
   __ZNK4Vec2mlEf($13,$t,$137);
   ;HEAP32[$tangentImpulse>>2]=HEAP32[$13>>2]|0;HEAP32[$tangentImpulse+4>>2]=HEAP32[$13+4>>2]|0;
  } else {
   $138 = $j;
   $139 = -$138;
   __ZNK4Vec2mlEf($15,$t,$139);
   $140 = ((($17)) + 44|0);
   $141 = +HEAPF32[$140>>2];
   __ZNK4Vec2mlEf($14,$15,$141);
   ;HEAP32[$tangentImpulse>>2]=HEAP32[$14>>2]|0;HEAP32[$tangentImpulse+4>>2]=HEAP32[$14+4>>2]|0;
  }
  $142 = HEAP32[$17>>2]|0;
  __ZNK4Vec2ngEv($16,$tangentImpulse);
  __ZN4Body12ApplyImpulseERK4Vec2S2_($142,$16,$ra);
  $143 = ((($17)) + 4|0);
  $144 = HEAP32[$143>>2]|0;
  __ZN4Body12ApplyImpulseERK4Vec2S2_($144,$tangentImpulse,$rb);
  $145 = $i;
  $146 = (($145) + 1)|0;
  $i = $146;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function __Z5Equalff($a,$b) {
 $a = +$a;
 $b = +$b;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 $3 = $1;
 $4 = $2;
 $5 = $3 - $4;
 $0 = $5;
 $6 = $0;
 $7 = (+Math_abs((+$6)));
 $8 = $7 <= 9.9999997473787516E-5;
 STACKTOP = sp;return ($8|0);
}
function __ZN8Manifold22InfiniteMassCorrectionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 __ZN4Vec23SetEff($3,0.0,0.0);
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 __ZN4Vec23SetEff($6,0.0,0.0);
 STACKTOP = sp;return;
}
function __Z3DotRK4Vec2S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = $0;
 $8 = ((($7)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $9 * $12;
 $14 = $6 + $13;
 STACKTOP = sp;return (+$14);
}
function __Z3Sqrf($a) {
 $a = +$a;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = $0;
 $3 = $1 * $2;
 STACKTOP = sp;return (+$3);
}
function __ZNK4Vec2ngEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = -$2;
 $4 = ((($1)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = -$5;
 __ZN4Vec2C2Eff($agg$result,$3,$6);
 STACKTOP = sp;return;
}
function __ZN4Body12ApplyImpulseERK4Vec2S2_($this,$impulse,$contactVector) {
 $this = $this|0;
 $impulse = $impulse|0;
 $contactVector = $contactVector|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $this;
 $1 = $impulse;
 $2 = $contactVector;
 $4 = $0;
 $5 = ((($4)) + 8|0);
 $6 = ((($4)) + 48|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 __ZmlfRK4Vec2($3,$7,$8);
 __ZN4Vec2pLERKS_($5,$3);
 $9 = ((($4)) + 40|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = $1;
 $13 = (+__Z5CrossRK4Vec2S1_($11,$12));
 $14 = $10 * $13;
 $15 = ((($4)) + 16|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $16 + $14;
 HEAPF32[$15>>2] = $17;
 STACKTOP = sp;return;
}
function __ZN8Manifold20PositionalCorrectionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $correction = 0, $k_slop = 0.0, $percent = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 88|0;
 $correction = sp + 40|0;
 $10 = sp + 36|0;
 $11 = sp + 32|0;
 $12 = sp + 24|0;
 $13 = sp + 16|0;
 $14 = sp + 8|0;
 $9 = $this;
 $15 = $9;
 $k_slop = 0.05000000074505806;
 $percent = 0.40000000596046448;
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 - 0.05000000074505806;
 HEAPF32[$10>>2] = $18;
 HEAPF32[$11>>2] = 0.0;
 $6 = $10;
 $7 = $11;
 $19 = $6;
 $20 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $19;
 $4 = $20;
 $21 = $3;
 $22 = $4;
 $0 = $5;
 $1 = $21;
 $2 = $22;
 $23 = $1;
 $24 = +HEAPF32[$23>>2];
 $25 = $2;
 $26 = +HEAPF32[$25>>2];
 $27 = $24 < $26;
 $28 = $4;
 $29 = $3;
 $30 = $27 ? $28 : $29;
 $31 = +HEAPF32[$30>>2];
 $32 = HEAP32[$15>>2]|0;
 $33 = ((($32)) + 48|0);
 $34 = +HEAPF32[$33>>2];
 $35 = ((($15)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 48|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $34 + $38;
 $40 = $31 / $39;
 $41 = ((($15)) + 12|0);
 __ZmlfRK4Vec2($12,$40,$41);
 __ZNK4Vec2mlEf($correction,$12,0.40000000596046448);
 $42 = HEAP32[$15>>2]|0;
 $43 = HEAP32[$15>>2]|0;
 $44 = ((($43)) + 48|0);
 $45 = +HEAPF32[$44>>2];
 __ZNK4Vec2mlEf($13,$correction,$45);
 __ZN4Vec2mIERKS_($42,$13);
 $46 = ((($15)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($15)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 48|0);
 $51 = +HEAPF32[$50>>2];
 __ZNK4Vec2mlEf($14,$correction,$51);
 __ZN4Vec2pLERKS_($47,$14);
 STACKTOP = sp;return;
}
function __Z14CircletoCircleP8ManifoldP4BodyS2_($m,$a,$b) {
 $m = $m|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $A = 0, $B = 0, $dist_sqr = 0.0, $distance = 0.0, $normal = 0, $radius = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $normal = sp + 48|0;
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $1 = $m;
 $2 = $a;
 $3 = $b;
 $8 = $2;
 $9 = ((($8)) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 $A = $10;
 $11 = $3;
 $12 = ((($11)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $B = $13;
 $14 = $3;
 $15 = $2;
 __ZNK4Vec2miERKS_($normal,$14,$15);
 $16 = (+__ZNK4Vec26LenSqrEv($normal));
 $dist_sqr = $16;
 $17 = $A;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $B;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $19 + $22;
 $radius = $23;
 $24 = $dist_sqr;
 $25 = $radius;
 $26 = $radius;
 $27 = $25 * $26;
 $28 = $24 >= $27;
 if ($28) {
  $29 = $1;
  $30 = ((($29)) + 36|0);
  HEAP32[$30>>2] = 0;
  STACKTOP = sp;return;
 }
 $31 = $dist_sqr;
 $0 = $31;
 $32 = $0;
 $33 = (+Math_sqrt((+$32)));
 $distance = $33;
 $34 = $1;
 $35 = ((($34)) + 36|0);
 HEAP32[$35>>2] = 1;
 $36 = $distance;
 $37 = $36 == 0.0;
 if ($37) {
  $38 = $A;
  $39 = ((($38)) + 8|0);
  $40 = +HEAPF32[$39>>2];
  $41 = $1;
  $42 = ((($41)) + 8|0);
  HEAPF32[$42>>2] = $40;
  $43 = $1;
  $44 = ((($43)) + 12|0);
  __ZN4Vec2C2Eff($4,1.0,0.0);
  ;HEAP32[$44>>2]=HEAP32[$4>>2]|0;HEAP32[$44+4>>2]=HEAP32[$4+4>>2]|0;
  $45 = $1;
  $46 = ((($45)) + 20|0);
  $47 = $2;
  ;HEAP32[$46>>2]=HEAP32[$47>>2]|0;HEAP32[$46+4>>2]=HEAP32[$47+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  $48 = $radius;
  $49 = $distance;
  $50 = $48 - $49;
  $51 = $1;
  $52 = ((($51)) + 8|0);
  HEAPF32[$52>>2] = $50;
  $53 = $1;
  $54 = ((($53)) + 12|0);
  $55 = $distance;
  __ZNK4Vec2dvEf($5,$normal,$55);
  ;HEAP32[$54>>2]=HEAP32[$5>>2]|0;HEAP32[$54+4>>2]=HEAP32[$5+4>>2]|0;
  $56 = $1;
  $57 = ((($56)) + 20|0);
  $58 = $1;
  $59 = ((($58)) + 12|0);
  $60 = $A;
  $61 = ((($60)) + 8|0);
  $62 = +HEAPF32[$61>>2];
  __ZNK4Vec2mlEf($7,$59,$62);
  $63 = $2;
  __ZNK4Vec2plERKS_($6,$7,$63);
  ;HEAP32[$57>>2]=HEAP32[$6>>2]|0;HEAP32[$57+4>>2]=HEAP32[$6+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function __ZNK4Vec2dvEf($agg$result,$this,$s) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = $3 / $4;
 $6 = ((($2)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = $7 / $8;
 __ZN4Vec2C2Eff($agg$result,$5,$9);
 STACKTOP = sp;return;
}
function __Z15CircletoPolygonP8ManifoldP4BodyS2_($m,$a,$b) {
 $m = $m|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0.0, $A = 0, $B = 0, $center = 0, $dot1 = 0.0, $dot2 = 0.0, $faceNormal = 0, $i = 0, $i2 = 0, $n = 0, $n1 = 0, $n2 = 0, $s = 0.0, $separation = 0.0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $center = sp + 272|0;
 $3 = sp + 264|0;
 $4 = sp + 248|0;
 $5 = sp + 240|0;
 $6 = sp + 216|0;
 $v1 = sp + 208|0;
 $v2 = sp + 192|0;
 $7 = sp + 184|0;
 $8 = sp + 176|0;
 $9 = sp + 168|0;
 $10 = sp + 160|0;
 $11 = sp + 144|0;
 $12 = sp + 136|0;
 $13 = sp + 120|0;
 $14 = sp + 112|0;
 $n = sp + 104|0;
 $15 = sp + 96|0;
 $16 = sp + 88|0;
 $17 = sp + 80|0;
 $n1 = sp + 72|0;
 $18 = sp + 64|0;
 $19 = sp + 56|0;
 $20 = sp + 48|0;
 $n2 = sp + 40|0;
 $21 = sp + 32|0;
 $22 = sp + 24|0;
 $23 = sp + 16|0;
 $24 = sp + 8|0;
 $25 = sp;
 $0 = $m;
 $1 = $a;
 $2 = $b;
 $26 = $1;
 $27 = ((($26)) + 64|0);
 $28 = HEAP32[$27>>2]|0;
 $A = $28;
 $29 = $2;
 $30 = ((($29)) + 64|0);
 $31 = HEAP32[$30>>2]|0;
 $B = $31;
 $32 = $0;
 $33 = ((($32)) + 36|0);
 HEAP32[$33>>2] = 0;
 $34 = $1;
 ;HEAP32[$center>>2]=HEAP32[$34>>2]|0;HEAP32[$center+4>>2]=HEAP32[$34+4>>2]|0;
 $35 = $B;
 $36 = ((($35)) + 12|0);
 __ZNK4Mat29TransposeEv($4,$36);
 $37 = $2;
 __ZNK4Vec2miERKS_($5,$center,$37);
 __ZNK4Mat2mlERK4Vec2($3,$4,$5);
 ;HEAP32[$center>>2]=HEAP32[$3>>2]|0;HEAP32[$center+4>>2]=HEAP32[$3+4>>2]|0;
 $separation = -3.4028234663852886E+38;
 $faceNormal = 0;
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = $B;
  $40 = ((($39)) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($38>>>0)<($41>>>0);
  if (!($42)) {
   break;
  }
  $43 = $i;
  $44 = $B;
  $45 = ((($44)) + 544|0);
  $46 = (($45) + ($43<<3)|0);
  $47 = $i;
  $48 = $B;
  $49 = ((($48)) + 32|0);
  $50 = (($49) + ($47<<3)|0);
  __ZNK4Vec2miERKS_($6,$center,$50);
  $51 = (+__Z3DotRK4Vec2S1_($46,$6));
  $s = $51;
  $52 = $s;
  $53 = $A;
  $54 = ((($53)) + 8|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $52 > $55;
  if ($56) {
   label = 17;
   break;
  }
  $57 = $s;
  $58 = $separation;
  $59 = $57 > $58;
  if ($59) {
   $60 = $s;
   $separation = $60;
   $61 = $i;
   $faceNormal = $61;
  }
  $62 = $i;
  $63 = (($62) + 1)|0;
  $i = $63;
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
 $64 = $faceNormal;
 $65 = $B;
 $66 = ((($65)) + 32|0);
 $67 = (($66) + ($64<<3)|0);
 ;HEAP32[$v1>>2]=HEAP32[$67>>2]|0;HEAP32[$v1+4>>2]=HEAP32[$67+4>>2]|0;
 $68 = $faceNormal;
 $69 = (($68) + 1)|0;
 $70 = $B;
 $71 = ((($70)) + 28|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($69>>>0)<($72>>>0);
 $74 = $faceNormal;
 $75 = (($74) + 1)|0;
 $76 = $73 ? $75 : 0;
 $i2 = $76;
 $77 = $i2;
 $78 = $B;
 $79 = ((($78)) + 32|0);
 $80 = (($79) + ($77<<3)|0);
 ;HEAP32[$v2>>2]=HEAP32[$80>>2]|0;HEAP32[$v2+4>>2]=HEAP32[$80+4>>2]|0;
 $81 = $separation;
 $82 = $81 < 9.9999997473787516E-5;
 if ($82) {
  $83 = $0;
  $84 = ((($83)) + 36|0);
  HEAP32[$84>>2] = 1;
  $85 = $0;
  $86 = ((($85)) + 12|0);
  $87 = $B;
  $88 = ((($87)) + 12|0);
  $89 = $faceNormal;
  $90 = $B;
  $91 = ((($90)) + 544|0);
  $92 = (($91) + ($89<<3)|0);
  __ZNK4Mat2mlERK4Vec2($8,$88,$92);
  __ZNK4Vec2ngEv($7,$8);
  ;HEAP32[$86>>2]=HEAP32[$7>>2]|0;HEAP32[$86+4>>2]=HEAP32[$7+4>>2]|0;
  $93 = $0;
  $94 = ((($93)) + 20|0);
  $95 = $0;
  $96 = ((($95)) + 12|0);
  $97 = $A;
  $98 = ((($97)) + 8|0);
  $99 = +HEAPF32[$98>>2];
  __ZNK4Vec2mlEf($10,$96,$99);
  $100 = $1;
  __ZNK4Vec2plERKS_($9,$10,$100);
  ;HEAP32[$94>>2]=HEAP32[$9>>2]|0;HEAP32[$94+4>>2]=HEAP32[$9+4>>2]|0;
  $101 = $A;
  $102 = ((($101)) + 8|0);
  $103 = +HEAPF32[$102>>2];
  $104 = $0;
  $105 = ((($104)) + 8|0);
  HEAPF32[$105>>2] = $103;
  STACKTOP = sp;return;
 }
 __ZNK4Vec2miERKS_($11,$center,$v1);
 __ZNK4Vec2miERKS_($12,$v2,$v1);
 $106 = (+__Z3DotRK4Vec2S1_($11,$12));
 $dot1 = $106;
 __ZNK4Vec2miERKS_($13,$center,$v2);
 __ZNK4Vec2miERKS_($14,$v1,$v2);
 $107 = (+__Z3DotRK4Vec2S1_($13,$14));
 $dot2 = $107;
 $108 = $A;
 $109 = ((($108)) + 8|0);
 $110 = +HEAPF32[$109>>2];
 $111 = $separation;
 $112 = $110 - $111;
 $113 = $0;
 $114 = ((($113)) + 8|0);
 HEAPF32[$114>>2] = $112;
 $115 = $dot1;
 $116 = $115 <= 0.0;
 if ($116) {
  $117 = (+__Z7DistSqrRK4Vec2S1_($center,$v1));
  $118 = $A;
  $119 = ((($118)) + 8|0);
  $120 = +HEAPF32[$119>>2];
  $121 = $A;
  $122 = ((($121)) + 8|0);
  $123 = +HEAPF32[$122>>2];
  $124 = $120 * $123;
  $125 = $117 > $124;
  if ($125) {
   STACKTOP = sp;return;
  }
  $126 = $0;
  $127 = ((($126)) + 36|0);
  HEAP32[$127>>2] = 1;
  __ZNK4Vec2miERKS_($n,$v1,$center);
  $128 = $B;
  $129 = ((($128)) + 12|0);
  __ZNK4Mat2mlERK4Vec2($15,$129,$n);
  ;HEAP32[$n>>2]=HEAP32[$15>>2]|0;HEAP32[$n+4>>2]=HEAP32[$15+4>>2]|0;
  __ZN4Vec29NormalizeEv($n);
  $130 = $0;
  $131 = ((($130)) + 12|0);
  ;HEAP32[$131>>2]=HEAP32[$n>>2]|0;HEAP32[$131+4>>2]=HEAP32[$n+4>>2]|0;
  $132 = $B;
  $133 = ((($132)) + 12|0);
  __ZNK4Mat2mlERK4Vec2($17,$133,$v1);
  $134 = $2;
  __ZNK4Vec2plERKS_($16,$17,$134);
  ;HEAP32[$v1>>2]=HEAP32[$16>>2]|0;HEAP32[$v1+4>>2]=HEAP32[$16+4>>2]|0;
  $135 = $0;
  $136 = ((($135)) + 20|0);
  ;HEAP32[$136>>2]=HEAP32[$v1>>2]|0;HEAP32[$136+4>>2]=HEAP32[$v1+4>>2]|0;
  STACKTOP = sp;return;
 }
 $137 = $dot2;
 $138 = $137 <= 0.0;
 if ($138) {
  $139 = (+__Z7DistSqrRK4Vec2S1_($center,$v2));
  $140 = $A;
  $141 = ((($140)) + 8|0);
  $142 = +HEAPF32[$141>>2];
  $143 = $A;
  $144 = ((($143)) + 8|0);
  $145 = +HEAPF32[$144>>2];
  $146 = $142 * $145;
  $147 = $139 > $146;
  if ($147) {
   STACKTOP = sp;return;
  }
  $148 = $0;
  $149 = ((($148)) + 36|0);
  HEAP32[$149>>2] = 1;
  __ZNK4Vec2miERKS_($n1,$v2,$center);
  $150 = $B;
  $151 = ((($150)) + 12|0);
  __ZNK4Mat2mlERK4Vec2($19,$151,$v2);
  $152 = $2;
  __ZNK4Vec2plERKS_($18,$19,$152);
  ;HEAP32[$v2>>2]=HEAP32[$18>>2]|0;HEAP32[$v2+4>>2]=HEAP32[$18+4>>2]|0;
  $153 = $0;
  $154 = ((($153)) + 20|0);
  ;HEAP32[$154>>2]=HEAP32[$v2>>2]|0;HEAP32[$154+4>>2]=HEAP32[$v2+4>>2]|0;
  $155 = $B;
  $156 = ((($155)) + 12|0);
  __ZNK4Mat2mlERK4Vec2($20,$156,$n1);
  ;HEAP32[$n1>>2]=HEAP32[$20>>2]|0;HEAP32[$n1+4>>2]=HEAP32[$20+4>>2]|0;
  __ZN4Vec29NormalizeEv($n1);
  $157 = $0;
  $158 = ((($157)) + 12|0);
  ;HEAP32[$158>>2]=HEAP32[$n1>>2]|0;HEAP32[$158+4>>2]=HEAP32[$n1+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  $159 = $faceNormal;
  $160 = $B;
  $161 = ((($160)) + 544|0);
  $162 = (($161) + ($159<<3)|0);
  ;HEAP32[$n2>>2]=HEAP32[$162>>2]|0;HEAP32[$n2+4>>2]=HEAP32[$162+4>>2]|0;
  __ZNK4Vec2miERKS_($21,$center,$v1);
  $163 = (+__Z3DotRK4Vec2S1_($21,$n2));
  $164 = $A;
  $165 = ((($164)) + 8|0);
  $166 = +HEAPF32[$165>>2];
  $167 = $163 > $166;
  if ($167) {
   STACKTOP = sp;return;
  }
  $168 = $B;
  $169 = ((($168)) + 12|0);
  __ZNK4Mat2mlERK4Vec2($22,$169,$n2);
  ;HEAP32[$n2>>2]=HEAP32[$22>>2]|0;HEAP32[$n2+4>>2]=HEAP32[$22+4>>2]|0;
  $170 = $0;
  $171 = ((($170)) + 12|0);
  __ZNK4Vec2ngEv($23,$n2);
  ;HEAP32[$171>>2]=HEAP32[$23>>2]|0;HEAP32[$171+4>>2]=HEAP32[$23+4>>2]|0;
  $172 = $0;
  $173 = ((($172)) + 20|0);
  $174 = $0;
  $175 = ((($174)) + 12|0);
  $176 = $A;
  $177 = ((($176)) + 8|0);
  $178 = +HEAPF32[$177>>2];
  __ZNK4Vec2mlEf($25,$175,$178);
  $179 = $1;
  __ZNK4Vec2plERKS_($24,$25,$179);
  ;HEAP32[$173>>2]=HEAP32[$24>>2]|0;HEAP32[$173+4>>2]=HEAP32[$24+4>>2]|0;
  $180 = $0;
  $181 = ((($180)) + 36|0);
  HEAP32[$181>>2] = 1;
  STACKTOP = sp;return;
 }
}
function __ZNK4Mat29TransposeEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = ((($1)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($1)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($1)) + 12|0);
 $8 = +HEAPF32[$7>>2];
 __ZN4Mat2C2Effff($agg$result,$2,$4,$6,$8);
 STACKTOP = sp;return;
}
function __ZN4Mat2C2Effff($this,$a,$b,$c,$d) {
 $this = $this|0;
 $a = +$a;
 $b = +$b;
 $c = +$c;
 $d = +$d;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $d;
 $5 = $0;
 $6 = $1;
 HEAPF32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 $8 = $2;
 HEAPF32[$7>>2] = $8;
 $9 = ((($5)) + 8|0);
 $10 = $3;
 HEAPF32[$9>>2] = $10;
 $11 = ((($5)) + 12|0);
 $12 = $4;
 HEAPF32[$11>>2] = $12;
 STACKTOP = sp;return;
}
function __Z7DistSqrRK4Vec2S1_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 __ZNK4Vec2miERKS_($c,$2,$3);
 $4 = (+__Z3DotRK4Vec2S1_($c,$c));
 STACKTOP = sp;return (+$4);
}
function __Z15PolygontoCircleP8ManifoldP4BodyS2_($m,$a,$b) {
 $m = $m|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $m;
 $1 = $a;
 $2 = $b;
 $4 = $0;
 $5 = $2;
 $6 = $1;
 __Z15CircletoPolygonP8ManifoldP4BodyS2_($4,$5,$6);
 $7 = $0;
 $8 = ((($7)) + 12|0);
 $9 = $0;
 $10 = ((($9)) + 12|0);
 __ZNK4Vec2ngEv($3,$10);
 ;HEAP32[$8>>2]=HEAP32[$3>>2]|0;HEAP32[$8+4>>2]=HEAP32[$3+4>>2]|0;
 STACKTOP = sp;return;
}
function __Z16PolygontoPolygonP8ManifoldP4BodyS2_($m,$a,$b) {
 $m = $m|0;
 $a = $a|0;
 $b = $b|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0;
 var $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $A = 0, $B = 0, $IncPoly = 0, $RefPoly = 0;
 var $cp = 0, $faceA = 0, $faceB = 0, $flip = 0, $incidentFace = 0, $negSide = 0.0, $penetrationA = 0.0, $penetrationB = 0.0, $posSide = 0.0, $refC = 0.0, $refFaceNormal = 0, $referenceIndex = 0, $separation = 0.0, $sidePlaneNormal = 0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 184|0;
 $$byval_copy = sp + 176|0;
 $faceA = sp + 152|0;
 $faceB = sp + 144|0;
 $incidentFace = sp + 112|0;
 $v1 = sp + 104|0;
 $v2 = sp + 96|0;
 $3 = sp + 88|0;
 $4 = sp + 80|0;
 $5 = sp + 72|0;
 $6 = sp + 64|0;
 $sidePlaneNormal = sp + 56|0;
 $refFaceNormal = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 8|0;
 $0 = $m;
 $1 = $a;
 $2 = $b;
 $10 = $1;
 $11 = ((($10)) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $A = $12;
 $13 = $2;
 $14 = ((($13)) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 $B = $15;
 $16 = $0;
 $17 = ((($16)) + 36|0);
 HEAP32[$17>>2] = 0;
 $18 = $A;
 $19 = $B;
 $20 = (+__Z24FindAxisLeastPenetrationPjP12PolygonShapeS1_($faceA,$18,$19));
 $penetrationA = $20;
 $21 = $penetrationA;
 $22 = $21 >= 0.0;
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = $B;
 $24 = $A;
 $25 = (+__Z24FindAxisLeastPenetrationPjP12PolygonShapeS1_($faceB,$23,$24));
 $penetrationB = $25;
 $26 = $penetrationB;
 $27 = $26 >= 0.0;
 if ($27) {
  STACKTOP = sp;return;
 }
 $28 = $penetrationA;
 $29 = $penetrationB;
 $30 = (__Z15BiasGreaterThanff($28,$29)|0);
 if ($30) {
  $31 = $A;
  $RefPoly = $31;
  $32 = $B;
  $IncPoly = $32;
  $33 = HEAP32[$faceA>>2]|0;
  $referenceIndex = $33;
  $flip = 0;
 } else {
  $34 = $B;
  $RefPoly = $34;
  $35 = $A;
  $IncPoly = $35;
  $36 = HEAP32[$faceB>>2]|0;
  $referenceIndex = $36;
  $flip = 1;
 }
 $37 = ((($incidentFace)) + 16|0);
 $38 = $incidentFace;
 while(1) {
  __ZN4Vec2C2Ev($38);
  $39 = ((($38)) + 8|0);
  $40 = ($39|0)==($37|0);
  if ($40) {
   break;
  } else {
   $38 = $39;
  }
 }
 $41 = $RefPoly;
 $42 = $IncPoly;
 $43 = $referenceIndex;
 __Z16FindIncidentFaceP4Vec2P12PolygonShapeS2_j($incidentFace,$41,$42,$43);
 $44 = $referenceIndex;
 $45 = $RefPoly;
 $46 = ((($45)) + 32|0);
 $47 = (($46) + ($44<<3)|0);
 ;HEAP32[$v1>>2]=HEAP32[$47>>2]|0;HEAP32[$v1+4>>2]=HEAP32[$47+4>>2]|0;
 $48 = $referenceIndex;
 $49 = (($48) + 1)|0;
 $50 = $RefPoly;
 $51 = ((($50)) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($49|0)==($52|0);
 $54 = $referenceIndex;
 $55 = (($54) + 1)|0;
 $56 = $53 ? 0 : $55;
 $referenceIndex = $56;
 $57 = $referenceIndex;
 $58 = $RefPoly;
 $59 = ((($58)) + 32|0);
 $60 = (($59) + ($57<<3)|0);
 ;HEAP32[$v2>>2]=HEAP32[$60>>2]|0;HEAP32[$v2+4>>2]=HEAP32[$60+4>>2]|0;
 $61 = $RefPoly;
 $62 = ((($61)) + 12|0);
 __ZNK4Mat2mlERK4Vec2($4,$62,$v1);
 $63 = $RefPoly;
 $64 = ((($63)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 __ZNK4Vec2plERKS_($3,$4,$65);
 ;HEAP32[$v1>>2]=HEAP32[$3>>2]|0;HEAP32[$v1+4>>2]=HEAP32[$3+4>>2]|0;
 $66 = $RefPoly;
 $67 = ((($66)) + 12|0);
 __ZNK4Mat2mlERK4Vec2($6,$67,$v2);
 $68 = $RefPoly;
 $69 = ((($68)) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 __ZNK4Vec2plERKS_($5,$6,$70);
 ;HEAP32[$v2>>2]=HEAP32[$5>>2]|0;HEAP32[$v2+4>>2]=HEAP32[$5+4>>2]|0;
 __ZNK4Vec2miERKS_($sidePlaneNormal,$v2,$v1);
 __ZN4Vec29NormalizeEv($sidePlaneNormal);
 $71 = ((($sidePlaneNormal)) + 4|0);
 $72 = +HEAPF32[$71>>2];
 $73 = +HEAPF32[$sidePlaneNormal>>2];
 $74 = -$73;
 __ZN4Vec2C2Eff($refFaceNormal,$72,$74);
 $75 = (+__Z3DotRK4Vec2S1_($refFaceNormal,$v1));
 $refC = $75;
 $76 = (+__Z3DotRK4Vec2S1_($sidePlaneNormal,$v1));
 $77 = -$76;
 $negSide = $77;
 $78 = (+__Z3DotRK4Vec2S1_($sidePlaneNormal,$v2));
 $posSide = $78;
 __ZNK4Vec2ngEv($7,$sidePlaneNormal);
 $79 = $negSide;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
 $80 = (__Z4Clip4Vec2fPS_($$byval_copy,$79,$incidentFace)|0);
 $81 = ($80|0)<(2);
 if ($81) {
  STACKTOP = sp;return;
 }
 ;HEAP32[$8>>2]=HEAP32[$sidePlaneNormal>>2]|0;HEAP32[$8+4>>2]=HEAP32[$sidePlaneNormal+4>>2]|0;
 $82 = $posSide;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$8+4>>2]|0;
 $83 = (__Z4Clip4Vec2fPS_($$byval_copy1,$82,$incidentFace)|0);
 $84 = ($83|0)<(2);
 if ($84) {
  STACKTOP = sp;return;
 }
 $85 = $0;
 $86 = ((($85)) + 12|0);
 $87 = $flip;
 $88 = $87&1;
 if ($88) {
  __ZNK4Vec2ngEv($9,$refFaceNormal);
 } else {
  ;HEAP32[$9>>2]=HEAP32[$refFaceNormal>>2]|0;HEAP32[$9+4>>2]=HEAP32[$refFaceNormal+4>>2]|0;
 }
 ;HEAP32[$86>>2]=HEAP32[$9>>2]|0;HEAP32[$86+4>>2]=HEAP32[$9+4>>2]|0;
 $cp = 0;
 $89 = (+__Z3DotRK4Vec2S1_($refFaceNormal,$incidentFace));
 $90 = $refC;
 $91 = $89 - $90;
 $separation = $91;
 $92 = $separation;
 $93 = $92 <= 0.0;
 if ($93) {
  $94 = $cp;
  $95 = $0;
  $96 = ((($95)) + 20|0);
  $97 = (($96) + ($94<<3)|0);
  ;HEAP32[$97>>2]=HEAP32[$incidentFace>>2]|0;HEAP32[$97+4>>2]=HEAP32[$incidentFace+4>>2]|0;
  $98 = $separation;
  $99 = -$98;
  $100 = $0;
  $101 = ((($100)) + 8|0);
  HEAPF32[$101>>2] = $99;
  $102 = $cp;
  $103 = (($102) + 1)|0;
  $cp = $103;
 } else {
  $104 = $0;
  $105 = ((($104)) + 8|0);
  HEAPF32[$105>>2] = 0.0;
 }
 $106 = ((($incidentFace)) + 8|0);
 $107 = (+__Z3DotRK4Vec2S1_($refFaceNormal,$106));
 $108 = $refC;
 $109 = $107 - $108;
 $separation = $109;
 $110 = $separation;
 $111 = $110 <= 0.0;
 if ($111) {
  $112 = $cp;
  $113 = $0;
  $114 = ((($113)) + 20|0);
  $115 = (($114) + ($112<<3)|0);
  $116 = ((($incidentFace)) + 8|0);
  ;HEAP32[$115>>2]=HEAP32[$116>>2]|0;HEAP32[$115+4>>2]=HEAP32[$116+4>>2]|0;
  $117 = $separation;
  $118 = -$117;
  $119 = $0;
  $120 = ((($119)) + 8|0);
  $121 = +HEAPF32[$120>>2];
  $122 = $121 + $118;
  HEAPF32[$120>>2] = $122;
  $123 = $cp;
  $124 = (($123) + 1)|0;
  $cp = $124;
  $125 = $cp;
  $126 = (+($125>>>0));
  $127 = $0;
  $128 = ((($127)) + 8|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $129 / $126;
  HEAPF32[$128>>2] = $130;
 }
 $131 = $cp;
 $132 = $0;
 $133 = ((($132)) + 36|0);
 HEAP32[$133>>2] = $131;
 STACKTOP = sp;return;
}
function __Z24FindAxisLeastPenetrationPjP12PolygonShapeS1_($faceIndex,$A,$B) {
 $faceIndex = $faceIndex|0;
 $A = $A|0;
 $B = $B|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bestDistance = 0.0, $bestIndex = 0, $buT = 0, $d = 0.0, $i = 0, $n = 0, $nw = 0, $s = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $n = sp + 96|0;
 $nw = sp + 88|0;
 $buT = sp + 72|0;
 $3 = sp + 64|0;
 $s = sp + 56|0;
 $4 = sp + 48|0;
 $v = sp + 40|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $8 = sp;
 $0 = $faceIndex;
 $1 = $A;
 $2 = $B;
 $bestDistance = -3.4028234663852886E+38;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $1;
  $11 = ((($10)) + 28|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $1;
  $16 = ((($15)) + 544|0);
  $17 = (($16) + ($14<<3)|0);
  ;HEAP32[$n>>2]=HEAP32[$17>>2]|0;HEAP32[$n+4>>2]=HEAP32[$17+4>>2]|0;
  $18 = $1;
  $19 = ((($18)) + 12|0);
  __ZNK4Mat2mlERK4Vec2($nw,$19,$n);
  $20 = $2;
  $21 = ((($20)) + 12|0);
  __ZNK4Mat29TransposeEv($buT,$21);
  __ZNK4Mat2mlERK4Vec2($3,$buT,$nw);
  ;HEAP32[$n>>2]=HEAP32[$3>>2]|0;HEAP32[$n+4>>2]=HEAP32[$3+4>>2]|0;
  $22 = $2;
  __ZNK4Vec2ngEv($4,$n);
  __ZN12PolygonShape10GetSupportERK4Vec2($s,$22,$4);
  $23 = $i;
  $24 = $1;
  $25 = ((($24)) + 32|0);
  $26 = (($25) + ($23<<3)|0);
  ;HEAP32[$v>>2]=HEAP32[$26>>2]|0;HEAP32[$v+4>>2]=HEAP32[$26+4>>2]|0;
  $27 = $1;
  $28 = ((($27)) + 12|0);
  __ZNK4Mat2mlERK4Vec2($6,$28,$v);
  $29 = $1;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  __ZNK4Vec2plERKS_($5,$6,$31);
  ;HEAP32[$v>>2]=HEAP32[$5>>2]|0;HEAP32[$v+4>>2]=HEAP32[$5+4>>2]|0;
  $32 = $2;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  __ZN4Vec2mIERKS_($v,$34);
  __ZNK4Mat2mlERK4Vec2($7,$buT,$v);
  ;HEAP32[$v>>2]=HEAP32[$7>>2]|0;HEAP32[$v+4>>2]=HEAP32[$7+4>>2]|0;
  __ZNK4Vec2miERKS_($8,$s,$v);
  $35 = (+__Z3DotRK4Vec2S1_($n,$8));
  $d = $35;
  $36 = $d;
  $37 = $bestDistance;
  $38 = $36 > $37;
  if ($38) {
   $39 = $d;
   $bestDistance = $39;
   $40 = $i;
   $bestIndex = $40;
  }
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 $43 = $bestIndex;
 $44 = $0;
 HEAP32[$44>>2] = $43;
 $45 = $bestDistance;
 STACKTOP = sp;return (+$45);
}
function __ZN12PolygonShape10GetSupportERK4Vec2($agg$result,$this,$dir) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $dir = $dir|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bestProjection = 0.0, $i = 0;
 var $projection = 0.0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp + 8|0;
 $0 = $this;
 $1 = $dir;
 $2 = $0;
 $bestProjection = -3.4028234663852886E+38;
 __ZN4Vec2C2Ev($agg$result);
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ((($2)) + 28|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3>>>0)<($5>>>0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = ((($2)) + 32|0);
  $9 = (($8) + ($7<<3)|0);
  ;HEAP32[$v>>2]=HEAP32[$9>>2]|0;HEAP32[$v+4>>2]=HEAP32[$9+4>>2]|0;
  $10 = $1;
  $11 = (+__Z3DotRK4Vec2S1_($v,$10));
  $projection = $11;
  $12 = $projection;
  $13 = $bestProjection;
  $14 = $12 > $13;
  if ($14) {
   ;HEAP32[$agg$result>>2]=HEAP32[$v>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$v+4>>2]|0;
   $15 = $projection;
   $bestProjection = $15;
  }
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 STACKTOP = sp;return;
}
function __Z15BiasGreaterThanff($a,$b) {
 $a = +$a;
 $b = +$b;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $k_biasAbsolute = 0.0, $k_biasRelative = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $k_biasRelative = 0.94999998807907104;
 $k_biasAbsolute = 0.0099999997764825821;
 $2 = $0;
 $3 = $1;
 $4 = $3 * 0.94999998807907104;
 $5 = $0;
 $6 = $5 * 0.0099999997764825821;
 $7 = $4 + $6;
 $8 = $2 >= $7;
 STACKTOP = sp;return ($8|0);
}
function __Z16FindIncidentFaceP4Vec2P12PolygonShapeS2_j($v,$RefPoly,$IncPoly,$referenceIndex) {
 $v = $v|0;
 $RefPoly = $RefPoly|0;
 $IncPoly = $IncPoly|0;
 $referenceIndex = $referenceIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $dot = 0.0, $i = 0, $incidentFace = 0, $minDot = 0.0, $referenceNormal = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $referenceNormal = sp + 80|0;
 $4 = sp + 72|0;
 $5 = sp + 64|0;
 $6 = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 8|0;
 $10 = sp;
 $0 = $v;
 $1 = $RefPoly;
 $2 = $IncPoly;
 $3 = $referenceIndex;
 $11 = $3;
 $12 = $1;
 $13 = ((($12)) + 544|0);
 $14 = (($13) + ($11<<3)|0);
 ;HEAP32[$referenceNormal>>2]=HEAP32[$14>>2]|0;HEAP32[$referenceNormal+4>>2]=HEAP32[$14+4>>2]|0;
 $15 = $1;
 $16 = ((($15)) + 12|0);
 __ZNK4Mat2mlERK4Vec2($4,$16,$referenceNormal);
 ;HEAP32[$referenceNormal>>2]=HEAP32[$4>>2]|0;HEAP32[$referenceNormal+4>>2]=HEAP32[$4+4>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 12|0);
 __ZNK4Mat29TransposeEv($6,$18);
 __ZNK4Mat2mlERK4Vec2($5,$6,$referenceNormal);
 ;HEAP32[$referenceNormal>>2]=HEAP32[$5>>2]|0;HEAP32[$referenceNormal+4>>2]=HEAP32[$5+4>>2]|0;
 $incidentFace = 0;
 $minDot = 3.4028234663852886E+38;
 $i = 0;
 while(1) {
  $19 = $i;
  $20 = $2;
  $21 = ((($20)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = $2;
  $26 = ((($25)) + 544|0);
  $27 = (($26) + ($24<<3)|0);
  $28 = (+__Z3DotRK4Vec2S1_($referenceNormal,$27));
  $dot = $28;
  $29 = $dot;
  $30 = $minDot;
  $31 = $29 < $30;
  if ($31) {
   $32 = $dot;
   $minDot = $32;
   $33 = $i;
   $incidentFace = $33;
  }
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 $36 = $0;
 $37 = $2;
 $38 = ((($37)) + 12|0);
 $39 = $incidentFace;
 $40 = $2;
 $41 = ((($40)) + 32|0);
 $42 = (($41) + ($39<<3)|0);
 __ZNK4Mat2mlERK4Vec2($8,$38,$42);
 $43 = $2;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 __ZNK4Vec2plERKS_($7,$8,$45);
 ;HEAP32[$36>>2]=HEAP32[$7>>2]|0;HEAP32[$36+4>>2]=HEAP32[$7+4>>2]|0;
 $46 = $incidentFace;
 $47 = (($46) + 1)|0;
 $48 = $2;
 $49 = ((($48)) + 28|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($47|0)>=($50|0);
 $52 = $incidentFace;
 $53 = (($52) + 1)|0;
 $54 = $51 ? 0 : $53;
 $incidentFace = $54;
 $55 = $0;
 $56 = ((($55)) + 8|0);
 $57 = $2;
 $58 = ((($57)) + 12|0);
 $59 = $incidentFace;
 $60 = $2;
 $61 = ((($60)) + 32|0);
 $62 = (($61) + ($59<<3)|0);
 __ZNK4Mat2mlERK4Vec2($10,$58,$62);
 $63 = $2;
 $64 = ((($63)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 __ZNK4Vec2plERKS_($9,$10,$65);
 ;HEAP32[$56>>2]=HEAP32[$9>>2]|0;HEAP32[$56+4>>2]=HEAP32[$9+4>>2]|0;
 STACKTOP = sp;return;
}
function __Z4Clip4Vec2fPS_($n,$c,$face) {
 $n = $n|0;
 $c = +$c;
 $face = $face|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alpha = 0.0, $d1 = 0.0, $d2 = 0.0, $out = 0;
 var $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $out = sp + 40|0;
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $c;
 $1 = $face;
 $sp = 0;
 $5 = $1;
 ;HEAP32[$out>>2]=HEAP32[$5>>2]|0;HEAP32[$out+4>>2]=HEAP32[$5+4>>2]|0;
 $6 = ((($out)) + 8|0);
 $7 = $1;
 $8 = ((($7)) + 8|0);
 ;HEAP32[$6>>2]=HEAP32[$8>>2]|0;HEAP32[$6+4>>2]=HEAP32[$8+4>>2]|0;
 $9 = $1;
 $10 = (+__Z3DotRK4Vec2S1_($n,$9));
 $11 = $0;
 $12 = $10 - $11;
 $d1 = $12;
 $13 = $1;
 $14 = ((($13)) + 8|0);
 $15 = (+__Z3DotRK4Vec2S1_($n,$14));
 $16 = $0;
 $17 = $15 - $16;
 $d2 = $17;
 $18 = $d1;
 $19 = $18 <= 0.0;
 if ($19) {
  $20 = $sp;
  $21 = (($20) + 1)|0;
  $sp = $21;
  $22 = (($out) + ($20<<3)|0);
  $23 = $1;
  ;HEAP32[$22>>2]=HEAP32[$23>>2]|0;HEAP32[$22+4>>2]=HEAP32[$23+4>>2]|0;
 }
 $24 = $d2;
 $25 = $24 <= 0.0;
 if ($25) {
  $26 = $sp;
  $27 = (($26) + 1)|0;
  $sp = $27;
  $28 = (($out) + ($26<<3)|0);
  $29 = $1;
  $30 = ((($29)) + 8|0);
  ;HEAP32[$28>>2]=HEAP32[$30>>2]|0;HEAP32[$28+4>>2]=HEAP32[$30+4>>2]|0;
 }
 $31 = $d1;
 $32 = $d2;
 $33 = $31 * $32;
 $34 = $33 < 0.0;
 if ($34) {
  $35 = $d1;
  $36 = $d1;
  $37 = $d2;
  $38 = $36 - $37;
  $39 = $35 / $38;
  $alpha = $39;
  $40 = $sp;
  $41 = (($out) + ($40<<3)|0);
  $42 = $1;
  $43 = $alpha;
  $44 = $1;
  $45 = ((($44)) + 8|0);
  $46 = $1;
  __ZNK4Vec2miERKS_($4,$45,$46);
  __ZmlfRK4Vec2($3,$43,$4);
  __ZNK4Vec2plERKS_($2,$42,$3);
  ;HEAP32[$41>>2]=HEAP32[$2>>2]|0;HEAP32[$41+4>>2]=HEAP32[$2+4>>2]|0;
  $47 = $sp;
  $48 = (($47) + 1)|0;
  $sp = $48;
 }
 $49 = $1;
 ;HEAP32[$49>>2]=HEAP32[$out>>2]|0;HEAP32[$49+4>>2]=HEAP32[$out+4>>2]|0;
 $50 = $1;
 $51 = ((($50)) + 8|0);
 $52 = ((($out)) + 8|0);
 ;HEAP32[$51>>2]=HEAP32[$52>>2]|0;HEAP32[$51+4>>2]=HEAP32[$52+4>>2]|0;
 $53 = $sp;
 $54 = ($53|0)!=(3);
 if ($54) {
  $55 = $sp;
  STACKTOP = sp;return ($55|0);
 } else {
  ___assert_fail((1282|0),(1290|0),264,(1325|0));
  // unreachable;
 }
 return (0)|0;
}
function __GLOBAL__sub_I_Collision_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_36();
 return;
}
function ___cxx_global_var_init_36() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4Vec2C2Eff(6768,0.0,50.0);
 return;
}
function __GLOBAL__sub_I_Clock_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_39();
 return;
}
function ___cxx_global_var_init_39() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4Vec2C2Eff(6776,0.0,50.0);
 return;
}
function __ZN5ClockC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 40|0;
 $4 = sp + 32|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $15 = sp + 8|0;
 $16 = sp;
 $18 = $this;
 $19 = $18;
 $17 = $19;
 $20 = $17;
 $21 = $16;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = 0;
 $12 = $15;
 $13 = $16;
 $14 = 0;
 $25 = $12;
 $26 = $13;
 $27 = $26;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $25;
 $34 = $33;
 HEAP32[$34>>2] = $29;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = $32;
 $37 = $15;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = $20;
 $44 = $43;
 HEAP32[$44>>2] = $39;
 $45 = (($43) + 4)|0;
 $46 = $45;
 HEAP32[$46>>2] = $42;
 $47 = ((($19)) + 8|0);
 $11 = $47;
 $48 = $11;
 $49 = $10;
 $50 = $49;
 HEAP32[$50>>2] = 0;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = 0;
 $6 = $9;
 $7 = $10;
 $8 = 0;
 $53 = $6;
 $54 = $7;
 $55 = $54;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = $53;
 $62 = $61;
 HEAP32[$62>>2] = $57;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = $60;
 $65 = $9;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = $48;
 $72 = $71;
 HEAP32[$72>>2] = $67;
 $73 = (($71) + 4)|0;
 $74 = $73;
 HEAP32[$74>>2] = $70;
 $75 = ((($19)) + 16|0);
 $5 = $75;
 $76 = $5;
 $77 = $4;
 $78 = $77;
 HEAP32[$78>>2] = 0;
 $79 = (($77) + 4)|0;
 $80 = $79;
 HEAP32[$80>>2] = 0;
 $0 = $3;
 $1 = $4;
 $2 = 0;
 $81 = $0;
 $82 = $1;
 $83 = $82;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 $86 = (($83) + 4)|0;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = $81;
 $90 = $89;
 HEAP32[$90>>2] = $85;
 $91 = (($89) + 4)|0;
 $92 = $91;
 HEAP32[$92>>2] = $88;
 $93 = $3;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = (($93) + 4)|0;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = $76;
 $100 = $99;
 HEAP32[$100>>2] = $95;
 $101 = (($99) + 4)|0;
 $102 = $101;
 HEAP32[$102>>2] = $98;
 __ZN5Clock5StartEv($19);
 __ZN5Clock4StopEv($19);
 STACKTOP = sp;return;
}
function __ZN5Clock5StartEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = (__ZNSt3__16chrono12steady_clock3nowEv()|0);
 $4 = tempRet0;
 $5 = $1;
 $6 = $5;
 HEAP32[$6>>2] = $3;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = $4;
 ;HEAP32[$2>>2]=HEAP32[$1>>2]|0;HEAP32[$2+4>>2]=HEAP32[$1+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN5Clock4StopEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = (__ZNSt3__16chrono12steady_clock3nowEv()|0);
 $5 = tempRet0;
 $6 = $1;
 $7 = $6;
 HEAP32[$7>>2] = $4;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$3>>2]=HEAP32[$1>>2]|0;HEAP32[$3+4>>2]=HEAP32[$1+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN5ClockD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN5Clock7ElapsedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 112|0;
 $7 = sp + 104|0;
 $8 = sp + 96|0;
 $10 = sp + 200|0;
 $12 = sp + 88|0;
 $19 = sp + 80|0;
 $22 = sp + 72|0;
 $23 = sp + 64|0;
 $24 = sp + 56|0;
 $25 = sp + 48|0;
 $27 = sp + 40|0;
 $30 = sp + 32|0;
 $31 = sp + 24|0;
 $33 = sp + 16|0;
 $34 = sp + 8|0;
 $35 = sp;
 $32 = $this;
 $36 = $32;
 $37 = ((($36)) + 16|0);
 $38 = (__ZNSt3__16chrono12steady_clock3nowEv()|0);
 $39 = tempRet0;
 $40 = $33;
 $41 = $40;
 HEAP32[$41>>2] = $38;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $39;
 ;HEAP32[$37>>2]=HEAP32[$33>>2]|0;HEAP32[$37+4>>2]=HEAP32[$33+4>>2]|0;
 $44 = ((($36)) + 16|0);
 $28 = $44;
 $29 = $36;
 $45 = $28;
 $26 = $45;
 $46 = $26;
 ;HEAP32[$25>>2]=HEAP32[$46>>2]|0;HEAP32[$25+4>>2]=HEAP32[$46+4>>2]|0;
 $47 = $25;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($47) + 4)|0;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = $30;
 $54 = $53;
 HEAP32[$54>>2] = $49;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = $52;
 $57 = $29;
 $13 = $57;
 $58 = $13;
 ;HEAP32[$12>>2]=HEAP32[$58>>2]|0;HEAP32[$12+4>>2]=HEAP32[$58+4>>2]|0;
 $59 = $12;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = $31;
 $66 = $65;
 HEAP32[$66>>2] = $61;
 $67 = (($65) + 4)|0;
 $68 = $67;
 HEAP32[$68>>2] = $64;
 $20 = $30;
 $21 = $31;
 $69 = $20;
 ;HEAP32[$23>>2]=HEAP32[$69>>2]|0;HEAP32[$23+4>>2]=HEAP32[$69+4>>2]|0;
 $18 = $23;
 $70 = $18;
 $71 = $70;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = $21;
 ;HEAP32[$24>>2]=HEAP32[$77>>2]|0;HEAP32[$24+4>>2]=HEAP32[$77+4>>2]|0;
 $14 = $24;
 $78 = $14;
 $79 = $78;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = (($79) + 4)|0;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = (_i64Subtract(($73|0),($76|0),($81|0),($84|0))|0);
 $86 = tempRet0;
 $87 = $22;
 $88 = $87;
 HEAP32[$88>>2] = $85;
 $89 = (($87) + 4)|0;
 $90 = $89;
 HEAP32[$90>>2] = $86;
 $15 = $19;
 $16 = $22;
 $17 = 0;
 $91 = $15;
 $92 = $16;
 $93 = $92;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = (($93) + 4)|0;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = $91;
 $100 = $99;
 HEAP32[$100>>2] = $95;
 $101 = (($99) + 4)|0;
 $102 = $101;
 HEAP32[$102>>2] = $98;
 $103 = $19;
 $104 = $103;
 $105 = HEAP32[$104>>2]|0;
 $106 = (($103) + 4)|0;
 $107 = $106;
 $108 = HEAP32[$107>>2]|0;
 $109 = $27;
 $110 = $109;
 HEAP32[$110>>2] = $105;
 $111 = (($109) + 4)|0;
 $112 = $111;
 HEAP32[$112>>2] = $108;
 $113 = $27;
 $114 = $113;
 $115 = HEAP32[$114>>2]|0;
 $116 = (($113) + 4)|0;
 $117 = $116;
 $118 = HEAP32[$117>>2]|0;
 $119 = $34;
 $120 = $119;
 HEAP32[$120>>2] = $115;
 $121 = (($119) + 4)|0;
 $122 = $121;
 HEAP32[$122>>2] = $118;
 $9 = $34;
 $123 = $9;
 $5 = $10;
 $6 = $123;
 $124 = $6;
 $3 = $124;
 $125 = $3;
 $126 = $125;
 $127 = $126;
 $128 = HEAP32[$127>>2]|0;
 $129 = (($126) + 4)|0;
 $130 = $129;
 $131 = HEAP32[$130>>2]|0;
 $132 = $7;
 $133 = $132;
 HEAP32[$133>>2] = $128;
 $134 = (($132) + 4)|0;
 $135 = $134;
 HEAP32[$135>>2] = $131;
 $0 = $4;
 $1 = $7;
 $2 = 0;
 $136 = $0;
 $137 = $1;
 $138 = $137;
 $139 = $138;
 $140 = HEAP32[$139>>2]|0;
 $141 = (($138) + 4)|0;
 $142 = $141;
 $143 = HEAP32[$142>>2]|0;
 $144 = $136;
 $145 = $144;
 HEAP32[$145>>2] = $140;
 $146 = (($144) + 4)|0;
 $147 = $146;
 HEAP32[$147>>2] = $143;
 $148 = $4;
 $149 = $148;
 $150 = HEAP32[$149>>2]|0;
 $151 = (($148) + 4)|0;
 $152 = $151;
 $153 = HEAP32[$152>>2]|0;
 $154 = $8;
 $155 = $154;
 HEAP32[$155>>2] = $150;
 $156 = (($154) + 4)|0;
 $157 = $156;
 HEAP32[$157>>2] = $153;
 $158 = $8;
 $159 = $158;
 $160 = HEAP32[$159>>2]|0;
 $161 = (($158) + 4)|0;
 $162 = $161;
 $163 = HEAP32[$162>>2]|0;
 $164 = $35;
 $165 = $164;
 HEAP32[$165>>2] = $160;
 $166 = (($164) + 4)|0;
 $167 = $166;
 HEAP32[$167>>2] = $163;
 $11 = $35;
 $168 = $11;
 $169 = $168;
 $170 = $169;
 $171 = HEAP32[$170>>2]|0;
 $172 = (($169) + 4)|0;
 $173 = $172;
 $174 = HEAP32[$173>>2]|0;
 tempRet0 = ($174);
 STACKTOP = sp;return ($171|0);
}
function __GLOBAL__sub_I_Body_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_52();
 return;
}
function ___cxx_global_var_init_52() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4Vec2C2Eff(6784,0.0,50.0);
 return;
}
function __ZN4BodyC2EP5Shapejj($this,$shape_,$x,$y) {
 $this = $this|0;
 $shape_ = $shape_|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $shape_;
 $2 = $x;
 $3 = $y;
 $4 = $0;
 __ZN4Vec2C2Ev($4);
 $5 = ((($4)) + 8|0);
 __ZN4Vec2C2Ev($5);
 $6 = ((($4)) + 28|0);
 __ZN4Vec2C2Ev($6);
 $7 = ((($4)) + 64|0);
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 63]($8)|0);
 HEAP32[$7>>2] = $11;
 $12 = ((($4)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = $4;
 $15 = $2;
 $16 = (+($15>>>0));
 $17 = $3;
 $18 = (+($17>>>0));
 __ZN4Vec23SetEff($4,$16,$18);
 $19 = ((($4)) + 8|0);
 __ZN4Vec23SetEff($19,0.0,0.0);
 $20 = ((($4)) + 16|0);
 HEAPF32[$20>>2] = 0.0;
 $21 = ((($4)) + 20|0);
 HEAPF32[$21>>2] = 0.0;
 $22 = (+__Z6Randomff(-3.1415927410125732,3.1415927410125732));
 $23 = ((($4)) + 24|0);
 HEAPF32[$23>>2] = $22;
 $24 = ((($4)) + 28|0);
 __ZN4Vec23SetEff($24,0.0,0.0);
 $25 = ((($4)) + 52|0);
 HEAPF32[$25>>2] = 0.5;
 $26 = ((($4)) + 56|0);
 HEAPF32[$26>>2] = 0.30000001192092896;
 $27 = ((($4)) + 60|0);
 HEAPF32[$27>>2] = 0.20000000298023224;
 $28 = ((($4)) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 FUNCTION_TABLE_vi[$32 & 127]($29);
 $33 = (+__Z6Randomff(0.20000000298023224,1.0));
 $34 = ((($4)) + 68|0);
 HEAPF32[$34>>2] = $33;
 $35 = (+__Z6Randomff(0.20000000298023224,1.0));
 $36 = ((($4)) + 72|0);
 HEAPF32[$36>>2] = $35;
 $37 = (+__Z6Randomff(0.20000000298023224,1.0));
 $38 = ((($4)) + 76|0);
 HEAPF32[$38>>2] = $37;
 STACKTOP = sp;return;
}
function __ZN4Body9SetOrientEf($this,$radians) {
 $this = $this|0;
 $radians = +$radians;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $radians;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 24|0);
 HEAPF32[$4>>2] = $3;
 $5 = ((($2)) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 FUNCTION_TABLE_vid[$9 & 127]($6,$10);
 STACKTOP = sp;return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1698]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 6836;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[1698]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((76|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_550($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 19;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=640; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>($l>>>0);
 $l$ = $5 ? $l : $4;
 $$cast = $3;
 _memcpy(($$cast|0),($s|0),($l$|0))|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + ($l$)|0);
 HEAP32[$2>>2] = $7;
 return ($l|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 127]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
 var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3191$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0;
 var $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi190$iZ2D = 0, $$pre170 = 0, $$pre171 = 0, $$pre185$i = 0, $$pre188$i = 0;
 var $$pre189$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0;
 var $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0;
 var $i$3101$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0;
 var $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond122 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$0$ = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0;
 var $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0;
 var $s$7 = 0, $s$7$lcssa298 = 0, $s1$0$i = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $scevgep182$i = 0, $scevgep182183$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0;
 var $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0;
 var $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = $buf$i;
 $6 = (0 - ($5))|0;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($5))|0;
 $11 = (-2 - ($5))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;$s$0 = $fmt;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$s$0>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;$s$1 = $s$0;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $s$292 = $s$1;$z$093 = $s$1;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $s$2$lcssa = $s$1;$z$0$lcssa = $s$1;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($s$1)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$s$1 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($s$292)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(37);
     if (!($28)) {
      $s$2$lcssa = $s$292;$z$0$lcssa = $z$093;
      break L12;
     }
     $29 = ((($z$093)) + 1|0);
     $30 = ((($s$292)) + 2|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(37);
     if ($32) {
      $s$292 = $30;$z$093 = $29;
      label = 9;
     } else {
      $s$2$lcssa = $30;$z$0$lcssa = $29;
      break;
     }
    }
   }
  } while(0);
  $33 = $z$0$lcssa;
  $34 = $s$0;
  $35 = (($33) - ($34))|0;
  if ($0) {
   $36 = HEAP32[$f>>2]|0;
   $37 = $36 & 32;
   $38 = ($37|0)==(0);
   if ($38) {
    (___fwritex($s$0,$35,$f)|0);
   }
  }
  $39 = ($z$0$lcssa|0)==($s$0|0);
  if (!($39)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$l$0 = $35;$s$0 = $s$2$lcssa;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $40 = ((($s$2$lcssa)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $isdigittmp = (($42) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $43 = ((($s$2$lcssa)) + 2|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(36);
   $46 = ((($s$2$lcssa)) + 3|0);
   $$43 = $45 ? $46 : $40;
   $$l10n$0 = $45 ? 1 : $l10n$0;
   $isdigittmp$ = $45 ? $isdigittmp : -1;
   $$pre170 = HEAP8[$$43>>0]|0;
   $48 = $$pre170;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $48 = $41;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  $49 = $47 & -32;
  $50 = ($49|0)==(32);
  L25: do {
   if ($50) {
    $52 = $47;$57 = $48;$fl$0100 = 0;$storemerge899 = $storemerge;
    while(1) {
     $51 = (($52) + -32)|0;
     $53 = 1 << $51;
     $54 = $53 & 75913;
     $55 = ($54|0)==(0);
     if ($55) {
      $66 = $57;$fl$053 = $fl$0100;$storemerge851 = $storemerge899;
      break L25;
     }
     $56 = $57 << 24 >> 24;
     $58 = (($56) + -32)|0;
     $59 = 1 << $58;
     $60 = $59 | $fl$0100;
     $61 = ((($storemerge899)) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = $63 & -32;
     $65 = ($64|0)==(32);
     if ($65) {
      $52 = $63;$57 = $62;$fl$0100 = $60;$storemerge899 = $61;
     } else {
      $66 = $62;$fl$053 = $60;$storemerge851 = $61;
      break;
     }
    }
   } else {
    $66 = $48;$fl$053 = 0;$storemerge851 = $storemerge;
   }
  } while(0);
  $67 = ($66<<24>>24)==(42);
  do {
   if ($67) {
    $68 = ((($storemerge851)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $isdigittmp11 = (($70) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $71 = ((($storemerge851)) + 2|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = ($72<<24>>24)==(36);
     if ($73) {
      $74 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$74>>2] = 10;
      $75 = HEAP8[$68>>0]|0;
      $76 = $75 << 24 >> 24;
      $77 = (($76) + -48)|0;
      $78 = (($nl_arg) + ($77<<3)|0);
      $79 = $78;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = (($79) + 4)|0;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($storemerge851)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $85;$w$0 = $81;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $86 = ($l10n$1|0)==(0);
     if (!($86)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$053;$l10n$3 = 0;$s$4 = $68;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $87 = $arglist_current;
     $88 = ((0) + 4|0);
     $expanded4 = $88;
     $expanded = (($expanded4) - 1)|0;
     $89 = (($87) + ($expanded))|0;
     $90 = ((0) + 4|0);
     $expanded8 = $90;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $91 = $89 & $expanded6;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $arglist_next = ((($92)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $68;$w$0 = $93;
    }
    $94 = ($w$0|0)<(0);
    if ($94) {
     $95 = $fl$053 | 8192;
     $96 = (0 - ($w$0))|0;
     $fl$1 = $95;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $96;
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $w$0;
    }
   } else {
    $97 = $66 << 24 >> 24;
    $isdigittmp1$i = (($97) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $101 = $storemerge851;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $98 = ($i$03$i*10)|0;
      $99 = (($98) + ($isdigittmp4$i))|0;
      $100 = ((($101)) + 1|0);
      $102 = HEAP8[$100>>0]|0;
      $103 = $102 << 24 >> 24;
      $isdigittmp$i = (($103) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $101 = $100;$i$03$i = $99;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $99;$$lcssa295 = $100;
       break;
      }
     }
     $104 = ($$lcssa|0)<(0);
     if ($104) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $$lcssa295;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $storemerge851;$w$1 = 0;
    }
   }
  } while(0);
  $105 = HEAP8[$s$4>>0]|0;
  $106 = ($105<<24>>24)==(46);
  L46: do {
   if ($106) {
    $107 = ((($s$4)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i22 = (($136) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $140 = $107;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $p$0 = 0;$s$6 = $107;
      break;
     }
     while(1) {
      $137 = ($i$03$i25*10)|0;
      $138 = (($137) + ($isdigittmp4$i24))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i26 = (($142) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $140 = $139;$i$03$i25 = $138;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $p$0 = $138;$s$6 = $139;
       break L46;
      }
     }
    }
    $110 = ((($s$4)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($s$4)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($s$4)) + 4|0);
      $p$0 = $123;$s$6 = $127;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded11 = $130;
     $expanded10 = (($expanded11) - 1)|0;
     $131 = (($129) + ($expanded10))|0;
     $132 = ((0) + 4|0);
     $expanded15 = $132;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $133 = $131 & $expanded13;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $p$0 = $135;$s$6 = $110;
    } else {
     $p$0 = 0;$s$6 = $110;
    }
   } else {
    $p$0 = -1;$s$6 = $s$4;
   }
  } while(0);
  $s$7 = $s$6;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$s$7>>0]|0;
   $144 = $143 << 24 >> 24;
   $145 = (($144) + -65)|0;
   $146 = ($145>>>0)>(57);
   if ($146) {
    $$0 = -1;
    break L1;
   }
   $147 = ((($s$7)) + 1|0);
   $148 = ((1330 + (($st$0*58)|0)|0) + ($145)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = (($150) + -1)|0;
   $152 = ($151>>>0)<(8);
   if ($152) {
    $s$7 = $147;$st$0 = $150;
   } else {
    $$lcssa300 = $147;$$lcssa301 = $149;$$lcssa302 = $150;$s$7$lcssa298 = $s$7;$st$0$lcssa299 = $st$0;
    break;
   }
  }
  $153 = ($$lcssa301<<24>>24)==(0);
  if ($153) {
   $$0 = -1;
   break;
  }
  $154 = ($$lcssa301<<24>>24)==(19);
  $155 = ($argpos$0|0)>(-1);
  do {
   if ($154) {
    if ($155) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($155) {
     $156 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$156>>2] = $$lcssa302;
     $157 = (($nl_arg) + ($argpos$0<<3)|0);
     $158 = $157;
     $159 = $158;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($158) + 4)|0;
     $162 = $161;
     $163 = HEAP32[$162>>2]|0;
     $164 = $arg;
     $165 = $164;
     HEAP32[$165>>2] = $160;
     $166 = (($164) + 4)|0;
     $167 = $166;
     HEAP32[$167>>2] = $163;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_598($arg,$$lcssa302,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue;
   }
  }
  $168 = HEAP8[$s$7$lcssa298>>0]|0;
  $169 = $168 << 24 >> 24;
  $170 = ($st$0$lcssa299|0)!=(0);
  $171 = $169 & 15;
  $172 = ($171|0)==(3);
  $or$cond15 = $170 & $172;
  $173 = $169 & -33;
  $t$0 = $or$cond15 ? $173 : $169;
  $174 = $fl$1 & 8192;
  $175 = ($174|0)==(0);
  $176 = $fl$1 & -65537;
  $fl$1$ = $175 ? $fl$1 : $176;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa299|0) {
    case 0:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 1:  {
     $184 = HEAP32[$arg>>2]|0;
     HEAP32[$184>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 2:  {
     $185 = ($cnt$1|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$arg>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $cnt$1;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 3:  {
     $192 = $cnt$1&65535;
     $193 = HEAP32[$arg>>2]|0;
     HEAP16[$193>>1] = $192;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 4:  {
     $194 = $cnt$1&255;
     $195 = HEAP32[$arg>>2]|0;
     HEAP8[$195>>0] = $194;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 6:  {
     $196 = HEAP32[$arg>>2]|0;
     HEAP32[$196>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 7:  {
     $197 = ($cnt$1|0)<(0);
     $198 = $197 << 31 >> 31;
     $199 = HEAP32[$arg>>2]|0;
     $200 = $199;
     $201 = $200;
     HEAP32[$201>>2] = $cnt$1;
     $202 = (($200) + 4)|0;
     $203 = $202;
     HEAP32[$203>>2] = $198;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $204 = ($p$0>>>0)>(8);
    $205 = $204 ? $p$0 : 8;
    $206 = $fl$1$ | 8;
    $fl$3 = $206;$p$1 = $205;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $244 = $arg;
    $245 = $244;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($244) + 4)|0;
    $248 = $247;
    $249 = HEAP32[$248>>2]|0;
    $250 = ($246|0)==(0);
    $251 = ($249|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$254 = $246;$258 = $249;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = ((($$03$i33)) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i = $257;
       break;
      } else {
       $$03$i33 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 1810;
     label = 77;
    } else {
     $266 = $$0$lcssa$i;
     $267 = (($2) - ($266))|0;
     $268 = ($p$0|0)>($267|0);
     $269 = (($267) + 1)|0;
     $p$0$ = $268 ? $p$0 : $269;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0$;$pl$1 = 0;$prefix$1 = 1810;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $270 = $arg;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = (($270) + 4)|0;
    $274 = $273;
    $275 = HEAP32[$274>>2]|0;
    $276 = ($275|0)<(0);
    if ($276) {
     $277 = (_i64Subtract(0,0,($272|0),($275|0))|0);
     $278 = tempRet0;
     $279 = $arg;
     $280 = $279;
     HEAP32[$280>>2] = $277;
     $281 = (($279) + 4)|0;
     $282 = $281;
     HEAP32[$282>>2] = $278;
     $287 = $277;$288 = $278;$pl$0 = 1;$prefix$0 = 1810;
     label = 76;
     break L75;
    }
    $283 = $fl$1$ & 2048;
    $284 = ($283|0)==(0);
    if ($284) {
     $285 = $fl$1$ & 1;
     $286 = ($285|0)==(0);
     $$ = $286 ? 1810 : (1812);
     $287 = $272;$288 = $275;$pl$0 = $285;$prefix$0 = $$;
     label = 76;
    } else {
     $287 = $272;$288 = $275;$pl$0 = 1;$prefix$0 = (1811);
     label = 76;
    }
    break;
   }
   case 117:  {
    $177 = $arg;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($177) + 4)|0;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $287 = $179;$288 = $182;$pl$0 = 0;$prefix$0 = 1810;
    label = 76;
    break;
   }
   case 99:  {
    $308 = $arg;
    $309 = $308;
    $310 = HEAP32[$309>>2]|0;
    $311 = (($308) + 4)|0;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = $310&255;
    HEAP8[$3>>0] = $314;
    $a$2 = $3;$fl$6 = $176;$p$5 = 1;$pl$2 = 0;$prefix$2 = 1810;$z$2 = $1;
    break;
   }
   case 109:  {
    $315 = (___errno_location()|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (_strerror($316)|0);
    $a$1 = $317;
    label = 82;
    break;
   }
   case 115:  {
    $318 = HEAP32[$arg>>2]|0;
    $319 = ($318|0)!=(0|0);
    $320 = $319 ? $318 : 3712;
    $a$1 = $320;
    label = 82;
    break;
   }
   case 67:  {
    $327 = $arg;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    HEAP32[$wc>>2] = $329;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $798 = $wc;$p$4176 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $$pre171 = HEAP32[$arg>>2]|0;
    $333 = ($p$0|0)==(0);
    if ($333) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;$p$4176 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $358 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $358;$359 = HEAP32[tempDoublePtr>>2]|0;
    $360 = HEAP32[tempDoublePtr+4>>2]|0;
    $361 = ($360|0)<(0);
    if ($361) {
     $362 = -$358;
     $$07$i = $362;$pl$0$i = 1;$prefix$0$i = 3719;
    } else {
     $363 = $fl$1$ & 2048;
     $364 = ($363|0)==(0);
     if ($364) {
      $365 = $fl$1$ & 1;
      $366 = ($365|0)==(0);
      $$$i = $366 ? (3720) : (3725);
      $$07$i = $358;$pl$0$i = $365;$prefix$0$i = $$$i;
     } else {
      $$07$i = $358;$pl$0$i = 1;$prefix$0$i = (3722);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$367 = HEAP32[tempDoublePtr>>2]|0;
    $368 = HEAP32[tempDoublePtr+4>>2]|0;
    $369 = $368 & 2146435072;
    $370 = ($369>>>0)<(2146435072);
    $371 = (0)<(0);
    $372 = ($369|0)==(2146435072);
    $373 = $372 & $371;
    $374 = $370 | $373;
    do {
     if ($374) {
      $390 = (+_frexpl($$07$i,$e2$i));
      $391 = $390 * 2.0;
      $392 = $391 != 0.0;
      if ($392) {
       $393 = HEAP32[$e2$i>>2]|0;
       $394 = (($393) + -1)|0;
       HEAP32[$e2$i>>2] = $394;
      }
      $395 = $t$0 | 32;
      $396 = ($395|0)==(97);
      if ($396) {
       $397 = $t$0 & 32;
       $398 = ($397|0)==(0);
       $399 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $398 ? $prefix$0$i : $399;
       $400 = $pl$0$i | 2;
       $401 = ($p$0>>>0)>(11);
       $402 = (12 - ($p$0))|0;
       $403 = ($402|0)==(0);
       $404 = $401 | $403;
       do {
        if ($404) {
         $$1$i = $391;
        } else {
         $re$171$i = $402;$round$070$i = 8.0;
         while(1) {
          $405 = (($re$171$i) + -1)|0;
          $406 = $round$070$i * 16.0;
          $407 = ($405|0)==(0);
          if ($407) {
           $$lcssa319 = $406;
           break;
          } else {
           $re$171$i = $405;$round$070$i = $406;
          }
         }
         $408 = HEAP8[$prefix$0$$i>>0]|0;
         $409 = ($408<<24>>24)==(45);
         if ($409) {
          $410 = -$391;
          $411 = $410 - $$lcssa319;
          $412 = $$lcssa319 + $411;
          $413 = -$412;
          $$1$i = $413;
          break;
         } else {
          $414 = $391 + $$lcssa319;
          $415 = $414 - $$lcssa319;
          $$1$i = $415;
          break;
         }
        }
       } while(0);
       $416 = HEAP32[$e2$i>>2]|0;
       $417 = ($416|0)<(0);
       $418 = (0 - ($416))|0;
       $419 = $417 ? $418 : $416;
       $420 = ($419|0)<(0);
       $421 = $420 << 31 >> 31;
       $422 = (_fmt_u($419,$421,$7)|0);
       $423 = ($422|0)==($7|0);
       if ($423) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $422;
       }
       $424 = $416 >> 31;
       $425 = $424 & 2;
       $426 = (($425) + 43)|0;
       $427 = $426&255;
       $428 = ((($estr$0$i)) + -1|0);
       HEAP8[$428>>0] = $427;
       $429 = (($t$0) + 15)|0;
       $430 = $429&255;
       $431 = ((($estr$0$i)) + -2|0);
       HEAP8[$431>>0] = $430;
       $notrhs$i = ($p$0|0)<(1);
       $432 = $fl$1$ & 8;
       $433 = ($432|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $434 = (~~(($$2$i)));
        $435 = (1794 + ($434)|0);
        $436 = HEAP8[$435>>0]|0;
        $437 = $436&255;
        $438 = $437 | $397;
        $439 = $438&255;
        $440 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $439;
        $441 = (+($434|0));
        $442 = $$2$i - $441;
        $443 = $442 * 16.0;
        $444 = $440;
        $445 = (($444) - ($5))|0;
        $446 = ($445|0)==(1);
        do {
         if ($446) {
          $notlhs$i = $443 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $433 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $440;
           break;
          }
          $447 = ((($s$0$i)) + 2|0);
          HEAP8[$440>>0] = 46;
          $s$1$i = $447;
         } else {
          $s$1$i = $440;
         }
        } while(0);
        $448 = $443 != 0.0;
        if ($448) {
         $$2$i = $443;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $449 = ($p$0|0)!=(0);
       $$pre188$i = $s$1$i$lcssa;
       $450 = (($11) + ($$pre188$i))|0;
       $451 = ($450|0)<($p$0|0);
       $or$cond122 = $449 & $451;
       $452 = $431;
       $453 = (($12) + ($p$0))|0;
       $454 = (($453) - ($452))|0;
       $455 = (($10) - ($452))|0;
       $456 = (($455) + ($$pre188$i))|0;
       $l$0$i = $or$cond122 ? $454 : $456;
       $457 = (($l$0$i) + ($400))|0;
       _pad($f,32,$w$1,$457,$fl$1$);
       $458 = HEAP32[$f>>2]|0;
       $459 = $458 & 32;
       $460 = ($459|0)==(0);
       if ($460) {
        (___fwritex($prefix$0$$i,$400,$f)|0);
       }
       $461 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$457,$461);
       $462 = (($$pre188$i) - ($5))|0;
       $463 = HEAP32[$f>>2]|0;
       $464 = $463 & 32;
       $465 = ($464|0)==(0);
       if ($465) {
        (___fwritex($buf$i,$462,$f)|0);
       }
       $466 = (($9) - ($452))|0;
       $sum = (($462) + ($466))|0;
       $467 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$467,0,0);
       $468 = HEAP32[$f>>2]|0;
       $469 = $468 & 32;
       $470 = ($469|0)==(0);
       if ($470) {
        (___fwritex($431,$466,$f)|0);
       }
       $471 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$457,$471);
       $472 = ($457|0)<($w$1|0);
       $w$$i = $472 ? $w$1 : $457;
       $$0$i = $w$$i;
       break;
      }
      $473 = ($p$0|0)<(0);
      $$p$i = $473 ? 6 : $p$0;
      if ($392) {
       $474 = $391 * 268435456.0;
       $475 = HEAP32[$e2$i>>2]|0;
       $476 = (($475) + -28)|0;
       HEAP32[$e2$i>>2] = $476;
       $$3$i = $474;$477 = $476;
      } else {
       $$pre185$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $391;$477 = $$pre185$i;
      }
      $478 = ($477|0)<(0);
      $$33$i = $478 ? $big$i : $13;
      $479 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $480 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $480;
       $481 = ((($z$0$i)) + 4|0);
       $482 = (+($480>>>0));
       $483 = $$4$i - $482;
       $484 = $483 * 1.0E+9;
       $485 = $484 != 0.0;
       if ($485) {
        $$4$i = $484;$z$0$i = $481;
       } else {
        $$lcssa303 = $481;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $486 = ($$pr$i|0)>(0);
      if ($486) {
       $487 = $$pr$i;$a$1149$i = $$33$i;$z$1148$i = $$lcssa303;
       while(1) {
        $488 = ($487|0)>(29);
        $489 = $488 ? 29 : $487;
        $d$0141$i = ((($z$1148$i)) + -4|0);
        $490 = ($d$0141$i>>>0)<($a$1149$i>>>0);
        do {
         if ($490) {
          $a$2$ph$i = $a$1149$i;
         } else {
          $carry$0142$i = 0;$d$0143$i = $d$0141$i;
          while(1) {
           $491 = HEAP32[$d$0143$i>>2]|0;
           $492 = (_bitshift64Shl(($491|0),0,($489|0))|0);
           $493 = tempRet0;
           $494 = (_i64Add(($492|0),($493|0),($carry$0142$i|0),0)|0);
           $495 = tempRet0;
           $496 = (___uremdi3(($494|0),($495|0),1000000000,0)|0);
           $497 = tempRet0;
           HEAP32[$d$0143$i>>2] = $496;
           $498 = (___udivdi3(($494|0),($495|0),1000000000,0)|0);
           $499 = tempRet0;
           $d$0$i = ((($d$0143$i)) + -4|0);
           $500 = ($d$0$i>>>0)<($a$1149$i>>>0);
           if ($500) {
            $$lcssa304 = $498;
            break;
           } else {
            $carry$0142$i = $498;$d$0143$i = $d$0$i;
           }
          }
          $501 = ($$lcssa304|0)==(0);
          if ($501) {
           $a$2$ph$i = $a$1149$i;
           break;
          }
          $502 = ((($a$1149$i)) + -4|0);
          HEAP32[$502>>2] = $$lcssa304;
          $a$2$ph$i = $502;
         }
        } while(0);
        $z$2$i = $z$1148$i;
        while(1) {
         $503 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($503)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $504 = ((($z$2$i)) + -4|0);
         $505 = HEAP32[$504>>2]|0;
         $506 = ($505|0)==(0);
         if ($506) {
          $z$2$i = $504;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $507 = HEAP32[$e2$i>>2]|0;
        $508 = (($507) - ($489))|0;
        HEAP32[$e2$i>>2] = $508;
        $509 = ($508|0)>(0);
        if ($509) {
         $487 = $508;$a$1149$i = $a$2$ph$i;$z$1148$i = $z$2$i$lcssa;
        } else {
         $$pr50$i = $508;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa303;
      }
      $510 = ($$pr50$i|0)<(0);
      if ($510) {
       $511 = (($$p$i) + 25)|0;
       $512 = (($511|0) / 9)&-1;
       $513 = (($512) + 1)|0;
       $514 = ($395|0)==(102);
       $516 = $$pr50$i;$a$3136$i = $a$1$lcssa$i;$z$3135$i = $z$1$lcssa$i;
       while(1) {
        $515 = (0 - ($516))|0;
        $517 = ($515|0)>(9);
        $518 = $517 ? 9 : $515;
        $519 = ($a$3136$i>>>0)<($z$3135$i>>>0);
        do {
         if ($519) {
          $523 = 1 << $518;
          $524 = (($523) + -1)|0;
          $525 = 1000000000 >>> $518;
          $carry3$0130$i = 0;$d$1129$i = $a$3136$i;
          while(1) {
           $526 = HEAP32[$d$1129$i>>2]|0;
           $527 = $526 & $524;
           $528 = $526 >>> $518;
           $529 = (($528) + ($carry3$0130$i))|0;
           HEAP32[$d$1129$i>>2] = $529;
           $530 = Math_imul($527, $525)|0;
           $531 = ((($d$1129$i)) + 4|0);
           $532 = ($531>>>0)<($z$3135$i>>>0);
           if ($532) {
            $carry3$0130$i = $530;$d$1129$i = $531;
           } else {
            $$lcssa306 = $530;
            break;
           }
          }
          $533 = HEAP32[$a$3136$i>>2]|0;
          $534 = ($533|0)==(0);
          $535 = ((($a$3136$i)) + 4|0);
          $$a$3$i = $534 ? $535 : $a$3136$i;
          $536 = ($$lcssa306|0)==(0);
          if ($536) {
           $$a$3192$i = $$a$3$i;$z$4$i = $z$3135$i;
           break;
          }
          $537 = ((($z$3135$i)) + 4|0);
          HEAP32[$z$3135$i>>2] = $$lcssa306;
          $$a$3192$i = $$a$3$i;$z$4$i = $537;
         } else {
          $520 = HEAP32[$a$3136$i>>2]|0;
          $521 = ($520|0)==(0);
          $522 = ((($a$3136$i)) + 4|0);
          $$a$3191$i = $521 ? $522 : $a$3136$i;
          $$a$3192$i = $$a$3191$i;$z$4$i = $z$3135$i;
         }
        } while(0);
        $538 = $514 ? $$33$i : $$a$3192$i;
        $539 = $z$4$i;
        $540 = $538;
        $541 = (($539) - ($540))|0;
        $542 = $541 >> 2;
        $543 = ($542|0)>($513|0);
        $544 = (($538) + ($513<<2)|0);
        $$z$4$i = $543 ? $544 : $z$4$i;
        $545 = HEAP32[$e2$i>>2]|0;
        $546 = (($545) + ($518))|0;
        HEAP32[$e2$i>>2] = $546;
        $547 = ($546|0)<(0);
        if ($547) {
         $516 = $546;$a$3136$i = $$a$3192$i;$z$3135$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3192$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $548 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($548) {
        $549 = $a$3$lcssa$i;
        $550 = (($479) - ($549))|0;
        $551 = $550 >> 2;
        $552 = ($551*9)|0;
        $553 = HEAP32[$a$3$lcssa$i>>2]|0;
        $554 = ($553>>>0)<(10);
        if ($554) {
         $e$1$i = $552;
         break;
        } else {
         $e$0125$i = $552;$i$0124$i = 10;
        }
        while(1) {
         $555 = ($i$0124$i*10)|0;
         $556 = (($e$0125$i) + 1)|0;
         $557 = ($553>>>0)<($555>>>0);
         if ($557) {
          $e$1$i = $556;
          break;
         } else {
          $e$0125$i = $556;$i$0124$i = $555;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $558 = ($395|0)!=(102);
      $559 = $558 ? $e$1$i : 0;
      $560 = (($$p$i) - ($559))|0;
      $561 = ($395|0)==(103);
      $562 = ($$p$i|0)!=(0);
      $563 = $562 & $561;
      $$neg55$i = $563 << 31 >> 31;
      $564 = (($560) + ($$neg55$i))|0;
      $565 = $z$3$lcssa$i;
      $566 = (($565) - ($479))|0;
      $567 = $566 >> 2;
      $568 = ($567*9)|0;
      $569 = (($568) + -9)|0;
      $570 = ($564|0)<($569|0);
      if ($570) {
       $571 = ((($$33$i)) + 4|0);
       $572 = (($564) + 9216)|0;
       $573 = (($572|0) / 9)&-1;
       $574 = (($573) + -1024)|0;
       $575 = (($571) + ($574<<2)|0);
       $576 = (($572|0) % 9)&-1;
       $j$0117$i = (($576) + 1)|0;
       $577 = ($j$0117$i|0)<(9);
       if ($577) {
        $i$1118$i = 10;$j$0119$i = $j$0117$i;
        while(1) {
         $578 = ($i$1118$i*10)|0;
         $j$0$i = (($j$0119$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $578;
          break;
         } else {
          $i$1118$i = $578;$j$0119$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $579 = HEAP32[$575>>2]|0;
       $580 = (($579>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $581 = ($580|0)==(0);
       $582 = ((($575)) + 4|0);
       $583 = ($582|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $583 & $581;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
        } else {
         $584 = (($579>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $585 = $584 & 1;
         $586 = ($585|0)==(0);
         $$20$i = $586 ? 9007199254740992.0 : 9007199254740994.0;
         $587 = (($i$1$lcssa$i|0) / 2)&-1;
         $588 = ($580>>>0)<($587>>>0);
         if ($588) {
          $small$0$i = 0.5;
         } else {
          $589 = ($580|0)==($587|0);
          $or$cond22$i = $583 & $589;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $590 = ($pl$0$i|0)==(0);
         do {
          if ($590) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $591 = HEAP8[$prefix$0$i>>0]|0;
           $592 = ($591<<24>>24)==(45);
           if (!($592)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $593 = -$$20$i;
           $594 = -$small$0$i;
           $round6$1$i = $593;$small$1$i = $594;
          }
         } while(0);
         $595 = (($579) - ($580))|0;
         HEAP32[$575>>2] = $595;
         $596 = $round6$1$i + $small$1$i;
         $597 = $596 != $round6$1$i;
         if (!($597)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
          break;
         }
         $598 = (($595) + ($i$1$lcssa$i))|0;
         HEAP32[$575>>2] = $598;
         $599 = ($598>>>0)>(999999999);
         if ($599) {
          $a$5111$i = $a$3$lcssa$i;$d$2110$i = $575;
          while(1) {
           $600 = ((($d$2110$i)) + -4|0);
           HEAP32[$d$2110$i>>2] = 0;
           $601 = ($600>>>0)<($a$5111$i>>>0);
           if ($601) {
            $602 = ((($a$5111$i)) + -4|0);
            HEAP32[$602>>2] = 0;
            $a$6$i = $602;
           } else {
            $a$6$i = $a$5111$i;
           }
           $603 = HEAP32[$600>>2]|0;
           $604 = (($603) + 1)|0;
           HEAP32[$600>>2] = $604;
           $605 = ($604>>>0)>(999999999);
           if ($605) {
            $a$5111$i = $a$6$i;$d$2110$i = $600;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $600;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $575;
         }
         $606 = $a$5$lcssa$i;
         $607 = (($479) - ($606))|0;
         $608 = $607 >> 2;
         $609 = ($608*9)|0;
         $610 = HEAP32[$a$5$lcssa$i>>2]|0;
         $611 = ($610>>>0)<(10);
         if ($611) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $609;
          break;
         } else {
          $e$2106$i = $609;$i$2105$i = 10;
         }
         while(1) {
          $612 = ($i$2105$i*10)|0;
          $613 = (($e$2106$i) + 1)|0;
          $614 = ($610>>>0)<($612>>>0);
          if ($614) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $613;
           break;
          } else {
           $e$2106$i = $613;$i$2105$i = $612;
          }
         }
        }
       } while(0);
       $615 = ((($d$4$i)) + 4|0);
       $616 = ($z$3$lcssa$i>>>0)>($615>>>0);
       $$z$3$i = $616 ? $615 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $617 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $618 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($618)) {
        $$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
        break;
       }
       $619 = ((($z$7$i)) + -4|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = ($620|0)==(0);
       if ($621) {
        $z$7$i = $619;
       } else {
        $$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
        break;
       }
      }
      do {
       if ($561) {
        $622 = $562&1;
        $623 = $622 ^ 1;
        $$p$$i = (($623) + ($$p$i))|0;
        $624 = ($$p$$i|0)>($e$5$ph$i|0);
        $625 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $624 & $625;
        if ($or$cond6$i) {
         $626 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $627 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $626;$$210$i = $627;
        } else {
         $628 = (($t$0) + -2)|0;
         $629 = (($$p$$i) + -1)|0;
         $$013$i = $628;$$210$i = $629;
        }
        $630 = $fl$1$ & 8;
        $631 = ($630|0)==(0);
        if (!($631)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi190$iZ2D = $630;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $632 = ((($z$7$i$lcssa)) + -4|0);
          $633 = HEAP32[$632>>2]|0;
          $634 = ($633|0)==(0);
          if ($634) {
           $j$2$i = 9;
           break;
          }
          $635 = (($633>>>0) % 10)&-1;
          $636 = ($635|0)==(0);
          if ($636) {
           $i$3101$i = 10;$j$1102$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $637 = ($i$3101$i*10)|0;
           $638 = (($j$1102$i) + 1)|0;
           $639 = (($633>>>0) % ($637>>>0))&-1;
           $640 = ($639|0)==(0);
           if ($640) {
            $i$3101$i = $637;$j$1102$i = $638;
           } else {
            $j$2$i = $638;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $641 = $$013$i | 32;
        $642 = ($641|0)==(102);
        $643 = $z$7$i$lcssa;
        $644 = (($643) - ($479))|0;
        $645 = $644 >> 2;
        $646 = ($645*9)|0;
        $647 = (($646) + -9)|0;
        if ($642) {
         $648 = (($647) - ($j$2$i))|0;
         $649 = ($648|0)<(0);
         $$23$i = $649 ? 0 : $648;
         $650 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $650 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi190$iZ2D = 0;
         break;
        } else {
         $651 = (($647) + ($e$5$ph$i))|0;
         $652 = (($651) - ($j$2$i))|0;
         $653 = ($652|0)<(0);
         $$25$i = $653 ? 0 : $652;
         $654 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $654 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi190$iZ2D = 0;
         break;
        }
       } else {
        $$pre189$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi190$iZ2D = $$pre189$i;
       }
      } while(0);
      $655 = $$311$i | $$pre$phi190$iZ2D;
      $656 = ($655|0)!=(0);
      $657 = $656&1;
      $658 = $$114$i | 32;
      $659 = ($658|0)==(102);
      if ($659) {
       $660 = ($e$5$ph$i|0)>(0);
       $661 = $660 ? $e$5$ph$i : 0;
       $$pn$i = $661;$estr$2$i = 0;
      } else {
       $662 = ($e$5$ph$i|0)<(0);
       $663 = $662 ? $617 : $e$5$ph$i;
       $664 = ($663|0)<(0);
       $665 = $664 << 31 >> 31;
       $666 = (_fmt_u($663,$665,$7)|0);
       $667 = $666;
       $668 = (($9) - ($667))|0;
       $669 = ($668|0)<(2);
       if ($669) {
        $estr$195$i = $666;
        while(1) {
         $670 = ((($estr$195$i)) + -1|0);
         HEAP8[$670>>0] = 48;
         $671 = $670;
         $672 = (($9) - ($671))|0;
         $673 = ($672|0)<(2);
         if ($673) {
          $estr$195$i = $670;
         } else {
          $estr$1$lcssa$i = $670;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $666;
       }
       $674 = $e$5$ph$i >> 31;
       $675 = $674 & 2;
       $676 = (($675) + 43)|0;
       $677 = $676&255;
       $678 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$678>>0] = $677;
       $679 = $$114$i&255;
       $680 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$680>>0] = $679;
       $681 = $680;
       $682 = (($9) - ($681))|0;
       $$pn$i = $682;$estr$2$i = $680;
      }
      $683 = (($pl$0$i) + 1)|0;
      $684 = (($683) + ($$311$i))|0;
      $l$1$i = (($684) + ($657))|0;
      $685 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$685,$fl$1$);
      $686 = HEAP32[$f>>2]|0;
      $687 = $686 & 32;
      $688 = ($687|0)==(0);
      if ($688) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $689 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$685,$689);
      do {
       if ($659) {
        $690 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $690 ? $$33$i : $a$9$ph$i;
        $d$584$i = $r$0$a$9$i;
        while(1) {
         $691 = HEAP32[$d$584$i>>2]|0;
         $692 = (_fmt_u($691,0,$14)|0);
         $693 = ($d$584$i|0)==($r$0$a$9$i|0);
         do {
          if ($693) {
           $699 = ($692|0)==($14|0);
           if (!($699)) {
            $s7$1$i = $692;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $694 = ($692>>>0)>($buf$i>>>0);
           if (!($694)) {
            $s7$1$i = $692;
            break;
           }
           $695 = $692;
           $696 = (($695) - ($5))|0;
           _memset(($buf$i|0),48,($696|0))|0;
           $s7$081$i = $692;
           while(1) {
            $697 = ((($s7$081$i)) + -1|0);
            $698 = ($697>>>0)>($buf$i>>>0);
            if ($698) {
             $s7$081$i = $697;
            } else {
             $s7$1$i = $697;
             break;
            }
           }
          }
         } while(0);
         $700 = HEAP32[$f>>2]|0;
         $701 = $700 & 32;
         $702 = ($701|0)==(0);
         if ($702) {
          $703 = $s7$1$i;
          $704 = (($15) - ($703))|0;
          (___fwritex($s7$1$i,$704,$f)|0);
         }
         $705 = ((($d$584$i)) + 4|0);
         $706 = ($705>>>0)>($$33$i>>>0);
         if ($706) {
          $$lcssa316 = $705;
          break;
         } else {
          $d$584$i = $705;
         }
        }
        $707 = ($655|0)==(0);
        do {
         if (!($707)) {
          $708 = HEAP32[$f>>2]|0;
          $709 = $708 & 32;
          $710 = ($709|0)==(0);
          if (!($710)) {
           break;
          }
          (___fwritex(6100,1,$f)|0);
         }
        } while(0);
        $711 = ($$lcssa316>>>0)<($z$7$i$lcssa>>>0);
        $712 = ($$311$i|0)>(0);
        $713 = $712 & $711;
        if ($713) {
         $$41278$i = $$311$i;$d$677$i = $$lcssa316;
         while(1) {
          $714 = HEAP32[$d$677$i>>2]|0;
          $715 = (_fmt_u($714,0,$14)|0);
          $716 = ($715>>>0)>($buf$i>>>0);
          if ($716) {
           $717 = $715;
           $718 = (($717) - ($5))|0;
           _memset(($buf$i|0),48,($718|0))|0;
           $s8$072$i = $715;
           while(1) {
            $719 = ((($s8$072$i)) + -1|0);
            $720 = ($719>>>0)>($buf$i>>>0);
            if ($720) {
             $s8$072$i = $719;
            } else {
             $s8$0$lcssa$i = $719;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $715;
          }
          $721 = HEAP32[$f>>2]|0;
          $722 = $721 & 32;
          $723 = ($722|0)==(0);
          if ($723) {
           $724 = ($$41278$i|0)>(9);
           $725 = $724 ? 9 : $$41278$i;
           (___fwritex($s8$0$lcssa$i,$725,$f)|0);
          }
          $726 = ((($d$677$i)) + 4|0);
          $727 = (($$41278$i) + -9)|0;
          $728 = ($726>>>0)<($z$7$i$lcssa>>>0);
          $729 = ($$41278$i|0)>(9);
          $730 = $729 & $728;
          if ($730) {
           $$41278$i = $727;$d$677$i = $726;
          } else {
           $$412$lcssa$i = $727;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $731 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$731,9,0);
       } else {
        $732 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $732;
        $733 = ($$311$i|0)>(-1);
        if ($733) {
         $734 = ($$pre$phi190$iZ2D|0)==(0);
         $$589$i = $$311$i;$d$788$i = $a$9$ph$i;
         while(1) {
          $735 = HEAP32[$d$788$i>>2]|0;
          $736 = (_fmt_u($735,0,$14)|0);
          $737 = ($736|0)==($14|0);
          if ($737) {
           HEAP8[$16>>0] = 48;
           $s9$0$i = $16;
          } else {
           $s9$0$i = $736;
          }
          $738 = ($d$788$i|0)==($a$9$ph$i|0);
          do {
           if ($738) {
            $742 = ((($s9$0$i)) + 1|0);
            $743 = HEAP32[$f>>2]|0;
            $744 = $743 & 32;
            $745 = ($744|0)==(0);
            if ($745) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $746 = ($$589$i|0)<(1);
            $or$cond31$i = $734 & $746;
            if ($or$cond31$i) {
             $s9$2$i = $742;
             break;
            }
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if (!($749)) {
             $s9$2$i = $742;
             break;
            }
            (___fwritex(6100,1,$f)|0);
            $s9$2$i = $742;
           } else {
            $739 = ($s9$0$i>>>0)>($buf$i>>>0);
            if (!($739)) {
             $s9$2$i = $s9$0$i;
             break;
            }
            $scevgep182$i = (($s9$0$i) + ($6)|0);
            $scevgep182183$i = $scevgep182$i;
            _memset(($buf$i|0),48,($scevgep182183$i|0))|0;
            $s9$185$i = $s9$0$i;
            while(1) {
             $740 = ((($s9$185$i)) + -1|0);
             $741 = ($740>>>0)>($buf$i>>>0);
             if ($741) {
              $s9$185$i = $740;
             } else {
              $s9$2$i = $740;
              break;
             }
            }
           }
          } while(0);
          $750 = $s9$2$i;
          $751 = (($15) - ($750))|0;
          $752 = HEAP32[$f>>2]|0;
          $753 = $752 & 32;
          $754 = ($753|0)==(0);
          if ($754) {
           $755 = ($$589$i|0)>($751|0);
           $756 = $755 ? $751 : $$589$i;
           (___fwritex($s9$2$i,$756,$f)|0);
          }
          $757 = (($$589$i) - ($751))|0;
          $758 = ((($d$788$i)) + 4|0);
          $759 = ($758>>>0)<($z$7$$i>>>0);
          $760 = ($757|0)>(-1);
          $761 = $759 & $760;
          if ($761) {
           $$589$i = $757;$d$788$i = $758;
          } else {
           $$5$lcssa$i = $757;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $762 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$762,18,0);
        $763 = HEAP32[$f>>2]|0;
        $764 = $763 & 32;
        $765 = ($764|0)==(0);
        if (!($765)) {
         break;
        }
        $766 = $estr$2$i;
        $767 = (($9) - ($766))|0;
        (___fwritex($estr$2$i,$767,$f)|0);
       }
      } while(0);
      $768 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$685,$768);
      $769 = ($685|0)<($w$1|0);
      $w$32$i = $769 ? $w$1 : $685;
      $$0$i = $w$32$i;
     } else {
      $375 = $t$0 & 32;
      $376 = ($375|0)!=(0);
      $377 = $376 ? 3738 : 3742;
      $378 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $379 = $376 ? 3746 : 3750;
      $pl$1$i = $378 ? 0 : $pl$0$i;
      $s1$0$i = $378 ? $379 : $377;
      $380 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$380,$176);
      $381 = HEAP32[$f>>2]|0;
      $382 = $381 & 32;
      $383 = ($382|0)==(0);
      if ($383) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $385 = $$pre$i;
      } else {
       $385 = $381;
      }
      $384 = $385 & 32;
      $386 = ($384|0)==(0);
      if ($386) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $387 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$380,$387);
      $388 = ($380|0)<($w$1|0);
      $389 = $388 ? $w$1 : $380;
      $$0$i = $389;
     }
    } while(0);
    $cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue L1;
    break;
   }
   default: {
    $a$2 = $s$0;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 1810;$z$2 = $1;
   }
   }
  } while(0);
  L311: do {
   if ((label|0) == 64) {
    label = 0;
    $207 = $arg;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = $t$1 & 32;
    $214 = ($209|0)==(0);
    $215 = ($212|0)==(0);
    $216 = $214 & $215;
    if ($216) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 1810;
     label = 77;
    } else {
     $$012$i = $1;$218 = $209;$225 = $212;
     while(1) {
      $217 = $218 & 15;
      $219 = (1794 + ($217)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220&255;
      $222 = $221 | $213;
      $223 = $222&255;
      $224 = ((($$012$i)) + -1|0);
      HEAP8[$224>>0] = $223;
      $226 = (_bitshift64Lshr(($218|0),($225|0),4)|0);
      $227 = tempRet0;
      $228 = ($226|0)==(0);
      $229 = ($227|0)==(0);
      $230 = $228 & $229;
      if ($230) {
       $$lcssa321 = $224;
       break;
      } else {
       $$012$i = $224;$218 = $226;$225 = $227;
      }
     }
     $231 = $arg;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = (($231) + 4)|0;
     $235 = $234;
     $236 = HEAP32[$235>>2]|0;
     $237 = ($233|0)==(0);
     $238 = ($236|0)==(0);
     $239 = $237 & $238;
     $240 = $fl$3 & 8;
     $241 = ($240|0)==(0);
     $or$cond17 = $241 | $239;
     if ($or$cond17) {
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 1810;
      label = 77;
     } else {
      $242 = $t$1 >> 4;
      $243 = (1810 + ($242)|0);
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $243;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $289 = (_fmt_u($287,$288,$1)|0);
    $a$0 = $289;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $321 = (_memchr($a$1,0,$p$0)|0);
    $322 = ($321|0)==(0|0);
    $323 = $321;
    $324 = $a$1;
    $325 = (($323) - ($324))|0;
    $326 = (($a$1) + ($p$0)|0);
    $z$1 = $322 ? $326 : $321;
    $p$3 = $322 ? $p$0 : $325;
    $a$2 = $a$1;$fl$6 = $176;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 1810;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $i$0105 = 0;$l$1104 = 0;$ws$0106 = $798;
    while(1) {
     $334 = HEAP32[$ws$0106>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0105;$l$2 = $l$1104;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4176) - ($i$0105))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0105;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0106)) + 4|0);
     $341 = (($336) + ($i$0105))|0;
     $342 = ($p$4176>>>0)>($341>>>0);
     if ($342) {
      $i$0105 = $341;$l$1104 = $336;$ws$0106 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $i$1116 = 0;$ws$1117 = $798;
     while(1) {
      $345 = HEAP32[$ws$1117>>2]|0;
      $346 = ($345|0)==(0);
      if ($346) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $347 = ((($ws$1117)) + 4|0);
      $348 = (_wctomb($mb,$345)|0);
      $349 = (($348) + ($i$1116))|0;
      $350 = ($349|0)>($i$0$lcssa|0);
      if ($350) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $351 = HEAP32[$f>>2]|0;
      $352 = $351 & 32;
      $353 = ($352|0)==(0);
      if ($353) {
       (___fwritex($mb,$348,$f)|0);
      }
      $354 = ($349>>>0)<($i$0$lcssa>>>0);
      if ($354) {
       $i$1116 = $349;$ws$1117 = $347;
      } else {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 97) {
   label = 0;
   $355 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa178,$355);
   $356 = ($w$1|0)>($i$0$lcssa178|0);
   $357 = $356 ? $w$1 : $i$0$lcssa178;
   $cnt$0 = $cnt$1;$l$0 = $357;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = $arg;
   $293 = $292;
   $294 = HEAP32[$293>>2]|0;
   $295 = (($292) + 4)|0;
   $296 = $295;
   $297 = HEAP32[$296>>2]|0;
   $298 = ($294|0)!=(0);
   $299 = ($297|0)!=(0);
   $300 = $298 | $299;
   $301 = ($p$2|0)!=(0);
   $or$cond = $301 | $300;
   if ($or$cond) {
    $302 = $a$0;
    $303 = (($2) - ($302))|0;
    $304 = $300&1;
    $305 = $304 ^ 1;
    $306 = (($305) + ($303))|0;
    $307 = ($p$2|0)>($306|0);
    $p$2$ = $307 ? $p$2 : $306;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $770 = $z$2;
  $771 = $a$2;
  $772 = (($770) - ($771))|0;
  $773 = ($p$5|0)<($772|0);
  $$p$5 = $773 ? $772 : $p$5;
  $774 = (($pl$2) + ($$p$5))|0;
  $775 = ($w$1|0)<($774|0);
  $w$2 = $775 ? $774 : $w$1;
  _pad($f,32,$w$2,$774,$fl$6);
  $776 = HEAP32[$f>>2]|0;
  $777 = $776 & 32;
  $778 = ($777|0)==(0);
  if ($778) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $779 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$774,$779);
  _pad($f,48,$$p$5,$772,0);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($a$2,$772,$f)|0);
  }
  $783 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$774,$783);
  $cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
 }
 L345: do {
  if ((label|0) == 244) {
   $784 = ($f|0)==(0|0);
   if ($784) {
    $785 = ($l10n$0$lcssa|0)==(0);
    if ($785) {
     $$0 = 0;
    } else {
     $i$291 = 1;
     while(1) {
      $786 = (($nl_type) + ($i$291<<2)|0);
      $787 = HEAP32[$786>>2]|0;
      $788 = ($787|0)==(0);
      if ($788) {
       $i$291$lcssa = $i$291;
       break;
      }
      $790 = (($nl_arg) + ($i$291<<3)|0);
      _pop_arg_598($790,$787,$ap);
      $791 = (($i$291) + 1)|0;
      $792 = ($791|0)<(10);
      if ($792) {
       $i$291 = $791;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     $789 = ($i$291$lcssa|0)<(10);
     if ($789) {
      $i$389 = $i$291$lcssa;
      while(1) {
       $795 = (($nl_type) + ($i$389<<2)|0);
       $796 = HEAP32[$795>>2]|0;
       $797 = ($796|0)==(0);
       $793 = (($i$389) + 1)|0;
       if (!($797)) {
        $$0 = -1;
        break L345;
       }
       $794 = ($793|0)<(10);
       if ($794) {
        $i$389 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 127]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa12 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 127]($f,$s,$i$0$lcssa12)|0);
     $26 = ($25>>>0)<($i$0$lcssa12>>>0);
     if ($26) {
      $$0 = $i$0$lcssa12;
      break L5;
     }
     $27 = (($s) + ($i$0$lcssa12)|0);
     $28 = (($l) - ($i$0$lcssa12))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _pop_arg_598($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa19 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa19;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (1820 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 1908;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 1908;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 1908;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa30 = $$019;$s$0$lcssa29 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa30 = $$0$lcssa;$s$0$lcssa29 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa29>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa30;$s$2 = $s$0$lcssa29;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa30>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa30;$w$011 = $s$0$lcssa29;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa30;$w$0$lcssa = $s$0$lcssa29;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[159]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[159]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((6820)|0));
   $$012 = HEAP32[(6816)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((6820)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 127]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 127]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 127]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 6672;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 6672;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 6672;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0;
 var $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0;
 var $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0;
 var $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0;
 var $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0;
 var $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[1710]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (6880 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[1710] = $22;
     } else {
      $23 = HEAP32[(6856)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    return ($$0|0);
   }
   $35 = HEAP32[(6848)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (6880 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[1710] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(6856)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(6848)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(6860)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (6880 + ($93<<2)|0);
      $95 = HEAP32[1710]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[1710] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(6856)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(6848)>>2] = $82;
     HEAP32[(6860)>>2] = $85;
     $$0 = $70;
     return ($$0|0);
    }
    $107 = HEAP32[(6844)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (7144 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(6856)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (7144 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(6844)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(6844)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(6856)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(6856)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(6856)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(6848)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(6860)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (6880 + ($231<<2)|0);
       $233 = HEAP32[1710]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[1710] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(6856)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(6848)>>2] = $rsize$0$i$lcssa;
      HEAP32[(6860)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(6844)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (7144 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
       while(1) {
        $285 = ((($t$0$i4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i4;
         }
        } else {
         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
        }
        $291 = ((($t$0$i4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (7144 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(6848)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(6856)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i11 = 0;
           break;
          } else {
           $R$1$i9 = $371;$RP$1$i8 = $370;
          }
         } else {
          $R$1$i9 = $368;$RP$1$i8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i9 = $374;$RP$1$i8 = $373;
           continue;
          }
          $376 = ((($R$1$i9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i9$lcssa = $R$1$i9;$RP$1$i8$lcssa = $RP$1$i8;
           break;
          } else {
           $R$1$i9 = $377;$RP$1$i8 = $376;
          }
         }
         $379 = ($RP$1$i8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i8$lcssa>>2] = 0;
          $R$3$i11 = $R$1$i9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (7144 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i11;
          $cond$i12 = ($R$3$i11|0)==(0|0);
          if ($cond$i12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(6844)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(6844)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(6856)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i11;
          }
          $396 = ($R$3$i11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(6856)>>2]|0;
         $398 = ($R$3$i11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(6856)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (6880 + ($428<<2)|0);
          $430 = HEAP32[1710]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[1710] = $434;
           $$pre$i13 = ((($429)) + 8|0);
           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(6856)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (7144 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(6844)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(6844)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(6856)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(6856)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(6848)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(6860)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(6860)>>2] = $514;
   HEAP32[(6848)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(6848)>>2] = 0;
   HEAP32[(6860)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  return ($$0|0);
 }
 $527 = HEAP32[(6852)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(6852)>>2] = $529;
  $530 = HEAP32[(6864)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(6864)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  return ($$0|0);
 }
 $537 = HEAP32[1828]|0;
 $538 = ($537|0)==(0);
 do {
  if ($538) {
   $539 = (_sysconf(30)|0);
   $540 = (($539) + -1)|0;
   $541 = $540 & $539;
   $542 = ($541|0)==(0);
   if ($542) {
    HEAP32[(7320)>>2] = $539;
    HEAP32[(7316)>>2] = $539;
    HEAP32[(7324)>>2] = -1;
    HEAP32[(7328)>>2] = -1;
    HEAP32[(7332)>>2] = 0;
    HEAP32[(7284)>>2] = 0;
    $543 = (_time((0|0))|0);
    $544 = $543 & -16;
    $545 = $544 ^ 1431655768;
    HEAP32[1828] = $545;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $546 = (($nb$0) + 48)|0;
 $547 = HEAP32[(7320)>>2]|0;
 $548 = (($nb$0) + 47)|0;
 $549 = (($547) + ($548))|0;
 $550 = (0 - ($547))|0;
 $551 = $549 & $550;
 $552 = ($551>>>0)>($nb$0>>>0);
 if (!($552)) {
  $$0 = 0;
  return ($$0|0);
 }
 $553 = HEAP32[(7280)>>2]|0;
 $554 = ($553|0)==(0);
 if (!($554)) {
  $555 = HEAP32[(7272)>>2]|0;
  $556 = (($555) + ($551))|0;
  $557 = ($556>>>0)<=($555>>>0);
  $558 = ($556>>>0)>($553>>>0);
  $or$cond1$i16 = $557 | $558;
  if ($or$cond1$i16) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $559 = HEAP32[(7284)>>2]|0;
 $560 = $559 & 4;
 $561 = ($560|0)==(0);
 L257: do {
  if ($561) {
   $562 = HEAP32[(6864)>>2]|0;
   $563 = ($562|0)==(0|0);
   L259: do {
    if ($563) {
     label = 173;
    } else {
     $sp$0$i$i = (7288);
     while(1) {
      $564 = HEAP32[$sp$0$i$i>>2]|0;
      $565 = ($564>>>0)>($562>>>0);
      if (!($565)) {
       $566 = ((($sp$0$i$i)) + 4|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (($564) + ($567)|0);
       $569 = ($568>>>0)>($562>>>0);
       if ($569) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $566;
        break;
       }
      }
      $570 = ((($sp$0$i$i)) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($571|0)==(0|0);
      if ($572) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $571;
      }
     }
     $595 = HEAP32[(6852)>>2]|0;
     $596 = (($549) - ($595))|0;
     $597 = $596 & $550;
     $598 = ($597>>>0)<(2147483647);
     if ($598) {
      $599 = (_sbrk(($597|0))|0);
      $600 = HEAP32[$$lcssa153>>2]|0;
      $601 = HEAP32[$$lcssa155>>2]|0;
      $602 = (($600) + ($601)|0);
      $603 = ($599|0)==($602|0);
      if ($603) {
       $604 = ($599|0)==((-1)|0);
       if (!($604)) {
        $tbase$746$i = $599;$tsize$745$i = $597;
        label = 193;
        break L257;
       }
      } else {
       $br$2$ph$i = $599;$ssize$2$ph$i = $597;
       label = 183;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if (!($574)) {
      $575 = $573;
      $576 = HEAP32[(7316)>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $551;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($551) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[(7272)>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i17 = $587 & $588;
      if ($or$cond$i17) {
       $589 = HEAP32[(7280)>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $tbase$746$i = $573;$tsize$745$i = $ssize$0$i;
        label = 193;
        break L257;
       } else {
        $br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
        label = 183;
       }
      }
     }
    }
   } while(0);
   L279: do {
    if ((label|0) == 183) {
     $605 = (0 - ($ssize$2$ph$i))|0;
     $606 = ($br$2$ph$i|0)!=((-1)|0);
     $607 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $607 & $606;
     $608 = ($546>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $608 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $609 = HEAP32[(7320)>>2]|0;
       $610 = (($548) - ($ssize$2$ph$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         break L279;
        } else {
         $617 = (($613) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $617;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $618 = ($br$2$ph$i|0)==((-1)|0);
     if (!($618)) {
      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
      label = 193;
      break L257;
     }
    }
   } while(0);
   $619 = HEAP32[(7284)>>2]|0;
   $620 = $619 | 4;
   HEAP32[(7284)>>2] = $620;
   label = 190;
  } else {
   label = 190;
  }
 } while(0);
 if ((label|0) == 190) {
  $621 = ($551>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($551|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond5$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond10$i = $626 & $or$cond5$i;
   if ($or$cond10$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $$not$i = ($629>>>0)>($630>>>0);
    if ($$not$i) {
     $tbase$746$i = $622;$tsize$745$i = $629;
     label = 193;
    }
   }
  }
 }
 if ((label|0) == 193) {
  $631 = HEAP32[(7272)>>2]|0;
  $632 = (($631) + ($tsize$745$i))|0;
  HEAP32[(7272)>>2] = $632;
  $633 = HEAP32[(7276)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(7276)>>2] = $632;
  }
  $635 = HEAP32[(6864)>>2]|0;
  $636 = ($635|0)==(0|0);
  do {
   if ($636) {
    $637 = HEAP32[(6856)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$746$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(6856)>>2] = $tbase$746$i;
    }
    HEAP32[(7288)>>2] = $tbase$746$i;
    HEAP32[(7292)>>2] = $tsize$745$i;
    HEAP32[(7300)>>2] = 0;
    $640 = HEAP32[1828]|0;
    HEAP32[(6876)>>2] = $640;
    HEAP32[(6872)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $641 = $i$01$i$i << 1;
     $642 = (6880 + ($641<<2)|0);
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = $642;
     $644 = ((($642)) + 8|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $645;
     }
    }
    $646 = (($tsize$745$i) + -40)|0;
    $647 = ((($tbase$746$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$746$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(6864)>>2] = $654;
    HEAP32[(6852)>>2] = $655;
    $656 = $655 | 1;
    $657 = ((($654)) + 4|0);
    HEAP32[$657>>2] = $656;
    $658 = (($654) + ($655)|0);
    $659 = ((($658)) + 4|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[(7328)>>2]|0;
    HEAP32[(6868)>>2] = $660;
   } else {
    $sp$068$i = (7288);
    while(1) {
     $661 = HEAP32[$sp$068$i>>2]|0;
     $662 = ((($sp$068$i)) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$746$i|0)==($664|0);
     if ($665) {
      $$lcssa147 = $661;$$lcssa149 = $662;$$lcssa151 = $663;$sp$068$i$lcssa = $sp$068$i;
      label = 203;
      break;
     }
     $666 = ((($sp$068$i)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$068$i = $667;
     }
    }
    if ((label|0) == 203) {
     $669 = ((($sp$068$i$lcssa)) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($635>>>0)>=($$lcssa147>>>0);
      $674 = ($635>>>0)<($tbase$746$i>>>0);
      $or$cond48$i = $674 & $673;
      if ($or$cond48$i) {
       $675 = (($$lcssa151) + ($tsize$745$i))|0;
       HEAP32[$$lcssa149>>2] = $675;
       $676 = HEAP32[(6852)>>2]|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($tsize$745$i) - ($683))|0;
       $686 = (($685) + ($676))|0;
       HEAP32[(6864)>>2] = $684;
       HEAP32[(6852)>>2] = $686;
       $687 = $686 | 1;
       $688 = ((($684)) + 4|0);
       HEAP32[$688>>2] = $687;
       $689 = (($684) + ($686)|0);
       $690 = ((($689)) + 4|0);
       HEAP32[$690>>2] = 40;
       $691 = HEAP32[(7328)>>2]|0;
       HEAP32[(6868)>>2] = $691;
       break;
      }
     }
    }
    $692 = HEAP32[(6856)>>2]|0;
    $693 = ($tbase$746$i>>>0)<($692>>>0);
    if ($693) {
     HEAP32[(6856)>>2] = $tbase$746$i;
     $757 = $tbase$746$i;
    } else {
     $757 = $692;
    }
    $694 = (($tbase$746$i) + ($tsize$745$i)|0);
    $sp$167$i = (7288);
    while(1) {
     $695 = HEAP32[$sp$167$i>>2]|0;
     $696 = ($695|0)==($694|0);
     if ($696) {
      $$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
      label = 211;
      break;
     }
     $697 = ((($sp$167$i)) + 8|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(0|0);
     if ($699) {
      $sp$0$i$i$i = (7288);
      break;
     } else {
      $sp$167$i = $698;
     }
    }
    if ((label|0) == 211) {
     $700 = ((($sp$167$i$lcssa)) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 & 8;
     $703 = ($702|0)==(0);
     if ($703) {
      HEAP32[$$lcssa144>>2] = $tbase$746$i;
      $704 = ((($sp$167$i$lcssa)) + 4|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($705) + ($tsize$745$i))|0;
      HEAP32[$704>>2] = $706;
      $707 = ((($tbase$746$i)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($tbase$746$i) + ($713)|0);
      $715 = ((($694)) + 8|0);
      $716 = $715;
      $717 = $716 & 7;
      $718 = ($717|0)==(0);
      $719 = (0 - ($716))|0;
      $720 = $719 & 7;
      $721 = $718 ? 0 : $720;
      $722 = (($694) + ($721)|0);
      $723 = $722;
      $724 = $714;
      $725 = (($723) - ($724))|0;
      $726 = (($714) + ($nb$0)|0);
      $727 = (($725) - ($nb$0))|0;
      $728 = $nb$0 | 3;
      $729 = ((($714)) + 4|0);
      HEAP32[$729>>2] = $728;
      $730 = ($722|0)==($635|0);
      do {
       if ($730) {
        $731 = HEAP32[(6852)>>2]|0;
        $732 = (($731) + ($727))|0;
        HEAP32[(6852)>>2] = $732;
        HEAP32[(6864)>>2] = $726;
        $733 = $732 | 1;
        $734 = ((($726)) + 4|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[(6860)>>2]|0;
        $736 = ($722|0)==($735|0);
        if ($736) {
         $737 = HEAP32[(6848)>>2]|0;
         $738 = (($737) + ($727))|0;
         HEAP32[(6848)>>2] = $738;
         HEAP32[(6860)>>2] = $726;
         $739 = $738 | 1;
         $740 = ((($726)) + 4|0);
         HEAP32[$740>>2] = $739;
         $741 = (($726) + ($738)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $742 = ((($722)) + 4|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L331: do {
          if ($748) {
           $749 = ((($722)) + 8|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = ((($722)) + 12|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = (6880 + ($753<<2)|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = ($750>>>0)<($757>>>0);
             if ($756) {
              _abort();
              // unreachable;
             }
             $758 = ((($750)) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($722|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[1710]|0;
            $765 = $764 & $763;
            HEAP32[1710] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre9$i$i = ((($752)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $767 = ($752>>>0)<($757>>>0);
             if ($767) {
              _abort();
              // unreachable;
             }
             $768 = ((($752)) + 8|0);
             $769 = HEAP32[$768>>2]|0;
             $770 = ($769|0)==($722|0);
             if ($770) {
              $$pre$phi10$i$iZ2D = $768;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $771 = ((($750)) + 12|0);
           HEAP32[$771>>2] = $752;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
          } else {
           $772 = ((($722)) + 24|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ((($722)) + 12|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = ($775|0)==($722|0);
           do {
            if ($776) {
             $786 = ((($722)) + 16|0);
             $787 = ((($786)) + 4|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)==(0|0);
             if ($789) {
              $790 = HEAP32[$786>>2]|0;
              $791 = ($790|0)==(0|0);
              if ($791) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $790;$RP$1$i$i = $786;
              }
             } else {
              $R$1$i$i = $788;$RP$1$i$i = $787;
             }
             while(1) {
              $792 = ((($R$1$i$i)) + 20|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ($793|0)==(0|0);
              if (!($794)) {
               $R$1$i$i = $793;$RP$1$i$i = $792;
               continue;
              }
              $795 = ((($R$1$i$i)) + 16|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $796;$RP$1$i$i = $795;
              }
             }
             $798 = ($RP$1$i$i$lcssa>>>0)<($757>>>0);
             if ($798) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $777 = ((($722)) + 8|0);
             $778 = HEAP32[$777>>2]|0;
             $779 = ($778>>>0)<($757>>>0);
             if ($779) {
              _abort();
              // unreachable;
             }
             $780 = ((($778)) + 12|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==($722|0);
             if (!($782)) {
              _abort();
              // unreachable;
             }
             $783 = ((($775)) + 8|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==($722|0);
             if ($785) {
              HEAP32[$780>>2] = $775;
              HEAP32[$783>>2] = $778;
              $R$3$i$i = $775;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $799 = ($773|0)==(0|0);
           if ($799) {
            break;
           }
           $800 = ((($722)) + 28|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = (7144 + ($801<<2)|0);
           $803 = HEAP32[$802>>2]|0;
           $804 = ($722|0)==($803|0);
           do {
            if ($804) {
             HEAP32[$802>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $805 = 1 << $801;
             $806 = $805 ^ -1;
             $807 = HEAP32[(6844)>>2]|0;
             $808 = $807 & $806;
             HEAP32[(6844)>>2] = $808;
             break L331;
            } else {
             $809 = HEAP32[(6856)>>2]|0;
             $810 = ($773>>>0)<($809>>>0);
             if ($810) {
              _abort();
              // unreachable;
             }
             $811 = ((($773)) + 16|0);
             $812 = HEAP32[$811>>2]|0;
             $813 = ($812|0)==($722|0);
             if ($813) {
              HEAP32[$811>>2] = $R$3$i$i;
             } else {
              $814 = ((($773)) + 20|0);
              HEAP32[$814>>2] = $R$3$i$i;
             }
             $815 = ($R$3$i$i|0)==(0|0);
             if ($815) {
              break L331;
             }
            }
           } while(0);
           $816 = HEAP32[(6856)>>2]|0;
           $817 = ($R$3$i$i>>>0)<($816>>>0);
           if ($817) {
            _abort();
            // unreachable;
           }
           $818 = ((($R$3$i$i)) + 24|0);
           HEAP32[$818>>2] = $773;
           $819 = ((($722)) + 16|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           do {
            if (!($821)) {
             $822 = ($820>>>0)<($816>>>0);
             if ($822) {
              _abort();
              // unreachable;
             } else {
              $823 = ((($R$3$i$i)) + 16|0);
              HEAP32[$823>>2] = $820;
              $824 = ((($820)) + 24|0);
              HEAP32[$824>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $825 = ((($819)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = ($826|0)==(0|0);
           if ($827) {
            break;
           }
           $828 = HEAP32[(6856)>>2]|0;
           $829 = ($826>>>0)<($828>>>0);
           if ($829) {
            _abort();
            // unreachable;
           } else {
            $830 = ((($R$3$i$i)) + 20|0);
            HEAP32[$830>>2] = $826;
            $831 = ((($826)) + 24|0);
            HEAP32[$831>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $832 = (($722) + ($746)|0);
         $833 = (($746) + ($727))|0;
         $oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
        } else {
         $oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
        }
        $834 = ((($oldfirst$0$i$i)) + 4|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = $835 & -2;
        HEAP32[$834>>2] = $836;
        $837 = $qsize$0$i$i | 1;
        $838 = ((($726)) + 4|0);
        HEAP32[$838>>2] = $837;
        $839 = (($726) + ($qsize$0$i$i)|0);
        HEAP32[$839>>2] = $qsize$0$i$i;
        $840 = $qsize$0$i$i >>> 3;
        $841 = ($qsize$0$i$i>>>0)<(256);
        if ($841) {
         $842 = $840 << 1;
         $843 = (6880 + ($842<<2)|0);
         $844 = HEAP32[1710]|0;
         $845 = 1 << $840;
         $846 = $844 & $845;
         $847 = ($846|0)==(0);
         do {
          if ($847) {
           $848 = $844 | $845;
           HEAP32[1710] = $848;
           $$pre$i16$i = ((($843)) + 8|0);
           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $843;
          } else {
           $849 = ((($843)) + 8|0);
           $850 = HEAP32[$849>>2]|0;
           $851 = HEAP32[(6856)>>2]|0;
           $852 = ($850>>>0)<($851>>>0);
           if (!($852)) {
            $$pre$phi$i17$iZ2D = $849;$F4$0$i$i = $850;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $726;
         $853 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$853>>2] = $726;
         $854 = ((($726)) + 8|0);
         HEAP32[$854>>2] = $F4$0$i$i;
         $855 = ((($726)) + 12|0);
         HEAP32[$855>>2] = $843;
         break;
        }
        $856 = $qsize$0$i$i >>> 8;
        $857 = ($856|0)==(0);
        do {
         if ($857) {
          $I7$0$i$i = 0;
         } else {
          $858 = ($qsize$0$i$i>>>0)>(16777215);
          if ($858) {
           $I7$0$i$i = 31;
           break;
          }
          $859 = (($856) + 1048320)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 8;
          $862 = $856 << $861;
          $863 = (($862) + 520192)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 4;
          $866 = $865 | $861;
          $867 = $862 << $865;
          $868 = (($867) + 245760)|0;
          $869 = $868 >>> 16;
          $870 = $869 & 2;
          $871 = $866 | $870;
          $872 = (14 - ($871))|0;
          $873 = $867 << $870;
          $874 = $873 >>> 15;
          $875 = (($872) + ($874))|0;
          $876 = $875 << 1;
          $877 = (($875) + 7)|0;
          $878 = $qsize$0$i$i >>> $877;
          $879 = $878 & 1;
          $880 = $879 | $876;
          $I7$0$i$i = $880;
         }
        } while(0);
        $881 = (7144 + ($I7$0$i$i<<2)|0);
        $882 = ((($726)) + 28|0);
        HEAP32[$882>>2] = $I7$0$i$i;
        $883 = ((($726)) + 16|0);
        $884 = ((($883)) + 4|0);
        HEAP32[$884>>2] = 0;
        HEAP32[$883>>2] = 0;
        $885 = HEAP32[(6844)>>2]|0;
        $886 = 1 << $I7$0$i$i;
        $887 = $885 & $886;
        $888 = ($887|0)==(0);
        if ($888) {
         $889 = $885 | $886;
         HEAP32[(6844)>>2] = $889;
         HEAP32[$881>>2] = $726;
         $890 = ((($726)) + 24|0);
         HEAP32[$890>>2] = $881;
         $891 = ((($726)) + 12|0);
         HEAP32[$891>>2] = $726;
         $892 = ((($726)) + 8|0);
         HEAP32[$892>>2] = $726;
         break;
        }
        $893 = HEAP32[$881>>2]|0;
        $894 = ($I7$0$i$i|0)==(31);
        $895 = $I7$0$i$i >>> 1;
        $896 = (25 - ($895))|0;
        $897 = $894 ? 0 : $896;
        $898 = $qsize$0$i$i << $897;
        $K8$0$i$i = $898;$T$0$i18$i = $893;
        while(1) {
         $899 = ((($T$0$i18$i)) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & -8;
         $902 = ($901|0)==($qsize$0$i$i|0);
         if ($902) {
          $T$0$i18$i$lcssa = $T$0$i18$i;
          label = 281;
          break;
         }
         $903 = $K8$0$i$i >>> 31;
         $904 = (((($T$0$i18$i)) + 16|0) + ($903<<2)|0);
         $905 = $K8$0$i$i << 1;
         $906 = HEAP32[$904>>2]|0;
         $907 = ($906|0)==(0|0);
         if ($907) {
          $$lcssa = $904;$T$0$i18$i$lcssa139 = $T$0$i18$i;
          label = 278;
          break;
         } else {
          $K8$0$i$i = $905;$T$0$i18$i = $906;
         }
        }
        if ((label|0) == 278) {
         $908 = HEAP32[(6856)>>2]|0;
         $909 = ($$lcssa>>>0)<($908>>>0);
         if ($909) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $726;
          $910 = ((($726)) + 24|0);
          HEAP32[$910>>2] = $T$0$i18$i$lcssa139;
          $911 = ((($726)) + 12|0);
          HEAP32[$911>>2] = $726;
          $912 = ((($726)) + 8|0);
          HEAP32[$912>>2] = $726;
          break;
         }
        }
        else if ((label|0) == 281) {
         $913 = ((($T$0$i18$i$lcssa)) + 8|0);
         $914 = HEAP32[$913>>2]|0;
         $915 = HEAP32[(6856)>>2]|0;
         $916 = ($914>>>0)>=($915>>>0);
         $not$$i20$i = ($T$0$i18$i$lcssa>>>0)>=($915>>>0);
         $917 = $916 & $not$$i20$i;
         if ($917) {
          $918 = ((($914)) + 12|0);
          HEAP32[$918>>2] = $726;
          HEAP32[$913>>2] = $726;
          $919 = ((($726)) + 8|0);
          HEAP32[$919>>2] = $914;
          $920 = ((($726)) + 12|0);
          HEAP32[$920>>2] = $T$0$i18$i$lcssa;
          $921 = ((($726)) + 24|0);
          HEAP32[$921>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1052 = ((($714)) + 8|0);
      $$0 = $1052;
      return ($$0|0);
     } else {
      $sp$0$i$i$i = (7288);
     }
    }
    while(1) {
     $922 = HEAP32[$sp$0$i$i$i>>2]|0;
     $923 = ($922>>>0)>($635>>>0);
     if (!($923)) {
      $924 = ((($sp$0$i$i$i)) + 4|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($922) + ($925)|0);
      $927 = ($926>>>0)>($635>>>0);
      if ($927) {
       $$lcssa142 = $926;
       break;
      }
     }
     $928 = ((($sp$0$i$i$i)) + 8|0);
     $929 = HEAP32[$928>>2]|0;
     $sp$0$i$i$i = $929;
    }
    $930 = ((($$lcssa142)) + -47|0);
    $931 = ((($930)) + 8|0);
    $932 = $931;
    $933 = $932 & 7;
    $934 = ($933|0)==(0);
    $935 = (0 - ($932))|0;
    $936 = $935 & 7;
    $937 = $934 ? 0 : $936;
    $938 = (($930) + ($937)|0);
    $939 = ((($635)) + 16|0);
    $940 = ($938>>>0)<($939>>>0);
    $941 = $940 ? $635 : $938;
    $942 = ((($941)) + 8|0);
    $943 = ((($941)) + 24|0);
    $944 = (($tsize$745$i) + -40)|0;
    $945 = ((($tbase$746$i)) + 8|0);
    $946 = $945;
    $947 = $946 & 7;
    $948 = ($947|0)==(0);
    $949 = (0 - ($946))|0;
    $950 = $949 & 7;
    $951 = $948 ? 0 : $950;
    $952 = (($tbase$746$i) + ($951)|0);
    $953 = (($944) - ($951))|0;
    HEAP32[(6864)>>2] = $952;
    HEAP32[(6852)>>2] = $953;
    $954 = $953 | 1;
    $955 = ((($952)) + 4|0);
    HEAP32[$955>>2] = $954;
    $956 = (($952) + ($953)|0);
    $957 = ((($956)) + 4|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(7328)>>2]|0;
    HEAP32[(6868)>>2] = $958;
    $959 = ((($941)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$942>>2]=HEAP32[(7288)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(7288)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(7288)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(7288)+12>>2]|0;
    HEAP32[(7288)>>2] = $tbase$746$i;
    HEAP32[(7292)>>2] = $tsize$745$i;
    HEAP32[(7300)>>2] = 0;
    HEAP32[(7296)>>2] = $942;
    $p$0$i$i = $943;
    while(1) {
     $960 = ((($p$0$i$i)) + 4|0);
     HEAP32[$960>>2] = 7;
     $961 = ((($960)) + 4|0);
     $962 = ($961>>>0)<($$lcssa142>>>0);
     if ($962) {
      $p$0$i$i = $960;
     } else {
      break;
     }
    }
    $963 = ($941|0)==($635|0);
    if (!($963)) {
     $964 = $941;
     $965 = $635;
     $966 = (($964) - ($965))|0;
     $967 = HEAP32[$959>>2]|0;
     $968 = $967 & -2;
     HEAP32[$959>>2] = $968;
     $969 = $966 | 1;
     $970 = ((($635)) + 4|0);
     HEAP32[$970>>2] = $969;
     HEAP32[$941>>2] = $966;
     $971 = $966 >>> 3;
     $972 = ($966>>>0)<(256);
     if ($972) {
      $973 = $971 << 1;
      $974 = (6880 + ($973<<2)|0);
      $975 = HEAP32[1710]|0;
      $976 = 1 << $971;
      $977 = $975 & $976;
      $978 = ($977|0)==(0);
      if ($978) {
       $979 = $975 | $976;
       HEAP32[1710] = $979;
       $$pre$i$i = ((($974)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
      } else {
       $980 = ((($974)) + 8|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = HEAP32[(6856)>>2]|0;
       $983 = ($981>>>0)<($982>>>0);
       if ($983) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $984 = ((($F$0$i$i)) + 12|0);
      HEAP32[$984>>2] = $635;
      $985 = ((($635)) + 8|0);
      HEAP32[$985>>2] = $F$0$i$i;
      $986 = ((($635)) + 12|0);
      HEAP32[$986>>2] = $974;
      break;
     }
     $987 = $966 >>> 8;
     $988 = ($987|0)==(0);
     if ($988) {
      $I1$0$i$i = 0;
     } else {
      $989 = ($966>>>0)>(16777215);
      if ($989) {
       $I1$0$i$i = 31;
      } else {
       $990 = (($987) + 1048320)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 8;
       $993 = $987 << $992;
       $994 = (($993) + 520192)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 4;
       $997 = $996 | $992;
       $998 = $993 << $996;
       $999 = (($998) + 245760)|0;
       $1000 = $999 >>> 16;
       $1001 = $1000 & 2;
       $1002 = $997 | $1001;
       $1003 = (14 - ($1002))|0;
       $1004 = $998 << $1001;
       $1005 = $1004 >>> 15;
       $1006 = (($1003) + ($1005))|0;
       $1007 = $1006 << 1;
       $1008 = (($1006) + 7)|0;
       $1009 = $966 >>> $1008;
       $1010 = $1009 & 1;
       $1011 = $1010 | $1007;
       $I1$0$i$i = $1011;
      }
     }
     $1012 = (7144 + ($I1$0$i$i<<2)|0);
     $1013 = ((($635)) + 28|0);
     HEAP32[$1013>>2] = $I1$0$i$i;
     $1014 = ((($635)) + 20|0);
     HEAP32[$1014>>2] = 0;
     HEAP32[$939>>2] = 0;
     $1015 = HEAP32[(6844)>>2]|0;
     $1016 = 1 << $I1$0$i$i;
     $1017 = $1015 & $1016;
     $1018 = ($1017|0)==(0);
     if ($1018) {
      $1019 = $1015 | $1016;
      HEAP32[(6844)>>2] = $1019;
      HEAP32[$1012>>2] = $635;
      $1020 = ((($635)) + 24|0);
      HEAP32[$1020>>2] = $1012;
      $1021 = ((($635)) + 12|0);
      HEAP32[$1021>>2] = $635;
      $1022 = ((($635)) + 8|0);
      HEAP32[$1022>>2] = $635;
      break;
     }
     $1023 = HEAP32[$1012>>2]|0;
     $1024 = ($I1$0$i$i|0)==(31);
     $1025 = $I1$0$i$i >>> 1;
     $1026 = (25 - ($1025))|0;
     $1027 = $1024 ? 0 : $1026;
     $1028 = $966 << $1027;
     $K2$0$i$i = $1028;$T$0$i$i = $1023;
     while(1) {
      $1029 = ((($T$0$i$i)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = $1030 & -8;
      $1032 = ($1031|0)==($966|0);
      if ($1032) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 307;
       break;
      }
      $1033 = $K2$0$i$i >>> 31;
      $1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
      $1035 = $K2$0$i$i << 1;
      $1036 = HEAP32[$1034>>2]|0;
      $1037 = ($1036|0)==(0|0);
      if ($1037) {
       $$lcssa141 = $1034;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 304;
       break;
      } else {
       $K2$0$i$i = $1035;$T$0$i$i = $1036;
      }
     }
     if ((label|0) == 304) {
      $1038 = HEAP32[(6856)>>2]|0;
      $1039 = ($$lcssa141>>>0)<($1038>>>0);
      if ($1039) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $635;
       $1040 = ((($635)) + 24|0);
       HEAP32[$1040>>2] = $T$0$i$i$lcssa140;
       $1041 = ((($635)) + 12|0);
       HEAP32[$1041>>2] = $635;
       $1042 = ((($635)) + 8|0);
       HEAP32[$1042>>2] = $635;
       break;
      }
     }
     else if ((label|0) == 307) {
      $1043 = ((($T$0$i$i$lcssa)) + 8|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = HEAP32[(6856)>>2]|0;
      $1046 = ($1044>>>0)>=($1045>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1045>>>0);
      $1047 = $1046 & $not$$i$i;
      if ($1047) {
       $1048 = ((($1044)) + 12|0);
       HEAP32[$1048>>2] = $635;
       HEAP32[$1043>>2] = $635;
       $1049 = ((($635)) + 8|0);
       HEAP32[$1049>>2] = $1044;
       $1050 = ((($635)) + 12|0);
       HEAP32[$1050>>2] = $T$0$i$i$lcssa;
       $1051 = ((($635)) + 24|0);
       HEAP32[$1051>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1053 = HEAP32[(6852)>>2]|0;
  $1054 = ($1053>>>0)>($nb$0>>>0);
  if ($1054) {
   $1055 = (($1053) - ($nb$0))|0;
   HEAP32[(6852)>>2] = $1055;
   $1056 = HEAP32[(6864)>>2]|0;
   $1057 = (($1056) + ($nb$0)|0);
   HEAP32[(6864)>>2] = $1057;
   $1058 = $1055 | 1;
   $1059 = ((($1057)) + 4|0);
   HEAP32[$1059>>2] = $1058;
   $1060 = $nb$0 | 3;
   $1061 = ((($1056)) + 4|0);
   HEAP32[$1061>>2] = $1060;
   $1062 = ((($1056)) + 8|0);
   $$0 = $1062;
   return ($$0|0);
  }
 }
 $1063 = (___errno_location()|0);
 HEAP32[$1063>>2] = 12;
 $$0 = 0;
 return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(6856)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(6860)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(6848)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (6880 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[1710]|0;
     $37 = $36 & $35;
     HEAP32[1710] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre42 = ((($25)) + 8|0);
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi43Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (7144 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(6844)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(6844)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(6856)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(6856)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(6856)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(6864)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(6852)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(6852)>>2] = $122;
   HEAP32[(6864)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(6860)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(6860)>>2] = 0;
   HEAP32[(6848)>>2] = 0;
   return;
  }
  $127 = HEAP32[(6860)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(6848)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(6848)>>2] = $130;
   HEAP32[(6860)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (6880 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(6856)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[1710]|0;
     $154 = $153 & $152;
     HEAP32[1710] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre40 = ((($141)) + 8|0);
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[(6856)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi41Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(6856)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(6856)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (7144 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(6844)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(6844)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(6856)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(6856)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(6856)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(6860)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(6848)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (6880 + ($235<<2)|0);
  $237 = HEAP32[1710]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[1710] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(6856)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (7144 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(6844)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(6844)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa48 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(6856)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa48;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(6856)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(6872)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(6872)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (7296);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(6872)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$1 = $11;
  return ($mem$1|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$1 = $12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $cond = 0, $newp$2 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(6856)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond3 = $or$cond$not & $6;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(7320)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $26 = ((($22)) + 4|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = (($22) + ($20)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 | 1;
  HEAP32[$29>>2] = $31;
  _dispose_chunk($22,$20);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $32 = HEAP32[(6864)>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[(6852)>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $42 = ((($38)) + 4|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[(6864)>>2] = $38;
  HEAP32[(6852)>>2] = $37;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $44 = HEAP32[(6860)>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[(6848)>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($51) + ($49)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $56 = ((($51)) + 4|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $58 = ((($52)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge1 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $64 = (($p) + ($47)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | 1;
   HEAP32[$65>>2] = $67;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(6848)>>2] = $storemerge1;
  HEAP32[(6860)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $68 = $8 & 2;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $70 = $8 & -8;
 $71 = (($70) + ($2))|0;
 $72 = ($71>>>0)<($nb>>>0);
 if ($72) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $73 = (($71) - ($nb))|0;
 $74 = $8 >>> 3;
 $75 = ($8>>>0)<(256);
 do {
  if ($75) {
   $76 = ((($3)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($3)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $74 << 1;
   $81 = (6880 + ($80<<2)|0);
   $82 = ($77|0)==($81|0);
   if (!($82)) {
    $83 = ($77>>>0)<($4>>>0);
    if ($83) {
     _abort();
     // unreachable;
    }
    $84 = ((($77)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($3|0);
    if (!($86)) {
     _abort();
     // unreachable;
    }
   }
   $87 = ($79|0)==($77|0);
   if ($87) {
    $88 = 1 << $74;
    $89 = $88 ^ -1;
    $90 = HEAP32[1710]|0;
    $91 = $90 & $89;
    HEAP32[1710] = $91;
    break;
   }
   $92 = ($79|0)==($81|0);
   if ($92) {
    $$pre = ((($79)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $93 = ($79>>>0)<($4>>>0);
    if ($93) {
     _abort();
     // unreachable;
    }
    $94 = ((($79)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==($3|0);
    if ($96) {
     $$pre$phiZ2D = $94;
    } else {
     _abort();
     // unreachable;
    }
   }
   $97 = ((($77)) + 12|0);
   HEAP32[$97>>2] = $79;
   HEAP32[$$pre$phiZ2D>>2] = $77;
  } else {
   $98 = ((($3)) + 24|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($3)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==($3|0);
   do {
    if ($102) {
     $112 = ((($3)) + 16|0);
     $113 = ((($112)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $116 = HEAP32[$112>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $116;$RP$1 = $112;
      }
     } else {
      $R$1 = $114;$RP$1 = $113;
     }
     while(1) {
      $118 = ((($R$1)) + 20|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if (!($120)) {
       $R$1 = $119;$RP$1 = $118;
       continue;
      }
      $121 = ((($R$1)) + 16|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0|0);
      if ($123) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $122;$RP$1 = $121;
      }
     }
     $124 = ($RP$1$lcssa>>>0)<($4>>>0);
     if ($124) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $103 = ((($3)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104>>>0)<($4>>>0);
     if ($105) {
      _abort();
      // unreachable;
     }
     $106 = ((($104)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if (!($108)) {
      _abort();
      // unreachable;
     }
     $109 = ((($101)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==($3|0);
     if ($111) {
      HEAP32[$106>>2] = $101;
      HEAP32[$109>>2] = $104;
      $R$3 = $101;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $125 = ($99|0)==(0|0);
   if (!($125)) {
    $126 = ((($3)) + 28|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (7144 + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($3|0)==($129|0);
    if ($130) {
     HEAP32[$128>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $131 = 1 << $127;
      $132 = $131 ^ -1;
      $133 = HEAP32[(6844)>>2]|0;
      $134 = $133 & $132;
      HEAP32[(6844)>>2] = $134;
      break;
     }
    } else {
     $135 = HEAP32[(6856)>>2]|0;
     $136 = ($99>>>0)<($135>>>0);
     if ($136) {
      _abort();
      // unreachable;
     }
     $137 = ((($99)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==($3|0);
     if ($139) {
      HEAP32[$137>>2] = $R$3;
     } else {
      $140 = ((($99)) + 20|0);
      HEAP32[$140>>2] = $R$3;
     }
     $141 = ($R$3|0)==(0|0);
     if ($141) {
      break;
     }
    }
    $142 = HEAP32[(6856)>>2]|0;
    $143 = ($R$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($R$3)) + 24|0);
    HEAP32[$144>>2] = $99;
    $145 = ((($3)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($R$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(6856)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($R$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($73>>>0)<(16);
 if ($158) {
  $159 = $1 & 1;
  $160 = $71 | $159;
  $161 = $160 | 2;
  HEAP32[$0>>2] = $161;
  $162 = (($p) + ($71)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = $1 & 1;
  $168 = $167 | $nb;
  $169 = $168 | 2;
  HEAP32[$0>>2] = $169;
  $170 = ((($166)) + 4|0);
  $171 = $73 | 3;
  HEAP32[$170>>2] = $171;
  $172 = (($166) + ($73)|0);
  $173 = ((($172)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$73);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(6856)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(6860)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(6848)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (6880 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[1710]|0;
     $32 = $31 & $30;
     HEAP32[1710] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (7144 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(6844)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(6844)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(6856)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(6856)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(6856)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(6856)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(6864)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(6852)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(6852)>>2] = $116;
   HEAP32[(6864)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(6860)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(6860)>>2] = 0;
   HEAP32[(6848)>>2] = 0;
   return;
  }
  $121 = HEAP32[(6860)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(6848)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(6848)>>2] = $124;
   HEAP32[(6860)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (6880 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[1710]|0;
     $147 = $146 & $145;
     HEAP32[1710] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        $R7$1$lcssa = $R7$1;$RP9$1$lcssa = $RP9$1;
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1$lcssa>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1$lcssa>>2] = 0;
       $R7$3 = $R7$1$lcssa;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (7144 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(6844)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(6844)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(6856)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(6856)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(6856)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(6860)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(6848)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (6880 + ($225<<2)|0);
  $227 = HEAP32[1710]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[1710] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(6856)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (7144 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(6844)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(6844)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   $$lcssa = $287;$T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(6856)>>2]|0;
  $292 = ($$lcssa>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$$lcssa>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0$lcssa30;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0$lcssa)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(6856)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0$lcssa>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0$lcssa;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function __ZNSt3__16chrono12steady_clock3nowEv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $tp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tp = sp;
 __THREW__ = 0;
 $0 = (invoke_iii(77,1,($tp|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if (!($2)) {
   $3 = ($0|0)==(0);
   if (!($3)) {
    $4 = (___errno_location()|0);
    $5 = HEAP32[$4>>2]|0;
    __THREW__ = 0;
    invoke_vii(78,($5|0),(3754|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     break;
    }
   }
   $8 = HEAP32[$tp>>2]|0;
   $9 = ($8|0)<(0);
   $10 = $9 << 31 >> 31;
   $11 = ((($tp)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)<(0);
   $14 = $13 << 31 >> 31;
   $15 = (___muldi3(($8|0),($10|0),1000000000,0)|0);
   $16 = tempRet0;
   $17 = (_i64Add(($15|0),($16|0),($12|0),($14|0))|0);
   $18 = tempRet0;
   tempRet0 = ($18);
   STACKTOP = sp;return ($17|0);
  }
 } while(0);
 $19 = ___cxa_find_matching_catch_3(0|0)|0;
 $20 = tempRet0;
 ___clang_call_terminate($19);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(79,($0|0),(3792|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (1000);
  ___cxa_throw(($0|0),(232|0),(53|0));
  // unreachable;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($msg)|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (960);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(80,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (980);
 $0 = ((($this)) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($msg)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($msg)) + 1|0);
 $7 = $3 ? $6 : $5;
 __THREW__ = 0;
 invoke_vii(80,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = $this;
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 127]($0,$this,$code);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($condition)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = HEAP32[$condition>>2]|0;
  $11 = ($9|0)==($10|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($code)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $2 & $4;
 return ($5|0);
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 return;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror($ev)|0);
 $1 = (_strlen($0)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$0,$1);
 return;
}
function __ZNSt3__124__generic_error_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__124__generic_error_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3905|0);
}
function __ZNKSt3__124__generic_error_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)>(256);
 if ($0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,3913,34);
 } else {
  __ZNKSt3__112__do_message7messageEi($agg$result,0,$ev);
 }
 return;
}
function __ZNSt3__123__system_error_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__123__system_error_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3982|0);
}
function __ZNKSt3__123__system_error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $$sink = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)>(256);
 if ($0) {
  (__ZNSt3__115system_categoryEv()|0);
  $$sink = 7336;
 } else {
  (__ZNSt3__116generic_categoryEv()|0);
  $$sink = 7340;
 }
 HEAP32[$agg$result>>2] = $ev;
 $1 = ((($agg$result)) + 4|0);
 HEAP32[$1>>2] = $$sink;
 return;
}
function __ZNSt3__115system_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6680]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((6680|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[1834] = (816);
   ___cxa_guard_release((6680|0));
  }
 }
 return (7336|0);
}
function __ZNSt3__116generic_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6688]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((6688|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[1835] = (780);
   ___cxa_guard_release((6688|0));
  }
 }
 return (7340|0);
}
function __ZNKSt3__123__system_error_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)>(256);
 if ($0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,3989,33);
 } else {
  __ZNKSt3__112__do_message7messageEi($agg$result,0,$ev);
 }
 return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = HEAP8[$what_arg>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = $3&255;
    $9 = $8 >>> 1;
    $10 = $9;
   } else {
    $6 = ((($what_arg)) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $10 = $7;
   }
   $11 = ($10|0)==(0);
   if ($11) {
    $17 = $1;
   } else {
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,4023)|0);
    $$pre = HEAP32[$ec>>2]|0;
    $17 = $$pre;
   }
   $12 = ((($ec)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_viii[$16 & 127]($0,$13,$17);
   $18 = HEAP8[$0>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   $21 = ((($0)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($0)) + 1|0);
   $24 = $20 ? $23 : $22;
   $25 = ((($0)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $18&255;
   $28 = $27 >>> 1;
   $29 = $20 ? $28 : $26;
   __THREW__ = 0;
   (invoke_iiii(81,($what_arg|0),($24|0),($29|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $32 = ___cxa_find_matching_catch_2()|0;
    $33 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    ___resumeException($32|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    break;
   }
  }
 } while(0);
 ;HEAP32[$agg$result>>2]=HEAP32[$what_arg>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $34 = (($what_arg) + ($__i$0$i$i<<2)|0);
  HEAP32[$34>>2] = 0;
  $35 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $35;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen($what_arg)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __THREW__ = 0;
 invoke_viii(82,($0|0),($ec|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $18 = ___cxa_find_matching_catch_2()|0;
   $19 = tempRet0;
   $$0 = $19;$$01 = $18;
  } else {
   __THREW__ = 0;
   invoke_vii(83,($this|0),($0|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $20 = ___cxa_find_matching_catch_2()|0;
    $21 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    $$0 = $21;$$01 = $20;
    break;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
    HEAP32[$this>>2] = (760);
    $7 = ((($this)) + 8|0);
    $8 = $ec;
    $9 = $8;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($8) + 4)|0;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = $7;
    $15 = $14;
    HEAP32[$15>>2] = $10;
    $16 = (($14) + 4)|0;
    $17 = $16;
    HEAP32[$17>>2] = $13;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__120__throw_system_errorEiPKc($ev,$what_arg) {
 $ev = $ev|0;
 $what_arg = $what_arg|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__115system_categoryEv()|0);
 HEAP32[$0>>2] = $ev;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 7336;
 __THREW__ = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 invoke_viii(84,($1|0),($$byval_copy|0),($what_arg|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($5|0);
  // unreachable;
 } else {
  ___cxa_throw(($1|0),(56|0),(23|0));
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(79,($0|0),(5865|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (1000);
  ___cxa_throw(($0|0),(232|0),(53|0));
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(79,($0|0),(5865|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (1020);
  ___cxa_throw(($0|0),(248|0),(53|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $26 = (($18) + ($__n_copy)|0);
  $27 = (($26) + ($__n_add)|0);
  $28 = (($20) + ($__n_copy)|0);
  $29 = (($28) + ($__n_del)|0);
  _memcpy(($27|0),($29|0),($25|0))|0;
 }
 $30 = ($__old_cap|0)==(10);
 if (!($30)) {
  __ZdlPv($20);
 }
 $31 = ((($this)) + 8|0);
 HEAP32[$31>>2] = $18;
 $32 = $17 | 1;
 HEAP32[$this>>2] = $32;
 $33 = (($23) + ($__n_add))|0;
 $34 = ((($this)) + 4|0);
 HEAP32[$34>>2] = $33;
 $35 = (($18) + ($33)|0);
 HEAP8[$35>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $15 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $15 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = ((($this)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($15))|0;
  $34 = (($33) + ($14))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$15,$34,$14,$14,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = ((($this)) + 1|0);
    $24 = $22;
   } else {
    $20 = ((($this)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($14)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($14) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = ((($this)) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[232]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(4403,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[30]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 127](120,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[232]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 63]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(4317,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[232]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(4362,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(4441,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((7344|0),(85|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[1837]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(4129,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((7348|0),(86|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(4079,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[1837]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(4026,$vararg_buffer);
  // unreachable;
 }
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[102]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$2 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$2 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,160,128,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$2 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 127]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($static_ptr) + ($2)|0);
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $6 = ((($info)) + 4|0);
 HEAP32[$6>>2] = $static_ptr;
 $7 = ((($info)) + 8|0);
 HEAP32[$7>>2] = $static_type;
 $8 = ((($info)) + 12|0);
 HEAP32[$8>>2] = $src2dst_offset;
 $9 = ((($info)) + 16|0);
 $10 = ((($info)) + 20|0);
 $11 = ((($info)) + 24|0);
 $12 = ((($info)) + 28|0);
 $13 = ((($info)) + 32|0);
 $14 = ((($info)) + 40|0);
 $15 = ($5|0)==($dst_type|0);
 dest=$9; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$9+36>>1]=0|0;HEAP8[$9+38>>0]=0|0;
 L1: do {
  if ($15) {
   $16 = ((($info)) + 48|0);
   HEAP32[$16>>2] = 1;
   $17 = HEAP32[$dst_type>>2]|0;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_viiiiii[$19 & 63]($dst_type,$info,$3,$3,1,0);
   $20 = HEAP32[$11>>2]|0;
   $21 = ($20|0)==(1);
   $$ = $21 ? $3 : 0;
   $dst_ptr$0 = $$;
  } else {
   $22 = ((($info)) + 36|0);
   $23 = HEAP32[$5>>2]|0;
   $24 = ((($23)) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   FUNCTION_TABLE_viiiii[$25 & 63]($5,$info,$3,1,0);
   $26 = HEAP32[$22>>2]|0;
   switch ($26|0) {
   case 0:  {
    $27 = HEAP32[$14>>2]|0;
    $28 = ($27|0)==(1);
    $29 = HEAP32[$12>>2]|0;
    $30 = ($29|0)==(1);
    $or$cond = $28 & $30;
    $31 = HEAP32[$13>>2]|0;
    $32 = ($31|0)==(1);
    $or$cond3 = $or$cond & $32;
    $33 = HEAP32[$10>>2]|0;
    $$8 = $or$cond3 ? $33 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $34 = HEAP32[$11>>2]|0;
   $35 = ($34|0)==(1);
   if (!($35)) {
    $36 = HEAP32[$14>>2]|0;
    $37 = ($36|0)==(0);
    $38 = HEAP32[$12>>2]|0;
    $39 = ($38|0)==(1);
    $or$cond5 = $37 & $39;
    $40 = HEAP32[$13>>2]|0;
    $41 = ($40|0)==(1);
    $or$cond7 = $or$cond5 & $41;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $42 = HEAP32[$9>>2]|0;
   $dst_ptr$0 = $42;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 63]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off02 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $44 = ((($this)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 24|0);
    $48 = HEAP32[$47>>2]|0;
    FUNCTION_TABLE_viiiii[$48 & 63]($45,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 63]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off02 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off02 = 1;
       label = 13;
      } else {
       label = 17;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off02) {
          label = 17;
          break;
         } else {
          $43 = 4;
          break;
         }
        }
       }
       if ($is_dst_type_derived_from_static_type$0$off02) {
        label = 17;
       } else {
        $43 = 4;
       }
      }
     } while(0);
     if ((label|0) == 17) {
      $43 = 3;
     }
     HEAP32[$20>>2] = $43;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 127]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 $0 = (invoke_i(87)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $45 = ___cxa_find_matching_catch_3(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __THREW__ = 0;
    invoke_v($18|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     __THREW__ = 0;
     invoke_vii(88,(4453|0),($vararg_buffer|0));
     $21 = __THREW__; __THREW__ = 0;
    }
    $22 = ___cxa_find_matching_catch_3(0|0)|0;
    $23 = tempRet0;
    (___cxa_begin_catch(($22|0))|0);
    __THREW__ = 0;
    invoke_vii(88,(4493|0),($vararg_buffer1|0));
    $24 = __THREW__; __THREW__ = 0;
    $25 = ___cxa_find_matching_catch_3(0|0)|0;
    $26 = tempRet0;
    __THREW__ = 0;
    invoke_v(89);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch_3(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ___clang_call_terminate($25);
     // unreachable;
    }
   }
  }
 }
 $31 = HEAP32[211]|0;HEAP32[211] = (($31+0)|0);
 $32 = $31;
 __THREW__ = 0;
 invoke_v($32|0);
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if (!($34)) {
  __THREW__ = 0;
  invoke_vii(88,(4453|0),($vararg_buffer3|0));
  $35 = __THREW__; __THREW__ = 0;
 }
 $36 = ___cxa_find_matching_catch_3(0|0)|0;
 $37 = tempRet0;
 (___cxa_begin_catch(($36|0))|0);
 __THREW__ = 0;
 invoke_vii(88,(4493|0),($vararg_buffer5|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = ___cxa_find_matching_catch_3(0|0)|0;
 $40 = tempRet0;
 __THREW__ = 0;
 invoke_v(89);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch_3(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  ___clang_call_terminate($39);
  // unreachable;
 }
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4556|0);
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (960);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = ((($5)) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (980);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt12out_of_rangeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function ___cxa_demangle($mangled_name,$buf,$n,$status) {
 $mangled_name = $mangled_name|0;
 $buf = $buf|0;
 $n = $n|0;
 $status = $status|0;
 var $$0 = 0, $$18 = 0, $$2 = 0, $$pr$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i = 0;
 var $a = 0, $db = 0, $internal_status = 0, $or$cond = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i = sp + 4184|0;
 $a = sp;
 $db = sp + 4120|0;
 $internal_status = sp + 4112|0;
 $0 = ($mangled_name|0)==(0|0);
 L1: do {
  if ($0) {
   label = 3;
  } else {
   $1 = ($buf|0)!=(0|0);
   $2 = ($n|0)==(0|0);
   $or$cond = $1 & $2;
   if ($or$cond) {
    label = 3;
   } else {
    if ($1) {
     $4 = HEAP32[$n>>2]|0;
     $80 = $4;
    } else {
     $80 = 0;
    }
    $5 = ((($a)) + 4096|0);
    HEAP32[$5>>2] = $a;
    $6 = $a;
    HEAP32[$db>>2] = 0;
    $7 = ((($db)) + 4|0);
    HEAP32[$7>>2] = 0;
    $8 = ((($db)) + 8|0);
    HEAP32[$8>>2] = 0;
    $9 = ((($db)) + 12|0);
    HEAP32[$9>>2] = $6;
    $10 = ((($db)) + 16|0);
    HEAP32[$10>>2] = 0;
    $11 = ((($db)) + 20|0);
    HEAP32[$11>>2] = 0;
    $12 = ((($db)) + 24|0);
    HEAP32[$12>>2] = 0;
    $13 = ((($db)) + 28|0);
    HEAP32[$13>>2] = $6;
    $14 = ((($db)) + 32|0);
    HEAP32[$14>>2] = 0;
    $15 = ((($db)) + 36|0);
    HEAP32[$15>>2] = 0;
    $16 = ((($db)) + 40|0);
    HEAP32[$16>>2] = 0;
    $17 = ((($db)) + 44|0);
    HEAP32[$17>>2] = $6;
    $18 = ((($db)) + 48|0);
    $19 = ((($db)) + 61|0);
    ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;HEAP8[$18+12>>0]=0|0;
    HEAP8[$19>>0] = 1;
    $20 = ((($db)) + 32|0);
    __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($__v$i$i,1,0,$17);
    $21 = ((($__v$i$i)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP32[$22>>2] = 0;
    $23 = ((($22)) + 4|0);
    HEAP32[$23>>2] = 0;
    $24 = ((($22)) + 8|0);
    HEAP32[$24>>2] = 0;
    $25 = ((($22)) + 12|0);
    HEAP32[$25>>2] = $6;
    $26 = ((($22)) + 16|0);
    HEAP32[$21>>2] = $26;
    __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($20,$__v$i$i);
    __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v$i$i);
    $27 = ((($db)) + 62|0);
    HEAP8[$27>>0] = 0;
    $28 = ((($db)) + 63|0);
    HEAP8[$28>>0] = 1;
    HEAP32[$internal_status>>2] = 0;
    $29 = (_strlen($mangled_name)|0);
    $30 = (($mangled_name) + ($29)|0);
    __THREW__ = 0;
    invoke_viiii(90,($mangled_name|0),($30|0),($db|0),($internal_status|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    L7: do {
     if (!($32)) {
      $33 = HEAP32[$internal_status>>2]|0;
      $34 = ($33|0)!=(0);
      $35 = HEAP8[$27>>0]|0;
      $36 = ($35<<24>>24)==(0);
      $or$cond6 = $34 | $36;
      do {
       if ($or$cond6) {
        $56 = $33;
        label = 21;
       } else {
        $37 = HEAP32[$20>>2]|0;
        $38 = HEAP32[$15>>2]|0;
        $39 = ($37|0)==($38|0);
        if ($39) {
         label = 22;
        } else {
         $40 = HEAP32[$37>>2]|0;
         $41 = ((($37)) + 4|0);
         $42 = HEAP32[$41>>2]|0;
         $43 = ($40|0)==($42|0);
         if ($43) {
          label = 22;
         } else {
          HEAP8[$27>>0] = 0;
          HEAP8[$19>>0] = 0;
          $44 = HEAP32[$db>>2]|0;
          while(1) {
           $45 = HEAP32[$7>>2]|0;
           $46 = ($45|0)==($44|0);
           if ($46) {
            break;
           }
           $47 = ((($45)) + -24|0);
           HEAP32[$7>>2] = $47;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($47);
          }
          $48 = HEAP32[$10>>2]|0;
          while(1) {
           $49 = HEAP32[$11>>2]|0;
           $50 = ($49|0)==($48|0);
           if ($50) {
            break;
           }
           $51 = ((($49)) + -16|0);
           HEAP32[$11>>2] = $51;
           __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($51);
          }
          __THREW__ = 0;
          invoke_viiii(90,($mangled_name|0),($30|0),($db|0),($internal_status|0));
          $52 = __THREW__; __THREW__ = 0;
          $53 = $52&1;
          if ($53) {
           break L7;
          }
          $54 = HEAP8[$27>>0]|0;
          $55 = ($54<<24>>24)==(0);
          if ($55) {
           $$pr$pre = HEAP32[$internal_status>>2]|0;
           $56 = $$pr$pre;
           label = 21;
           break;
          } else {
           HEAP32[$internal_status>>2] = -2;
           $$2 = 0;$112 = -2;
           break;
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 21) {
       $57 = ($56|0)==(0);
       if ($57) {
        label = 22;
       } else {
        $$2 = 0;$112 = $56;
       }
      }
      do {
       if ((label|0) == 22) {
        $58 = HEAP32[$7>>2]|0;
        $59 = ((($58)) + -24|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 & 1;
        $62 = ($61<<24>>24)==(0);
        if ($62) {
         $65 = $60&255;
         $66 = $65 >>> 1;
         $76 = $66;
        } else {
         $63 = ((($58)) + -20|0);
         $64 = HEAP32[$63>>2]|0;
         $76 = $64;
        }
        $67 = ((($58)) + -12|0);
        $68 = HEAP8[$67>>0]|0;
        $69 = $68 & 1;
        $70 = ($69<<24>>24)==(0);
        if ($70) {
         $73 = $68&255;
         $74 = $73 >>> 1;
         $77 = $74;
        } else {
         $71 = ((($58)) + -8|0);
         $72 = HEAP32[$71>>2]|0;
         $77 = $72;
        }
        $75 = (($77) + ($76))|0;
        $78 = (($75) + 1)|0;
        $79 = ($78>>>0)>($80>>>0);
        if ($79) {
         $81 = (_realloc($buf,$78)|0);
         $82 = ($81|0)==(0|0);
         if ($82) {
          HEAP32[$internal_status>>2] = -1;
          $$2 = 0;$112 = -1;
          break;
         }
         if ($2) {
          $$18 = $81;
         } else {
          HEAP32[$n>>2] = $78;
          $$18 = $81;
         }
        } else {
         $83 = ($buf|0)==(0|0);
         if ($83) {
          $$2 = 0;$112 = 0;
          break;
         } else {
          $$18 = $buf;
         }
        }
        $84 = HEAP32[$7>>2]|0;
        $85 = ((($84)) + -24|0);
        $86 = ((($84)) + -12|0);
        $87 = HEAP8[$86>>0]|0;
        $88 = $87 & 1;
        $89 = ($88<<24>>24)==(0);
        $90 = ((($84)) + -4|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = ((($86)) + 1|0);
        $93 = $89 ? $92 : $91;
        $94 = ((($84)) + -8|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = $87&255;
        $97 = $96 >>> 1;
        $98 = $89 ? $97 : $95;
        __THREW__ = 0;
        (invoke_iiii(91,($85|0),($93|0),($98|0))|0);
        $99 = __THREW__; __THREW__ = 0;
        $100 = $99&1;
        if ($100) {
         break L7;
        }
        $101 = HEAP32[$7>>2]|0;
        $102 = ((($101)) + -24|0);
        $103 = HEAP8[$102>>0]|0;
        $104 = $103 & 1;
        $105 = ($104<<24>>24)==(0);
        if ($105) {
         $108 = ((($102)) + 1|0);
         $109 = $108;
        } else {
         $106 = ((($101)) + -16|0);
         $107 = HEAP32[$106>>2]|0;
         $109 = $107;
        }
        _memcpy(($$18|0),($109|0),($75|0))|0;
        $110 = (($$18) + ($75)|0);
        HEAP8[$110>>0] = 0;
        $$2 = $$18;$112 = 0;
       }
      } while(0);
      $111 = ($status|0)==(0|0);
      if (!($111)) {
       HEAP32[$status>>2] = $112;
      }
      __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($db);
      $$0 = $$2;
      break L1;
     }
    } while(0);
    $113 = ___cxa_find_matching_catch_2()|0;
    $114 = tempRet0;
    __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($db);
    ___resumeException($113|0);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $3 = ($status|0)==(0|0);
  if ($3) {
   $$0 = 0;
  } else {
   HEAP32[$status>>2] = -3;
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $6 = 0;
 } else {
  $3 = HEAP32[$__a>>2]|0;
  $4 = $__cap << 4;
  $5 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($3,$4)|0);
  $6 = $5;
 }
 HEAP32[$this>>2] = $6;
 $7 = (($6) + ($__start<<4)|0);
 $8 = ((($this)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($this)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = (($6) + ($__cap<<4)|0);
 $11 = ((($this)) + 12|0);
 HEAP32[$11>>2] = $10;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($this,$n) {
 $this = $this|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + 15)|0;
 $1 = $0 & -16;
 $2 = ((($this)) + 4096|0);
 $3 = ((($this)) + 4096|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<($1>>>0);
 if ($8) {
  $10 = (_malloc($1)|0);
  $$0 = $10;
 } else {
  $9 = (($4) + ($1)|0);
  HEAP32[$3>>2] = $9;
  $$0 = $4;
 }
 return ($$0|0);
}
function __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($__v)) + 4|0);
 $$0$i = $2;
 while(1) {
  $4 = ($$0$i|0)==($0|0);
  if ($4) {
   break;
  }
  $5 = HEAP32[$3>>2]|0;
  $6 = ((($5)) + -16|0);
  $7 = ((($$0$i)) + -16|0);
  $8 = ((($$0$i)) + -4|0);
  HEAP32[$6>>2] = 0;
  $9 = ((($5)) + -12|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($5)) + -8|0);
  $11 = HEAP32[$8>>2]|0;
  HEAP32[$10>>2] = 0;
  $12 = ((($5)) + -4|0);
  HEAP32[$12>>2] = $11;
  $13 = HEAP32[$7>>2]|0;
  HEAP32[$6>>2] = $13;
  $14 = ((($$0$i)) + -12|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$9>>2] = $15;
  $16 = ((($$0$i)) + -8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($5)) + -8|0);
  HEAP32[$18>>2] = $17;
  HEAP32[$16>>2] = 0;
  HEAP32[$14>>2] = 0;
  HEAP32[$7>>2] = 0;
  $19 = HEAP32[$3>>2]|0;
  $20 = ((($19)) + -16|0);
  HEAP32[$3>>2] = $20;
  $$0$i = $7;
 }
 $21 = HEAP32[$this>>2]|0;
 $22 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $22;
 HEAP32[$3>>2] = $21;
 $23 = ((($__v)) + 8|0);
 $24 = HEAP32[$1>>2]|0;
 $25 = HEAP32[$23>>2]|0;
 HEAP32[$1>>2] = $25;
 HEAP32[$23>>2] = $24;
 $26 = ((($this)) + 8|0);
 $27 = ((($__v)) + 12|0);
 $28 = HEAP32[$26>>2]|0;
 $29 = HEAP32[$27>>2]|0;
 HEAP32[$26>>2] = $29;
 HEAP32[$27>>2] = $28;
 $30 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $30;
 return;
}
function __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==($1|0);
  if ($4) {
   break;
  }
  $5 = ((($3)) + -16|0);
  HEAP32[$2>>2] = $5;
  __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($5);
 }
 $6 = HEAP32[$this>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = $6;
  $9 = ((($this)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($this)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) - ($8))|0;
  $14 = HEAP32[$10>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($14,$6,$13);
 }
 return;
}
function __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($this)) + 4|0);
  while(1) {
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($0|0);
   if ($4) {
    break;
   }
   $5 = ((($3)) + -16|0);
   HEAP32[$2>>2] = $5;
   __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
  }
  $6 = HEAP32[$this>>2]|0;
  $7 = ((($this)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $$cast = $6;
  $9 = (($8) - ($$cast))|0;
  $10 = ((($this)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($11,$6,$9);
 }
 return;
}
function __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($this)) + 4|0);
  while(1) {
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($0|0);
   if ($4) {
    break;
   }
   $5 = ((($3)) + -24|0);
   HEAP32[$2>>2] = $5;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
  }
  $6 = HEAP32[$this>>2]|0;
  $7 = ((($this)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $$cast = $6;
  $9 = (($8) - ($$cast))|0;
  $10 = ((($this)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($11,$6,$9);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($this);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($this,$p,$n) {
 $this = $this|0;
 $p = $p|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this>>>0)<=($p>>>0);
 $1 = ((($this)) + 4096|0);
 $2 = ($1>>>0)>=($p>>>0);
 $3 = $0 & $2;
 if ($3) {
  $4 = (($n) + 15)|0;
  $5 = $4 & -16;
  $6 = (($p) + ($5)|0);
  $7 = ((($this)) + 4096|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)==($8|0);
  if ($9) {
   HEAP32[$7>>2] = $p;
  }
 } else {
  _free($p);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($first,$last,$db,$status) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 $status = $status|0;
 var $$0$i = 0, $$0$i$i$i = 0, $$01$i = 0, $$03$i = 0, $$1$i = 0, $$12$i = 0, $$2$i = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i5$i = 0, $__p$0$i$i$i = 0, $__p$0$ph$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i6$i = 0, $i$0$i = 0, $isdigit$i = 0, $isdigit6$i = 0, $isdigittmp$i = 0, $isdigittmp5$i = 0, $or$cond = 0, $or$cond1 = 0, $scevgep2$i$i$i = 0, $t$0 = 0, $t$0$i = 0;
 var $t$0$i$lcssa = 0, $t$1$i = 0, $t$2$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 24|0;
 $1 = sp + 12|0;
 $2 = sp;
 $3 = ($first>>>0)<($last>>>0);
 L1: do {
  if ($3) {
   $4 = HEAP8[$first>>0]|0;
   $5 = ($4<<24>>24)==(95);
   L3: do {
    if ($5) {
     $6 = $last;
     $7 = $first;
     $8 = (($6) - ($7))|0;
     $9 = ($8|0)>(3);
     if (!($9)) {
      HEAP32[$status>>2] = -2;
      break L1;
     }
     $10 = ((($first)) + 1|0);
     $11 = HEAP8[$10>>0]|0;
     switch ($11<<24>>24) {
     case 90:  {
      $12 = ((($first)) + 2|0);
      $13 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($12,$last,$db)|0);
      $14 = ($13|0)==($12|0);
      $15 = ($13|0)==($last|0);
      $or$cond = $14 | $15;
      if ($or$cond) {
       $t$0 = $13;
      } else {
       $16 = HEAP8[$13>>0]|0;
       $17 = ($16<<24>>24)==(46);
       if ($17) {
        $18 = HEAP32[$db>>2]|0;
        $19 = ((($db)) + 4|0);
        $20 = HEAP32[$19>>2]|0;
        $21 = ($18|0)==($20|0);
        L13: do {
         if ($21) {
          $$03$i = $13;
         } else {
          $22 = ((($20)) + -24|0);
          $23 = $13;
          $24 = (($6) - ($23))|0;
          $25 = ($24>>>0)>(4294967279);
          if ($25) {
           __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($2);
           // unreachable;
          }
          $26 = ($24>>>0)<(11);
          if ($26) {
           $27 = $24 << 1;
           $28 = $27&255;
           HEAP8[$2>>0] = $28;
           $29 = ((($2)) + 1|0);
           $__p$0$ph$i$i$i = $29;
          } else {
           $30 = (($24) + 16)|0;
           $31 = $30 & -16;
           $32 = (_malloc($31)|0);
           $33 = ((($2)) + 8|0);
           HEAP32[$33>>2] = $32;
           $34 = $31 | 1;
           HEAP32[$2>>2] = $34;
           $35 = ((($2)) + 4|0);
           HEAP32[$35>>2] = $24;
           $__p$0$ph$i$i$i = $32;
          }
          $$0$i$i$i = $13;$__p$0$i$i$i = $__p$0$ph$i$i$i;
          while(1) {
           $36 = ($$0$i$i$i|0)==($last|0);
           if ($36) {
            break;
           }
           $37 = HEAP8[$$0$i$i$i>>0]|0;
           HEAP8[$__p$0$i$i$i>>0] = $37;
           $38 = ((($$0$i$i$i)) + 1|0);
           $39 = ((($__p$0$i$i$i)) + 1|0);
           $$0$i$i$i = $38;$__p$0$i$i$i = $39;
          }
          $scevgep2$i$i$i = (($__p$0$ph$i$i$i) + ($24)|0);
          HEAP8[$scevgep2$i$i$i>>0] = 0;
          __THREW__ = 0;
          $40 = (invoke_iiii(92,($2|0),0,(5111|0))|0);
          $41 = __THREW__; __THREW__ = 0;
          $42 = $41&1;
          if ($42) {
           $64 = ___cxa_find_matching_catch_2()|0;
           $65 = tempRet0;
           $$1$i = $65;$$12$i = $64;
          } else {
           ;HEAP32[$1>>2]=HEAP32[$40>>2]|0;HEAP32[$1+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$40+8>>2]|0;
           $__i$0$i$i$i$i = 0;
           while(1) {
            $exitcond$i$i$i$i = ($__i$0$i$i$i$i|0)==(3);
            if ($exitcond$i$i$i$i) {
             break;
            }
            $43 = (($40) + ($__i$0$i$i$i$i<<2)|0);
            HEAP32[$43>>2] = 0;
            $44 = (($__i$0$i$i$i$i) + 1)|0;
            $__i$0$i$i$i$i = $44;
           }
           __THREW__ = 0;
           $45 = (invoke_iii(93,($1|0),(5061|0))|0);
           $46 = __THREW__; __THREW__ = 0;
           $47 = $46&1;
           do {
            if ($47) {
             $66 = ___cxa_find_matching_catch_2()|0;
             $67 = tempRet0;
             $$0$i = $67;$$01$i = $66;
            } else {
             ;HEAP32[$0>>2]=HEAP32[$45>>2]|0;HEAP32[$0+4>>2]=HEAP32[$45+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$45+8>>2]|0;
             $__i$0$i$i$i5$i = 0;
             while(1) {
              $exitcond$i$i$i6$i = ($__i$0$i$i$i5$i|0)==(3);
              if ($exitcond$i$i$i6$i) {
               break;
              }
              $48 = (($45) + ($__i$0$i$i$i5$i<<2)|0);
              HEAP32[$48>>2] = 0;
              $49 = (($__i$0$i$i$i5$i) + 1)|0;
              $__i$0$i$i$i5$i = $49;
             }
             $50 = HEAP8[$0>>0]|0;
             $51 = $50 & 1;
             $52 = ($51<<24>>24)==(0);
             $53 = ((($0)) + 8|0);
             $54 = HEAP32[$53>>2]|0;
             $55 = ((($0)) + 1|0);
             $56 = $52 ? $55 : $54;
             $57 = ((($0)) + 4|0);
             $58 = HEAP32[$57>>2]|0;
             $59 = $50&255;
             $60 = $59 >>> 1;
             $61 = $52 ? $60 : $58;
             __THREW__ = 0;
             (invoke_iiii(91,($22|0),($56|0),($61|0))|0);
             $62 = __THREW__; __THREW__ = 0;
             $63 = $62&1;
             if ($63) {
              $68 = ___cxa_find_matching_catch_2()|0;
              $69 = tempRet0;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
              $$0$i = $69;$$01$i = $68;
              break;
             } else {
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
              $$03$i = $last;
              break L13;
             }
            }
           } while(0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           $$1$i = $$0$i;$$12$i = $$01$i;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          ___resumeException($$12$i|0);
          // unreachable;
         }
        } while(0);
        $t$0 = $$03$i;
       } else {
        $t$0 = $13;
       }
      }
      $70 = ($t$0|0)==($last|0);
      if ($70) {
       break L3;
      }
      HEAP32[$status>>2] = -2;
      break L1;
      break;
     }
     case 95:  {
      $71 = ((($first)) + 2|0);
      $72 = HEAP8[$71>>0]|0;
      $73 = ($72<<24>>24)==(95);
      if ($73) {
       $74 = ((($first)) + 3|0);
       $75 = HEAP8[$74>>0]|0;
       $76 = ($75<<24>>24)==(90);
       if ($76) {
        $77 = ((($first)) + 4|0);
        $78 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($77,$last,$db)|0);
        $79 = ($78|0)==($77|0);
        $80 = ($78|0)==($last|0);
        $or$cond1 = $79 | $80;
        if ($or$cond1) {
         HEAP32[$status>>2] = -2;
         break L1;
        }
        $81 = $78;
        $82 = (($6) - ($81))|0;
        $83 = ($82|0)>(12);
        L54: do {
         if ($83) {
          $i$0$i = 0;$t$0$i = $78;
          while(1) {
           $84 = ($i$0$i|0)<(13);
           if (!($84)) {
            $t$0$i$lcssa = $t$0$i;
            break;
           }
           $85 = HEAP8[$t$0$i>>0]|0;
           $86 = (6588 + ($i$0$i)|0);
           $87 = HEAP8[$86>>0]|0;
           $88 = ($85<<24>>24)==($87<<24>>24);
           if (!($88)) {
            $$2$i = $78;
            break L54;
           }
           $89 = (($i$0$i) + 1)|0;
           $90 = ((($t$0$i)) + 1|0);
           $i$0$i = $89;$t$0$i = $90;
          }
          $91 = ($t$0$i$lcssa|0)==($last|0);
          L60: do {
           if ($91) {
            $t$2$i = $last;
           } else {
            $92 = HEAP8[$t$0$i$lcssa>>0]|0;
            $93 = ($92<<24>>24)==(95);
            if ($93) {
             $94 = ((($t$0$i$lcssa)) + 1|0);
             $95 = ($94|0)==($last|0);
             if ($95) {
              $$2$i = $78;
              break L54;
             }
             $96 = HEAP8[$94>>0]|0;
             $97 = $96 << 24 >> 24;
             $isdigittmp5$i = (($97) + -48)|0;
             $isdigit6$i = ($isdigittmp5$i>>>0)<(10);
             if (!($isdigit6$i)) {
              $$2$i = $78;
              break L54;
             }
             $98 = ((($t$0$i$lcssa)) + 2|0);
             $t$1$i = $98;
            } else {
             $t$1$i = $t$0$i$lcssa;
            }
            while(1) {
             $99 = ($t$1$i|0)==($last|0);
             if ($99) {
              $t$2$i = $last;
              break L60;
             }
             $100 = HEAP8[$t$1$i>>0]|0;
             $101 = $100 << 24 >> 24;
             $isdigittmp$i = (($101) + -48)|0;
             $isdigit$i = ($isdigittmp$i>>>0)<(10);
             if (!($isdigit$i)) {
              $t$2$i = $t$1$i;
              break L60;
             }
             $102 = ((($t$1$i)) + 1|0);
             $t$1$i = $102;
            }
           }
          } while(0);
          $103 = HEAP32[$db>>2]|0;
          $104 = ((($db)) + 4|0);
          $105 = HEAP32[$104>>2]|0;
          $106 = ($103|0)==($105|0);
          if ($106) {
           $$2$i = $78;
          } else {
           $107 = ((($105)) + -24|0);
           (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($107,0,6602)|0);
           $$2$i = $t$2$i;
          }
         } else {
          $$2$i = $78;
         }
        } while(0);
        $108 = ($$2$i|0)==($last|0);
        if ($108) {
         break L3;
        }
        HEAP32[$status>>2] = -2;
        break L1;
       }
      }
      break;
     }
     default: {
     }
     }
     HEAP32[$status>>2] = -2;
     break L1;
    } else {
     $109 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $110 = ($109|0)==($last|0);
     if (!($110)) {
      HEAP32[$status>>2] = -2;
      break L1;
     }
    }
   } while(0);
   $$pr = HEAP32[$status>>2]|0;
   $111 = ($$pr|0)==(0);
   if ($111) {
    $112 = HEAP32[$db>>2]|0;
    $113 = ((($db)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($112|0)==($114|0);
    if ($115) {
     HEAP32[$status>>2] = -2;
    }
   }
  } else {
   HEAP32[$status>>2] = -2;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$011 = 0, $$021 = 0, $$11 = 0, $$112 = 0, $$122 = 0, $$13$i = 0, $$15 = 0, $$17$i = 0, $$213 = 0, $$223 = 0, $$24$i = 0, $$28$i = 0, $$35$i = 0, $$39$i = 0, $$418 = 0, $$59$ph = 0, $$8$i = 0, $$in = 0, $$in138 = 0, $$lcssa = 0;
 var $$lcssa162 = 0, $$lcssa163 = 0, $$lcssa165 = 0, $$lcssa168 = 0, $$ph126 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i39 = 0, $$pre117 = 0, $$pre118 = 0, $$pre119 = 0, $$pre120 = 0, $$pre121 = 0, $$pre122 = 0, $$pre123 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i$i = 0, $__i$0$i$i$i$i51 = 0, $__i$0$i$i$i25$i = 0, $__i$0$i$i$i28$i = 0, $__i$0$i$i43 = 0, $__i$0$i$i48 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $exitcond$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i$i = 0, $exitcond$i$i$i$i52 = 0, $exitcond$i$i$i26$i = 0;
 var $exitcond$i$i$i29$i = 0, $exitcond$i$i44 = 0, $exitcond$i$i49 = 0, $first_arg$0$off0$ph = 0, $first_arg$3$off0$ph = 0, $k$0 = 0, $k2$0 = 0, $left$i = 0, $lpad$phi$index = 0, $lpad$phi$index12 = 0, $lpad$phi94$index = 0, $lpad$phi94$index7 = 0, $or$cond$i = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $ret1 = 0;
 var $ret2 = 0, $t$0 = 0, $t$1 = 0, $t$1$lcssa159 = 0, $t$1$ph = 0, $t$3 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $left$i = sp + 96|0;
 $0 = sp + 84|0;
 $1 = sp + 72|0;
 $2 = sp + 60|0;
 $3 = sp + 48|0;
 $ret2 = sp + 36|0;
 $ret1 = sp + 24|0;
 $tmp = sp + 12|0;
 $4 = sp;
 $5 = ($first|0)==($last|0);
 L1: do {
  if ($5) {
   $$11 = $first;
  } else {
   $6 = ((($db)) + 56|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + 1)|0;
   HEAP32[$6>>2] = $8;
   $9 = ((($db)) + 61|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($8>>>0)>(1);
   if ($11) {
    HEAP8[$9>>0] = 1;
   }
   $12 = HEAP8[$first>>0]|0;
   $13 = $12 << 24 >> 24;
   L6: do {
    switch ($13|0) {
    case 84: case 71:  {
     $14 = $last;
     $15 = $first;
     $16 = (($14) - ($15))|0;
     $17 = ($16|0)>(2);
     L150: do {
      if ($17) {
       switch ($13|0) {
       case 84:  {
        break;
       }
       case 71:  {
        $219 = ((($first)) + 1|0);
        $220 = HEAP8[$219>>0]|0;
        $221 = $220 << 24 >> 24;
        switch ($221|0) {
        case 86:  {
         $222 = ((($first)) + 2|0);
         __THREW__ = 0;
         $223 = (invoke_iiii(97,($222|0),($last|0),($db|0))|0);
         $224 = __THREW__; __THREW__ = 0;
         $225 = $224&1;
         if ($225) {
          label = 100;
          break L6;
         }
         $226 = ($223|0)==($222|0);
         if ($226) {
          $$8$i = $first;
          break L150;
         }
         $227 = HEAP32[$db>>2]|0;
         $228 = ((($db)) + 4|0);
         $229 = HEAP32[$228>>2]|0;
         $230 = ($227|0)==($229|0);
         if ($230) {
          $$8$i = $first;
          break L150;
         }
         $231 = ((($229)) + -24|0);
         __THREW__ = 0;
         (invoke_iiii(92,($231|0),0,(6543|0))|0);
         $232 = __THREW__; __THREW__ = 0;
         $233 = $232&1;
         if ($233) {
          label = 100;
          break L6;
         } else {
          $$8$i = $223;
          break L150;
         }
         break;
        }
        case 82:  {
         $234 = ((($first)) + 2|0);
         __THREW__ = 0;
         $235 = (invoke_iiii(97,($234|0),($last|0),($db|0))|0);
         $236 = __THREW__; __THREW__ = 0;
         $237 = $236&1;
         if ($237) {
          label = 100;
          break L6;
         }
         $238 = ($235|0)==($234|0);
         if ($238) {
          $$8$i = $first;
          break L150;
         }
         $239 = HEAP32[$db>>2]|0;
         $240 = ((($db)) + 4|0);
         $241 = HEAP32[$240>>2]|0;
         $242 = ($239|0)==($241|0);
         if ($242) {
          $$8$i = $first;
          break L150;
         }
         $243 = ((($241)) + -24|0);
         __THREW__ = 0;
         (invoke_iiii(92,($243|0),0,(6563|0))|0);
         $244 = __THREW__; __THREW__ = 0;
         $245 = $244&1;
         if ($245) {
          label = 100;
          break L6;
         } else {
          $$8$i = $235;
          break L150;
         }
         break;
        }
        default: {
         $$8$i = $first;
         break L150;
        }
        }
        break;
       }
       default: {
        $$8$i = $first;
        break L150;
       }
       }
       $18 = ((($first)) + 1|0);
       $19 = HEAP8[$18>>0]|0;
       $20 = $19 << 24 >> 24;
       switch ($20|0) {
       case 86:  {
        $21 = ((($first)) + 2|0);
        __THREW__ = 0;
        $22 = (invoke_iiii(94,($21|0),($last|0),($db|0))|0);
        $23 = __THREW__; __THREW__ = 0;
        $24 = $23&1;
        if ($24) {
         label = 100;
         break L6;
        }
        $25 = ($22|0)==($21|0);
        if ($25) {
         $$8$i = $first;
         break L150;
        }
        $26 = HEAP32[$db>>2]|0;
        $27 = ((($db)) + 4|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = ($26|0)==($28|0);
        if ($29) {
         $$8$i = $first;
         break L150;
        }
        $30 = ((($28)) + -24|0);
        __THREW__ = 0;
        (invoke_iiii(92,($30|0),0,(6392|0))|0);
        $31 = __THREW__; __THREW__ = 0;
        $32 = $31&1;
        if ($32) {
         label = 100;
         break L6;
        } else {
         $$8$i = $22;
         break L150;
        }
        break;
       }
       case 84:  {
        $33 = ((($first)) + 2|0);
        __THREW__ = 0;
        $34 = (invoke_iiii(94,($33|0),($last|0),($db|0))|0);
        $35 = __THREW__; __THREW__ = 0;
        $36 = $35&1;
        if ($36) {
         label = 100;
         break L6;
        }
        $37 = ($34|0)==($33|0);
        if ($37) {
         $$8$i = $first;
         break L150;
        }
        $38 = HEAP32[$db>>2]|0;
        $39 = ((($db)) + 4|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($38|0)==($40|0);
        if ($41) {
         $$8$i = $first;
         break L150;
        }
        $42 = ((($40)) + -24|0);
        __THREW__ = 0;
        (invoke_iiii(92,($42|0),0,(6404|0))|0);
        $43 = __THREW__; __THREW__ = 0;
        $44 = $43&1;
        if ($44) {
         label = 100;
         break L6;
        } else {
         $$8$i = $34;
         break L150;
        }
        break;
       }
       case 73:  {
        $45 = ((($first)) + 2|0);
        __THREW__ = 0;
        $46 = (invoke_iiii(94,($45|0),($last|0),($db|0))|0);
        $47 = __THREW__; __THREW__ = 0;
        $48 = $47&1;
        if ($48) {
         label = 100;
         break L6;
        }
        $49 = ($46|0)==($45|0);
        if ($49) {
         $$8$i = $first;
         break L150;
        }
        $50 = HEAP32[$db>>2]|0;
        $51 = ((($db)) + 4|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = ($50|0)==($52|0);
        if ($53) {
         $$8$i = $first;
         break L150;
        }
        $54 = ((($52)) + -24|0);
        __THREW__ = 0;
        (invoke_iiii(92,($54|0),0,(6413|0))|0);
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         label = 100;
         break L6;
        } else {
         $$8$i = $46;
         break L150;
        }
        break;
       }
       case 83:  {
        $57 = ((($first)) + 2|0);
        __THREW__ = 0;
        $58 = (invoke_iiii(94,($57|0),($last|0),($db|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         label = 100;
         break L6;
        }
        $61 = ($58|0)==($57|0);
        if ($61) {
         $$8$i = $first;
         break L150;
        }
        $62 = HEAP32[$db>>2]|0;
        $63 = ((($db)) + 4|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = ($62|0)==($64|0);
        if ($65) {
         $$8$i = $first;
         break L150;
        }
        $66 = ((($64)) + -24|0);
        __THREW__ = 0;
        (invoke_iiii(92,($66|0),0,(6427|0))|0);
        $67 = __THREW__; __THREW__ = 0;
        $68 = $67&1;
        if ($68) {
         label = 100;
         break L6;
        } else {
         $$8$i = $58;
         break L150;
        }
        break;
       }
       case 99:  {
        $69 = ((($first)) + 2|0);
        $70 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($69,$last)|0);
        $71 = ($70|0)==($69|0);
        if ($71) {
         $$8$i = $first;
         break L150;
        }
        $72 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($70,$last)|0);
        $73 = ($72|0)==($70|0);
        if ($73) {
         $$8$i = $first;
         break L150;
        }
        __THREW__ = 0;
        $74 = (invoke_iiii(95,($72|0),($last|0),($db|0))|0);
        $75 = __THREW__; __THREW__ = 0;
        $76 = $75&1;
        if ($76) {
         label = 100;
         break L6;
        }
        $77 = ($74|0)==($72|0);
        if ($77) {
         $$8$i = $first;
         break L150;
        }
        $78 = HEAP32[$db>>2]|0;
        $79 = ((($db)) + 4|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = ($78|0)==($80|0);
        if ($81) {
         $$8$i = $first;
         break L150;
        }
        $82 = ((($80)) + -24|0);
        __THREW__ = 0;
        (invoke_iiii(92,($82|0),0,(6446|0))|0);
        $83 = __THREW__; __THREW__ = 0;
        $84 = $83&1;
        if ($84) {
         label = 100;
         break L6;
        } else {
         $$8$i = $74;
         break L150;
        }
        break;
       }
       case 67:  {
        $85 = ((($first)) + 2|0);
        __THREW__ = 0;
        $86 = (invoke_iiii(94,($85|0),($last|0),($db|0))|0);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if ($88) {
         label = 100;
         break L6;
        }
        $89 = ($86|0)==($85|0);
        if ($89) {
         $$8$i = $first;
         break L150;
        }
        $90 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($86,$last)|0);
        $91 = ($90|0)==($86|0);
        $92 = ($90|0)==($last|0);
        $or$cond$i = $91 | $92;
        if ($or$cond$i) {
         $$8$i = $first;
         break L150;
        }
        $93 = HEAP8[$90>>0]|0;
        $94 = ($93<<24>>24)==(95);
        if (!($94)) {
         $$8$i = $first;
         break L150;
        }
        $95 = ((($90)) + 1|0);
        __THREW__ = 0;
        $96 = (invoke_iiii(94,($95|0),($last|0),($db|0))|0);
        $97 = __THREW__; __THREW__ = 0;
        $98 = $97&1;
        if ($98) {
         label = 100;
         break L6;
        }
        $99 = ($96|0)==($95|0);
        if ($99) {
         $$8$i = $first;
         break L150;
        }
        $100 = ((($db)) + 4|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = HEAP32[$db>>2]|0;
        $103 = (($101) - ($102))|0;
        $104 = (($103|0) / 24)&-1;
        $105 = ($104>>>0)<(2);
        if ($105) {
         $$8$i = $first;
         break L150;
        }
        $106 = $101;
        $107 = ((($106)) + -24|0);
        __THREW__ = 0;
        invoke_vii(96,($left$i|0),($107|0));
        $108 = __THREW__; __THREW__ = 0;
        $109 = $108&1;
        if ($109) {
         label = 100;
         break L6;
        }
        $110 = HEAP32[$100>>2]|0;
        $111 = ((($110)) + -24|0);
        $112 = $110;
        while(1) {
         $113 = ($112|0)==($111|0);
         if ($113) {
          break;
         }
         $114 = ((($112)) + -24|0);
         HEAP32[$100>>2] = $114;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($114);
         $$pre$i$i = HEAP32[$100>>2]|0;
         $112 = $$pre$i$i;
        }
        $115 = ((($110)) + -48|0);
        __THREW__ = 0;
        $116 = (invoke_iiii(92,($left$i|0),0,(6473|0))|0);
        $117 = __THREW__; __THREW__ = 0;
        $118 = $117&1;
        if ($118) {
         $193 = ___cxa_find_matching_catch_2()|0;
         $194 = tempRet0;
         $$35$i = $194;$$39$i = $193;
        } else {
         ;HEAP32[$2>>2]=HEAP32[$116>>2]|0;HEAP32[$2+4>>2]=HEAP32[$116+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$116+8>>2]|0;
         $__i$0$i$i$i28$i = 0;
         while(1) {
          $exitcond$i$i$i29$i = ($__i$0$i$i$i28$i|0)==(3);
          if ($exitcond$i$i$i29$i) {
           break;
          }
          $119 = (($116) + ($__i$0$i$i$i28$i<<2)|0);
          HEAP32[$119>>2] = 0;
          $120 = (($__i$0$i$i$i28$i) + 1)|0;
          $__i$0$i$i$i28$i = $120;
         }
         __THREW__ = 0;
         $121 = (invoke_iii(93,($2|0),(6498|0))|0);
         $122 = __THREW__; __THREW__ = 0;
         $123 = $122&1;
         if ($123) {
          $195 = ___cxa_find_matching_catch_2()|0;
          $196 = tempRet0;
          $$24$i = $196;$$28$i = $195;
         } else {
          ;HEAP32[$1>>2]=HEAP32[$121>>2]|0;HEAP32[$1+4>>2]=HEAP32[$121+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$121+8>>2]|0;
          $__i$0$i$i$i25$i = 0;
          while(1) {
           $exitcond$i$i$i26$i = ($__i$0$i$i$i25$i|0)==(3);
           if ($exitcond$i$i$i26$i) {
            break;
           }
           $124 = (($121) + ($__i$0$i$i$i25$i<<2)|0);
           HEAP32[$124>>2] = 0;
           $125 = (($__i$0$i$i$i25$i) + 1)|0;
           $__i$0$i$i$i25$i = $125;
          }
          $126 = HEAP32[$100>>2]|0;
          $127 = ((($126)) + -24|0);
          __THREW__ = 0;
          invoke_vii(96,($3|0),($127|0));
          $128 = __THREW__; __THREW__ = 0;
          $129 = $128&1;
          do {
           if ($129) {
            $197 = ___cxa_find_matching_catch_2()|0;
            $198 = tempRet0;
            $$13$i = $198;$$17$i = $197;
           } else {
            $130 = HEAP8[$3>>0]|0;
            $131 = $130 & 1;
            $132 = ($131<<24>>24)==(0);
            $133 = ((($3)) + 8|0);
            $134 = HEAP32[$133>>2]|0;
            $135 = ((($3)) + 1|0);
            $136 = $132 ? $135 : $134;
            $137 = ((($3)) + 4|0);
            $138 = HEAP32[$137>>2]|0;
            $139 = $130&255;
            $140 = $139 >>> 1;
            $141 = $132 ? $140 : $138;
            __THREW__ = 0;
            $142 = (invoke_iiii(91,($1|0),($136|0),($141|0))|0);
            $143 = __THREW__; __THREW__ = 0;
            $144 = $143&1;
            if ($144) {
             $199 = ___cxa_find_matching_catch_2()|0;
             $200 = tempRet0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
             $$13$i = $200;$$17$i = $199;
             break;
            }
            ;HEAP32[$0>>2]=HEAP32[$142>>2]|0;HEAP32[$0+4>>2]=HEAP32[$142+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$142+8>>2]|0;
            $__i$0$i$i$i$i51 = 0;
            while(1) {
             $exitcond$i$i$i$i52 = ($__i$0$i$i$i$i51|0)==(3);
             if ($exitcond$i$i$i$i52) {
              break;
             }
             $145 = (($142) + ($__i$0$i$i$i$i51<<2)|0);
             HEAP32[$145>>2] = 0;
             $146 = (($__i$0$i$i$i$i51) + 1)|0;
             $__i$0$i$i$i$i51 = $146;
            }
            $147 = HEAP8[$115>>0]|0;
            $148 = $147 & 1;
            $149 = ($148<<24>>24)==(0);
            do {
             if ($149) {
              $150 = ((($115)) + 1|0);
              HEAP8[$150>>0] = 0;
              HEAP8[$115>>0] = 0;
             } else {
              $151 = ((($110)) + -40|0);
              $152 = HEAP32[$151>>2]|0;
              HEAP8[$152>>0] = 0;
              $153 = ((($110)) + -44|0);
              HEAP32[$153>>2] = 0;
              $$pre$i$i$i$i = HEAP8[$115>>0]|0;
              $154 = $$pre$i$i$i$i & 1;
              $155 = ($154<<24>>24)==(0);
              if ($155) {
               $160 = $$pre$i$i$i$i;$169 = 10;
              } else {
               $156 = HEAP32[$115>>2]|0;
               $157 = $156 & -2;
               $phitmp$i$i$i$i$i$i$i = (($157) + -1)|0;
               $158 = $156&255;
               $160 = $158;$169 = $phitmp$i$i$i$i$i$i$i;
              }
              $159 = $160 & 1;
              $161 = ($159<<24>>24)==(0);
              do {
               if ($161) {
                $162 = $160&255;
                $163 = $162 >>> 1;
                $164 = ($160&255)<(22);
                if ($164) {
                 $167 = 10;$188 = $163;$547 = 1;
                 break;
                }
                $165 = (($163) + 16)|0;
                $166 = $165 & 240;
                $phitmp$i2$i$i$i$i$i$i = (($166) + -1)|0;
                $167 = $phitmp$i2$i$i$i$i$i$i;$188 = $163;$547 = 1;
               } else {
                $167 = 10;$188 = 0;$547 = 0;
               }
              } while(0);
              $168 = ($167|0)==($169|0);
              if ($168) {
               break;
              }
              $170 = ($167|0)==(10);
              if ($170) {
               $175 = ((($115)) + 1|0);
               $176 = HEAP32[$151>>2]|0;
               if ($547) {
                $177 = $160&255;
                $178 = $177 >>> 1;
                $179 = (($178) + 1)|0;
                _memcpy(($175|0),($176|0),($179|0))|0;
                _free($176);
               } else {
                $184 = HEAP8[$176>>0]|0;
                HEAP8[$175>>0] = $184;
                _free($176);
               }
               $189 = $188 << 1;
               $190 = $189&255;
               HEAP8[$115>>0] = $190;
               break;
              }
              $171 = ($167>>>0)<=($169>>>0);
              $172 = (($167) + 1)|0;
              $173 = (_malloc($172)|0);
              $174 = ($173|0)==(0|0);
              $or$cond$i$i$i$i$i$i = $171 & $174;
              if ($or$cond$i$i$i$i$i$i) {
               break;
              }
              if ($547) {
               $180 = ((($115)) + 1|0);
               $181 = $160&255;
               $182 = $181 >>> 1;
               $183 = (($182) + 1)|0;
               _memcpy(($173|0),($180|0),($183|0))|0;
              } else {
               $185 = HEAP32[$151>>2]|0;
               $186 = HEAP8[$185>>0]|0;
               HEAP8[$173>>0] = $186;
               _free($185);
              }
              $187 = $172 | 1;
              HEAP32[$115>>2] = $187;
              HEAP32[$153>>2] = $188;
              HEAP32[$151>>2] = $173;
             }
            } while(0);
            ;HEAP32[$115>>2]=HEAP32[$0>>2]|0;HEAP32[$115+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$115+8>>2]=HEAP32[$0+8>>2]|0;
            $__i$0$i$i$i$i$i = 0;
            while(1) {
             $exitcond$i$i$i$i$i = ($__i$0$i$i$i$i$i|0)==(3);
             if ($exitcond$i$i$i$i$i) {
              break;
             }
             $191 = (($0) + ($__i$0$i$i$i$i$i<<2)|0);
             HEAP32[$191>>2] = 0;
             $192 = (($__i$0$i$i$i$i$i) + 1)|0;
             $__i$0$i$i$i$i$i = $192;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($left$i);
            $$8$i = $96;
            break L150;
           }
          } while(0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
          $$24$i = $$13$i;$$28$i = $$17$i;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         $$35$i = $$24$i;$$39$i = $$28$i;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($left$i);
        $eh$lpad$body$index2Z2D = $$35$i;$eh$lpad$body$indexZ2D = $$39$i;
        label = 101;
        break L6;
        break;
       }
       default: {
        $201 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($18,$last)|0);
        $202 = ($201|0)==($18|0);
        if ($202) {
         $$8$i = $first;
         break L150;
        }
        __THREW__ = 0;
        $203 = (invoke_iiii(95,($201|0),($last|0),($db|0))|0);
        $204 = __THREW__; __THREW__ = 0;
        $205 = $204&1;
        if ($205) {
         label = 100;
         break L6;
        }
        $206 = ($203|0)==($201|0);
        if ($206) {
         $$8$i = $first;
         break L150;
        }
        $207 = HEAP32[$db>>2]|0;
        $208 = ((($db)) + 4|0);
        $209 = HEAP32[$208>>2]|0;
        $210 = ($207|0)==($209|0);
        if ($210) {
         $$8$i = $first;
         break L150;
        }
        $211 = ((($first)) + 2|0);
        $212 = HEAP8[$211>>0]|0;
        $213 = ($212<<24>>24)==(118);
        $214 = ((($209)) + -24|0);
        if ($213) {
         __THREW__ = 0;
         (invoke_iiii(92,($214|0),0,(6503|0))|0);
         $215 = __THREW__; __THREW__ = 0;
         $216 = $215&1;
         if ($216) {
          label = 100;
          break L6;
         } else {
          $$8$i = $203;
          break L150;
         }
        } else {
         __THREW__ = 0;
         (invoke_iiii(92,($214|0),0,(6521|0))|0);
         $217 = __THREW__; __THREW__ = 0;
         $218 = $217&1;
         if ($218) {
          label = 100;
          break L6;
         } else {
          $$8$i = $203;
          break L150;
         }
        }
       }
       }
      } else {
       $$8$i = $first;
      }
     } while(0);
     $$59$ph = $$8$i;
     label = 208;
     break;
    }
    default: {
     __THREW__ = 0;
     $248 = (invoke_iiii(97,($first|0),($last|0),($db|0))|0);
     $249 = __THREW__; __THREW__ = 0;
     $250 = $249&1;
     if ($250) {
      label = 100;
     } else {
      $251 = ((($db)) + 48|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = ((($db)) + 52|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = ($248|0)==($first|0);
      if ($255) {
       $$59$ph = $first;
       label = 208;
      } else {
       $256 = ($248|0)==($last|0);
       if ($256) {
        $$59$ph = $last;
        label = 208;
       } else {
        $257 = HEAP8[$248>>0]|0;
        switch ($257<<24>>24) {
        case 46: case 69:  {
         $$59$ph = $248;
         label = 208;
         break L6;
         break;
        }
        default: {
        }
        }
        $258 = HEAP8[$9>>0]|0;
        HEAP8[$9>>0] = 0;
        $__i$0$i$i48 = 0;
        while(1) {
         $exitcond$i$i49 = ($__i$0$i$i48|0)==(3);
         if ($exitcond$i$i49) {
          break;
         }
         $259 = (($ret2) + ($__i$0$i$i48<<2)|0);
         HEAP32[$259>>2] = 0;
         $260 = (($__i$0$i$i48) + 1)|0;
         $__i$0$i$i48 = $260;
        }
        $261 = HEAP32[$db>>2]|0;
        $262 = ((($db)) + 4|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = ($261|0)==($263|0);
        L16: do {
         if ($264) {
          $$15 = $first;$$418 = 0;
         } else {
          $265 = ((($263)) + -24|0);
          $266 = HEAP8[$265>>0]|0;
          $267 = $266 & 1;
          $268 = ($267<<24>>24)==(0);
          if ($268) {
           $271 = $266&255;
           $272 = $271 >>> 1;
           $273 = $272;
          } else {
           $269 = ((($263)) + -20|0);
           $270 = HEAP32[$269>>2]|0;
           $273 = $270;
          }
          $274 = ($273|0)==(0);
          if ($274) {
           $$15 = $first;$$418 = 0;
          } else {
           $279 = ((($db)) + 60|0);
           $280 = HEAP8[$279>>0]|0;
           $281 = ($280<<24>>24)==(0);
           L23: do {
            if ($281) {
             if ($268) {
              $286 = ((($265)) + 1|0);
              $287 = $266&255;
              $288 = $287 >>> 1;
              $290 = $286;$291 = $288;
             } else {
              $282 = ((($263)) + -16|0);
              $283 = HEAP32[$282>>2]|0;
              $284 = ((($263)) + -20|0);
              $285 = HEAP32[$284>>2]|0;
              $290 = $283;$291 = $285;
             }
             $289 = (($290) + ($291)|0);
             $292 = ((($289)) + -1|0);
             $293 = HEAP8[$292>>0]|0;
             $294 = ($293<<24>>24)==(62);
             if ($294) {
              if ($268) {
               $299 = $266&255;
               $300 = $299 >>> 1;
               $301 = ((($265)) + 1|0);
               $$in = $300;$304 = $301;
              } else {
               $295 = ((($263)) + -20|0);
               $296 = HEAP32[$295>>2]|0;
               $297 = ((($263)) + -16|0);
               $298 = HEAP32[$297>>2]|0;
               $$in = $296;$304 = $298;
              }
              $302 = (($$in) + -2)|0;
              $303 = (($304) + ($302)|0);
              $305 = HEAP8[$303>>0]|0;
              $306 = ($305<<24>>24)==(45);
              if ($306) {
               $402 = $263;$t$0 = $248;
               label = 157;
              } else {
               if ($268) {
                $311 = $266&255;
                $312 = $311 >>> 1;
                $313 = ((($265)) + 1|0);
                $$in138 = $312;$316 = $313;
               } else {
                $307 = ((($263)) + -20|0);
                $308 = HEAP32[$307>>2]|0;
                $309 = ((($263)) + -16|0);
                $310 = HEAP32[$309>>2]|0;
                $$in138 = $308;$316 = $310;
               }
               $314 = (($$in138) + -2)|0;
               $315 = (($316) + ($314)|0);
               $317 = HEAP8[$315>>0]|0;
               $318 = ($317<<24>>24)==(62);
               if ($318) {
                $402 = $263;$t$0 = $248;
                label = 157;
               } else {
                __THREW__ = 0;
                $319 = (invoke_iiii(94,($248|0),($last|0),($db|0))|0);
                $320 = __THREW__; __THREW__ = 0;
                $321 = $320&1;
                if ($321) {
                 label = 115;
                } else {
                 $322 = ($319|0)==($248|0);
                 if ($322) {
                  $$15 = $first;$$418 = 0;
                  break L16;
                 }
                 $323 = HEAP32[$262>>2]|0;
                 $324 = HEAP32[$db>>2]|0;
                 $325 = (($323) - ($324))|0;
                 $326 = (($325|0) / 24)&-1;
                 $327 = ($326>>>0)<(2);
                 $328 = $323;
                 if ($327) {
                  $$15 = $first;$$418 = 0;
                  break L16;
                 }
                 $329 = ((($328)) + -24|0);
                 ;HEAP32[$ret1>>2]=HEAP32[$329>>2]|0;HEAP32[$ret1+4>>2]=HEAP32[$329+4>>2]|0;HEAP32[$ret1+8>>2]=HEAP32[$329+8>>2]|0;
                 $__i$0$i$i43 = 0;
                 while(1) {
                  $exitcond$i$i44 = ($__i$0$i$i43|0)==(3);
                  if ($exitcond$i$i44) {
                   break;
                  }
                  $330 = (($329) + ($__i$0$i$i43<<2)|0);
                  HEAP32[$330>>2] = 0;
                  $331 = (($__i$0$i$i43) + 1)|0;
                  $__i$0$i$i43 = $331;
                 }
                 $332 = ((($328)) + -12|0);
                 $333 = HEAP8[$ret2>>0]|0;
                 $334 = $333 & 1;
                 $335 = ($334<<24>>24)==(0);
                 L47: do {
                  if ($335) {
                   $336 = ((($ret2)) + 1|0);
                   HEAP8[$336>>0] = 0;
                   HEAP8[$ret2>>0] = 0;
                  } else {
                   $337 = ((($ret2)) + 8|0);
                   $338 = HEAP32[$337>>2]|0;
                   HEAP8[$338>>0] = 0;
                   $339 = ((($ret2)) + 4|0);
                   HEAP32[$339>>2] = 0;
                   $340 = HEAP32[$ret2>>2]|0;
                   $341 = $340 & -2;
                   $phitmp$i$i$i$i$i$i = (($341) + -1)|0;
                   $342 = $340&255;
                   $343 = $342 & 1;
                   $344 = ($343<<24>>24)==(0);
                   do {
                    if ($344) {
                     $345 = $340 >>> 1;
                     $346 = $345 & 127;
                     $347 = ($342&255)<(22);
                     if ($347) {
                      $354 = ((($ret2)) + 1|0);
                      $355 = $340 >>> 1;
                      $356 = $355 & 127;
                      $357 = (($356) + 1)|0;
                      _memcpy(($354|0),($338|0),($357|0))|0;
                      _free($338);
                      $$ph126 = $346;
                      break;
                     }
                     $348 = (($346) + 16)|0;
                     $349 = $348 & 240;
                     $phitmp$i2$i$i$i$i$i = (($349) + -1)|0;
                     $350 = ($phitmp$i2$i$i$i$i$i|0)==($phitmp$i$i$i$i$i$i|0);
                     if ($350) {
                      break L47;
                     }
                     $351 = ($phitmp$i2$i$i$i$i$i>>>0)<=($phitmp$i$i$i$i$i$i>>>0);
                     $352 = (_malloc($349)|0);
                     $353 = ($352|0)==(0|0);
                     $or$cond$i$i$i$i$i = $351 & $353;
                     if ($or$cond$i$i$i$i$i) {
                      break L47;
                     }
                     $359 = ((($ret2)) + 1|0);
                     $360 = $340 >>> 1;
                     $361 = $360 & 127;
                     $362 = (($361) + 1)|0;
                     _memcpy(($352|0),($359|0),($362|0))|0;
                     $363 = $349 | 1;
                     HEAP32[$ret2>>2] = $363;
                     HEAP32[$339>>2] = $346;
                     HEAP32[$337>>2] = $352;
                     break L47;
                    } else {
                     $358 = ((($ret2)) + 1|0);
                     HEAP8[$358>>0] = 0;
                     _free($338);
                     $$ph126 = 0;
                    }
                   } while(0);
                   $364 = $$ph126 << 1;
                   $365 = $364&255;
                   HEAP8[$ret2>>0] = $365;
                  }
                 } while(0);
                 ;HEAP32[$ret2>>2]=HEAP32[$332>>2]|0;HEAP32[$ret2+4>>2]=HEAP32[$332+4>>2]|0;HEAP32[$ret2+8>>2]=HEAP32[$332+8>>2]|0;
                 $__i$0$i$i$i$i = 0;
                 while(1) {
                  $exitcond$i$i$i$i = ($__i$0$i$i$i$i|0)==(3);
                  if ($exitcond$i$i$i$i) {
                   break;
                  }
                  $366 = (($332) + ($__i$0$i$i$i$i<<2)|0);
                  HEAP32[$366>>2] = 0;
                  $367 = (($__i$0$i$i$i$i) + 1)|0;
                  $__i$0$i$i$i$i = $367;
                 }
                 $368 = HEAP8[$ret2>>0]|0;
                 $369 = $368 & 1;
                 $370 = ($369<<24>>24)==(0);
                 $371 = ((($ret2)) + 4|0);
                 $372 = HEAP32[$371>>2]|0;
                 $373 = $368&255;
                 $374 = $373 >>> 1;
                 $375 = $370 ? $374 : $372;
                 $376 = ($375|0)==(0);
                 if ($376) {
                  __THREW__ = 0;
                  invoke_vii(98,($ret1|0),32);
                  $377 = __THREW__; __THREW__ = 0;
                  $378 = $377&1;
                  if (!($378)) {
                   label = 152;
                  }
                 } else {
                  label = 152;
                 }
                 do {
                  if ((label|0) == 152) {
                   $381 = HEAP32[$262>>2]|0;
                   $382 = ((($381)) + -24|0);
                   $383 = $381;
                   while(1) {
                    $384 = ($383|0)==($382|0);
                    if ($384) {
                     break;
                    }
                    $385 = ((($383)) + -24|0);
                    HEAP32[$262>>2] = $385;
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($385);
                    $$pre$i39 = HEAP32[$262>>2]|0;
                    $383 = $$pre$i39;
                   }
                   $386 = ((($381)) + -48|0);
                   $387 = HEAP8[$ret1>>0]|0;
                   $388 = $387 & 1;
                   $389 = ($388<<24>>24)==(0);
                   $390 = ((($ret1)) + 8|0);
                   $391 = HEAP32[$390>>2]|0;
                   $392 = ((($ret1)) + 1|0);
                   $393 = $389 ? $392 : $391;
                   $394 = ((($ret1)) + 4|0);
                   $395 = HEAP32[$394>>2]|0;
                   $396 = $387&255;
                   $397 = $396 >>> 1;
                   $398 = $389 ? $397 : $395;
                   __THREW__ = 0;
                   (invoke_iiiii(99,($386|0),0,($393|0),($398|0))|0);
                   $399 = __THREW__; __THREW__ = 0;
                   $400 = $399&1;
                   if ($400) {
                    break;
                   }
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret1);
                   $$pre = HEAP32[$262>>2]|0;
                   $402 = $$pre;$t$0 = $319;
                   label = 157;
                   break L23;
                  }
                 } while(0);
                 $379 = ___cxa_find_matching_catch_2()|0;
                 $380 = tempRet0;
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret1);
                 $$112 = $379;$$122 = $380;
                }
               }
              }
             } else {
              $402 = $263;$t$0 = $248;
              label = 157;
             }
            } else {
             $402 = $263;$t$0 = $248;
             label = 157;
            }
           } while(0);
           L74: do {
            if ((label|0) == 157) {
             $401 = ((($402)) + -24|0);
             __THREW__ = 0;
             invoke_vii(98,($401|0),40);
             $403 = __THREW__; __THREW__ = 0;
             $404 = $403&1;
             if ($404) {
              label = 115;
             } else {
              $405 = ($t$0|0)==($last|0);
              if ($405) {
               label = 160;
              } else {
               $406 = HEAP8[$t$0>>0]|0;
               $407 = ($406<<24>>24)==(118);
               if ($407) {
                $414 = ((($t$0)) + 1|0);
                $$pre122 = HEAP32[$db>>2]|0;
                $$pre123 = HEAP32[$262>>2]|0;
                $499 = $$pre122;$501 = $$pre123;$t$3 = $414;
               } else {
                label = 160;
               }
              }
              do {
               if ((label|0) == 160) {
                $408 = ((($tmp)) + 4|0);
                $409 = ((($4)) + 8|0);
                $410 = ((($4)) + 1|0);
                $411 = ((($4)) + 4|0);
                $412 = ((($tmp)) + 8|0);
                $413 = ((($tmp)) + 1|0);
                $first_arg$0$off0$ph = 1;$t$1$ph = $t$0;
                L82: while(1) {
                 $$pre117 = HEAP32[$262>>2]|0;
                 $$pre118 = HEAP32[$db>>2]|0;
                 $416 = $$pre118;$417 = $$pre117;$t$1 = $t$1$ph;
                 while(1) {
                  $415 = (($417) - ($416))|0;
                  $418 = (($415|0) / 24)&-1;
                  __THREW__ = 0;
                  $419 = (invoke_iiii(94,($t$1|0),($last|0),($db|0))|0);
                  $420 = __THREW__; __THREW__ = 0;
                  $421 = $420&1;
                  if ($421) {
                   label = 114;
                   break L82;
                  }
                  $422 = HEAP32[$262>>2]|0;
                  $423 = HEAP32[$db>>2]|0;
                  $424 = (($422) - ($423))|0;
                  $425 = (($424|0) / 24)&-1;
                  $426 = ($419|0)==($t$1|0);
                  if ($426) {
                   $$lcssa = $422;$$lcssa165 = $423;$t$1$lcssa159 = $t$1;
                   label = 192;
                   break L82;
                  }
                  $427 = ($425>>>0)>($418>>>0);
                  if ($427) {
                   $$lcssa162 = $418;$$lcssa163 = $419;$$lcssa168 = $425;
                   break;
                  } else {
                   $416 = $423;$417 = $422;$t$1 = $419;
                  }
                 }
                 $__i$0$i$i = 0;
                 while(1) {
                  $exitcond$i$i = ($__i$0$i$i|0)==(3);
                  if ($exitcond$i$i) {
                   $k$0 = $$lcssa162;
                   break;
                  }
                  $428 = (($tmp) + ($__i$0$i$i<<2)|0);
                  HEAP32[$428>>2] = 0;
                  $429 = (($__i$0$i$i) + 1)|0;
                  $__i$0$i$i = $429;
                 }
                 while(1) {
                  $430 = ($k$0>>>0)<($$lcssa168>>>0);
                  if (!($430)) {
                   $k2$0 = $$lcssa162;
                   break;
                  }
                  $431 = HEAP8[$tmp>>0]|0;
                  $432 = $431 & 1;
                  $433 = ($432<<24>>24)==(0);
                  $434 = HEAP32[$408>>2]|0;
                  $435 = $431&255;
                  $436 = $435 >>> 1;
                  $437 = $433 ? $436 : $434;
                  $438 = ($437|0)==(0);
                  if (!($438)) {
                   __THREW__ = 0;
                   (invoke_iii(93,($tmp|0),(5693|0))|0);
                   $439 = __THREW__; __THREW__ = 0;
                   $440 = $439&1;
                   if ($440) {
                    label = 171;
                    break L82;
                   }
                  }
                  $445 = HEAP32[$db>>2]|0;
                  $446 = (($445) + (($k$0*24)|0)|0);
                  __THREW__ = 0;
                  invoke_vii(96,($4|0),($446|0));
                  $447 = __THREW__; __THREW__ = 0;
                  $448 = $447&1;
                  if ($448) {
                   label = 171;
                   break L82;
                  }
                  $449 = HEAP8[$4>>0]|0;
                  $450 = $449 & 1;
                  $451 = ($450<<24>>24)==(0);
                  $452 = HEAP32[$409>>2]|0;
                  $453 = $451 ? $410 : $452;
                  $454 = HEAP32[$411>>2]|0;
                  $455 = $449&255;
                  $456 = $455 >>> 1;
                  $457 = $451 ? $456 : $454;
                  __THREW__ = 0;
                  (invoke_iiii(91,($tmp|0),($453|0),($457|0))|0);
                  $458 = __THREW__; __THREW__ = 0;
                  $459 = $458&1;
                  if ($459) {
                   label = 177;
                   break L82;
                  }
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
                  $460 = (($k$0) + 1)|0;
                  $k$0 = $460;
                 }
                 while(1) {
                  $463 = ($k2$0>>>0)<($$lcssa168>>>0);
                  if (!($463)) {
                   break;
                  }
                  $472 = HEAP32[$262>>2]|0;
                  $473 = ((($472)) + -24|0);
                  $474 = $472;
                  while(1) {
                   $475 = ($474|0)==($473|0);
                   if ($475) {
                    break;
                   }
                   $476 = ((($474)) + -24|0);
                   HEAP32[$262>>2] = $476;
                   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($476);
                   $$pre$i = HEAP32[$262>>2]|0;
                   $474 = $$pre$i;
                  }
                  $477 = (($k2$0) + 1)|0;
                  $k2$0 = $477;
                 }
                 $464 = HEAP8[$tmp>>0]|0;
                 $465 = $464 & 1;
                 $466 = ($465<<24>>24)==(0);
                 $467 = HEAP32[$408>>2]|0;
                 $468 = $464&255;
                 $469 = $468 >>> 1;
                 $470 = $466 ? $469 : $467;
                 $471 = ($470|0)==(0);
                 if ($471) {
                  $first_arg$3$off0$ph = $first_arg$0$off0$ph;
                 } else {
                  $478 = HEAP32[$db>>2]|0;
                  $479 = HEAP32[$262>>2]|0;
                  $480 = ($478|0)==($479|0);
                  if ($480) {
                   label = 205;
                   break;
                  }
                  if ($first_arg$0$off0$ph) {
                   $485 = $479;$487 = $464;$493 = $467;
                  } else {
                   $481 = ((($479)) + -24|0);
                   __THREW__ = 0;
                   (invoke_iii(93,($481|0),(5693|0))|0);
                   $482 = __THREW__; __THREW__ = 0;
                   $483 = $482&1;
                   if ($483) {
                    label = 172;
                    break;
                   }
                   $$pre119 = HEAP32[$262>>2]|0;
                   $$pre120 = HEAP8[$tmp>>0]|0;
                   $$pre121 = HEAP32[$408>>2]|0;
                   $485 = $$pre119;$487 = $$pre120;$493 = $$pre121;
                  }
                  $484 = ((($485)) + -24|0);
                  $486 = $487 & 1;
                  $488 = ($486<<24>>24)==(0);
                  $489 = HEAP32[$412>>2]|0;
                  $490 = $488 ? $413 : $489;
                  $491 = $487&255;
                  $492 = $491 >>> 1;
                  $494 = $488 ? $492 : $493;
                  __THREW__ = 0;
                  (invoke_iiii(91,($484|0),($490|0),($494|0))|0);
                  $495 = __THREW__; __THREW__ = 0;
                  $496 = $495&1;
                  if ($496) {
                   label = 172;
                   break;
                  } else {
                   $first_arg$3$off0$ph = 0;
                  }
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
                 $first_arg$0$off0$ph = $first_arg$3$off0$ph;$t$1$ph = $$lcssa163;
                }
                if ((label|0) == 114) {
                 $275 = ___cxa_find_matching_catch_2()|0;
                 $276 = tempRet0;
                 $lpad$phi94$index = $275;$lpad$phi94$index7 = $276;
                 label = 116;
                 break L74;
                }
                else if ((label|0) == 171) {
                 $441 = ___cxa_find_matching_catch_2()|0;
                 $442 = tempRet0;
                 $lpad$phi$index = $441;$lpad$phi$index12 = $442;
                 label = 173;
                }
                else if ((label|0) == 172) {
                 $443 = ___cxa_find_matching_catch_2()|0;
                 $444 = tempRet0;
                 $lpad$phi$index = $443;$lpad$phi$index12 = $444;
                 label = 173;
                }
                else if ((label|0) == 177) {
                 $461 = ___cxa_find_matching_catch_2()|0;
                 $462 = tempRet0;
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
                 $$011 = $461;$$021 = $462;
                }
                else if ((label|0) == 192) {
                 $497 = $$lcssa;
                 $498 = $$lcssa165;
                 $499 = $498;$501 = $497;$t$3 = $t$1$lcssa159;
                 break;
                }
                else if ((label|0) == 205) {
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
                 $$15 = $first;$$418 = 0;
                 break L16;
                }
                if ((label|0) == 173) {
                 $$011 = $lpad$phi$index;$$021 = $lpad$phi$index12;
                }
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
                $$112 = $$011;$$122 = $$021;
                break L74;
               }
              } while(0);
              $500 = ($499|0)==($501|0);
              if ($500) {
               $$15 = $first;$$418 = 0;
               break L16;
              }
              $502 = ((($501)) + -24|0);
              __THREW__ = 0;
              invoke_vii(98,($502|0),41);
              $503 = __THREW__; __THREW__ = 0;
              $504 = $503&1;
              if ($504) {
               label = 115;
              } else {
               $505 = $252 & 1;
               $506 = ($505|0)==(0);
               if (!($506)) {
                $507 = HEAP32[$262>>2]|0;
                $508 = ((($507)) + -24|0);
                __THREW__ = 0;
                (invoke_iii(93,($508|0),(4709|0))|0);
                $509 = __THREW__; __THREW__ = 0;
                $510 = $509&1;
                if ($510) {
                 label = 115;
                 break;
                }
               }
               $511 = $252 & 2;
               $512 = ($511|0)==(0);
               if (!($512)) {
                $513 = HEAP32[$262>>2]|0;
                $514 = ((($513)) + -24|0);
                __THREW__ = 0;
                (invoke_iii(93,($514|0),(4716|0))|0);
                $515 = __THREW__; __THREW__ = 0;
                $516 = $515&1;
                if ($516) {
                 label = 115;
                 break;
                }
               }
               $517 = $252 & 4;
               $518 = ($517|0)==(0);
               if (!($518)) {
                $519 = HEAP32[$262>>2]|0;
                $520 = ((($519)) + -24|0);
                __THREW__ = 0;
                (invoke_iii(93,($520|0),(4726|0))|0);
                $521 = __THREW__; __THREW__ = 0;
                $522 = $521&1;
                if ($522) {
                 label = 115;
                 break;
                }
               }
               switch ($254|0) {
               case 1:  {
                $523 = HEAP32[$262>>2]|0;
                $524 = ((($523)) + -24|0);
                __THREW__ = 0;
                (invoke_iii(93,($524|0),(6300|0))|0);
                $525 = __THREW__; __THREW__ = 0;
                $526 = $525&1;
                if ($526) {
                 label = 115;
                 break L74;
                }
                break;
               }
               case 2:  {
                $527 = HEAP32[$262>>2]|0;
                $528 = ((($527)) + -24|0);
                __THREW__ = 0;
                (invoke_iii(93,($528|0),(6303|0))|0);
                $529 = __THREW__; __THREW__ = 0;
                $530 = $529&1;
                if ($530) {
                 label = 115;
                 break L74;
                }
                break;
               }
               default: {
               }
               }
               $531 = HEAP32[$262>>2]|0;
               $532 = ((($531)) + -24|0);
               $533 = HEAP8[$ret2>>0]|0;
               $534 = $533 & 1;
               $535 = ($534<<24>>24)==(0);
               $536 = ((($ret2)) + 8|0);
               $537 = HEAP32[$536>>2]|0;
               $538 = ((($ret2)) + 1|0);
               $539 = $535 ? $538 : $537;
               $540 = ((($ret2)) + 4|0);
               $541 = HEAP32[$540>>2]|0;
               $542 = $533&255;
               $543 = $542 >>> 1;
               $544 = $535 ? $543 : $541;
               __THREW__ = 0;
               (invoke_iiii(91,($532|0),($539|0),($544|0))|0);
               $545 = __THREW__; __THREW__ = 0;
               $546 = $545&1;
               if ($546) {
                label = 115;
               } else {
                $$15 = $t$3;$$418 = 1;
                break L16;
               }
              }
             }
            }
           } while(0);
           if ((label|0) == 115) {
            $277 = ___cxa_find_matching_catch_2()|0;
            $278 = tempRet0;
            $lpad$phi94$index = $277;$lpad$phi94$index7 = $278;
            label = 116;
           }
           if ((label|0) == 116) {
            $$112 = $lpad$phi94$index;$$122 = $lpad$phi94$index7;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret2);
           HEAP8[$9>>0] = $258;
           $$213 = $$112;$$223 = $$122;
           break L6;
          }
         }
        } while(0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret2);
        HEAP8[$9>>0] = $258;
        if ($$418) {
         $$59$ph = $$15;
         label = 208;
        } else {
         HEAP8[$9>>0] = $10;
         HEAP32[$6>>2] = $7;
         $$11 = $first;
         break L1;
        }
       }
      }
     }
    }
    }
   } while(0);
   if ((label|0) == 100) {
    $246 = ___cxa_find_matching_catch_2()|0;
    $247 = tempRet0;
    $eh$lpad$body$index2Z2D = $247;$eh$lpad$body$indexZ2D = $246;
    label = 101;
   }
   else if ((label|0) == 208) {
    HEAP8[$9>>0] = $10;
    HEAP32[$6>>2] = $7;
    $$11 = $$59$ph;
    break;
   }
   if ((label|0) == 101) {
    $$213 = $eh$lpad$body$indexZ2D;$$223 = $eh$lpad$body$index2Z2D;
   }
   HEAP8[$9>>0] = $10;
   HEAP32[$6>>2] = $7;
   ___resumeException($$213|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$11|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$ = 0, $$$$i$i$i = 0, $$$$i$i$i$i = 0, $$$$i$i$i$i181 = 0, $$$$i$i$i$i212 = 0, $$$$i$i$i119 = 0, $$$$i$i$i137 = 0, $$$$i$i$i34$i = 0, $$$$i$i$i43$i = 0, $$$i$i$i = 0, $$$i$i$i$i = 0, $$$i$i$i$i180 = 0, $$$i$i$i$i211 = 0, $$$i$i$i118 = 0, $$$i$i$i136 = 0, $$$i$i$i33$i = 0, $$$i$i$i42$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i100 = 0;
 var $$0$i$i$i106 = 0, $$0$i$i$i114 = 0, $$0$i$i$i124 = 0, $$0$i$i$i132 = 0, $$0$i$i$i142 = 0, $$0$i$i$i150 = 0, $$0$i$i$i155 = 0, $$0$i$i$i167 = 0, $$0$i$i$i172 = 0, $$0$i$i$i200 = 0, $$0$i$i$i214 = 0, $$0$i$i$i36 = 0, $$0$i$i$i41 = 0, $$0$i$i$i46 = 0, $$0$i$i$i48 = 0, $$0$i$i$i50 = 0, $$0$i$i$i57 = 0, $$0$i$i$i62 = 0, $$0$i$i$i70 = 0, $$0$i$i$i75 = 0;
 var $$0$i$i$i80 = 0, $$0$i$i$i85 = 0, $$0$i$i$i90 = 0, $$0$i$i$i95 = 0, $$01$i$i = 0, $$010$i = 0, $$011 = 0, $$011$i = 0, $$011$i221 = 0, $$014$i = 0, $$02$i$i = 0, $$021$i = 0, $$022 = 0, $$03$i$i = 0, $$04$i = 0, $$06$i$i = 0, $$1$i = 0, $$1021 = 0, $$1032 = 0, $$112$i = 0;
 var $$115$i255 = 0, $$12$i = 0, $$122$i = 0, $$13 = 0, $$15$i = 0, $$2$i = 0, $$213 = 0, $$216$i258 = 0, $$223$i = 0, $$224 = 0, $$23$i = 0, $$25$i$i = 0, $$3$i$i = 0, $$313$i = 0, $$314$i = 0, $$317$i259 = 0, $$324$i = 0, $$35$i$i = 0, $$36$i$i = 0, $$37$i = 0;
 var $$39$i$i = 0, $$4$i = 0, $$4$i$i = 0, $$415 = 0, $$415$i = 0, $$418$i286 = 0, $$425$i = 0, $$426 = 0, $$45$i = 0, $$48$i = 0, $$5 = 0, $$5$i = 0, $$516 = 0, $$516$i = 0, $$519$i = 0, $$526$i = 0, $$527 = 0, $$56$i = 0, $$59$i = 0, $$6$i = 0;
 var $$610$i = 0, $$617 = 0, $$617$i = 0, $$620$i = 0, $$627$i = 0, $$628 = 0, $$67$i = 0, $$7$i247 = 0, $$718 = 0, $$729 = 0, $$812$i$ph = 0, $$819 = 0, $$830 = 0, $$9$i290 = 0, $$920 = 0, $$931 = 0, $$in = 0, $$lcssa = 0, $$lcssa648 = 0, $$lcssa652 = 0;
 var $$lcssa654 = 0, $$lcssa657 = 0, $$lcssa659 = 0, $$lcssa661 = 0, $$lcssa664 = 0, $$lcssa666 = 0, $$lcssa668 = 0, $$lcssa671 = 0, $$lcssa673 = 0, $$lcssa675 = 0, $$lcssa678 = 0, $$lcssa680 = 0, $$lcssa682 = 0, $$lcssa685 = 0, $$lcssa687 = 0, $$off = 0, $$off344 = 0, $$ph467 = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i$i$i$i = 0, $$pre$i$i$i$i226 = 0, $$pre$i$i$i30$i = 0, $$pre$i$i$i57$i = 0, $$pre$i$i$i61$i = 0, $$pre$i$i$i80$i = 0, $$pre$i$i202 = 0, $$pre$i$i223 = 0, $$pre$i$i283 = 0, $$pre$i162 = 0, $$pre$i176 = 0, $$pre$i18$i = 0, $$pre$i184 = 0, $$pre$i55 = 0, $$pre462 = 0, $$pre463 = 0, $$pre464 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0;
 var $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
 var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0;
 var $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0;
 var $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
 var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0;
 var $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0;
 var $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0;
 var $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0;
 var $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0;
 var $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0;
 var $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0;
 var $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0;
 var $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0;
 var $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0;
 var $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0;
 var $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0;
 var $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0;
 var $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0;
 var $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0;
 var $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0;
 var $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0;
 var $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0;
 var $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0;
 var $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0;
 var $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0;
 var $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0;
 var $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0;
 var $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0;
 var $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0;
 var $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0;
 var $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0;
 var $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0;
 var $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0;
 var $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0;
 var $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0;
 var $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0;
 var $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0;
 var $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0;
 var $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0;
 var $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0;
 var $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0;
 var $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0;
 var $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0;
 var $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0;
 var $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0;
 var $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0;
 var $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0;
 var $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0;
 var $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0;
 var $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0;
 var $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0;
 var $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0;
 var $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0;
 var $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0;
 var $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0;
 var $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0;
 var $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0;
 var $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0;
 var $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0;
 var $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0;
 var $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0;
 var $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0;
 var $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0;
 var $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0;
 var $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0;
 var $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0;
 var $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0;
 var $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0;
 var $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0;
 var $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0;
 var $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0;
 var $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0;
 var $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0;
 var $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0;
 var $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0;
 var $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0;
 var $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0;
 var $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0;
 var $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0;
 var $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0;
 var $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0;
 var $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0;
 var $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0;
 var $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0;
 var $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i$i = 0, $__i$0$i$i$i$i$i241 = 0, $__i$0$i$i$i$i$i280 = 0, $__i$0$i$i$i$i216 = 0, $__i$0$i$i$i$i250 = 0, $__i$0$i$i$i$i45$i = 0, $__i$0$i$i$i$i72$i = 0, $__i$0$i$i$i$i76$i = 0, $__i$0$i$i$i$i95$i = 0;
 var $__i$0$i$i$i189 = 0, $__i$0$i$i$i19$i = 0, $__i$0$i$i$i193 = 0, $__i$0$i$i$i196 = 0, $__i$0$i$i$i22$i = 0, $__i$0$i$i$i26$i = 0, $__i$0$i$i$i262 = 0, $__i$0$i$i$i34$i = 0, $__i$0$i$i$i36$i = 0, $__i$0$i$i$i38$i = 0, $__i$0$i$i$i42$i = 0, $__i$0$i$i$i45$i = 0, $__i$0$i$i$i47$i = 0, $__i$0$i$i$i48$i = 0, $__i$0$i$i$i49$i = 0, $__i$0$i$i$i52$i = 0, $__i$0$i$i$i53$i = 0, $__i$0$i$i$i56$i = 0, $__p$0$i$i$i = 0, $__p$0$ph$i$i$i = 0;
 var $__v$i$i = 0, $__v$i$i$i = 0, $__v$i$i104 = 0, $__v$i$i113 = 0, $__v$i$i122 = 0, $__v$i$i131 = 0, $__v$i$i140 = 0, $__v$i$i149 = 0, $__v$i$i153 = 0, $__v$i$i166 = 0, $__v$i$i171 = 0, $__v$i$i199 = 0, $__v$i$i35 = 0, $__v$i$i40 = 0, $__v$i$i45 = 0, $__v$i$i47 = 0, $__v$i$i49 = 0, $__v$i$i56 = 0, $__v$i$i60 = 0, $__v$i$i69 = 0;
 var $__v$i$i74 = 0, $__v$i$i79 = 0, $__v$i$i84 = 0, $__v$i$i89 = 0, $__v$i$i94 = 0, $__v$i$i99 = 0, $args = 0, $class_type$i = 0, $cv = 0, $eh$lpad$body$i$i$index34Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$i$i109$index14Z2D = 0, $eh$lpad$body$i$i109$indexZ2D = 0, $eh$lpad$body$i$i127$index19Z2D = 0, $eh$lpad$body$i$i127$indexZ2D = 0, $eh$lpad$body$i$i145$index24Z2D = 0, $eh$lpad$body$i$i145$indexZ2D = 0, $eh$lpad$body$i$i158$index29Z2D = 0, $eh$lpad$body$i$i158$indexZ2D = 0, $eh$lpad$body$i$i65$index2Z2D = 0;
 var $eh$lpad$body$i$i65$indexZ2D = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i$i = 0, $exitcond$i$i$i$i$i242 = 0, $exitcond$i$i$i$i$i281 = 0, $exitcond$i$i$i$i217 = 0, $exitcond$i$i$i$i251 = 0, $exitcond$i$i$i$i46$i = 0, $exitcond$i$i$i$i73$i = 0, $exitcond$i$i$i$i77$i = 0, $exitcond$i$i$i$i96$i = 0, $exitcond$i$i$i190 = 0, $exitcond$i$i$i194 = 0, $exitcond$i$i$i197 = 0, $exitcond$i$i$i20$i = 0, $exitcond$i$i$i23$i = 0, $exitcond$i$i$i263 = 0, $exitcond$i$i$i27$i = 0, $exitcond$i$i$i35$i = 0;
 var $exitcond$i$i$i37$i = 0, $exitcond$i$i$i39$i = 0, $exitcond$i$i$i43$i = 0, $exitcond$i$i$i46$i = 0, $exitcond$i$i$i48$i = 0, $exitcond$i$i$i49$i = 0, $exitcond$i$i$i50$i = 0, $exitcond$i$i$i53$i = 0, $exitcond$i$i$i54$i = 0, $exitcond$i$i$i57$i = 0, $expr$i = 0, $func$i = 0, $k$0 = 0, $k$0$i = 0, $k11$0 = 0, $k15$0 = 0, $k2$0$i = 0, $k20$0 = 0, $k5$0 = 0, $k8$0 = 0;
 var $lpad$phi$index = 0, $lpad$phi$index8 = 0, $num2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i233 = 0, $or$cond$i$i$i$i$i$i272 = 0, $or$cond$i$i$i$i$i37$i = 0, $or$cond$i$i$i$i$i64$i = 0, $or$cond$i$i$i$i$i68$i = 0, $or$cond$i$i$i$i$i87$i = 0, $or$cond31$i = 0, $or$cond525 = 0, $or$cond526 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $phitmp$i$i$i = 0;
 var $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i228 = 0, $phitmp$i$i$i$i$i$i$i267 = 0, $phitmp$i$i$i$i$i$i32$i = 0, $phitmp$i$i$i$i$i$i59$i = 0, $phitmp$i$i$i$i$i$i63$i = 0, $phitmp$i$i$i$i$i$i82$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i231 = 0, $phitmp$i2$i$i$i$i$i$i270 = 0, $phitmp$i2$i$i$i$i$i35$i = 0, $phitmp$i2$i$i$i$i$i62$i = 0, $phitmp$i2$i$i$i$i$i66$i = 0, $phitmp$i2$i$i$i$i$i85$i = 0, $proto = 0, $ref_qual$0$i$ph = 0, $ref_qual$0$i$ph$lcssa643 = 0, $scevgep2$i$i$i = 0, $sig$i = 0, $t$0$i = 0;
 var $t$1$i = 0, $t$1$i$lcssa637 = 0, $t$1$i$ph = 0, $t13$2$i = 0, $template_args = 0, $type = 0, $type$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1600|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i$i = sp + 1572|0;
 $0 = sp + 1560|0;
 $1 = sp + 1548|0;
 $2 = sp + 1536|0;
 $3 = sp + 1512|0;
 $4 = sp + 1500|0;
 $5 = sp + 1488|0;
 $6 = sp + 1476|0;
 $num2$i = sp + 1464|0;
 $7 = sp + 1452|0;
 $8 = sp + 1440|0;
 $9 = sp + 1428|0;
 $10 = sp + 1416|0;
 $11 = sp + 1404|0;
 $12 = sp + 1392|0;
 $13 = sp + 1380|0;
 $14 = sp + 1368|0;
 $type$i = sp + 1344|0;
 $expr$i = sp + 1320|0;
 $15 = sp + 1304|0;
 $16 = sp + 1292|0;
 $17 = sp + 1280|0;
 $18 = sp + 1268|0;
 $19 = sp + 1256|0;
 $sig$i = sp + 1244|0;
 $20 = sp + 1232|0;
 $func$i = sp + 1208|0;
 $class_type$i = sp + 1184|0;
 $21 = sp + 1168|0;
 $22 = sp + 1156|0;
 $23 = sp + 1144|0;
 $24 = sp + 1132|0;
 $25 = sp + 1120|0;
 $26 = sp + 1108|0;
 $27 = sp + 1096|0;
 $28 = sp + 1084|0;
 $29 = sp + 1072|0;
 $__v$i$i199 = sp + 1052|0;
 $__v$i$i171 = sp + 1032|0;
 $__v$i$i166 = sp + 1012|0;
 $__v$i$i153 = sp + 992|0;
 $__v$i$i149 = sp + 972|0;
 $__v$i$i140 = sp + 952|0;
 $__v$i$i131 = sp + 932|0;
 $__v$i$i122 = sp + 912|0;
 $__v$i$i113 = sp + 892|0;
 $__v$i$i104 = sp + 872|0;
 $__v$i$i99 = sp + 852|0;
 $__v$i$i94 = sp + 832|0;
 $__v$i$i89 = sp + 812|0;
 $__v$i$i84 = sp + 792|0;
 $__v$i$i79 = sp + 772|0;
 $__v$i$i74 = sp + 752|0;
 $__v$i$i69 = sp + 732|0;
 $__v$i$i60 = sp + 712|0;
 $__v$i$i56 = sp + 692|0;
 $__v$i$i49 = sp + 672|0;
 $__v$i$i47 = sp + 652|0;
 $__v$i$i45 = sp + 632|0;
 $__v$i$i40 = sp + 612|0;
 $__v$i$i35 = sp + 592|0;
 $__v$i$i = sp + 572|0;
 $cv = sp + 568|0;
 $30 = sp + 552|0;
 $31 = sp + 544|0;
 $32 = sp + 528|0;
 $33 = sp + 520|0;
 $34 = sp + 504|0;
 $35 = sp + 496|0;
 $36 = sp + 480|0;
 $37 = sp + 472|0;
 $38 = sp + 456|0;
 $39 = sp + 452|0;
 $40 = sp + 440|0;
 $41 = sp + 428|0;
 $42 = sp + 416|0;
 $43 = sp + 404|0;
 $args = sp + 392|0;
 $44 = sp + 376|0;
 $45 = sp + 368|0;
 $type = sp + 356|0;
 $46 = sp + 344|0;
 $47 = sp + 320|0;
 $48 = sp + 308|0;
 $49 = sp + 296|0;
 $50 = sp + 284|0;
 $proto = sp + 272|0;
 $51 = sp + 248|0;
 $52 = sp + 236|0;
 $53 = sp + 224|0;
 $54 = sp + 212|0;
 $55 = sp + 200|0;
 $56 = sp + 176|0;
 $57 = sp + 164|0;
 $58 = sp + 152|0;
 $59 = sp + 136|0;
 $60 = sp + 128|0;
 $61 = sp + 112|0;
 $62 = sp + 108|0;
 $template_args = sp + 96|0;
 $63 = sp + 80|0;
 $64 = sp + 72|0;
 $65 = sp + 56|0;
 $66 = sp + 48|0;
 $67 = sp + 32|0;
 $68 = sp + 24|0;
 $69 = sp + 8|0;
 $70 = sp;
 $71 = ($first|0)==($last|0);
 L1: do {
  if ($71) {
   $$5 = $first;
  } else {
   $72 = HEAP8[$first>>0]|0;
   $73 = $72 << 24 >> 24;
   switch ($73|0) {
   case 75: case 86: case 114:  {
    HEAP32[$cv>>2] = 0;
    $74 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first,$last,$cv)|0);
    $75 = ($74|0)==($first|0);
    L5: do {
     if ($75) {
      $$13 = $first;
     } else {
      $76 = HEAP8[$74>>0]|0;
      $77 = ((($db)) + 4|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = HEAP32[$db>>2]|0;
      $80 = (($78) - ($79))|0;
      $81 = (($80|0) / 24)&-1;
      $82 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($74,$last,$db)|0);
      $83 = HEAP32[$77>>2]|0;
      $84 = HEAP32[$db>>2]|0;
      $85 = (($83) - ($84))|0;
      $86 = (($85|0) / 24)&-1;
      $87 = ($82|0)==($74|0);
      if ($87) {
       $$13 = $first;
      } else {
       $88 = ($76<<24>>24)==(70);
       $89 = ((($db)) + 20|0);
       $90 = HEAP32[$89>>2]|0;
       L8: do {
        if ($88) {
         $91 = ((($90)) + -16|0);
         $92 = $90;
         while(1) {
          $93 = ($92|0)==($91|0);
          if ($93) {
           $100 = $91;
           break L8;
          }
          $94 = ((($92)) + -16|0);
          HEAP32[$89>>2] = $94;
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($94);
          $$pre$i55 = HEAP32[$89>>2]|0;
          $92 = $$pre$i55;
         }
        } else {
         $100 = $90;
        }
       } while(0);
       $95 = ((($db)) + 16|0);
       $96 = ((($db)) + 12|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = ((($db)) + 24|0);
       $99 = HEAP32[$98>>2]|0;
       $101 = ($100>>>0)<($99>>>0);
       $102 = $99;
       if ($101) {
        HEAP32[$100>>2] = 0;
        $103 = ((($100)) + 4|0);
        HEAP32[$103>>2] = 0;
        $104 = ((($100)) + 8|0);
        HEAP32[$104>>2] = 0;
        $105 = ((($100)) + 12|0);
        HEAP32[$105>>2] = $97;
        $106 = HEAP32[$89>>2]|0;
        $107 = ((($106)) + 16|0);
        HEAP32[$89>>2] = $107;
       } else {
        $108 = $100;
        $109 = ((($db)) + 28|0);
        $110 = HEAP32[$95>>2]|0;
        $111 = (($108) - ($110))|0;
        $112 = $111 >> 4;
        $113 = (($112) + 1)|0;
        $114 = ($111|0)<(-16);
        if ($114) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($95);
         // unreachable;
        }
        $115 = (($102) - ($110))|0;
        $116 = $115 >> 4;
        $117 = ($116>>>0)<(1073741823);
        if ($117) {
         $118 = $115 >> 3;
         $119 = ($118>>>0)<($113>>>0);
         $120 = $119 ? $113 : $118;
         $$0$i$i$i57 = $120;
        } else {
         $$0$i$i$i57 = 2147483647;
        }
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i56,$$0$i$i$i57,$112,$109);
        $121 = ((($__v$i$i56)) + 8|0);
        $122 = HEAP32[$121>>2]|0;
        HEAP32[$122>>2] = 0;
        $123 = ((($122)) + 4|0);
        HEAP32[$123>>2] = 0;
        $124 = ((($122)) + 8|0);
        HEAP32[$124>>2] = 0;
        $125 = ((($122)) + 12|0);
        HEAP32[$125>>2] = $97;
        $126 = ((($122)) + 16|0);
        HEAP32[$121>>2] = $126;
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($95,$__v$i$i56);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i56);
       }
       $127 = HEAP32[$cv>>2]|0;
       $128 = $127 & 1;
       $129 = ($128|0)==(0);
       $130 = $127 & 2;
       $131 = ($130|0)==(0);
       $132 = $127 & 4;
       $133 = ($132|0)==(0);
       $134 = ((($__v$i$i60)) + 8|0);
       $k$0 = $81;
       while(1) {
        $135 = ($k$0>>>0)<($86>>>0);
        if (!($135)) {
         $$13 = $82;
         break L5;
        }
        if ($88) {
         $136 = HEAP32[$db>>2]|0;
         $137 = (((($136) + (($k$0*24)|0)|0)) + 12|0);
         $138 = HEAP8[$137>>0]|0;
         $139 = $138 & 1;
         $140 = ($139<<24>>24)==(0);
         if ($140) {
          $145 = $138&255;
          $146 = $145 >>> 1;
          $147 = ((($137)) + 1|0);
          $$in = $146;$150 = $147;
         } else {
          $141 = (((($136) + (($k$0*24)|0)|0)) + 16|0);
          $142 = HEAP32[$141>>2]|0;
          $143 = (((($136) + (($k$0*24)|0)|0)) + 20|0);
          $144 = HEAP32[$143>>2]|0;
          $$in = $142;$150 = $144;
         }
         $148 = (($$in) + -2)|0;
         $149 = (($150) + ($148)|0);
         $151 = HEAP8[$149>>0]|0;
         $152 = ($151<<24>>24)==(38);
         if ($152) {
          $153 = (($$in) + -3)|0;
          $p$0 = $153;
         } else {
          if ($140) {
           $158 = ((($137)) + 1|0);
           $159 = $138&255;
           $160 = $159 >>> 1;
           $162 = $158;$163 = $160;
          } else {
           $154 = (((($136) + (($k$0*24)|0)|0)) + 20|0);
           $155 = HEAP32[$154>>2]|0;
           $156 = (((($136) + (($k$0*24)|0)|0)) + 16|0);
           $157 = HEAP32[$156>>2]|0;
           $162 = $155;$163 = $157;
          }
          $161 = (($162) + ($163)|0);
          $164 = ((($161)) + -1|0);
          $165 = HEAP8[$164>>0]|0;
          $166 = ($165<<24>>24)==(38);
          $$ = $166 ? $148 : $$in;
          $p$0 = $$;
         }
         if ($129) {
          $p$1 = $p$0;
         } else {
          (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($137,$p$0,4709)|0);
          $167 = (($p$0) + 6)|0;
          $p$1 = $167;
         }
         if ($131) {
          $p$2 = $p$1;
         } else {
          $168 = HEAP32[$db>>2]|0;
          $169 = (((($168) + (($k$0*24)|0)|0)) + 12|0);
          (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($169,$p$1,4716)|0);
          $170 = (($p$1) + 9)|0;
          $p$2 = $170;
         }
         if (!($133)) {
          $171 = HEAP32[$db>>2]|0;
          $172 = (((($171) + (($k$0*24)|0)|0)) + 12|0);
          (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($172,$p$2,4726)|0);
         }
        } else {
         if (!($129)) {
          $173 = HEAP32[$db>>2]|0;
          $174 = (($173) + (($k$0*24)|0)|0);
          (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($174,4709)|0);
         }
         if (!($131)) {
          $175 = HEAP32[$db>>2]|0;
          $176 = (($175) + (($k$0*24)|0)|0);
          (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($176,4716)|0);
         }
         if (!($133)) {
          $177 = HEAP32[$db>>2]|0;
          $178 = (($177) + (($k$0*24)|0)|0);
          (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($178,4726)|0);
         }
        }
        $179 = HEAP32[$89>>2]|0;
        $180 = ((($179)) + -16|0);
        $181 = HEAP32[$db>>2]|0;
        $182 = (($181) + (($k$0*24)|0)|0);
        $183 = ((($179)) + -12|0);
        $184 = HEAP32[$183>>2]|0;
        $185 = ((($179)) + -8|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = ($184|0)==($186|0);
        $188 = $186;
        if ($187) {
         $197 = $184;
         $198 = ((($179)) + -4|0);
         $199 = HEAP32[$180>>2]|0;
         $200 = (($197) - ($199))|0;
         $201 = (($200|0) / 24)&-1;
         $202 = (($201) + 1)|0;
         $203 = ($200|0)<(-24);
         if ($203) {
          $$lcssa682 = $180;
          label = 45;
          break;
         }
         $204 = (($188) - ($199))|0;
         $205 = (($204|0) / 24)&-1;
         $206 = ($205>>>0)<(1073741823);
         if ($206) {
          $207 = $205 << 1;
          $208 = ($207>>>0)<($202>>>0);
          $209 = $208 ? $202 : $207;
          $$0$i$i$i62 = $209;
         } else {
          $$0$i$i$i62 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i60,$$0$i$i$i62,$201,$198);
         $210 = HEAP32[$134>>2]|0;
         __THREW__ = 0;
         invoke_vii(100,($210|0),($182|0));
         $211 = __THREW__; __THREW__ = 0;
         $212 = $211&1;
         if ($212) {
          label = 51;
          break;
         }
         $213 = ((($210)) + 12|0);
         $214 = (((($181) + (($k$0*24)|0)|0)) + 12|0);
         __THREW__ = 0;
         invoke_vii(100,($213|0),($214|0));
         $215 = __THREW__; __THREW__ = 0;
         $216 = $215&1;
         if ($216) {
          $$lcssa687 = $210;
          label = 50;
          break;
         }
         $221 = ((($210)) + 24|0);
         HEAP32[$134>>2] = $221;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($180,$__v$i$i60);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i60);
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($184,$182);
         $189 = ((($184)) + 12|0);
         $190 = (((($181) + (($k$0*24)|0)|0)) + 12|0);
         __THREW__ = 0;
         invoke_vii(100,($189|0),($190|0));
         $191 = __THREW__; __THREW__ = 0;
         $192 = $191&1;
         if ($192) {
          $$lcssa685 = $184;
          label = 42;
          break;
         }
         $195 = HEAP32[$183>>2]|0;
         $196 = ((($195)) + 24|0);
         HEAP32[$183>>2] = $196;
        }
        $222 = (($k$0) + 1)|0;
        $k$0 = $222;
       }
       if ((label|0) == 42) {
        $193 = ___cxa_find_matching_catch_2()|0;
        $194 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa685);
        ___resumeException($193|0);
        // unreachable;
       }
       else if ((label|0) == 45) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa682);
        // unreachable;
       }
       else if ((label|0) == 50) {
        $217 = ___cxa_find_matching_catch_2()|0;
        $218 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa687);
        $eh$lpad$body$i$i65$index2Z2D = $218;$eh$lpad$body$i$i65$indexZ2D = $217;
       }
       else if ((label|0) == 51) {
        $219 = ___cxa_find_matching_catch_2()|0;
        $220 = tempRet0;
        $eh$lpad$body$i$i65$index2Z2D = $220;$eh$lpad$body$i$i65$indexZ2D = $219;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i60);
       ___resumeException($eh$lpad$body$i$i65$indexZ2D|0);
       // unreachable;
      }
     }
    } while(0);
    $$5 = $$13;
    break L1;
    break;
   }
   default: {
   }
   }
   $223 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
   $224 = ($223|0)==($first|0);
   if ($224) {
    $225 = HEAP8[$first>>0]|0;
    $226 = $225 << 24 >> 24;
    L77: do {
     switch ($226|0) {
     case 65:  {
      $227 = ($225<<24>>24)==(65);
      L79: do {
       if ($227) {
        $228 = ((($first)) + 1|0);
        $229 = ($228|0)==($last|0);
        if ($229) {
         $$7$i247 = $first;
        } else {
         $230 = HEAP8[$228>>0]|0;
         $231 = ($230<<24>>24)==(95);
         if ($231) {
          $232 = ((($first)) + 2|0);
          $233 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($232,$last,$db)|0);
          $234 = ($233|0)==($232|0);
          if ($234) {
           $$7$i247 = $first;
           break;
          }
          $235 = HEAP32[$db>>2]|0;
          $236 = ((($db)) + 4|0);
          $237 = HEAP32[$236>>2]|0;
          $238 = ($235|0)==($237|0);
          if ($238) {
           $$7$i247 = $first;
           break;
          }
          $239 = ((($237)) + -12|0);
          $240 = HEAP8[$239>>0]|0;
          $241 = $240 & 1;
          $242 = ($241<<24>>24)==(0);
          $243 = ((($237)) + -8|0);
          $244 = HEAP32[$243>>2]|0;
          $245 = $240&255;
          $246 = $245 >>> 1;
          $247 = $242 ? $246 : $244;
          $248 = ((($237)) + -4|0);
          $249 = HEAP32[$248>>2]|0;
          $250 = ((($239)) + 1|0);
          $251 = $242 ? $250 : $249;
          $252 = ($247>>>0)<(2);
          $253 = $252 ? $247 : 2;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($10,$251,$253);
          $254 = HEAP8[$10>>0]|0;
          $255 = $254 & 1;
          $256 = ($255<<24>>24)==(0);
          $257 = ((($10)) + 4|0);
          $258 = HEAP32[$257>>2]|0;
          $259 = $254&255;
          $260 = $259 >>> 1;
          $261 = $256 ? $260 : $258;
          $262 = ((($10)) + 8|0);
          $263 = HEAP32[$262>>2]|0;
          $264 = ((($10)) + 1|0);
          $265 = $256 ? $264 : $263;
          $266 = ($261>>>0)>(2);
          $267 = $266 ? 2 : $261;
          $268 = (_memcmp($265,5050,$267)|0);
          $269 = ($268|0)==(0);
          $270 = ($261>>>0)<(2);
          $$$i$i$i$i211 = $266&1;
          $$$$i$i$i$i212 = $270 ? -1 : $$$i$i$i$i211;
          $271 = $269 ? $$$$i$i$i$i212 : $268;
          $272 = ($271|0)==(0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
          if ($272) {
           $273 = HEAP32[$236>>2]|0;
           $274 = ((($273)) + -12|0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($274);
          }
          $275 = HEAP32[$236>>2]|0;
          $276 = ((($275)) + -12|0);
          (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($276,0,5053)|0);
          $$7$i247 = $233;
          break;
         }
         $$off344 = (($230) + -49)<<24>>24;
         $277 = ($$off344&255)<(9);
         if ($277) {
          $278 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($228,$last)|0);
          $279 = ($278|0)==($last|0);
          if ($279) {
           $$7$i247 = $first;
           break;
          }
          $280 = HEAP8[$278>>0]|0;
          $281 = ($280<<24>>24)==(95);
          if (!($281)) {
           $$7$i247 = $first;
           break;
          }
          $282 = ((($278)) + 1|0);
          $283 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($282,$last,$db)|0);
          $284 = ($283|0)==($282|0);
          if ($284) {
           $$7$i247 = $first;
           break;
          }
          $285 = HEAP32[$db>>2]|0;
          $286 = ((($db)) + 4|0);
          $287 = HEAP32[$286>>2]|0;
          $288 = ($285|0)==($287|0);
          if ($288) {
           $$7$i247 = $first;
           break;
          }
          $289 = ((($287)) + -12|0);
          $290 = HEAP8[$289>>0]|0;
          $291 = $290 & 1;
          $292 = ($291<<24>>24)==(0);
          $293 = ((($287)) + -8|0);
          $294 = HEAP32[$293>>2]|0;
          $295 = $290&255;
          $296 = $295 >>> 1;
          $297 = $292 ? $296 : $294;
          $298 = ((($287)) + -4|0);
          $299 = HEAP32[$298>>2]|0;
          $300 = ((($289)) + 1|0);
          $301 = $292 ? $300 : $299;
          $302 = ($297>>>0)<(2);
          $303 = $302 ? $297 : 2;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($11,$301,$303);
          $304 = HEAP8[$11>>0]|0;
          $305 = $304 & 1;
          $306 = ($305<<24>>24)==(0);
          $307 = ((($11)) + 4|0);
          $308 = HEAP32[$307>>2]|0;
          $309 = $304&255;
          $310 = $309 >>> 1;
          $311 = $306 ? $310 : $308;
          $312 = ((($11)) + 8|0);
          $313 = HEAP32[$312>>2]|0;
          $314 = ((($11)) + 1|0);
          $315 = $306 ? $314 : $313;
          $316 = ($311>>>0)>(2);
          $317 = $316 ? 2 : $311;
          $318 = (_memcmp($315,5050,$317)|0);
          $319 = ($318|0)==(0);
          $320 = ($311>>>0)<(2);
          $$$i$i$i33$i = $316&1;
          $$$$i$i$i34$i = $320 ? -1 : $$$i$i$i33$i;
          $321 = $319 ? $$$$i$i$i34$i : $318;
          $322 = ($321|0)==(0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
          if ($322) {
           $323 = HEAP32[$286>>2]|0;
           $324 = ((($323)) + -12|0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($324);
          }
          $325 = HEAP32[$286>>2]|0;
          $326 = ((($325)) + -12|0);
          $327 = $228;
          $328 = $278;
          $329 = (($328) - ($327))|0;
          $330 = ($329>>>0)>(4294967279);
          if ($330) {
           __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($14);
           // unreachable;
          }
          $331 = ($329>>>0)<(11);
          if ($331) {
           $332 = $329 << 1;
           $333 = $332&255;
           HEAP8[$14>>0] = $333;
           $334 = ((($14)) + 1|0);
           $__p$0$ph$i$i$i = $334;
          } else {
           $335 = (($329) + 16)|0;
           $336 = $335 & -16;
           $337 = (_malloc($336)|0);
           $338 = ((($14)) + 8|0);
           HEAP32[$338>>2] = $337;
           $339 = $336 | 1;
           HEAP32[$14>>2] = $339;
           $340 = ((($14)) + 4|0);
           HEAP32[$340>>2] = $329;
           $__p$0$ph$i$i$i = $337;
          }
          $$0$i$i$i214 = $228;$__p$0$i$i$i = $__p$0$ph$i$i$i;
          while(1) {
           $341 = ($$0$i$i$i214|0)==($278|0);
           if ($341) {
            break;
           }
           $342 = HEAP8[$$0$i$i$i214>>0]|0;
           HEAP8[$__p$0$i$i$i>>0] = $342;
           $343 = ((($$0$i$i$i214)) + 1|0);
           $344 = ((($__p$0$i$i$i)) + 1|0);
           $$0$i$i$i214 = $343;$__p$0$i$i$i = $344;
          }
          $scevgep2$i$i$i = (($__p$0$ph$i$i$i) + ($329)|0);
          HEAP8[$scevgep2$i$i$i>>0] = 0;
          __THREW__ = 0;
          $345 = (invoke_iiii(92,($14|0),0,(5050|0))|0);
          $346 = __THREW__; __THREW__ = 0;
          $347 = $346&1;
          if ($347) {
           $369 = ___cxa_find_matching_catch_2()|0;
           $370 = tempRet0;
           $$112$i = $369;$$15$i = $370;
          } else {
           ;HEAP32[$13>>2]=HEAP32[$345>>2]|0;HEAP32[$13+4>>2]=HEAP32[$345+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$345+8>>2]|0;
           $__i$0$i$i$i$i216 = 0;
           while(1) {
            $exitcond$i$i$i$i217 = ($__i$0$i$i$i$i216|0)==(3);
            if ($exitcond$i$i$i$i217) {
             break;
            }
            $348 = (($345) + ($__i$0$i$i$i$i216<<2)|0);
            HEAP32[$348>>2] = 0;
            $349 = (($__i$0$i$i$i$i216) + 1)|0;
            $__i$0$i$i$i$i216 = $349;
           }
           __THREW__ = 0;
           $350 = (invoke_iii(93,($13|0),(5057|0))|0);
           $351 = __THREW__; __THREW__ = 0;
           $352 = $351&1;
           do {
            if ($352) {
             $371 = ___cxa_find_matching_catch_2()|0;
             $372 = tempRet0;
             $$011$i221 = $371;$$04$i = $372;
            } else {
             ;HEAP32[$12>>2]=HEAP32[$350>>2]|0;HEAP32[$12+4>>2]=HEAP32[$350+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$350+8>>2]|0;
             $__i$0$i$i$i36$i = 0;
             while(1) {
              $exitcond$i$i$i37$i = ($__i$0$i$i$i36$i|0)==(3);
              if ($exitcond$i$i$i37$i) {
               break;
              }
              $353 = (($350) + ($__i$0$i$i$i36$i<<2)|0);
              HEAP32[$353>>2] = 0;
              $354 = (($__i$0$i$i$i36$i) + 1)|0;
              $__i$0$i$i$i36$i = $354;
             }
             $355 = HEAP8[$12>>0]|0;
             $356 = $355 & 1;
             $357 = ($356<<24>>24)==(0);
             $358 = ((($12)) + 8|0);
             $359 = HEAP32[$358>>2]|0;
             $360 = ((($12)) + 1|0);
             $361 = $357 ? $360 : $359;
             $362 = ((($12)) + 4|0);
             $363 = HEAP32[$362>>2]|0;
             $364 = $355&255;
             $365 = $364 >>> 1;
             $366 = $357 ? $365 : $363;
             __THREW__ = 0;
             (invoke_iiiii(99,($326|0),0,($361|0),($366|0))|0);
             $367 = __THREW__; __THREW__ = 0;
             $368 = $367&1;
             if ($368) {
              $373 = ___cxa_find_matching_catch_2()|0;
              $374 = tempRet0;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
              $$011$i221 = $373;$$04$i = $374;
              break;
             } else {
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
              $$7$i247 = $283;
              break L79;
             }
            }
           } while(0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
           $$112$i = $$011$i221;$$15$i = $$04$i;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
          $$610$i = $$15$i;$$617$i = $$112$i;
         } else {
          $375 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($228,$last,$db)|0);
          $376 = ($375|0)==($228|0);
          $377 = ($375|0)==($last|0);
          $or$cond31$i = $376 | $377;
          if ($or$cond31$i) {
           $$7$i247 = $first;
           break;
          }
          $378 = HEAP8[$375>>0]|0;
          $379 = ($378<<24>>24)==(95);
          if (!($379)) {
           $$7$i247 = $first;
           break;
          }
          $380 = ((($375)) + 1|0);
          $381 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($380,$last,$db)|0);
          $382 = ($381|0)==($380|0);
          if ($382) {
           $$7$i247 = $first;
           break;
          }
          $383 = ((($db)) + 4|0);
          $384 = HEAP32[$383>>2]|0;
          $385 = HEAP32[$db>>2]|0;
          $386 = (($384) - ($385))|0;
          $387 = (($386|0) / 24)&-1;
          $388 = ($387>>>0)<(2);
          if ($388) {
           $$7$i247 = $first;
           break;
          }
          $389 = $384;
          $390 = ((($389)) + -24|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($type$i,$390);
          $391 = HEAP32[$383>>2]|0;
          $392 = ((($391)) + -24|0);
          $393 = $391;
          while(1) {
           $394 = ($393|0)==($392|0);
           if ($394) {
            break;
           }
           $395 = ((($393)) + -24|0);
           HEAP32[$383>>2] = $395;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($395);
           $$pre$i$i223 = HEAP32[$383>>2]|0;
           $393 = $$pre$i$i223;
          }
          $396 = ((($391)) + -48|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($expr$i,$396);
          $397 = HEAP32[$383>>2]|0;
          $398 = ((($397)) + -24|0);
          $399 = HEAP8[$398>>0]|0;
          $400 = $399 & 1;
          $401 = ($400<<24>>24)==(0);
          do {
           if ($401) {
            $402 = ((($398)) + 1|0);
            HEAP8[$402>>0] = 0;
            HEAP8[$398>>0] = 0;
           } else {
            $403 = ((($397)) + -16|0);
            $404 = HEAP32[$403>>2]|0;
            HEAP8[$404>>0] = 0;
            $405 = ((($397)) + -20|0);
            HEAP32[$405>>2] = 0;
            $$pre$i$i$i$i226 = HEAP8[$398>>0]|0;
            $406 = $$pre$i$i$i$i226 & 1;
            $407 = ($406<<24>>24)==(0);
            if ($407) {
             $412 = $$pre$i$i$i$i226;$421 = 10;
            } else {
             $408 = HEAP32[$398>>2]|0;
             $409 = $408 & -2;
             $phitmp$i$i$i$i$i$i$i228 = (($409) + -1)|0;
             $410 = $408&255;
             $412 = $410;$421 = $phitmp$i$i$i$i$i$i$i228;
            }
            $411 = $412 & 1;
            $413 = ($411<<24>>24)==(0);
            if ($413) {
             $414 = $412&255;
             $415 = $414 >>> 1;
             $416 = ($412&255)<(22);
             if ($416) {
              $2826 = 1;$419 = 10;$440 = $415;
             } else {
              $417 = (($415) + 16)|0;
              $418 = $417 & 240;
              $phitmp$i2$i$i$i$i$i$i231 = (($418) + -1)|0;
              $2826 = 1;$419 = $phitmp$i2$i$i$i$i$i$i231;$440 = $415;
             }
            } else {
             $2826 = 0;$419 = 10;$440 = 0;
            }
            $420 = ($419|0)==($421|0);
            if (!($420)) {
             $422 = ($419|0)==(10);
             if ($422) {
              $427 = ((($398)) + 1|0);
              $428 = HEAP32[$403>>2]|0;
              if ($2826) {
               $429 = $412&255;
               $430 = $429 >>> 1;
               $431 = (($430) + 1)|0;
               _memcpy(($427|0),($428|0),($431|0))|0;
               _free($428);
              } else {
               $436 = HEAP8[$428>>0]|0;
               HEAP8[$427>>0] = $436;
               _free($428);
              }
              $441 = $440 << 1;
              $442 = $441&255;
              HEAP8[$398>>0] = $442;
              break;
             }
             $423 = ($419>>>0)<=($421>>>0);
             $424 = (($419) + 1)|0;
             $425 = (_malloc($424)|0);
             $426 = ($425|0)==(0|0);
             $or$cond$i$i$i$i$i$i233 = $423 & $426;
             if ($or$cond$i$i$i$i$i$i233) {
              break;
             }
             if ($2826) {
              $432 = ((($398)) + 1|0);
              $433 = $412&255;
              $434 = $433 >>> 1;
              $435 = (($434) + 1)|0;
              _memcpy(($425|0),($432|0),($435|0))|0;
             } else {
              $437 = HEAP32[$403>>2]|0;
              $438 = HEAP8[$437>>0]|0;
              HEAP8[$425>>0] = $438;
              _free($437);
             }
             $439 = $424 | 1;
             HEAP32[$398>>2] = $439;
             HEAP32[$405>>2] = $440;
             HEAP32[$403>>2] = $425;
            }
           }
          } while(0);
          ;HEAP32[$398>>2]=HEAP32[$type$i>>2]|0;HEAP32[$398+4>>2]=HEAP32[$type$i+4>>2]|0;HEAP32[$398+8>>2]=HEAP32[$type$i+8>>2]|0;
          $__i$0$i$i$i$i$i241 = 0;
          while(1) {
           $exitcond$i$i$i$i$i242 = ($__i$0$i$i$i$i$i241|0)==(3);
           if ($exitcond$i$i$i$i$i242) {
            break;
           }
           $443 = (($type$i) + ($__i$0$i$i$i$i$i241<<2)|0);
           HEAP32[$443>>2] = 0;
           $444 = (($__i$0$i$i$i$i$i241) + 1)|0;
           $__i$0$i$i$i$i$i241 = $444;
          }
          $445 = ((($type$i)) + 12|0);
          $446 = HEAP8[$445>>0]|0;
          $447 = $446 & 1;
          $448 = ($447<<24>>24)==(0);
          $449 = ((($type$i)) + 16|0);
          $450 = HEAP32[$449>>2]|0;
          $451 = $446&255;
          $452 = $451 >>> 1;
          $453 = $448 ? $452 : $450;
          $454 = ((($type$i)) + 20|0);
          $455 = HEAP32[$454>>2]|0;
          $456 = ((($445)) + 1|0);
          $457 = $448 ? $456 : $455;
          $458 = ($453>>>0)<(2);
          $459 = $458 ? $453 : 2;
          __THREW__ = 0;
          invoke_viii(101,($15|0),($457|0),($459|0));
          $460 = __THREW__; __THREW__ = 0;
          $461 = $460&1;
          if ($461) {
           label = 127;
          } else {
           $462 = HEAP8[$15>>0]|0;
           $463 = $462 & 1;
           $464 = ($463<<24>>24)==(0);
           $465 = ((($15)) + 4|0);
           $466 = HEAP32[$465>>2]|0;
           $467 = $462&255;
           $468 = $467 >>> 1;
           $469 = $464 ? $468 : $466;
           $470 = ((($15)) + 8|0);
           $471 = HEAP32[$470>>2]|0;
           $472 = ((($15)) + 1|0);
           $473 = $464 ? $472 : $471;
           $474 = ($469>>>0)>(2);
           $475 = $474 ? 2 : $469;
           $476 = (_memcmp($473,5050,$475)|0);
           $477 = ($476|0)==(0);
           $478 = ($469>>>0)<(2);
           $$$i$i$i42$i = $474&1;
           $$$$i$i$i43$i = $478 ? -1 : $$$i$i$i42$i;
           $479 = $477 ? $$$$i$i$i43$i : $476;
           $480 = ($479|0)==(0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
           if ($480) {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($445);
           }
           $483 = HEAP32[$383>>2]|0;
           $484 = ((($483)) + -12|0);
           __THREW__ = 0;
           invoke_vii(96,($19|0),($expr$i|0));
           $485 = __THREW__; __THREW__ = 0;
           $486 = $485&1;
           if ($486) {
            label = 127;
           } else {
            __THREW__ = 0;
            $487 = (invoke_iiii(92,($19|0),0,(5050|0))|0);
            $488 = __THREW__; __THREW__ = 0;
            $489 = $488&1;
            if ($489) {
             $557 = ___cxa_find_matching_catch_2()|0;
             $558 = tempRet0;
             $$415$i = $557;$$48$i = $558;
            } else {
             ;HEAP32[$18>>2]=HEAP32[$487>>2]|0;HEAP32[$18+4>>2]=HEAP32[$487+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$487+8>>2]|0;
             $__i$0$i$i$i45$i = 0;
             while(1) {
              $exitcond$i$i$i46$i = ($__i$0$i$i$i45$i|0)==(3);
              if ($exitcond$i$i$i46$i) {
               break;
              }
              $490 = (($487) + ($__i$0$i$i$i45$i<<2)|0);
              HEAP32[$490>>2] = 0;
              $491 = (($__i$0$i$i$i45$i) + 1)|0;
              $__i$0$i$i$i45$i = $491;
             }
             __THREW__ = 0;
             $492 = (invoke_iii(93,($18|0),(5057|0))|0);
             $493 = __THREW__; __THREW__ = 0;
             $494 = $493&1;
             do {
              if ($494) {
               $559 = ___cxa_find_matching_catch_2()|0;
               $560 = tempRet0;
               $$314$i = $559;$$37$i = $560;
              } else {
               ;HEAP32[$17>>2]=HEAP32[$492>>2]|0;HEAP32[$17+4>>2]=HEAP32[$492+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$492+8>>2]|0;
               $__i$0$i$i$i49$i = 0;
               while(1) {
                $exitcond$i$i$i50$i = ($__i$0$i$i$i49$i|0)==(3);
                if ($exitcond$i$i$i50$i) {
                 break;
                }
                $495 = (($492) + ($__i$0$i$i$i49$i<<2)|0);
                HEAP32[$495>>2] = 0;
                $496 = (($__i$0$i$i$i49$i) + 1)|0;
                $__i$0$i$i$i49$i = $496;
               }
               $497 = HEAP8[$445>>0]|0;
               $498 = $497 & 1;
               $499 = ($498<<24>>24)==(0);
               $500 = HEAP32[$454>>2]|0;
               $501 = $499 ? $456 : $500;
               $502 = HEAP32[$449>>2]|0;
               $503 = $497&255;
               $504 = $503 >>> 1;
               $505 = $499 ? $504 : $502;
               __THREW__ = 0;
               $506 = (invoke_iiii(91,($17|0),($501|0),($505|0))|0);
               $507 = __THREW__; __THREW__ = 0;
               $508 = $507&1;
               if ($508) {
                $561 = ___cxa_find_matching_catch_2()|0;
                $562 = tempRet0;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
                $$314$i = $561;$$37$i = $562;
                break;
               }
               ;HEAP32[$16>>2]=HEAP32[$506>>2]|0;HEAP32[$16+4>>2]=HEAP32[$506+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$506+8>>2]|0;
               $__i$0$i$i$i53$i = 0;
               while(1) {
                $exitcond$i$i$i54$i = ($__i$0$i$i$i53$i|0)==(3);
                if ($exitcond$i$i$i54$i) {
                 break;
                }
                $509 = (($506) + ($__i$0$i$i$i53$i<<2)|0);
                HEAP32[$509>>2] = 0;
                $510 = (($__i$0$i$i$i53$i) + 1)|0;
                $__i$0$i$i$i53$i = $510;
               }
               $511 = HEAP8[$484>>0]|0;
               $512 = $511 & 1;
               $513 = ($512<<24>>24)==(0);
               do {
                if ($513) {
                 $514 = ((($484)) + 1|0);
                 HEAP8[$514>>0] = 0;
                 HEAP8[$484>>0] = 0;
                } else {
                 $515 = ((($483)) + -4|0);
                 $516 = HEAP32[$515>>2]|0;
                 HEAP8[$516>>0] = 0;
                 $517 = ((($483)) + -8|0);
                 HEAP32[$517>>2] = 0;
                 $$pre$i$i$i57$i = HEAP8[$484>>0]|0;
                 $518 = $$pre$i$i$i57$i & 1;
                 $519 = ($518<<24>>24)==(0);
                 if ($519) {
                  $524 = $$pre$i$i$i57$i;$533 = 10;
                 } else {
                  $520 = HEAP32[$484>>2]|0;
                  $521 = $520 & -2;
                  $phitmp$i$i$i$i$i$i59$i = (($521) + -1)|0;
                  $522 = $520&255;
                  $524 = $522;$533 = $phitmp$i$i$i$i$i$i59$i;
                 }
                 $523 = $524 & 1;
                 $525 = ($523<<24>>24)==(0);
                 do {
                  if ($525) {
                   $526 = $524&255;
                   $527 = $526 >>> 1;
                   $528 = ($524&255)<(22);
                   if ($528) {
                    $2827 = 1;$531 = 10;$552 = $527;
                    break;
                   }
                   $529 = (($527) + 16)|0;
                   $530 = $529 & 240;
                   $phitmp$i2$i$i$i$i$i62$i = (($530) + -1)|0;
                   $2827 = 1;$531 = $phitmp$i2$i$i$i$i$i62$i;$552 = $527;
                  } else {
                   $2827 = 0;$531 = 10;$552 = 0;
                  }
                 } while(0);
                 $532 = ($531|0)==($533|0);
                 if ($532) {
                  break;
                 }
                 $534 = ($531|0)==(10);
                 if ($534) {
                  $539 = ((($484)) + 1|0);
                  $540 = HEAP32[$515>>2]|0;
                  if ($2827) {
                   $541 = $524&255;
                   $542 = $541 >>> 1;
                   $543 = (($542) + 1)|0;
                   _memcpy(($539|0),($540|0),($543|0))|0;
                   _free($540);
                  } else {
                   $548 = HEAP8[$540>>0]|0;
                   HEAP8[$539>>0] = $548;
                   _free($540);
                  }
                  $553 = $552 << 1;
                  $554 = $553&255;
                  HEAP8[$484>>0] = $554;
                  break;
                 }
                 $535 = ($531>>>0)<=($533>>>0);
                 $536 = (($531) + 1)|0;
                 $537 = (_malloc($536)|0);
                 $538 = ($537|0)==(0|0);
                 $or$cond$i$i$i$i$i64$i = $535 & $538;
                 if ($or$cond$i$i$i$i$i64$i) {
                  break;
                 }
                 if ($2827) {
                  $544 = ((($484)) + 1|0);
                  $545 = $524&255;
                  $546 = $545 >>> 1;
                  $547 = (($546) + 1)|0;
                  _memcpy(($537|0),($544|0),($547|0))|0;
                 } else {
                  $549 = HEAP32[$515>>2]|0;
                  $550 = HEAP8[$549>>0]|0;
                  HEAP8[$537>>0] = $550;
                  _free($549);
                 }
                 $551 = $536 | 1;
                 HEAP32[$484>>2] = $551;
                 HEAP32[$517>>2] = $552;
                 HEAP32[$515>>2] = $537;
                }
               } while(0);
               ;HEAP32[$484>>2]=HEAP32[$16>>2]|0;HEAP32[$484+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$484+8>>2]=HEAP32[$16+8>>2]|0;
               $__i$0$i$i$i$i72$i = 0;
               while(1) {
                $exitcond$i$i$i$i73$i = ($__i$0$i$i$i$i72$i|0)==(3);
                if ($exitcond$i$i$i$i73$i) {
                 break;
                }
                $555 = (($16) + ($__i$0$i$i$i$i72$i<<2)|0);
                HEAP32[$555>>2] = 0;
                $556 = (($__i$0$i$i$i$i72$i) + 1)|0;
                $__i$0$i$i$i$i72$i = $556;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($expr$i);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($type$i);
               $$7$i247 = $381;
               break L79;
              }
             } while(0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
             $$415$i = $$314$i;$$48$i = $$37$i;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
            $$516$i = $$415$i;$$59$i = $$48$i;
           }
          }
          if ((label|0) == 127) {
           $481 = ___cxa_find_matching_catch_2()|0;
           $482 = tempRet0;
           $$516$i = $481;$$59$i = $482;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($expr$i);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($type$i);
          $$610$i = $$59$i;$$617$i = $$516$i;
         }
         ___resumeException($$617$i|0);
         // unreachable;
        }
       } else {
        $$7$i247 = $first;
       }
      } while(0);
      $563 = ($$7$i247|0)==($first|0);
      if ($563) {
       $$5 = $first;
       break L1;
      }
      $564 = HEAP32[$db>>2]|0;
      $565 = ((($db)) + 4|0);
      $566 = HEAP32[$565>>2]|0;
      $567 = ($564|0)==($566|0);
      if ($567) {
       $$5 = $first;
       break L1;
      }
      $568 = ((($db)) + 16|0);
      $569 = ((($566)) + -24|0);
      $570 = ((($db)) + 12|0);
      $571 = HEAP32[$570>>2]|0;
      HEAP32[$31>>2] = $571;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($30,$569,$31);
      $572 = ((($db)) + 20|0);
      $573 = HEAP32[$572>>2]|0;
      $574 = ((($db)) + 24|0);
      $575 = HEAP32[$574>>2]|0;
      $576 = ($573>>>0)<($575>>>0);
      $577 = $575;
      if ($576) {
       $578 = ((($30)) + 12|0);
       $579 = ((($573)) + 4|0);
       $580 = HEAP32[$578>>2]|0;
       $581 = ((($573)) + 12|0);
       HEAP32[$581>>2] = $580;
       $582 = HEAP32[$30>>2]|0;
       HEAP32[$573>>2] = $582;
       $583 = ((($30)) + 4|0);
       $584 = HEAP32[$583>>2]|0;
       HEAP32[$579>>2] = $584;
       $585 = ((($30)) + 8|0);
       $586 = HEAP32[$585>>2]|0;
       $587 = ((($573)) + 8|0);
       HEAP32[$587>>2] = $586;
       HEAP32[$585>>2] = 0;
       HEAP32[$583>>2] = 0;
       HEAP32[$30>>2] = 0;
       $588 = HEAP32[$572>>2]|0;
       $589 = ((($588)) + 16|0);
       HEAP32[$572>>2] = $589;
      } else {
       $590 = $573;
       $591 = ((($db)) + 28|0);
       $592 = HEAP32[$568>>2]|0;
       $593 = (($590) - ($592))|0;
       $594 = $593 >> 4;
       $595 = (($594) + 1)|0;
       $596 = ($593|0)<(-16);
       if ($596) {
        __THREW__ = 0;
        invoke_vi(102,($568|0));
        $597 = __THREW__; __THREW__ = 0;
        $598 = ___cxa_find_matching_catch_2()|0;
        $599 = tempRet0;
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($30);
        $$1021 = $598;$$1032 = $599;
        break L77;
       }
       $600 = (($577) - ($592))|0;
       $601 = $600 >> 4;
       $602 = ($601>>>0)<(1073741823);
       if ($602) {
        $603 = $600 >> 3;
        $604 = ($603>>>0)<($595>>>0);
        $605 = $604 ? $595 : $603;
        $$0$i$i$i75 = $605;
       } else {
        $$0$i$i$i75 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i74,$$0$i$i$i75,$594,$591);
       $606 = ((($__v$i$i74)) + 8|0);
       $607 = HEAP32[$606>>2]|0;
       $608 = ((($30)) + 12|0);
       $609 = ((($607)) + 4|0);
       $610 = HEAP32[$608>>2]|0;
       $611 = ((($607)) + 12|0);
       HEAP32[$611>>2] = $610;
       $612 = HEAP32[$30>>2]|0;
       HEAP32[$607>>2] = $612;
       $613 = ((($30)) + 4|0);
       $614 = HEAP32[$613>>2]|0;
       HEAP32[$609>>2] = $614;
       $615 = ((($30)) + 8|0);
       $616 = HEAP32[$615>>2]|0;
       $617 = ((($607)) + 8|0);
       HEAP32[$617>>2] = $616;
       HEAP32[$615>>2] = 0;
       HEAP32[$613>>2] = 0;
       HEAP32[$30>>2] = 0;
       $618 = ((($607)) + 16|0);
       HEAP32[$606>>2] = $618;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($568,$__v$i$i74);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i74);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($30);
      $$5 = $$7$i247;
      break L1;
      break;
     }
     case 67:  {
      $619 = ((($first)) + 1|0);
      $620 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($619,$last,$db)|0);
      $621 = ($620|0)==($619|0);
      if ($621) {
       $$5 = $first;
       break L1;
      }
      $622 = HEAP32[$db>>2]|0;
      $623 = ((($db)) + 4|0);
      $624 = HEAP32[$623>>2]|0;
      $625 = ($622|0)==($624|0);
      if ($625) {
       $$5 = $first;
       break L1;
      }
      $626 = ((($624)) + -24|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($626,6291)|0);
      $627 = ((($db)) + 16|0);
      $628 = HEAP32[$623>>2]|0;
      $629 = ((($628)) + -24|0);
      $630 = ((($db)) + 12|0);
      $631 = HEAP32[$630>>2]|0;
      HEAP32[$33>>2] = $631;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($32,$629,$33);
      $632 = ((($db)) + 20|0);
      $633 = HEAP32[$632>>2]|0;
      $634 = ((($db)) + 24|0);
      $635 = HEAP32[$634>>2]|0;
      $636 = ($633>>>0)<($635>>>0);
      $637 = $635;
      if ($636) {
       $638 = ((($32)) + 12|0);
       $639 = ((($633)) + 4|0);
       $640 = HEAP32[$638>>2]|0;
       $641 = ((($633)) + 12|0);
       HEAP32[$641>>2] = $640;
       $642 = HEAP32[$32>>2]|0;
       HEAP32[$633>>2] = $642;
       $643 = ((($32)) + 4|0);
       $644 = HEAP32[$643>>2]|0;
       HEAP32[$639>>2] = $644;
       $645 = ((($32)) + 8|0);
       $646 = HEAP32[$645>>2]|0;
       $647 = ((($633)) + 8|0);
       HEAP32[$647>>2] = $646;
       HEAP32[$645>>2] = 0;
       HEAP32[$643>>2] = 0;
       HEAP32[$32>>2] = 0;
       $648 = HEAP32[$632>>2]|0;
       $649 = ((($648)) + 16|0);
       HEAP32[$632>>2] = $649;
      } else {
       $650 = $633;
       $651 = ((($db)) + 28|0);
       $652 = HEAP32[$627>>2]|0;
       $653 = (($650) - ($652))|0;
       $654 = $653 >> 4;
       $655 = (($654) + 1)|0;
       $656 = ($653|0)<(-16);
       if ($656) {
        __THREW__ = 0;
        invoke_vi(102,($627|0));
        $657 = __THREW__; __THREW__ = 0;
        $658 = ___cxa_find_matching_catch_2()|0;
        $659 = tempRet0;
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($32);
        $$1021 = $658;$$1032 = $659;
        break L77;
       }
       $660 = (($637) - ($652))|0;
       $661 = $660 >> 4;
       $662 = ($661>>>0)<(1073741823);
       if ($662) {
        $663 = $660 >> 3;
        $664 = ($663>>>0)<($655>>>0);
        $665 = $664 ? $655 : $663;
        $$0$i$i$i80 = $665;
       } else {
        $$0$i$i$i80 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i79,$$0$i$i$i80,$654,$651);
       $666 = ((($__v$i$i79)) + 8|0);
       $667 = HEAP32[$666>>2]|0;
       $668 = ((($32)) + 12|0);
       $669 = ((($667)) + 4|0);
       $670 = HEAP32[$668>>2]|0;
       $671 = ((($667)) + 12|0);
       HEAP32[$671>>2] = $670;
       $672 = HEAP32[$32>>2]|0;
       HEAP32[$667>>2] = $672;
       $673 = ((($32)) + 4|0);
       $674 = HEAP32[$673>>2]|0;
       HEAP32[$669>>2] = $674;
       $675 = ((($32)) + 8|0);
       $676 = HEAP32[$675>>2]|0;
       $677 = ((($667)) + 8|0);
       HEAP32[$677>>2] = $676;
       HEAP32[$675>>2] = 0;
       HEAP32[$673>>2] = 0;
       HEAP32[$32>>2] = 0;
       $678 = ((($667)) + 16|0);
       HEAP32[$666>>2] = $678;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($627,$__v$i$i79);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i79);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($32);
      $$5 = $620;
      break L1;
      break;
     }
     case 70:  {
      $679 = ($225<<24>>24)==(70);
      do {
       if ($679) {
        $680 = ((($first)) + 1|0);
        $681 = ($680|0)==($last|0);
        if (!($681)) {
         $682 = HEAP8[$680>>0]|0;
         $683 = ($682<<24>>24)==(89);
         if ($683) {
          $684 = ((($first)) + 2|0);
          $685 = ($684|0)==($last|0);
          if ($685) {
           break;
          } else {
           $t$0$i = $684;
          }
         } else {
          $t$0$i = $680;
         }
         $686 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$0$i,$last,$db)|0);
         $687 = ($686|0)==($t$0$i|0);
         if (!($687)) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($sig$i,5059,1);
          $688 = ((($db)) + 4|0);
          $689 = ((($sig$i)) + 4|0);
          $690 = ((($20)) + 8|0);
          $691 = ((($20)) + 1|0);
          $692 = ((($20)) + 4|0);
          $ref_qual$0$i$ph = 0;$t$1$i$ph = $686;
          L262: while(1) {
           $t$1$i = $t$1$i$ph;
           L264: while(1) {
            $693 = ($t$1$i|0)==($last|0);
            if ($693) {
             label = 198;
             break L262;
            }
            $705 = HEAP8[$t$1$i>>0]|0;
            switch ($705<<24>>24) {
            case 69:  {
             $ref_qual$0$i$ph$lcssa643 = $ref_qual$0$i$ph;$t$1$i$lcssa637 = $t$1$i;
             label = 206;
             break L262;
             break;
            }
            case 118:  {
             $709 = ((($t$1$i)) + 1|0);
             $t$1$i = $709;
             continue L264;
             break;
            }
            case 82:  {
             $710 = ((($t$1$i)) + 1|0);
             $711 = ($710|0)==($last|0);
             if (!($711)) {
              $712 = HEAP8[$710>>0]|0;
              $713 = ($712<<24>>24)==(69);
              if ($713) {
               $ref_qual$0$i$ph = 1;$t$1$i$ph = $710;
               continue L262;
              }
             }
             break;
            }
            case 79:  {
             $714 = ((($t$1$i)) + 1|0);
             $715 = ($714|0)==($last|0);
             if (!($715)) {
              $716 = HEAP8[$714>>0]|0;
              $717 = ($716<<24>>24)==(69);
              if ($717) {
               $ref_qual$0$i$ph = 2;$t$1$i$ph = $714;
               continue L262;
              }
             }
             break;
            }
            default: {
            }
            }
            $718 = HEAP32[$688>>2]|0;
            $719 = HEAP32[$db>>2]|0;
            $720 = (($718) - ($719))|0;
            $721 = (($720|0) / 24)&-1;
            __THREW__ = 0;
            $722 = (invoke_iiii(94,($t$1$i|0),($last|0),($db|0))|0);
            $723 = __THREW__; __THREW__ = 0;
            $724 = $723&1;
            if ($724) {
             label = 202;
             break L262;
            }
            $725 = HEAP32[$688>>2]|0;
            $726 = HEAP32[$db>>2]|0;
            $727 = (($725) - ($726))|0;
            $728 = (($727|0) / 24)&-1;
            $729 = ($722|0)==($t$1$i|0);
            $730 = ($722|0)==($last|0);
            $or$cond$i = $729 | $730;
            if ($or$cond$i) {
             label = 232;
             break L262;
            } else {
             $k$0$i = $721;
            }
            while(1) {
             $731 = ($k$0$i>>>0)<($728>>>0);
             if (!($731)) {
              $k2$0$i = $721;
              break;
             }
             $732 = HEAP8[$sig$i>>0]|0;
             $733 = $732 & 1;
             $734 = ($733<<24>>24)==(0);
             $735 = HEAP32[$689>>2]|0;
             $736 = $732&255;
             $737 = $736 >>> 1;
             $738 = $734 ? $737 : $735;
             $739 = ($738>>>0)>(1);
             if ($739) {
              __THREW__ = 0;
              (invoke_iii(93,($sig$i|0),(5693|0))|0);
              $740 = __THREW__; __THREW__ = 0;
              $741 = $740&1;
              if ($741) {
               label = 201;
               break L262;
              }
             }
             $742 = HEAP32[$db>>2]|0;
             $743 = (($742) + (($k$0$i*24)|0)|0);
             __THREW__ = 0;
             invoke_vii(96,($20|0),($743|0));
             $744 = __THREW__; __THREW__ = 0;
             $745 = $744&1;
             if ($745) {
              label = 201;
              break L262;
             }
             $746 = HEAP8[$20>>0]|0;
             $747 = $746 & 1;
             $748 = ($747<<24>>24)==(0);
             $749 = HEAP32[$690>>2]|0;
             $750 = $748 ? $691 : $749;
             $751 = HEAP32[$692>>2]|0;
             $752 = $746&255;
             $753 = $752 >>> 1;
             $754 = $748 ? $753 : $751;
             __THREW__ = 0;
             (invoke_iiii(91,($sig$i|0),($750|0),($754|0))|0);
             $755 = __THREW__; __THREW__ = 0;
             $756 = $755&1;
             if ($756) {
              label = 221;
              break L262;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
             $757 = (($k$0$i) + 1)|0;
             $k$0$i = $757;
            }
            while(1) {
             $760 = ($k2$0$i>>>0)<($728>>>0);
             if (!($760)) {
              $t$1$i = $722;
              continue L264;
             }
             $761 = HEAP32[$688>>2]|0;
             $762 = ((($761)) + -24|0);
             $763 = $761;
             while(1) {
              $764 = ($763|0)==($762|0);
              if ($764) {
               break;
              }
              $765 = ((($763)) + -24|0);
              HEAP32[$688>>2] = $765;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($765);
              $$pre$i18$i = HEAP32[$688>>2]|0;
              $763 = $$pre$i18$i;
             }
             $766 = (($k2$0$i) + 1)|0;
             $k2$0$i = $766;
            }
           }
          }
          L290: do {
           if ((label|0) == 198) {
            $694 = HEAP32[$688>>2]|0;
            $695 = ((($694)) + -24|0);
            $696 = $694;
            while(1) {
             $697 = ($696|0)==($695|0);
             if ($697) {
              label = 232;
              break L290;
             }
             $698 = ((($696)) + -24|0);
             HEAP32[$688>>2] = $698;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($698);
             $$pre$i$i202 = HEAP32[$688>>2]|0;
             $696 = $$pre$i$i202;
            }
           }
           else if ((label|0) == 201) {
            $699 = ___cxa_find_matching_catch_2()|0;
            $700 = tempRet0;
            $lpad$phi$index = $699;$lpad$phi$index8 = $700;
            label = 204;
           }
           else if ((label|0) == 202) {
            $701 = ___cxa_find_matching_catch_2()|0;
            $702 = tempRet0;
            $lpad$phi$index = $701;$lpad$phi$index8 = $702;
            label = 204;
           }
           else if ((label|0) == 206) {
            $706 = ((($t$1$i$lcssa637)) + 1|0);
            __THREW__ = 0;
            (invoke_iii(93,($sig$i|0),(5061|0))|0);
            $707 = __THREW__; __THREW__ = 0;
            $708 = $707&1;
            L292: do {
             if (!($708)) {
              switch ($ref_qual$0$i$ph$lcssa643|0) {
              case 1:  {
               __THREW__ = 0;
               (invoke_iii(93,($sig$i|0),(6300|0))|0);
               $767 = __THREW__; __THREW__ = 0;
               $768 = $767&1;
               if ($768) {
                break L292;
               }
               break;
              }
              case 2:  {
               __THREW__ = 0;
               (invoke_iii(93,($sig$i|0),(6303|0))|0);
               $769 = __THREW__; __THREW__ = 0;
               $770 = $769&1;
               if ($770) {
                break L292;
               }
               break;
              }
              default: {
              }
              }
              $771 = HEAP32[$db>>2]|0;
              $772 = HEAP32[$688>>2]|0;
              $773 = ($771|0)==($772|0);
              if ($773) {
               label = 232;
               break L290;
              }
              $774 = ((($772)) + -24|0);
              __THREW__ = 0;
              (invoke_iii(93,($774|0),(6150|0))|0);
              $775 = __THREW__; __THREW__ = 0;
              $776 = $775&1;
              if (!($776)) {
               $777 = HEAP32[$688>>2]|0;
               $778 = ((($777)) + -12|0);
               $779 = HEAP8[$sig$i>>0]|0;
               $780 = $779 & 1;
               $781 = ($780<<24>>24)==(0);
               $782 = ((($sig$i)) + 8|0);
               $783 = HEAP32[$782>>2]|0;
               $784 = ((($sig$i)) + 1|0);
               $785 = $781 ? $784 : $783;
               $786 = HEAP32[$689>>2]|0;
               $787 = $779&255;
               $788 = $787 >>> 1;
               $789 = $781 ? $788 : $786;
               __THREW__ = 0;
               (invoke_iiiii(99,($778|0),0,($785|0),($789|0))|0);
               $790 = __THREW__; __THREW__ = 0;
               $791 = $790&1;
               if (!($791)) {
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($sig$i);
                $792 = ($706|0)==($first|0);
                if ($792) {
                 $$5 = $first;
                 break L1;
                }
                $793 = HEAP32[$db>>2]|0;
                $794 = HEAP32[$688>>2]|0;
                $795 = ($793|0)==($794|0);
                if ($795) {
                 $$5 = $first;
                 break L1;
                }
                $796 = ((($db)) + 16|0);
                $797 = ((($794)) + -24|0);
                $798 = ((($db)) + 12|0);
                $799 = HEAP32[$798>>2]|0;
                HEAP32[$35>>2] = $799;
                __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($34,$797,$35);
                $800 = ((($db)) + 20|0);
                $801 = HEAP32[$800>>2]|0;
                $802 = ((($db)) + 24|0);
                $803 = HEAP32[$802>>2]|0;
                $804 = ($801>>>0)<($803>>>0);
                $805 = $803;
                if ($804) {
                 $806 = ((($34)) + 12|0);
                 $807 = ((($801)) + 4|0);
                 $808 = HEAP32[$806>>2]|0;
                 $809 = ((($801)) + 12|0);
                 HEAP32[$809>>2] = $808;
                 $810 = HEAP32[$34>>2]|0;
                 HEAP32[$801>>2] = $810;
                 $811 = ((($34)) + 4|0);
                 $812 = HEAP32[$811>>2]|0;
                 HEAP32[$807>>2] = $812;
                 $813 = ((($34)) + 8|0);
                 $814 = HEAP32[$813>>2]|0;
                 $815 = ((($801)) + 8|0);
                 HEAP32[$815>>2] = $814;
                 HEAP32[$813>>2] = 0;
                 HEAP32[$811>>2] = 0;
                 HEAP32[$34>>2] = 0;
                 $816 = HEAP32[$800>>2]|0;
                 $817 = ((($816)) + 16|0);
                 HEAP32[$800>>2] = $817;
                } else {
                 $818 = $801;
                 $819 = ((($db)) + 28|0);
                 $820 = HEAP32[$796>>2]|0;
                 $821 = (($818) - ($820))|0;
                 $822 = $821 >> 4;
                 $823 = (($822) + 1)|0;
                 $824 = ($821|0)<(-16);
                 if ($824) {
                  __THREW__ = 0;
                  invoke_vi(102,($796|0));
                  $825 = __THREW__; __THREW__ = 0;
                  $826 = ___cxa_find_matching_catch_2()|0;
                  $827 = tempRet0;
                  __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($34);
                  $$1021 = $826;$$1032 = $827;
                  break L77;
                 }
                 $828 = (($805) - ($820))|0;
                 $829 = $828 >> 4;
                 $830 = ($829>>>0)<(1073741823);
                 if ($830) {
                  $831 = $828 >> 3;
                  $832 = ($831>>>0)<($823>>>0);
                  $833 = $832 ? $823 : $831;
                  $$0$i$i$i85 = $833;
                 } else {
                  $$0$i$i$i85 = 2147483647;
                 }
                 __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i84,$$0$i$i$i85,$822,$819);
                 $834 = ((($__v$i$i84)) + 8|0);
                 $835 = HEAP32[$834>>2]|0;
                 $836 = ((($34)) + 12|0);
                 $837 = ((($835)) + 4|0);
                 $838 = HEAP32[$836>>2]|0;
                 $839 = ((($835)) + 12|0);
                 HEAP32[$839>>2] = $838;
                 $840 = HEAP32[$34>>2]|0;
                 HEAP32[$835>>2] = $840;
                 $841 = ((($34)) + 4|0);
                 $842 = HEAP32[$841>>2]|0;
                 HEAP32[$837>>2] = $842;
                 $843 = ((($34)) + 8|0);
                 $844 = HEAP32[$843>>2]|0;
                 $845 = ((($835)) + 8|0);
                 HEAP32[$845>>2] = $844;
                 HEAP32[$843>>2] = 0;
                 HEAP32[$841>>2] = 0;
                 HEAP32[$34>>2] = 0;
                 $846 = ((($835)) + 16|0);
                 HEAP32[$834>>2] = $846;
                 __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($796,$__v$i$i84);
                 __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i84);
                }
                __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($34);
                $$5 = $706;
                break L1;
               }
              }
             }
            } while(0);
            $703 = ___cxa_find_matching_catch_2()|0;
            $704 = tempRet0;
            $lpad$phi$index = $703;$lpad$phi$index8 = $704;
            label = 204;
           }
           else if ((label|0) == 221) {
            $758 = ___cxa_find_matching_catch_2()|0;
            $759 = tempRet0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
            $$010$i = $759;$$011$i = $758;
           }
          } while(0);
          if ((label|0) == 204) {
           $$010$i = $lpad$phi$index8;$$011$i = $lpad$phi$index;
          }
          else if ((label|0) == 232) {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($sig$i);
           break;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($sig$i);
          ___resumeException($$011$i|0);
          // unreachable;
         }
        }
        $$5 = $first;
        break L1;
       }
      } while(0);
      $$5 = $first;
      break L1;
      break;
     }
     case 71:  {
      $847 = ((($first)) + 1|0);
      $848 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($847,$last,$db)|0);
      $849 = ($848|0)==($847|0);
      if ($849) {
       $$5 = $first;
       break L1;
      }
      $850 = HEAP32[$db>>2]|0;
      $851 = ((($db)) + 4|0);
      $852 = HEAP32[$851>>2]|0;
      $853 = ($850|0)==($852|0);
      if ($853) {
       $$5 = $first;
       break L1;
      }
      $854 = ((($852)) + -24|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($854,6307)|0);
      $855 = ((($db)) + 16|0);
      $856 = HEAP32[$851>>2]|0;
      $857 = ((($856)) + -24|0);
      $858 = ((($db)) + 12|0);
      $859 = HEAP32[$858>>2]|0;
      HEAP32[$37>>2] = $859;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($36,$857,$37);
      $860 = ((($db)) + 20|0);
      $861 = HEAP32[$860>>2]|0;
      $862 = ((($db)) + 24|0);
      $863 = HEAP32[$862>>2]|0;
      $864 = ($861>>>0)<($863>>>0);
      $865 = $863;
      if ($864) {
       $866 = ((($36)) + 12|0);
       $867 = ((($861)) + 4|0);
       $868 = HEAP32[$866>>2]|0;
       $869 = ((($861)) + 12|0);
       HEAP32[$869>>2] = $868;
       $870 = HEAP32[$36>>2]|0;
       HEAP32[$861>>2] = $870;
       $871 = ((($36)) + 4|0);
       $872 = HEAP32[$871>>2]|0;
       HEAP32[$867>>2] = $872;
       $873 = ((($36)) + 8|0);
       $874 = HEAP32[$873>>2]|0;
       $875 = ((($861)) + 8|0);
       HEAP32[$875>>2] = $874;
       HEAP32[$873>>2] = 0;
       HEAP32[$871>>2] = 0;
       HEAP32[$36>>2] = 0;
       $876 = HEAP32[$860>>2]|0;
       $877 = ((($876)) + 16|0);
       HEAP32[$860>>2] = $877;
      } else {
       $878 = $861;
       $879 = ((($db)) + 28|0);
       $880 = HEAP32[$855>>2]|0;
       $881 = (($878) - ($880))|0;
       $882 = $881 >> 4;
       $883 = (($882) + 1)|0;
       $884 = ($881|0)<(-16);
       if ($884) {
        __THREW__ = 0;
        invoke_vi(102,($855|0));
        $885 = __THREW__; __THREW__ = 0;
        $886 = ___cxa_find_matching_catch_2()|0;
        $887 = tempRet0;
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($36);
        $$1021 = $886;$$1032 = $887;
        break L77;
       }
       $888 = (($865) - ($880))|0;
       $889 = $888 >> 4;
       $890 = ($889>>>0)<(1073741823);
       if ($890) {
        $891 = $888 >> 3;
        $892 = ($891>>>0)<($883>>>0);
        $893 = $892 ? $883 : $891;
        $$0$i$i$i90 = $893;
       } else {
        $$0$i$i$i90 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i89,$$0$i$i$i90,$882,$879);
       $894 = ((($__v$i$i89)) + 8|0);
       $895 = HEAP32[$894>>2]|0;
       $896 = ((($36)) + 12|0);
       $897 = ((($895)) + 4|0);
       $898 = HEAP32[$896>>2]|0;
       $899 = ((($895)) + 12|0);
       HEAP32[$899>>2] = $898;
       $900 = HEAP32[$36>>2]|0;
       HEAP32[$895>>2] = $900;
       $901 = ((($36)) + 4|0);
       $902 = HEAP32[$901>>2]|0;
       HEAP32[$897>>2] = $902;
       $903 = ((($36)) + 8|0);
       $904 = HEAP32[$903>>2]|0;
       $905 = ((($895)) + 8|0);
       HEAP32[$905>>2] = $904;
       HEAP32[$903>>2] = 0;
       HEAP32[$901>>2] = 0;
       HEAP32[$36>>2] = 0;
       $906 = ((($895)) + 16|0);
       HEAP32[$894>>2] = $906;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($855,$__v$i$i89);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i89);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($36);
      $$5 = $848;
      break L1;
      break;
     }
     case 77:  {
      $907 = ($225<<24>>24)==(77);
      do {
       if ($907) {
        $908 = ((($first)) + 1|0);
        $909 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($908,$last,$db)|0);
        $910 = ($909|0)==($908|0);
        if ($910) {
         $$313$i = $first;
        } else {
         $911 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($909,$last,$db)|0);
         $912 = ($911|0)==($909|0);
         if ($912) {
          $$313$i = $first;
         } else {
          $913 = ((($db)) + 4|0);
          $914 = HEAP32[$913>>2]|0;
          $915 = HEAP32[$db>>2]|0;
          $916 = (($914) - ($915))|0;
          $917 = (($916|0) / 24)&-1;
          $918 = ($917>>>0)<(2);
          if ($918) {
           $$313$i = $first;
          } else {
           $919 = $914;
           $920 = ((($919)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($func$i,$920);
           $921 = HEAP32[$913>>2]|0;
           $922 = ((($921)) + -24|0);
           $923 = $921;
           while(1) {
            $924 = ($923|0)==($922|0);
            if ($924) {
             break;
            }
            $925 = ((($923)) + -24|0);
            HEAP32[$913>>2] = $925;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($925);
            $$pre$i$i = HEAP32[$913>>2]|0;
            $923 = $$pre$i$i;
           }
           $926 = ((($921)) + -48|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($class_type$i,$926);
           $927 = ((($func$i)) + 12|0);
           $928 = HEAP8[$927>>0]|0;
           $929 = $928 & 1;
           $930 = ($929<<24>>24)==(0);
           $931 = ((($func$i)) + 20|0);
           $932 = HEAP32[$931>>2]|0;
           $933 = ((($927)) + 1|0);
           $934 = $930 ? $933 : $932;
           $935 = HEAP8[$934>>0]|0;
           $936 = ($935<<24>>24)==(40);
           $937 = HEAP32[$913>>2]|0;
           $938 = ((($937)) + -24|0);
           L350: do {
            if ($936) {
             __THREW__ = 0;
             $939 = (invoke_iii(93,($func$i|0),(5059|0))|0);
             $940 = __THREW__; __THREW__ = 0;
             $941 = $940&1;
             if ($941) {
              label = 324;
             } else {
              ;HEAP32[$23>>2]=HEAP32[$939>>2]|0;HEAP32[$23+4>>2]=HEAP32[$939+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$939+8>>2]|0;
              $__i$0$i$i$i$i = 0;
              while(1) {
               $exitcond$i$i$i$i = ($__i$0$i$i$i$i|0)==(3);
               if ($exitcond$i$i$i$i) {
                break;
               }
               $942 = (($939) + ($__i$0$i$i$i$i<<2)|0);
               HEAP32[$942>>2] = 0;
               $943 = (($__i$0$i$i$i$i) + 1)|0;
               $__i$0$i$i$i$i = $943;
              }
              __THREW__ = 0;
              invoke_vii(96,($24|0),($class_type$i|0));
              $944 = __THREW__; __THREW__ = 0;
              $945 = $944&1;
              if ($945) {
               $1069 = ___cxa_find_matching_catch_2()|0;
               $1070 = tempRet0;
               $$2$i = $1070;$$23$i = $1069;
              } else {
               $946 = HEAP8[$24>>0]|0;
               $947 = $946 & 1;
               $948 = ($947<<24>>24)==(0);
               $949 = ((($24)) + 8|0);
               $950 = HEAP32[$949>>2]|0;
               $951 = ((($24)) + 1|0);
               $952 = $948 ? $951 : $950;
               $953 = ((($24)) + 4|0);
               $954 = HEAP32[$953>>2]|0;
               $955 = $946&255;
               $956 = $955 >>> 1;
               $957 = $948 ? $956 : $954;
               __THREW__ = 0;
               $958 = (invoke_iiii(91,($23|0),($952|0),($957|0))|0);
               $959 = __THREW__; __THREW__ = 0;
               $960 = $959&1;
               do {
                if ($960) {
                 $1071 = ___cxa_find_matching_catch_2()|0;
                 $1072 = tempRet0;
                 $$1$i = $1072;$$12$i = $1071;
                } else {
                 ;HEAP32[$22>>2]=HEAP32[$958>>2]|0;HEAP32[$22+4>>2]=HEAP32[$958+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$958+8>>2]|0;
                 $__i$0$i$i$i19$i = 0;
                 while(1) {
                  $exitcond$i$i$i20$i = ($__i$0$i$i$i19$i|0)==(3);
                  if ($exitcond$i$i$i20$i) {
                   break;
                  }
                  $961 = (($958) + ($__i$0$i$i$i19$i<<2)|0);
                  HEAP32[$961>>2] = 0;
                  $962 = (($__i$0$i$i$i19$i) + 1)|0;
                  $__i$0$i$i$i19$i = $962;
                 }
                 __THREW__ = 0;
                 $963 = (invoke_iii(93,($22|0),(6318|0))|0);
                 $964 = __THREW__; __THREW__ = 0;
                 $965 = $964&1;
                 if ($965) {
                  $1073 = ___cxa_find_matching_catch_2()|0;
                  $1074 = tempRet0;
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
                  $$1$i = $1074;$$12$i = $1073;
                  break;
                 }
                 ;HEAP32[$21>>2]=HEAP32[$963>>2]|0;HEAP32[$21+4>>2]=HEAP32[$963+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$963+8>>2]|0;
                 $__i$0$i$i$i22$i = 0;
                 while(1) {
                  $exitcond$i$i$i23$i = ($__i$0$i$i$i22$i|0)==(3);
                  if ($exitcond$i$i$i23$i) {
                   break;
                  }
                  $966 = (($963) + ($__i$0$i$i$i22$i<<2)|0);
                  HEAP32[$966>>2] = 0;
                  $967 = (($__i$0$i$i$i22$i) + 1)|0;
                  $__i$0$i$i$i22$i = $967;
                 }
                 $968 = HEAP8[$938>>0]|0;
                 $969 = $968 & 1;
                 $970 = ($969<<24>>24)==(0);
                 do {
                  if ($970) {
                   $971 = ((($938)) + 1|0);
                   HEAP8[$971>>0] = 0;
                   HEAP8[$938>>0] = 0;
                  } else {
                   $972 = ((($937)) + -16|0);
                   $973 = HEAP32[$972>>2]|0;
                   HEAP8[$973>>0] = 0;
                   $974 = ((($937)) + -20|0);
                   HEAP32[$974>>2] = 0;
                   $$pre$i$i$i$i = HEAP8[$938>>0]|0;
                   $975 = $$pre$i$i$i$i & 1;
                   $976 = ($975<<24>>24)==(0);
                   if ($976) {
                    $981 = $$pre$i$i$i$i;$990 = 10;
                   } else {
                    $977 = HEAP32[$938>>2]|0;
                    $978 = $977 & -2;
                    $phitmp$i$i$i$i$i$i$i = (($978) + -1)|0;
                    $979 = $977&255;
                    $981 = $979;$990 = $phitmp$i$i$i$i$i$i$i;
                   }
                   $980 = $981 & 1;
                   $982 = ($980<<24>>24)==(0);
                   do {
                    if ($982) {
                     $983 = $981&255;
                     $984 = $983 >>> 1;
                     $985 = ($981&255)<(22);
                     if ($985) {
                      $1009 = $984;$2828 = 1;$988 = 10;
                      break;
                     }
                     $986 = (($984) + 16)|0;
                     $987 = $986 & 240;
                     $phitmp$i2$i$i$i$i$i$i = (($987) + -1)|0;
                     $1009 = $984;$2828 = 1;$988 = $phitmp$i2$i$i$i$i$i$i;
                    } else {
                     $1009 = 0;$2828 = 0;$988 = 10;
                    }
                   } while(0);
                   $989 = ($988|0)==($990|0);
                   if ($989) {
                    break;
                   }
                   $991 = ($988|0)==(10);
                   if ($991) {
                    $996 = ((($938)) + 1|0);
                    $997 = HEAP32[$972>>2]|0;
                    if ($2828) {
                     $998 = $981&255;
                     $999 = $998 >>> 1;
                     $1000 = (($999) + 1)|0;
                     _memcpy(($996|0),($997|0),($1000|0))|0;
                     _free($997);
                    } else {
                     $1005 = HEAP8[$997>>0]|0;
                     HEAP8[$996>>0] = $1005;
                     _free($997);
                    }
                    $1010 = $1009 << 1;
                    $1011 = $1010&255;
                    HEAP8[$938>>0] = $1011;
                    break;
                   }
                   $992 = ($988>>>0)<=($990>>>0);
                   $993 = (($988) + 1)|0;
                   $994 = (_malloc($993)|0);
                   $995 = ($994|0)==(0|0);
                   $or$cond$i$i$i$i$i$i = $992 & $995;
                   if ($or$cond$i$i$i$i$i$i) {
                    break;
                   }
                   if ($2828) {
                    $1001 = ((($938)) + 1|0);
                    $1002 = $981&255;
                    $1003 = $1002 >>> 1;
                    $1004 = (($1003) + 1)|0;
                    _memcpy(($994|0),($1001|0),($1004|0))|0;
                   } else {
                    $1006 = HEAP32[$972>>2]|0;
                    $1007 = HEAP8[$1006>>0]|0;
                    HEAP8[$994>>0] = $1007;
                    _free($1006);
                   }
                   $1008 = $993 | 1;
                   HEAP32[$938>>2] = $1008;
                   HEAP32[$974>>2] = $1009;
                   HEAP32[$972>>2] = $994;
                  }
                 } while(0);
                 ;HEAP32[$938>>2]=HEAP32[$21>>2]|0;HEAP32[$938+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$938+8>>2]=HEAP32[$21+8>>2]|0;
                 $__i$0$i$i$i$i$i = 0;
                 while(1) {
                  $exitcond$i$i$i$i$i = ($__i$0$i$i$i$i$i|0)==(3);
                  if ($exitcond$i$i$i$i$i) {
                   break;
                  }
                  $1012 = (($21) + ($__i$0$i$i$i$i$i<<2)|0);
                  HEAP32[$1012>>2] = 0;
                  $1013 = (($__i$0$i$i$i$i$i) + 1)|0;
                  $__i$0$i$i$i$i$i = $1013;
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
                 $1014 = HEAP32[$913>>2]|0;
                 __THREW__ = 0;
                 $1015 = (invoke_iiii(92,($927|0),0,(5061|0))|0);
                 $1016 = __THREW__; __THREW__ = 0;
                 $1017 = $1016&1;
                 if ($1017) {
                  label = 324;
                  break L350;
                 }
                 ;HEAP32[$25>>2]=HEAP32[$1015>>2]|0;HEAP32[$25+4>>2]=HEAP32[$1015+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$1015+8>>2]|0;
                 $__i$0$i$i$i26$i = 0;
                 while(1) {
                  $exitcond$i$i$i27$i = ($__i$0$i$i$i26$i|0)==(3);
                  if ($exitcond$i$i$i27$i) {
                   break;
                  }
                  $1018 = (($1015) + ($__i$0$i$i$i26$i<<2)|0);
                  HEAP32[$1018>>2] = 0;
                  $1019 = (($__i$0$i$i$i26$i) + 1)|0;
                  $__i$0$i$i$i26$i = $1019;
                 }
                 $1020 = ((($1014)) + -12|0);
                 $1021 = HEAP8[$1020>>0]|0;
                 $1022 = $1021 & 1;
                 $1023 = ($1022<<24>>24)==(0);
                 do {
                  if ($1023) {
                   $1024 = ((($1020)) + 1|0);
                   HEAP8[$1024>>0] = 0;
                   HEAP8[$1020>>0] = 0;
                  } else {
                   $1025 = ((($1014)) + -4|0);
                   $1026 = HEAP32[$1025>>2]|0;
                   HEAP8[$1026>>0] = 0;
                   $1027 = ((($1014)) + -8|0);
                   HEAP32[$1027>>2] = 0;
                   $$pre$i$i$i30$i = HEAP8[$1020>>0]|0;
                   $1028 = $$pre$i$i$i30$i & 1;
                   $1029 = ($1028<<24>>24)==(0);
                   if ($1029) {
                    $1034 = $$pre$i$i$i30$i;$1043 = 10;
                   } else {
                    $1030 = HEAP32[$1020>>2]|0;
                    $1031 = $1030 & -2;
                    $phitmp$i$i$i$i$i$i32$i = (($1031) + -1)|0;
                    $1032 = $1030&255;
                    $1034 = $1032;$1043 = $phitmp$i$i$i$i$i$i32$i;
                   }
                   $1033 = $1034 & 1;
                   $1035 = ($1033<<24>>24)==(0);
                   do {
                    if ($1035) {
                     $1036 = $1034&255;
                     $1037 = $1036 >>> 1;
                     $1038 = ($1034&255)<(22);
                     if ($1038) {
                      $1041 = 10;$1062 = $1037;$2829 = 1;
                      break;
                     }
                     $1039 = (($1037) + 16)|0;
                     $1040 = $1039 & 240;
                     $phitmp$i2$i$i$i$i$i35$i = (($1040) + -1)|0;
                     $1041 = $phitmp$i2$i$i$i$i$i35$i;$1062 = $1037;$2829 = 1;
                    } else {
                     $1041 = 10;$1062 = 0;$2829 = 0;
                    }
                   } while(0);
                   $1042 = ($1041|0)==($1043|0);
                   if ($1042) {
                    break;
                   }
                   $1044 = ($1041|0)==(10);
                   if ($1044) {
                    $1049 = ((($1020)) + 1|0);
                    $1050 = HEAP32[$1025>>2]|0;
                    if ($2829) {
                     $1051 = $1034&255;
                     $1052 = $1051 >>> 1;
                     $1053 = (($1052) + 1)|0;
                     _memcpy(($1049|0),($1050|0),($1053|0))|0;
                     _free($1050);
                    } else {
                     $1058 = HEAP8[$1050>>0]|0;
                     HEAP8[$1049>>0] = $1058;
                     _free($1050);
                    }
                    $1063 = $1062 << 1;
                    $1064 = $1063&255;
                    HEAP8[$1020>>0] = $1064;
                    break;
                   }
                   $1045 = ($1041>>>0)<=($1043>>>0);
                   $1046 = (($1041) + 1)|0;
                   $1047 = (_malloc($1046)|0);
                   $1048 = ($1047|0)==(0|0);
                   $or$cond$i$i$i$i$i37$i = $1045 & $1048;
                   if ($or$cond$i$i$i$i$i37$i) {
                    break;
                   }
                   if ($2829) {
                    $1054 = ((($1020)) + 1|0);
                    $1055 = $1034&255;
                    $1056 = $1055 >>> 1;
                    $1057 = (($1056) + 1)|0;
                    _memcpy(($1047|0),($1054|0),($1057|0))|0;
                   } else {
                    $1059 = HEAP32[$1025>>2]|0;
                    $1060 = HEAP8[$1059>>0]|0;
                    HEAP8[$1047>>0] = $1060;
                    _free($1059);
                   }
                   $1061 = $1046 | 1;
                   HEAP32[$1020>>2] = $1061;
                   HEAP32[$1027>>2] = $1062;
                   HEAP32[$1025>>2] = $1047;
                  }
                 } while(0);
                 ;HEAP32[$1020>>2]=HEAP32[$25>>2]|0;HEAP32[$1020+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$1020+8>>2]=HEAP32[$25+8>>2]|0;
                 $__i$0$i$i$i$i45$i = 0;
                 while(1) {
                  $exitcond$i$i$i$i46$i = ($__i$0$i$i$i$i45$i|0)==(3);
                  if ($exitcond$i$i$i$i46$i) {
                   break;
                  }
                  $1065 = (($25) + ($__i$0$i$i$i$i45$i<<2)|0);
                  HEAP32[$1065>>2] = 0;
                  $1066 = (($__i$0$i$i$i$i45$i) + 1)|0;
                  $__i$0$i$i$i$i45$i = $1066;
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($25);
                 label = 390;
                 break L350;
                }
               } while(0);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
               $$2$i = $$1$i;$$23$i = $$12$i;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
              $$6$i = $$2$i;$$67$i = $$23$i;
             }
            } else {
             __THREW__ = 0;
             $1075 = (invoke_iii(93,($func$i|0),(6150|0))|0);
             $1076 = __THREW__; __THREW__ = 0;
             $1077 = $1076&1;
             if ($1077) {
              label = 324;
             } else {
              ;HEAP32[$28>>2]=HEAP32[$1075>>2]|0;HEAP32[$28+4>>2]=HEAP32[$1075+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$1075+8>>2]|0;
              $__i$0$i$i$i48$i = 0;
              while(1) {
               $exitcond$i$i$i49$i = ($__i$0$i$i$i48$i|0)==(3);
               if ($exitcond$i$i$i49$i) {
                break;
               }
               $1078 = (($1075) + ($__i$0$i$i$i48$i<<2)|0);
               HEAP32[$1078>>2] = 0;
               $1079 = (($__i$0$i$i$i48$i) + 1)|0;
               $__i$0$i$i$i48$i = $1079;
              }
              __THREW__ = 0;
              invoke_vii(96,($29|0),($class_type$i|0));
              $1080 = __THREW__; __THREW__ = 0;
              $1081 = $1080&1;
              if ($1081) {
               $1198 = ___cxa_find_matching_catch_2()|0;
               $1199 = tempRet0;
               $$5$i = $1199;$$56$i = $1198;
              } else {
               $1082 = HEAP8[$29>>0]|0;
               $1083 = $1082 & 1;
               $1084 = ($1083<<24>>24)==(0);
               $1085 = ((($29)) + 8|0);
               $1086 = HEAP32[$1085>>2]|0;
               $1087 = ((($29)) + 1|0);
               $1088 = $1084 ? $1087 : $1086;
               $1089 = ((($29)) + 4|0);
               $1090 = HEAP32[$1089>>2]|0;
               $1091 = $1082&255;
               $1092 = $1091 >>> 1;
               $1093 = $1084 ? $1092 : $1090;
               __THREW__ = 0;
               $1094 = (invoke_iiii(91,($28|0),($1088|0),($1093|0))|0);
               $1095 = __THREW__; __THREW__ = 0;
               $1096 = $1095&1;
               do {
                if ($1096) {
                 $1200 = ___cxa_find_matching_catch_2()|0;
                 $1201 = tempRet0;
                 $$4$i = $1201;$$45$i = $1200;
                } else {
                 ;HEAP32[$27>>2]=HEAP32[$1094>>2]|0;HEAP32[$27+4>>2]=HEAP32[$1094+4>>2]|0;HEAP32[$27+8>>2]=HEAP32[$1094+8>>2]|0;
                 $__i$0$i$i$i52$i = 0;
                 while(1) {
                  $exitcond$i$i$i53$i = ($__i$0$i$i$i52$i|0)==(3);
                  if ($exitcond$i$i$i53$i) {
                   break;
                  }
                  $1097 = (($1094) + ($__i$0$i$i$i52$i<<2)|0);
                  HEAP32[$1097>>2] = 0;
                  $1098 = (($__i$0$i$i$i52$i) + 1)|0;
                  $__i$0$i$i$i52$i = $1098;
                 }
                 __THREW__ = 0;
                 $1099 = (invoke_iii(93,($27|0),(6318|0))|0);
                 $1100 = __THREW__; __THREW__ = 0;
                 $1101 = $1100&1;
                 if ($1101) {
                  $1202 = ___cxa_find_matching_catch_2()|0;
                  $1203 = tempRet0;
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
                  $$4$i = $1203;$$45$i = $1202;
                  break;
                 }
                 ;HEAP32[$26>>2]=HEAP32[$1099>>2]|0;HEAP32[$26+4>>2]=HEAP32[$1099+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$1099+8>>2]|0;
                 $__i$0$i$i$i56$i = 0;
                 while(1) {
                  $exitcond$i$i$i57$i = ($__i$0$i$i$i56$i|0)==(3);
                  if ($exitcond$i$i$i57$i) {
                   break;
                  }
                  $1102 = (($1099) + ($__i$0$i$i$i56$i<<2)|0);
                  HEAP32[$1102>>2] = 0;
                  $1103 = (($__i$0$i$i$i56$i) + 1)|0;
                  $__i$0$i$i$i56$i = $1103;
                 }
                 $1104 = HEAP8[$938>>0]|0;
                 $1105 = $1104 & 1;
                 $1106 = ($1105<<24>>24)==(0);
                 do {
                  if ($1106) {
                   $1107 = ((($938)) + 1|0);
                   HEAP8[$1107>>0] = 0;
                   HEAP8[$938>>0] = 0;
                  } else {
                   $1108 = ((($937)) + -16|0);
                   $1109 = HEAP32[$1108>>2]|0;
                   HEAP8[$1109>>0] = 0;
                   $1110 = ((($937)) + -20|0);
                   HEAP32[$1110>>2] = 0;
                   $$pre$i$i$i61$i = HEAP8[$938>>0]|0;
                   $1111 = $$pre$i$i$i61$i & 1;
                   $1112 = ($1111<<24>>24)==(0);
                   if ($1112) {
                    $1117 = $$pre$i$i$i61$i;$1126 = 10;
                   } else {
                    $1113 = HEAP32[$938>>2]|0;
                    $1114 = $1113 & -2;
                    $phitmp$i$i$i$i$i$i63$i = (($1114) + -1)|0;
                    $1115 = $1113&255;
                    $1117 = $1115;$1126 = $phitmp$i$i$i$i$i$i63$i;
                   }
                   $1116 = $1117 & 1;
                   $1118 = ($1116<<24>>24)==(0);
                   do {
                    if ($1118) {
                     $1119 = $1117&255;
                     $1120 = $1119 >>> 1;
                     $1121 = ($1117&255)<(22);
                     if ($1121) {
                      $1124 = 10;$1145 = $1120;$2830 = 1;
                      break;
                     }
                     $1122 = (($1120) + 16)|0;
                     $1123 = $1122 & 240;
                     $phitmp$i2$i$i$i$i$i66$i = (($1123) + -1)|0;
                     $1124 = $phitmp$i2$i$i$i$i$i66$i;$1145 = $1120;$2830 = 1;
                    } else {
                     $1124 = 10;$1145 = 0;$2830 = 0;
                    }
                   } while(0);
                   $1125 = ($1124|0)==($1126|0);
                   if ($1125) {
                    break;
                   }
                   $1127 = ($1124|0)==(10);
                   if ($1127) {
                    $1132 = ((($938)) + 1|0);
                    $1133 = HEAP32[$1108>>2]|0;
                    if ($2830) {
                     $1134 = $1117&255;
                     $1135 = $1134 >>> 1;
                     $1136 = (($1135) + 1)|0;
                     _memcpy(($1132|0),($1133|0),($1136|0))|0;
                     _free($1133);
                    } else {
                     $1141 = HEAP8[$1133>>0]|0;
                     HEAP8[$1132>>0] = $1141;
                     _free($1133);
                    }
                    $1146 = $1145 << 1;
                    $1147 = $1146&255;
                    HEAP8[$938>>0] = $1147;
                    break;
                   }
                   $1128 = ($1124>>>0)<=($1126>>>0);
                   $1129 = (($1124) + 1)|0;
                   $1130 = (_malloc($1129)|0);
                   $1131 = ($1130|0)==(0|0);
                   $or$cond$i$i$i$i$i68$i = $1128 & $1131;
                   if ($or$cond$i$i$i$i$i68$i) {
                    break;
                   }
                   if ($2830) {
                    $1137 = ((($938)) + 1|0);
                    $1138 = $1117&255;
                    $1139 = $1138 >>> 1;
                    $1140 = (($1139) + 1)|0;
                    _memcpy(($1130|0),($1137|0),($1140|0))|0;
                   } else {
                    $1142 = HEAP32[$1108>>2]|0;
                    $1143 = HEAP8[$1142>>0]|0;
                    HEAP8[$1130>>0] = $1143;
                    _free($1142);
                   }
                   $1144 = $1129 | 1;
                   HEAP32[$938>>2] = $1144;
                   HEAP32[$1110>>2] = $1145;
                   HEAP32[$1108>>2] = $1130;
                  }
                 } while(0);
                 ;HEAP32[$938>>2]=HEAP32[$26>>2]|0;HEAP32[$938+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$938+8>>2]=HEAP32[$26+8>>2]|0;
                 $__i$0$i$i$i$i76$i = 0;
                 while(1) {
                  $exitcond$i$i$i$i77$i = ($__i$0$i$i$i$i76$i|0)==(3);
                  if ($exitcond$i$i$i$i77$i) {
                   break;
                  }
                  $1148 = (($26) + ($__i$0$i$i$i$i76$i<<2)|0);
                  HEAP32[$1148>>2] = 0;
                  $1149 = (($__i$0$i$i$i$i76$i) + 1)|0;
                  $__i$0$i$i$i$i76$i = $1149;
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
                 $1150 = HEAP32[$913>>2]|0;
                 $1151 = ((($1150)) + -12|0);
                 $1152 = HEAP8[$1151>>0]|0;
                 $1153 = $1152 & 1;
                 $1154 = ($1153<<24>>24)==(0);
                 do {
                  if ($1154) {
                   $1155 = ((($1151)) + 1|0);
                   HEAP8[$1155>>0] = 0;
                   HEAP8[$1151>>0] = 0;
                  } else {
                   $1156 = ((($1150)) + -4|0);
                   $1157 = HEAP32[$1156>>2]|0;
                   HEAP8[$1157>>0] = 0;
                   $1158 = ((($1150)) + -8|0);
                   HEAP32[$1158>>2] = 0;
                   $$pre$i$i$i80$i = HEAP8[$1151>>0]|0;
                   $1159 = $$pre$i$i$i80$i & 1;
                   $1160 = ($1159<<24>>24)==(0);
                   if ($1160) {
                    $1165 = $$pre$i$i$i80$i;$1174 = 10;
                   } else {
                    $1161 = HEAP32[$1151>>2]|0;
                    $1162 = $1161 & -2;
                    $phitmp$i$i$i$i$i$i82$i = (($1162) + -1)|0;
                    $1163 = $1161&255;
                    $1165 = $1163;$1174 = $phitmp$i$i$i$i$i$i82$i;
                   }
                   $1164 = $1165 & 1;
                   $1166 = ($1164<<24>>24)==(0);
                   do {
                    if ($1166) {
                     $1167 = $1165&255;
                     $1168 = $1167 >>> 1;
                     $1169 = ($1165&255)<(22);
                     if ($1169) {
                      $1172 = 10;$1193 = $1168;$2831 = 1;
                      break;
                     }
                     $1170 = (($1168) + 16)|0;
                     $1171 = $1170 & 240;
                     $phitmp$i2$i$i$i$i$i85$i = (($1171) + -1)|0;
                     $1172 = $phitmp$i2$i$i$i$i$i85$i;$1193 = $1168;$2831 = 1;
                    } else {
                     $1172 = 10;$1193 = 0;$2831 = 0;
                    }
                   } while(0);
                   $1173 = ($1172|0)==($1174|0);
                   if ($1173) {
                    break;
                   }
                   $1175 = ($1172|0)==(10);
                   if ($1175) {
                    $1180 = ((($1151)) + 1|0);
                    $1181 = HEAP32[$1156>>2]|0;
                    if ($2831) {
                     $1182 = $1165&255;
                     $1183 = $1182 >>> 1;
                     $1184 = (($1183) + 1)|0;
                     _memcpy(($1180|0),($1181|0),($1184|0))|0;
                     _free($1181);
                    } else {
                     $1189 = HEAP8[$1181>>0]|0;
                     HEAP8[$1180>>0] = $1189;
                     _free($1181);
                    }
                    $1194 = $1193 << 1;
                    $1195 = $1194&255;
                    HEAP8[$1151>>0] = $1195;
                    break;
                   }
                   $1176 = ($1172>>>0)<=($1174>>>0);
                   $1177 = (($1172) + 1)|0;
                   $1178 = (_malloc($1177)|0);
                   $1179 = ($1178|0)==(0|0);
                   $or$cond$i$i$i$i$i87$i = $1176 & $1179;
                   if ($or$cond$i$i$i$i$i87$i) {
                    break;
                   }
                   if ($2831) {
                    $1185 = ((($1151)) + 1|0);
                    $1186 = $1165&255;
                    $1187 = $1186 >>> 1;
                    $1188 = (($1187) + 1)|0;
                    _memcpy(($1178|0),($1185|0),($1188|0))|0;
                   } else {
                    $1190 = HEAP32[$1156>>2]|0;
                    $1191 = HEAP8[$1190>>0]|0;
                    HEAP8[$1178>>0] = $1191;
                    _free($1190);
                   }
                   $1192 = $1177 | 1;
                   HEAP32[$1151>>2] = $1192;
                   HEAP32[$1158>>2] = $1193;
                   HEAP32[$1156>>2] = $1178;
                  }
                 } while(0);
                 ;HEAP32[$1151>>2]=HEAP32[$927>>2]|0;HEAP32[$1151+4>>2]=HEAP32[$927+4>>2]|0;HEAP32[$1151+8>>2]=HEAP32[$927+8>>2]|0;
                 $__i$0$i$i$i$i95$i = 0;
                 while(1) {
                  $exitcond$i$i$i$i96$i = ($__i$0$i$i$i$i95$i|0)==(3);
                  if ($exitcond$i$i$i$i96$i) {
                   label = 390;
                   break L350;
                  }
                  $1196 = (($927) + ($__i$0$i$i$i$i95$i<<2)|0);
                  HEAP32[$1196>>2] = 0;
                  $1197 = (($__i$0$i$i$i$i95$i) + 1)|0;
                  $__i$0$i$i$i$i95$i = $1197;
                 }
                }
               } while(0);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
               $$5$i = $$4$i;$$56$i = $$45$i;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
              $$6$i = $$5$i;$$67$i = $$56$i;
             }
            }
           } while(0);
           if ((label|0) == 324) {
            $1067 = ___cxa_find_matching_catch_2()|0;
            $1068 = tempRet0;
            $$6$i = $1068;$$67$i = $1067;
           }
           else if ((label|0) == 390) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($class_type$i);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($func$i);
            $$313$i = $911;
            break;
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($class_type$i);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($func$i);
           ___resumeException($$67$i|0);
           // unreachable;
          }
         }
        }
       } else {
        $$313$i = $first;
       }
      } while(0);
      $1204 = ($$313$i|0)==($first|0);
      if ($1204) {
       $$5 = $first;
       break L1;
      }
      $1205 = HEAP32[$db>>2]|0;
      $1206 = ((($db)) + 4|0);
      $1207 = HEAP32[$1206>>2]|0;
      $1208 = ($1205|0)==($1207|0);
      if ($1208) {
       $$5 = $first;
       break L1;
      }
      $1209 = ((($db)) + 16|0);
      $1210 = ((($1207)) + -24|0);
      $1211 = ((($db)) + 12|0);
      $1212 = HEAP32[$1211>>2]|0;
      HEAP32[$39>>2] = $1212;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($38,$1210,$39);
      $1213 = ((($db)) + 20|0);
      $1214 = HEAP32[$1213>>2]|0;
      $1215 = ((($db)) + 24|0);
      $1216 = HEAP32[$1215>>2]|0;
      $1217 = ($1214>>>0)<($1216>>>0);
      $1218 = $1216;
      if ($1217) {
       $1219 = ((($38)) + 12|0);
       $1220 = ((($1214)) + 4|0);
       $1221 = HEAP32[$1219>>2]|0;
       $1222 = ((($1214)) + 12|0);
       HEAP32[$1222>>2] = $1221;
       $1223 = HEAP32[$38>>2]|0;
       HEAP32[$1214>>2] = $1223;
       $1224 = ((($38)) + 4|0);
       $1225 = HEAP32[$1224>>2]|0;
       HEAP32[$1220>>2] = $1225;
       $1226 = ((($38)) + 8|0);
       $1227 = HEAP32[$1226>>2]|0;
       $1228 = ((($1214)) + 8|0);
       HEAP32[$1228>>2] = $1227;
       HEAP32[$1226>>2] = 0;
       HEAP32[$1224>>2] = 0;
       HEAP32[$38>>2] = 0;
       $1229 = HEAP32[$1213>>2]|0;
       $1230 = ((($1229)) + 16|0);
       HEAP32[$1213>>2] = $1230;
      } else {
       $1231 = $1214;
       $1232 = ((($db)) + 28|0);
       $1233 = HEAP32[$1209>>2]|0;
       $1234 = (($1231) - ($1233))|0;
       $1235 = $1234 >> 4;
       $1236 = (($1235) + 1)|0;
       $1237 = ($1234|0)<(-16);
       if ($1237) {
        __THREW__ = 0;
        invoke_vi(102,($1209|0));
        $1238 = __THREW__; __THREW__ = 0;
        $1239 = ___cxa_find_matching_catch_2()|0;
        $1240 = tempRet0;
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($38);
        $$1021 = $1239;$$1032 = $1240;
        break L77;
       }
       $1241 = (($1218) - ($1233))|0;
       $1242 = $1241 >> 4;
       $1243 = ($1242>>>0)<(1073741823);
       if ($1243) {
        $1244 = $1241 >> 3;
        $1245 = ($1244>>>0)<($1236>>>0);
        $1246 = $1245 ? $1236 : $1244;
        $$0$i$i$i95 = $1246;
       } else {
        $$0$i$i$i95 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i94,$$0$i$i$i95,$1235,$1232);
       $1247 = ((($__v$i$i94)) + 8|0);
       $1248 = HEAP32[$1247>>2]|0;
       $1249 = ((($38)) + 12|0);
       $1250 = ((($1248)) + 4|0);
       $1251 = HEAP32[$1249>>2]|0;
       $1252 = ((($1248)) + 12|0);
       HEAP32[$1252>>2] = $1251;
       $1253 = HEAP32[$38>>2]|0;
       HEAP32[$1248>>2] = $1253;
       $1254 = ((($38)) + 4|0);
       $1255 = HEAP32[$1254>>2]|0;
       HEAP32[$1250>>2] = $1255;
       $1256 = ((($38)) + 8|0);
       $1257 = HEAP32[$1256>>2]|0;
       $1258 = ((($1248)) + 8|0);
       HEAP32[$1258>>2] = $1257;
       HEAP32[$1256>>2] = 0;
       HEAP32[$1254>>2] = 0;
       HEAP32[$38>>2] = 0;
       $1259 = ((($1248)) + 16|0);
       HEAP32[$1247>>2] = $1259;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1209,$__v$i$i94);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i94);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($38);
      $$5 = $$313$i;
      break L1;
      break;
     }
     case 79:  {
      $1260 = ((($db)) + 4|0);
      $1261 = HEAP32[$1260>>2]|0;
      $1262 = HEAP32[$db>>2]|0;
      $1263 = (($1261) - ($1262))|0;
      $1264 = (($1263|0) / 24)&-1;
      $1265 = ((($first)) + 1|0);
      $1266 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1265,$last,$db)|0);
      $1267 = HEAP32[$1260>>2]|0;
      $1268 = HEAP32[$db>>2]|0;
      $1269 = (($1267) - ($1268))|0;
      $1270 = (($1269|0) / 24)&-1;
      $1271 = ($1266|0)==($1265|0);
      if ($1271) {
       $$5 = $first;
       break L1;
      }
      $1272 = ((($db)) + 16|0);
      $1273 = ((($db)) + 12|0);
      $1274 = HEAP32[$1273>>2]|0;
      $1275 = ((($db)) + 20|0);
      $1276 = HEAP32[$1275>>2]|0;
      $1277 = ((($db)) + 24|0);
      $1278 = HEAP32[$1277>>2]|0;
      $1279 = ($1276>>>0)<($1278>>>0);
      $1280 = $1278;
      if ($1279) {
       HEAP32[$1276>>2] = 0;
       $1281 = ((($1276)) + 4|0);
       HEAP32[$1281>>2] = 0;
       $1282 = ((($1276)) + 8|0);
       HEAP32[$1282>>2] = 0;
       $1283 = ((($1276)) + 12|0);
       HEAP32[$1283>>2] = $1274;
       $1284 = HEAP32[$1275>>2]|0;
       $1285 = ((($1284)) + 16|0);
       HEAP32[$1275>>2] = $1285;
      } else {
       $1286 = $1276;
       $1287 = ((($db)) + 28|0);
       $1288 = HEAP32[$1272>>2]|0;
       $1289 = (($1286) - ($1288))|0;
       $1290 = $1289 >> 4;
       $1291 = (($1290) + 1)|0;
       $1292 = ($1289|0)<(-16);
       if ($1292) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1272);
        // unreachable;
       }
       $1293 = (($1280) - ($1288))|0;
       $1294 = $1293 >> 4;
       $1295 = ($1294>>>0)<(1073741823);
       if ($1295) {
        $1296 = $1293 >> 3;
        $1297 = ($1296>>>0)<($1291>>>0);
        $1298 = $1297 ? $1291 : $1296;
        $$0$i$i$i100 = $1298;
       } else {
        $$0$i$i$i100 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i99,$$0$i$i$i100,$1290,$1287);
       $1299 = ((($__v$i$i99)) + 8|0);
       $1300 = HEAP32[$1299>>2]|0;
       HEAP32[$1300>>2] = 0;
       $1301 = ((($1300)) + 4|0);
       HEAP32[$1301>>2] = 0;
       $1302 = ((($1300)) + 8|0);
       HEAP32[$1302>>2] = 0;
       $1303 = ((($1300)) + 12|0);
       HEAP32[$1303>>2] = $1274;
       $1304 = ((($1300)) + 16|0);
       HEAP32[$1299>>2] = $1304;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1272,$__v$i$i99);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i99);
      }
      $1305 = ((($40)) + 4|0);
      $1306 = ((($40)) + 8|0);
      $1307 = ((($40)) + 1|0);
      $1308 = ((($__v$i$i104)) + 8|0);
      $k5$0 = $1264;
      while(1) {
       $1309 = ($k5$0>>>0)<($1270>>>0);
       if (!($1309)) {
        $$5 = $1266;
        break L1;
       }
       $1310 = HEAP32[$db>>2]|0;
       $1311 = (((($1310) + (($k5$0*24)|0)|0)) + 12|0);
       $1312 = HEAP8[$1311>>0]|0;
       $1313 = $1312 & 1;
       $1314 = ($1313<<24>>24)==(0);
       $1315 = (((($1310) + (($k5$0*24)|0)|0)) + 16|0);
       $1316 = HEAP32[$1315>>2]|0;
       $1317 = $1312&255;
       $1318 = $1317 >>> 1;
       $1319 = $1314 ? $1318 : $1316;
       $1320 = (((($1310) + (($k5$0*24)|0)|0)) + 20|0);
       $1321 = HEAP32[$1320>>2]|0;
       $1322 = ((($1311)) + 1|0);
       $1323 = $1314 ? $1322 : $1321;
       $1324 = ($1319>>>0)<(2);
       $1325 = $1324 ? $1319 : 2;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($40,$1323,$1325);
       $1326 = HEAP8[$40>>0]|0;
       $1327 = $1326 & 1;
       $1328 = ($1327<<24>>24)==(0);
       $1329 = HEAP32[$1305>>2]|0;
       $1330 = $1326&255;
       $1331 = $1330 >>> 1;
       $1332 = $1328 ? $1331 : $1329;
       $1333 = HEAP32[$1306>>2]|0;
       $1334 = $1328 ? $1307 : $1333;
       $1335 = ($1332>>>0)>(2);
       $1336 = $1335 ? 2 : $1332;
       $1337 = (_memcmp($1334,5050,$1336)|0);
       $1338 = ($1337|0)==(0);
       $1339 = ($1332>>>0)<(2);
       $$$i$i$i = $1335&1;
       $$$$i$i$i = $1339 ? -1 : $$$i$i$i;
       $1340 = $1338 ? $$$$i$i$i : $1337;
       $1341 = ($1340|0)==(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
       $1342 = HEAP32[$db>>2]|0;
       if ($1341) {
        $1343 = (($1342) + (($k5$0*24)|0)|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1343,5111)|0);
        $1344 = HEAP32[$db>>2]|0;
        $1345 = (((($1344) + (($k5$0*24)|0)|0)) + 12|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1345,0,5061)|0);
       } else {
        $1346 = (((($1342) + (($k5$0*24)|0)|0)) + 12|0);
        $1347 = HEAP16[$1346>>1]|0;
        $1348 = $1347 & 1;
        $1349 = ($1348<<16>>16)==(0);
        if ($1349) {
         $1352 = ($1347&65535) >>> 8;
         $1353 = $1352&255;
         $1354 = $1353;
        } else {
         $1350 = (((($1342) + (($k5$0*24)|0)|0)) + 20|0);
         $1351 = HEAP32[$1350>>2]|0;
         $$pre464 = HEAP8[$1351>>0]|0;
         $1354 = $$pre464;
        }
        $1355 = ($1354<<24>>24)==(40);
        if ($1355) {
         $1356 = (($1342) + (($k5$0*24)|0)|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1356,5059)|0);
         $1357 = HEAP32[$db>>2]|0;
         $1358 = (((($1357) + (($k5$0*24)|0)|0)) + 12|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1358,0,5061)|0);
        }
       }
       $1359 = HEAP32[$db>>2]|0;
       $1360 = (($1359) + (($k5$0*24)|0)|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1360,5103)|0);
       $1361 = HEAP32[$1275>>2]|0;
       $1362 = ((($1361)) + -16|0);
       $1363 = HEAP32[$db>>2]|0;
       $1364 = (($1363) + (($k5$0*24)|0)|0);
       $1365 = ((($1361)) + -12|0);
       $1366 = HEAP32[$1365>>2]|0;
       $1367 = ((($1361)) + -8|0);
       $1368 = HEAP32[$1367>>2]|0;
       $1369 = ($1366|0)==($1368|0);
       $1370 = $1368;
       if ($1369) {
        $1379 = $1366;
        $1380 = ((($1361)) + -4|0);
        $1381 = HEAP32[$1362>>2]|0;
        $1382 = (($1379) - ($1381))|0;
        $1383 = (($1382|0) / 24)&-1;
        $1384 = (($1383) + 1)|0;
        $1385 = ($1382|0)<(-24);
        if ($1385) {
         $$lcssa648 = $1362;
         label = 424;
         break;
        }
        $1386 = (($1370) - ($1381))|0;
        $1387 = (($1386|0) / 24)&-1;
        $1388 = ($1387>>>0)<(1073741823);
        if ($1388) {
         $1389 = $1387 << 1;
         $1390 = ($1389>>>0)<($1384>>>0);
         $1391 = $1390 ? $1384 : $1389;
         $$0$i$i$i106 = $1391;
        } else {
         $$0$i$i$i106 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i104,$$0$i$i$i106,$1383,$1380);
        $1392 = HEAP32[$1308>>2]|0;
        __THREW__ = 0;
        invoke_vii(100,($1392|0),($1364|0));
        $1393 = __THREW__; __THREW__ = 0;
        $1394 = $1393&1;
        if ($1394) {
         label = 430;
         break;
        }
        $1395 = ((($1392)) + 12|0);
        $1396 = (((($1363) + (($k5$0*24)|0)|0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($1395|0),($1396|0));
        $1397 = __THREW__; __THREW__ = 0;
        $1398 = $1397&1;
        if ($1398) {
         $$lcssa652 = $1392;
         label = 429;
         break;
        }
        $1403 = ((($1392)) + 24|0);
        HEAP32[$1308>>2] = $1403;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1362,$__v$i$i104);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i104);
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1366,$1364);
        $1371 = ((($1366)) + 12|0);
        $1372 = (((($1363) + (($k5$0*24)|0)|0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($1371|0),($1372|0));
        $1373 = __THREW__; __THREW__ = 0;
        $1374 = $1373&1;
        if ($1374) {
         $$lcssa = $1366;
         label = 421;
         break;
        }
        $1377 = HEAP32[$1365>>2]|0;
        $1378 = ((($1377)) + 24|0);
        HEAP32[$1365>>2] = $1378;
       }
       $1404 = (($k5$0) + 1)|0;
       $k5$0 = $1404;
      }
      if ((label|0) == 421) {
       $1375 = ___cxa_find_matching_catch_2()|0;
       $1376 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa);
       ___resumeException($1375|0);
       // unreachable;
      }
      else if ((label|0) == 424) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa648);
       // unreachable;
      }
      else if ((label|0) == 429) {
       $1399 = ___cxa_find_matching_catch_2()|0;
       $1400 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa652);
       $eh$lpad$body$i$i109$index14Z2D = $1400;$eh$lpad$body$i$i109$indexZ2D = $1399;
      }
      else if ((label|0) == 430) {
       $1401 = ___cxa_find_matching_catch_2()|0;
       $1402 = tempRet0;
       $eh$lpad$body$i$i109$index14Z2D = $1402;$eh$lpad$body$i$i109$indexZ2D = $1401;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i104);
      ___resumeException($eh$lpad$body$i$i109$indexZ2D|0);
      // unreachable;
      break;
     }
     case 80:  {
      $1405 = ((($db)) + 4|0);
      $1406 = HEAP32[$1405>>2]|0;
      $1407 = HEAP32[$db>>2]|0;
      $1408 = (($1406) - ($1407))|0;
      $1409 = (($1408|0) / 24)&-1;
      $1410 = ((($first)) + 1|0);
      $1411 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1410,$last,$db)|0);
      $1412 = HEAP32[$1405>>2]|0;
      $1413 = HEAP32[$db>>2]|0;
      $1414 = (($1412) - ($1413))|0;
      $1415 = (($1414|0) / 24)&-1;
      $1416 = ($1411|0)==($1410|0);
      if ($1416) {
       $$5 = $first;
       break L1;
      }
      $1417 = ((($db)) + 16|0);
      $1418 = ((($db)) + 12|0);
      $1419 = HEAP32[$1418>>2]|0;
      $1420 = ((($db)) + 20|0);
      $1421 = HEAP32[$1420>>2]|0;
      $1422 = ((($db)) + 24|0);
      $1423 = HEAP32[$1422>>2]|0;
      $1424 = ($1421>>>0)<($1423>>>0);
      $1425 = $1423;
      if ($1424) {
       HEAP32[$1421>>2] = 0;
       $1426 = ((($1421)) + 4|0);
       HEAP32[$1426>>2] = 0;
       $1427 = ((($1421)) + 8|0);
       HEAP32[$1427>>2] = 0;
       $1428 = ((($1421)) + 12|0);
       HEAP32[$1428>>2] = $1419;
       $1429 = HEAP32[$1420>>2]|0;
       $1430 = ((($1429)) + 16|0);
       HEAP32[$1420>>2] = $1430;
      } else {
       $1431 = $1421;
       $1432 = ((($db)) + 28|0);
       $1433 = HEAP32[$1417>>2]|0;
       $1434 = (($1431) - ($1433))|0;
       $1435 = $1434 >> 4;
       $1436 = (($1435) + 1)|0;
       $1437 = ($1434|0)<(-16);
       if ($1437) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1417);
        // unreachable;
       }
       $1438 = (($1425) - ($1433))|0;
       $1439 = $1438 >> 4;
       $1440 = ($1439>>>0)<(1073741823);
       if ($1440) {
        $1441 = $1438 >> 3;
        $1442 = ($1441>>>0)<($1436>>>0);
        $1443 = $1442 ? $1436 : $1441;
        $$0$i$i$i114 = $1443;
       } else {
        $$0$i$i$i114 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i113,$$0$i$i$i114,$1435,$1432);
       $1444 = ((($__v$i$i113)) + 8|0);
       $1445 = HEAP32[$1444>>2]|0;
       HEAP32[$1445>>2] = 0;
       $1446 = ((($1445)) + 4|0);
       HEAP32[$1446>>2] = 0;
       $1447 = ((($1445)) + 8|0);
       HEAP32[$1447>>2] = 0;
       $1448 = ((($1445)) + 12|0);
       HEAP32[$1448>>2] = $1419;
       $1449 = ((($1445)) + 16|0);
       HEAP32[$1444>>2] = $1449;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1417,$__v$i$i113);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i113);
      }
      $1450 = ((($41)) + 4|0);
      $1451 = ((($41)) + 8|0);
      $1452 = ((($41)) + 1|0);
      $1453 = ((($42)) + 4|0);
      $1454 = ((($42)) + 8|0);
      $1455 = ((($42)) + 1|0);
      $1456 = ((($__v$i$i122)) + 8|0);
      $k8$0 = $1409;
      while(1) {
       $1457 = ($k8$0>>>0)<($1415>>>0);
       if (!($1457)) {
        $$5 = $1411;
        break L1;
       }
       $1458 = HEAP32[$db>>2]|0;
       $1459 = (((($1458) + (($k8$0*24)|0)|0)) + 12|0);
       $1460 = HEAP8[$1459>>0]|0;
       $1461 = $1460 & 1;
       $1462 = ($1461<<24>>24)==(0);
       $1463 = (((($1458) + (($k8$0*24)|0)|0)) + 16|0);
       $1464 = HEAP32[$1463>>2]|0;
       $1465 = $1460&255;
       $1466 = $1465 >>> 1;
       $1467 = $1462 ? $1466 : $1464;
       $1468 = (((($1458) + (($k8$0*24)|0)|0)) + 20|0);
       $1469 = HEAP32[$1468>>2]|0;
       $1470 = ((($1459)) + 1|0);
       $1471 = $1462 ? $1470 : $1469;
       $1472 = ($1467>>>0)<(2);
       $1473 = $1472 ? $1467 : 2;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($41,$1471,$1473);
       $1474 = HEAP8[$41>>0]|0;
       $1475 = $1474 & 1;
       $1476 = ($1475<<24>>24)==(0);
       $1477 = HEAP32[$1450>>2]|0;
       $1478 = $1474&255;
       $1479 = $1478 >>> 1;
       $1480 = $1476 ? $1479 : $1477;
       $1481 = HEAP32[$1451>>2]|0;
       $1482 = $1476 ? $1452 : $1481;
       $1483 = ($1480>>>0)>(2);
       $1484 = $1483 ? 2 : $1480;
       $1485 = (_memcmp($1482,5050,$1484)|0);
       $1486 = ($1485|0)==(0);
       $1487 = ($1480>>>0)<(2);
       $$$i$i$i118 = $1483&1;
       $$$$i$i$i119 = $1487 ? -1 : $$$i$i$i118;
       $1488 = $1486 ? $$$$i$i$i119 : $1485;
       $1489 = ($1488|0)==(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($41);
       $1490 = HEAP32[$db>>2]|0;
       if ($1489) {
        $1491 = (($1490) + (($k8$0*24)|0)|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1491,5111)|0);
        $1492 = HEAP32[$db>>2]|0;
        $1493 = (((($1492) + (($k8$0*24)|0)|0)) + 12|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1493,0,5061)|0);
       } else {
        $1494 = (((($1490) + (($k8$0*24)|0)|0)) + 12|0);
        $1495 = HEAP16[$1494>>1]|0;
        $1496 = $1495 & 1;
        $1497 = ($1496<<16>>16)==(0);
        if ($1497) {
         $1500 = ($1495&65535) >>> 8;
         $1501 = $1500&255;
         $1502 = $1501;
        } else {
         $1498 = (((($1490) + (($k8$0*24)|0)|0)) + 20|0);
         $1499 = HEAP32[$1498>>2]|0;
         $$pre463 = HEAP8[$1499>>0]|0;
         $1502 = $$pre463;
        }
        $1503 = ($1502<<24>>24)==(40);
        if ($1503) {
         $1504 = (($1490) + (($k8$0*24)|0)|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1504,5059)|0);
         $1505 = HEAP32[$db>>2]|0;
         $1506 = (((($1505) + (($k8$0*24)|0)|0)) + 12|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1506,0,5061)|0);
        }
       }
       $1507 = HEAP8[$1410>>0]|0;
       $1508 = ($1507<<24>>24)==(85);
       $1509 = HEAP32[$db>>2]|0;
       $1510 = (($1509) + (($k8$0*24)|0)|0);
       do {
        if ($1508) {
         $1511 = HEAP8[$1510>>0]|0;
         $1512 = $1511 & 1;
         $1513 = ($1512<<24>>24)==(0);
         $1514 = (((($1509) + (($k8$0*24)|0)|0)) + 4|0);
         $1515 = HEAP32[$1514>>2]|0;
         $1516 = $1511&255;
         $1517 = $1516 >>> 1;
         $1518 = $1513 ? $1517 : $1515;
         $1519 = (((($1509) + (($k8$0*24)|0)|0)) + 8|0);
         $1520 = HEAP32[$1519>>2]|0;
         $1521 = ((($1510)) + 1|0);
         $1522 = $1513 ? $1521 : $1520;
         $1523 = ($1518>>>0)<(12);
         $1524 = $1523 ? $1518 : 12;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($42,$1522,$1524);
         $1525 = HEAP8[$42>>0]|0;
         $1526 = $1525 & 1;
         $1527 = ($1526<<24>>24)==(0);
         $1528 = HEAP32[$1453>>2]|0;
         $1529 = $1525&255;
         $1530 = $1529 >>> 1;
         $1531 = $1527 ? $1530 : $1528;
         $1532 = HEAP32[$1454>>2]|0;
         $1533 = $1527 ? $1455 : $1532;
         $1534 = ($1531>>>0)>(12);
         $1535 = $1534 ? 12 : $1531;
         $1536 = (_memcmp($1533,6322,$1535)|0);
         $1537 = ($1536|0)==(0);
         $1538 = ($1531>>>0)<(12);
         $$$i$i$i$i = $1534&1;
         $$$$i$i$i$i = $1538 ? -1 : $$$i$i$i$i;
         $1539 = $1537 ? $$$$i$i$i$i : $1536;
         $1540 = ($1539|0)==(0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($42);
         $1541 = HEAP32[$db>>2]|0;
         $1542 = (($1541) + (($k8$0*24)|0)|0);
         if ($1540) {
          $1544 = HEAP8[$1542>>0]|0;
          $1545 = $1544 & 1;
          $1546 = ($1545<<24>>24)==(0);
          if ($1546) {
           $1547 = $1544&255;
           $1548 = $1547 >>> 1;
           $1549 = ($1548>>>0)<(11);
           $1550 = $1549 ? $1548 : 11;
           $1559 = $1548;$1560 = $1550;$1562 = 10;$1565 = $1544;
          } else {
           $1551 = (((($1541) + (($k8$0*24)|0)|0)) + 4|0);
           $1552 = HEAP32[$1551>>2]|0;
           $1553 = ($1552>>>0)<(11);
           $1554 = $1553 ? $1552 : 11;
           $1555 = HEAP32[$1542>>2]|0;
           $1556 = $1555 & -2;
           $phitmp$i$i$i = (($1556) + -1)|0;
           $1557 = $1555&255;
           $1559 = $1552;$1560 = $1554;$1562 = $phitmp$i$i$i;$1565 = $1557;
          }
          $1558 = (($1560) - ($1559))|0;
          $1561 = (($1558) + ($1562))|0;
          $1563 = ($1561>>>0)<(2);
          if ($1563) {
           $1598 = (2 - ($1560))|0;
           $1599 = (($1598) + ($1559))|0;
           $1600 = (($1599) - ($1562))|0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($1542,$1562,$1600,$1559,0,$1560,2,6335);
           break;
          }
          $1564 = $1565 & 1;
          $1566 = ($1564<<24>>24)==(0);
          if ($1566) {
           $1569 = ((($1542)) + 1|0);
           $1574 = $1569;
          } else {
           $1567 = (((($1541) + (($k8$0*24)|0)|0)) + 8|0);
           $1568 = HEAP32[$1567>>2]|0;
           $1574 = $1568;
          }
          $1570 = ($1560|0)==(2);
          do {
           if ($1570) {
            $$25$i$i = 2;$$3$i$i = 0;$$35$i$i = 6335;$$39$i$i = 2;
            label = 470;
           } else {
            $1571 = (($1559) - ($1560))|0;
            $1572 = ($1559|0)==($1560|0);
            if ($1572) {
             $$25$i$i = $1560;$$3$i$i = 0;$$35$i$i = 6335;$$39$i$i = 2;
             label = 470;
            } else {
             $1573 = ($1560>>>0)>(2);
             if ($1573) {
              HEAP8[$1574>>0]=25705&255;HEAP8[$1574+1>>0]=25705>>8;
              $1586 = ((($1574)) + 2|0);
              $1587 = (($1574) + ($1560)|0);
              _memmove(($1586|0),($1587|0),($1571|0))|0;
              $$36$i$i = $1560;$$4$i$i = 2;
              break;
             }
             $1575 = ($1574>>>0)<(6335>>>0);
             $1576 = (($1574) + ($1559)|0);
             $1577 = ($1576>>>0)>(6335>>>0);
             $or$cond$i$i = $1575 & $1577;
             do {
              if ($or$cond$i$i) {
               $1578 = (($1574) + ($1560)|0);
               $1579 = ($1578>>>0)>(6335>>>0);
               if ($1579) {
                _memcpy(($1574|0),(6335|0),($1560|0))|0;
                $1582 = (2 - ($1560))|0;
                $$01$i$i = $1560;$$02$i$i = (6337);$$03$i$i = 0;$$06$i$i = $1582;
                break;
               } else {
                $1580 = (2 - ($1560))|0;
                $1581 = (6335 + ($1580)|0);
                $$01$i$i = 0;$$02$i$i = $1581;$$03$i$i = $1560;$$06$i$i = 2;
                break;
               }
              } else {
               $$01$i$i = 0;$$02$i$i = 6335;$$03$i$i = $1560;$$06$i$i = 2;
              }
             } while(0);
             $1583 = (($1574) + ($$01$i$i)|0);
             $1584 = (($1583) + ($$06$i$i)|0);
             $1585 = (($1583) + ($$03$i$i)|0);
             _memmove(($1584|0),($1585|0),($1571|0))|0;
             $$25$i$i = $$03$i$i;$$3$i$i = $$01$i$i;$$35$i$i = $$02$i$i;$$39$i$i = $$06$i$i;
             label = 470;
            }
           }
          } while(0);
          if ((label|0) == 470) {
           label = 0;
           $1588 = (($1574) + ($$3$i$i)|0);
           _memmove(($1588|0),($$35$i$i|0),($$39$i$i|0))|0;
           $$36$i$i = $$25$i$i;$$4$i$i = $$39$i$i;
          }
          $1589 = (($$4$i$i) - ($$36$i$i))|0;
          $1590 = (($1589) + ($1559))|0;
          $1591 = HEAP8[$1542>>0]|0;
          $1592 = $1591 & 1;
          $1593 = ($1592<<24>>24)==(0);
          if ($1593) {
           $1595 = $1590 << 1;
           $1596 = $1595&255;
           HEAP8[$1542>>0] = $1596;
          } else {
           $1594 = (((($1541) + (($k8$0*24)|0)|0)) + 4|0);
           HEAP32[$1594>>2] = $1590;
          }
          $1597 = (($1574) + ($1590)|0);
          HEAP8[$1597>>0] = 0;
         } else {
          $1543 = $1542;
          label = 453;
         }
        } else {
         $1543 = $1510;
         label = 453;
        }
       } while(0);
       if ((label|0) == 453) {
        label = 0;
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1543,5180)|0);
       }
       $1601 = HEAP32[$1420>>2]|0;
       $1602 = ((($1601)) + -16|0);
       $1603 = HEAP32[$db>>2]|0;
       $1604 = (($1603) + (($k8$0*24)|0)|0);
       $1605 = ((($1601)) + -12|0);
       $1606 = HEAP32[$1605>>2]|0;
       $1607 = ((($1601)) + -8|0);
       $1608 = HEAP32[$1607>>2]|0;
       $1609 = ($1606|0)==($1608|0);
       $1610 = $1608;
       if ($1609) {
        $1619 = $1606;
        $1620 = ((($1601)) + -4|0);
        $1621 = HEAP32[$1602>>2]|0;
        $1622 = (($1619) - ($1621))|0;
        $1623 = (($1622|0) / 24)&-1;
        $1624 = (($1623) + 1)|0;
        $1625 = ($1622|0)<(-24);
        if ($1625) {
         $$lcssa654 = $1602;
         label = 481;
         break;
        }
        $1626 = (($1610) - ($1621))|0;
        $1627 = (($1626|0) / 24)&-1;
        $1628 = ($1627>>>0)<(1073741823);
        if ($1628) {
         $1629 = $1627 << 1;
         $1630 = ($1629>>>0)<($1624>>>0);
         $1631 = $1630 ? $1624 : $1629;
         $$0$i$i$i124 = $1631;
        } else {
         $$0$i$i$i124 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i122,$$0$i$i$i124,$1623,$1620);
        $1632 = HEAP32[$1456>>2]|0;
        __THREW__ = 0;
        invoke_vii(100,($1632|0),($1604|0));
        $1633 = __THREW__; __THREW__ = 0;
        $1634 = $1633&1;
        if ($1634) {
         label = 487;
         break;
        }
        $1635 = ((($1632)) + 12|0);
        $1636 = (((($1603) + (($k8$0*24)|0)|0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($1635|0),($1636|0));
        $1637 = __THREW__; __THREW__ = 0;
        $1638 = $1637&1;
        if ($1638) {
         $$lcssa659 = $1632;
         label = 486;
         break;
        }
        $1643 = ((($1632)) + 24|0);
        HEAP32[$1456>>2] = $1643;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1602,$__v$i$i122);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i122);
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1606,$1604);
        $1611 = ((($1606)) + 12|0);
        $1612 = (((($1603) + (($k8$0*24)|0)|0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($1611|0),($1612|0));
        $1613 = __THREW__; __THREW__ = 0;
        $1614 = $1613&1;
        if ($1614) {
         $$lcssa657 = $1606;
         label = 478;
         break;
        }
        $1617 = HEAP32[$1605>>2]|0;
        $1618 = ((($1617)) + 24|0);
        HEAP32[$1605>>2] = $1618;
       }
       $1644 = (($k8$0) + 1)|0;
       $k8$0 = $1644;
      }
      if ((label|0) == 478) {
       $1615 = ___cxa_find_matching_catch_2()|0;
       $1616 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa657);
       ___resumeException($1615|0);
       // unreachable;
      }
      else if ((label|0) == 481) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa654);
       // unreachable;
      }
      else if ((label|0) == 486) {
       $1639 = ___cxa_find_matching_catch_2()|0;
       $1640 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa659);
       $eh$lpad$body$i$i127$index19Z2D = $1640;$eh$lpad$body$i$i127$indexZ2D = $1639;
      }
      else if ((label|0) == 487) {
       $1641 = ___cxa_find_matching_catch_2()|0;
       $1642 = tempRet0;
       $eh$lpad$body$i$i127$index19Z2D = $1642;$eh$lpad$body$i$i127$indexZ2D = $1641;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i122);
      ___resumeException($eh$lpad$body$i$i127$indexZ2D|0);
      // unreachable;
      break;
     }
     case 82:  {
      $1645 = ((($db)) + 4|0);
      $1646 = HEAP32[$1645>>2]|0;
      $1647 = HEAP32[$db>>2]|0;
      $1648 = (($1646) - ($1647))|0;
      $1649 = (($1648|0) / 24)&-1;
      $1650 = ((($first)) + 1|0);
      $1651 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1650,$last,$db)|0);
      $1652 = HEAP32[$1645>>2]|0;
      $1653 = HEAP32[$db>>2]|0;
      $1654 = (($1652) - ($1653))|0;
      $1655 = (($1654|0) / 24)&-1;
      $1656 = ($1651|0)==($1650|0);
      if ($1656) {
       $$5 = $first;
       break L1;
      }
      $1657 = ((($db)) + 16|0);
      $1658 = ((($db)) + 12|0);
      $1659 = HEAP32[$1658>>2]|0;
      $1660 = ((($db)) + 20|0);
      $1661 = HEAP32[$1660>>2]|0;
      $1662 = ((($db)) + 24|0);
      $1663 = HEAP32[$1662>>2]|0;
      $1664 = ($1661>>>0)<($1663>>>0);
      $1665 = $1663;
      if ($1664) {
       HEAP32[$1661>>2] = 0;
       $1666 = ((($1661)) + 4|0);
       HEAP32[$1666>>2] = 0;
       $1667 = ((($1661)) + 8|0);
       HEAP32[$1667>>2] = 0;
       $1668 = ((($1661)) + 12|0);
       HEAP32[$1668>>2] = $1659;
       $1669 = HEAP32[$1660>>2]|0;
       $1670 = ((($1669)) + 16|0);
       HEAP32[$1660>>2] = $1670;
      } else {
       $1671 = $1661;
       $1672 = ((($db)) + 28|0);
       $1673 = HEAP32[$1657>>2]|0;
       $1674 = (($1671) - ($1673))|0;
       $1675 = $1674 >> 4;
       $1676 = (($1675) + 1)|0;
       $1677 = ($1674|0)<(-16);
       if ($1677) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1657);
        // unreachable;
       }
       $1678 = (($1665) - ($1673))|0;
       $1679 = $1678 >> 4;
       $1680 = ($1679>>>0)<(1073741823);
       if ($1680) {
        $1681 = $1678 >> 3;
        $1682 = ($1681>>>0)<($1676>>>0);
        $1683 = $1682 ? $1676 : $1681;
        $$0$i$i$i132 = $1683;
       } else {
        $$0$i$i$i132 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i131,$$0$i$i$i132,$1675,$1672);
       $1684 = ((($__v$i$i131)) + 8|0);
       $1685 = HEAP32[$1684>>2]|0;
       HEAP32[$1685>>2] = 0;
       $1686 = ((($1685)) + 4|0);
       HEAP32[$1686>>2] = 0;
       $1687 = ((($1685)) + 8|0);
       HEAP32[$1687>>2] = 0;
       $1688 = ((($1685)) + 12|0);
       HEAP32[$1688>>2] = $1659;
       $1689 = ((($1685)) + 16|0);
       HEAP32[$1684>>2] = $1689;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1657,$__v$i$i131);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i131);
      }
      $1690 = ((($43)) + 4|0);
      $1691 = ((($43)) + 8|0);
      $1692 = ((($43)) + 1|0);
      $1693 = ((($__v$i$i140)) + 8|0);
      $k11$0 = $1649;
      while(1) {
       $1694 = ($k11$0>>>0)<($1655>>>0);
       if (!($1694)) {
        $$5 = $1651;
        break L1;
       }
       $1695 = HEAP32[$db>>2]|0;
       $1696 = (((($1695) + (($k11$0*24)|0)|0)) + 12|0);
       $1697 = HEAP8[$1696>>0]|0;
       $1698 = $1697 & 1;
       $1699 = ($1698<<24>>24)==(0);
       $1700 = (((($1695) + (($k11$0*24)|0)|0)) + 16|0);
       $1701 = HEAP32[$1700>>2]|0;
       $1702 = $1697&255;
       $1703 = $1702 >>> 1;
       $1704 = $1699 ? $1703 : $1701;
       $1705 = (((($1695) + (($k11$0*24)|0)|0)) + 20|0);
       $1706 = HEAP32[$1705>>2]|0;
       $1707 = ((($1696)) + 1|0);
       $1708 = $1699 ? $1707 : $1706;
       $1709 = ($1704>>>0)<(2);
       $1710 = $1709 ? $1704 : 2;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($43,$1708,$1710);
       $1711 = HEAP8[$43>>0]|0;
       $1712 = $1711 & 1;
       $1713 = ($1712<<24>>24)==(0);
       $1714 = HEAP32[$1690>>2]|0;
       $1715 = $1711&255;
       $1716 = $1715 >>> 1;
       $1717 = $1713 ? $1716 : $1714;
       $1718 = HEAP32[$1691>>2]|0;
       $1719 = $1713 ? $1692 : $1718;
       $1720 = ($1717>>>0)>(2);
       $1721 = $1720 ? 2 : $1717;
       $1722 = (_memcmp($1719,5050,$1721)|0);
       $1723 = ($1722|0)==(0);
       $1724 = ($1717>>>0)<(2);
       $$$i$i$i136 = $1720&1;
       $$$$i$i$i137 = $1724 ? -1 : $$$i$i$i136;
       $1725 = $1723 ? $$$$i$i$i137 : $1722;
       $1726 = ($1725|0)==(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($43);
       $1727 = HEAP32[$db>>2]|0;
       if ($1726) {
        $1728 = (($1727) + (($k11$0*24)|0)|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1728,5111)|0);
        $1729 = HEAP32[$db>>2]|0;
        $1730 = (((($1729) + (($k11$0*24)|0)|0)) + 12|0);
        (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1730,0,5061)|0);
       } else {
        $1731 = (((($1727) + (($k11$0*24)|0)|0)) + 12|0);
        $1732 = HEAP16[$1731>>1]|0;
        $1733 = $1732 & 1;
        $1734 = ($1733<<16>>16)==(0);
        if ($1734) {
         $1737 = ($1732&65535) >>> 8;
         $1738 = $1737&255;
         $1739 = $1738;
        } else {
         $1735 = (((($1727) + (($k11$0*24)|0)|0)) + 20|0);
         $1736 = HEAP32[$1735>>2]|0;
         $$pre462 = HEAP8[$1736>>0]|0;
         $1739 = $$pre462;
        }
        $1740 = ($1739<<24>>24)==(40);
        if ($1740) {
         $1741 = (($1727) + (($k11$0*24)|0)|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1741,5059)|0);
         $1742 = HEAP32[$db>>2]|0;
         $1743 = (((($1742) + (($k11$0*24)|0)|0)) + 12|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1743,0,5061)|0);
        }
       }
       $1744 = HEAP32[$db>>2]|0;
       $1745 = (($1744) + (($k11$0*24)|0)|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($1745,5114)|0);
       $1746 = HEAP32[$1660>>2]|0;
       $1747 = ((($1746)) + -16|0);
       $1748 = HEAP32[$db>>2]|0;
       $1749 = (($1748) + (($k11$0*24)|0)|0);
       $1750 = ((($1746)) + -12|0);
       $1751 = HEAP32[$1750>>2]|0;
       $1752 = ((($1746)) + -8|0);
       $1753 = HEAP32[$1752>>2]|0;
       $1754 = ($1751|0)==($1753|0);
       $1755 = $1753;
       if ($1754) {
        $1764 = $1751;
        $1765 = ((($1746)) + -4|0);
        $1766 = HEAP32[$1747>>2]|0;
        $1767 = (($1764) - ($1766))|0;
        $1768 = (($1767|0) / 24)&-1;
        $1769 = (($1768) + 1)|0;
        $1770 = ($1767|0)<(-24);
        if ($1770) {
         $$lcssa661 = $1747;
         label = 513;
         break;
        }
        $1771 = (($1755) - ($1766))|0;
        $1772 = (($1771|0) / 24)&-1;
        $1773 = ($1772>>>0)<(1073741823);
        if ($1773) {
         $1774 = $1772 << 1;
         $1775 = ($1774>>>0)<($1769>>>0);
         $1776 = $1775 ? $1769 : $1774;
         $$0$i$i$i142 = $1776;
        } else {
         $$0$i$i$i142 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i140,$$0$i$i$i142,$1768,$1765);
        $1777 = HEAP32[$1693>>2]|0;
        __THREW__ = 0;
        invoke_vii(100,($1777|0),($1749|0));
        $1778 = __THREW__; __THREW__ = 0;
        $1779 = $1778&1;
        if ($1779) {
         label = 519;
         break;
        }
        $1780 = ((($1777)) + 12|0);
        $1781 = (((($1748) + (($k11$0*24)|0)|0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($1780|0),($1781|0));
        $1782 = __THREW__; __THREW__ = 0;
        $1783 = $1782&1;
        if ($1783) {
         $$lcssa666 = $1777;
         label = 518;
         break;
        }
        $1788 = ((($1777)) + 24|0);
        HEAP32[$1693>>2] = $1788;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1747,$__v$i$i140);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i140);
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1751,$1749);
        $1756 = ((($1751)) + 12|0);
        $1757 = (((($1748) + (($k11$0*24)|0)|0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($1756|0),($1757|0));
        $1758 = __THREW__; __THREW__ = 0;
        $1759 = $1758&1;
        if ($1759) {
         $$lcssa664 = $1751;
         label = 510;
         break;
        }
        $1762 = HEAP32[$1750>>2]|0;
        $1763 = ((($1762)) + 24|0);
        HEAP32[$1750>>2] = $1763;
       }
       $1789 = (($k11$0) + 1)|0;
       $k11$0 = $1789;
      }
      if ((label|0) == 510) {
       $1760 = ___cxa_find_matching_catch_2()|0;
       $1761 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa664);
       ___resumeException($1760|0);
       // unreachable;
      }
      else if ((label|0) == 513) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa661);
       // unreachable;
      }
      else if ((label|0) == 518) {
       $1784 = ___cxa_find_matching_catch_2()|0;
       $1785 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa666);
       $eh$lpad$body$i$i145$index24Z2D = $1785;$eh$lpad$body$i$i145$indexZ2D = $1784;
      }
      else if ((label|0) == 519) {
       $1786 = ___cxa_find_matching_catch_2()|0;
       $1787 = tempRet0;
       $eh$lpad$body$i$i145$index24Z2D = $1787;$eh$lpad$body$i$i145$indexZ2D = $1786;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i140);
      ___resumeException($eh$lpad$body$i$i145$indexZ2D|0);
      // unreachable;
      break;
     }
     case 84:  {
      $1790 = ((($db)) + 4|0);
      $1791 = HEAP32[$1790>>2]|0;
      $1792 = HEAP32[$db>>2]|0;
      $1793 = (($1791) - ($1792))|0;
      $1794 = (($1793|0) / 24)&-1;
      $1795 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
      $1796 = HEAP32[$1790>>2]|0;
      $1797 = HEAP32[$db>>2]|0;
      $1798 = (($1796) - ($1797))|0;
      $1799 = (($1798|0) / 24)&-1;
      $1800 = ($1795|0)==($first|0);
      if ($1800) {
       $$5 = $first;
       break L1;
      }
      $1801 = ((($db)) + 16|0);
      $1802 = ((($db)) + 12|0);
      $1803 = HEAP32[$1802>>2]|0;
      $1804 = ((($db)) + 20|0);
      $1805 = HEAP32[$1804>>2]|0;
      $1806 = ((($db)) + 24|0);
      $1807 = HEAP32[$1806>>2]|0;
      $1808 = ($1805>>>0)<($1807>>>0);
      $1809 = $1807;
      if ($1808) {
       HEAP32[$1805>>2] = 0;
       $1810 = ((($1805)) + 4|0);
       HEAP32[$1810>>2] = 0;
       $1811 = ((($1805)) + 8|0);
       HEAP32[$1811>>2] = 0;
       $1812 = ((($1805)) + 12|0);
       HEAP32[$1812>>2] = $1803;
       $1813 = HEAP32[$1804>>2]|0;
       $1814 = ((($1813)) + 16|0);
       HEAP32[$1804>>2] = $1814;
      } else {
       $1815 = $1805;
       $1816 = ((($db)) + 28|0);
       $1817 = HEAP32[$1801>>2]|0;
       $1818 = (($1815) - ($1817))|0;
       $1819 = $1818 >> 4;
       $1820 = (($1819) + 1)|0;
       $1821 = ($1818|0)<(-16);
       if ($1821) {
        __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($1801);
        // unreachable;
       }
       $1822 = (($1809) - ($1817))|0;
       $1823 = $1822 >> 4;
       $1824 = ($1823>>>0)<(1073741823);
       if ($1824) {
        $1825 = $1822 >> 3;
        $1826 = ($1825>>>0)<($1820>>>0);
        $1827 = $1826 ? $1820 : $1825;
        $$0$i$i$i150 = $1827;
       } else {
        $$0$i$i$i150 = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i149,$$0$i$i$i150,$1819,$1816);
       $1828 = ((($__v$i$i149)) + 8|0);
       $1829 = HEAP32[$1828>>2]|0;
       HEAP32[$1829>>2] = 0;
       $1830 = ((($1829)) + 4|0);
       HEAP32[$1830>>2] = 0;
       $1831 = ((($1829)) + 8|0);
       HEAP32[$1831>>2] = 0;
       $1832 = ((($1829)) + 12|0);
       HEAP32[$1832>>2] = $1803;
       $1833 = ((($1829)) + 16|0);
       HEAP32[$1828>>2] = $1833;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1801,$__v$i$i149);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i149);
      }
      $1834 = ((($__v$i$i153)) + 8|0);
      $k15$0 = $1794;
      while(1) {
       $1835 = ($k15$0>>>0)<($1799>>>0);
       if (!($1835)) {
        label = 533;
        break;
       }
       $1841 = HEAP32[$1804>>2]|0;
       $1842 = ((($1841)) + -16|0);
       $1843 = HEAP32[$db>>2]|0;
       $1844 = (($1843) + (($k15$0*24)|0)|0);
       $1845 = ((($1841)) + -12|0);
       $1846 = HEAP32[$1845>>2]|0;
       $1847 = ((($1841)) + -8|0);
       $1848 = HEAP32[$1847>>2]|0;
       $1849 = ($1846|0)==($1848|0);
       $1850 = $1848;
       if ($1849) {
        $1859 = $1846;
        $1860 = ((($1841)) + -4|0);
        $1861 = HEAP32[$1842>>2]|0;
        $1862 = (($1859) - ($1861))|0;
        $1863 = (($1862|0) / 24)&-1;
        $1864 = (($1863) + 1)|0;
        $1865 = ($1862|0)<(-24);
        if ($1865) {
         $$lcssa668 = $1842;
         label = 539;
         break;
        }
        $1866 = (($1850) - ($1861))|0;
        $1867 = (($1866|0) / 24)&-1;
        $1868 = ($1867>>>0)<(1073741823);
        if ($1868) {
         $1869 = $1867 << 1;
         $1870 = ($1869>>>0)<($1864>>>0);
         $1871 = $1870 ? $1864 : $1869;
         $$0$i$i$i155 = $1871;
        } else {
         $$0$i$i$i155 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i153,$$0$i$i$i155,$1863,$1860);
        $1872 = HEAP32[$1834>>2]|0;
        __THREW__ = 0;
        invoke_vii(100,($1872|0),($1844|0));
        $1873 = __THREW__; __THREW__ = 0;
        $1874 = $1873&1;
        if ($1874) {
         label = 545;
         break;
        }
        $1875 = ((($1872)) + 12|0);
        $1876 = (((($1843) + (($k15$0*24)|0)|0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($1875|0),($1876|0));
        $1877 = __THREW__; __THREW__ = 0;
        $1878 = $1877&1;
        if ($1878) {
         $$lcssa673 = $1872;
         label = 544;
         break;
        }
        $1883 = ((($1872)) + 24|0);
        HEAP32[$1834>>2] = $1883;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($1842,$__v$i$i153);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i153);
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($1846,$1844);
        $1851 = ((($1846)) + 12|0);
        $1852 = (((($1843) + (($k15$0*24)|0)|0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($1851|0),($1852|0));
        $1853 = __THREW__; __THREW__ = 0;
        $1854 = $1853&1;
        if ($1854) {
         $$lcssa671 = $1846;
         label = 536;
         break;
        }
        $1857 = HEAP32[$1845>>2]|0;
        $1858 = ((($1857)) + 24|0);
        HEAP32[$1845>>2] = $1858;
       }
       $1884 = (($k15$0) + 1)|0;
       $k15$0 = $1884;
      }
      if ((label|0) == 533) {
       $1836 = ((($db)) + 63|0);
       $1837 = HEAP8[$1836>>0]|0;
       $1838 = ($1837<<24>>24)!=(0);
       $1839 = (($1794) + 1)|0;
       $1840 = ($1799|0)==($1839|0);
       $or$cond = $1840 & $1838;
       if (!($or$cond)) {
        $$5 = $1795;
        break L1;
       }
       $1885 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($1795,$last,$db)|0);
       $1886 = ($1885|0)==($1795|0);
       if ($1886) {
        $$5 = $1795;
        break L1;
       }
       $1887 = HEAP32[$1790>>2]|0;
       $1888 = ((($1887)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args,$1888);
       $1889 = HEAP32[$1790>>2]|0;
       $1890 = ((($1889)) + -24|0);
       $1891 = $1889;
       while(1) {
        $1892 = ($1891|0)==($1890|0);
        if ($1892) {
         break;
        }
        $1893 = ((($1891)) + -24|0);
        HEAP32[$1790>>2] = $1893;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1893);
        $$pre$i162 = HEAP32[$1790>>2]|0;
        $1891 = $$pre$i162;
       }
       $1894 = ((($1889)) + -48|0);
       $1895 = HEAP8[$args>>0]|0;
       $1896 = $1895 & 1;
       $1897 = ($1896<<24>>24)==(0);
       $1898 = ((($args)) + 8|0);
       $1899 = HEAP32[$1898>>2]|0;
       $1900 = ((($args)) + 1|0);
       $1901 = $1897 ? $1900 : $1899;
       $1902 = ((($args)) + 4|0);
       $1903 = HEAP32[$1902>>2]|0;
       $1904 = $1895&255;
       $1905 = $1904 >>> 1;
       $1906 = $1897 ? $1905 : $1903;
       __THREW__ = 0;
       (invoke_iiii(91,($1894|0),($1901|0),($1906|0))|0);
       $1907 = __THREW__; __THREW__ = 0;
       $1908 = $1907&1;
       do {
        if ($1908) {
         label = 563;
        } else {
         $1909 = HEAP32[$1790>>2]|0;
         $1910 = ((($1909)) + -24|0);
         $1911 = HEAP32[$1802>>2]|0;
         HEAP32[$45>>2] = $1911;
         __THREW__ = 0;
         invoke_viii(103,($44|0),($1910|0),($45|0));
         $1912 = __THREW__; __THREW__ = 0;
         $1913 = $1912&1;
         if ($1913) {
          label = 563;
         } else {
          $1914 = HEAP32[$1804>>2]|0;
          $1915 = HEAP32[$1806>>2]|0;
          $1916 = ($1914>>>0)<($1915>>>0);
          $1917 = $1915;
          if ($1916) {
           $1918 = ((($44)) + 12|0);
           $1919 = ((($1914)) + 4|0);
           $1920 = HEAP32[$1918>>2]|0;
           $1921 = ((($1914)) + 12|0);
           HEAP32[$1921>>2] = $1920;
           $1922 = HEAP32[$44>>2]|0;
           HEAP32[$1914>>2] = $1922;
           $1923 = ((($44)) + 4|0);
           $1924 = HEAP32[$1923>>2]|0;
           HEAP32[$1919>>2] = $1924;
           $1925 = ((($44)) + 8|0);
           $1926 = HEAP32[$1925>>2]|0;
           $1927 = ((($1914)) + 8|0);
           HEAP32[$1927>>2] = $1926;
           HEAP32[$1925>>2] = 0;
           HEAP32[$1923>>2] = 0;
           HEAP32[$44>>2] = 0;
           $1928 = HEAP32[$1804>>2]|0;
           $1929 = ((($1928)) + 16|0);
           HEAP32[$1804>>2] = $1929;
          } else {
           $1930 = $1914;
           $1931 = ((($db)) + 28|0);
           $1932 = HEAP32[$1801>>2]|0;
           $1933 = (($1930) - ($1932))|0;
           $1934 = $1933 >> 4;
           $1935 = (($1934) + 1)|0;
           $1936 = ($1933|0)<(-16);
           if ($1936) {
            __THREW__ = 0;
            invoke_vi(102,($1801|0));
            $1937 = __THREW__; __THREW__ = 0;
            $1938 = ___cxa_find_matching_catch_2()|0;
            $1939 = tempRet0;
            __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($44);
            $$011 = $1938;$$022 = $1939;
            break;
           }
           $1940 = (($1917) - ($1932))|0;
           $1941 = $1940 >> 4;
           $1942 = ($1941>>>0)<(1073741823);
           if ($1942) {
            $1943 = $1940 >> 3;
            $1944 = ($1943>>>0)<($1935>>>0);
            $1945 = $1944 ? $1935 : $1943;
            $$0$i$i$i167 = $1945;
           } else {
            $$0$i$i$i167 = 2147483647;
           }
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i166,$$0$i$i$i167,$1934,$1931);
           $1946 = ((($__v$i$i166)) + 8|0);
           $1947 = HEAP32[$1946>>2]|0;
           $1948 = ((($44)) + 12|0);
           $1949 = ((($1947)) + 4|0);
           $1950 = HEAP32[$1948>>2]|0;
           $1951 = ((($1947)) + 12|0);
           HEAP32[$1951>>2] = $1950;
           $1952 = HEAP32[$44>>2]|0;
           HEAP32[$1947>>2] = $1952;
           $1953 = ((($44)) + 4|0);
           $1954 = HEAP32[$1953>>2]|0;
           HEAP32[$1949>>2] = $1954;
           $1955 = ((($44)) + 8|0);
           $1956 = HEAP32[$1955>>2]|0;
           $1957 = ((($1947)) + 8|0);
           HEAP32[$1957>>2] = $1956;
           HEAP32[$1955>>2] = 0;
           HEAP32[$1953>>2] = 0;
           HEAP32[$44>>2] = 0;
           $1958 = ((($1947)) + 16|0);
           HEAP32[$1946>>2] = $1958;
           __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($1801,$__v$i$i166);
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i166);
          }
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($44);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
          $$5 = $1885;
          break L1;
         }
        }
       } while(0);
       if ((label|0) == 563) {
        $1959 = ___cxa_find_matching_catch_2()|0;
        $1960 = tempRet0;
        $$011 = $1959;$$022 = $1960;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
       $$1021 = $$011;$$1032 = $$022;
       break L77;
      }
      else if ((label|0) == 536) {
       $1855 = ___cxa_find_matching_catch_2()|0;
       $1856 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa671);
       ___resumeException($1855|0);
       // unreachable;
      }
      else if ((label|0) == 539) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa668);
       // unreachable;
      }
      else if ((label|0) == 544) {
       $1879 = ___cxa_find_matching_catch_2()|0;
       $1880 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa673);
       $eh$lpad$body$i$i158$index29Z2D = $1880;$eh$lpad$body$i$i158$indexZ2D = $1879;
      }
      else if ((label|0) == 545) {
       $1881 = ___cxa_find_matching_catch_2()|0;
       $1882 = tempRet0;
       $eh$lpad$body$i$i158$index29Z2D = $1882;$eh$lpad$body$i$i158$indexZ2D = $1881;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i153);
      ___resumeException($eh$lpad$body$i$i158$indexZ2D|0);
      // unreachable;
      break;
     }
     case 85:  {
      $1961 = ((($first)) + 1|0);
      $1962 = ($1961|0)==($last|0);
      if ($1962) {
       $$5 = $first;
       break L1;
      }
      $1963 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($1961,$last,$db)|0);
      $1964 = ($1963|0)==($1961|0);
      if ($1964) {
       $$5 = $first;
       break L1;
      }
      $1965 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1963,$last,$db)|0);
      $1966 = ($1965|0)==($1963|0);
      if ($1966) {
       $$5 = $first;
       break L1;
      }
      $1967 = ((($db)) + 4|0);
      $1968 = HEAP32[$1967>>2]|0;
      $1969 = HEAP32[$db>>2]|0;
      $1970 = (($1968) - ($1969))|0;
      $1971 = (($1970|0) / 24)&-1;
      $1972 = ($1971>>>0)<(2);
      if ($1972) {
       $$5 = $first;
       break L1;
      }
      $1973 = $1968;
      $1974 = ((($1973)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($type,$1974);
      $1975 = HEAP32[$1967>>2]|0;
      $1976 = ((($1975)) + -24|0);
      $1977 = $1975;
      while(1) {
       $1978 = ($1977|0)==($1976|0);
       if ($1978) {
        break;
       }
       $1979 = ((($1977)) + -24|0);
       HEAP32[$1967>>2] = $1979;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1979);
       $$pre$i176 = HEAP32[$1967>>2]|0;
       $1977 = $$pre$i176;
      }
      $1980 = ((($1975)) + -48|0);
      $1981 = HEAP8[$1980>>0]|0;
      $1982 = $1981 & 1;
      $1983 = ($1982<<24>>24)==(0);
      $1984 = ((($1975)) + -44|0);
      $1985 = HEAP32[$1984>>2]|0;
      $1986 = $1981&255;
      $1987 = $1986 >>> 1;
      $1988 = $1983 ? $1987 : $1985;
      $1989 = ((($1975)) + -40|0);
      $1990 = HEAP32[$1989>>2]|0;
      $1991 = ((($1980)) + 1|0);
      $1992 = $1983 ? $1991 : $1990;
      $1993 = ($1988>>>0)<(9);
      $1994 = $1993 ? $1988 : 9;
      __THREW__ = 0;
      invoke_viii(101,($46|0),($1992|0),($1994|0));
      $1995 = __THREW__; __THREW__ = 0;
      $1996 = $1995&1;
      L757: do {
       if ($1996) {
        label = 581;
       } else {
        $1997 = HEAP8[$46>>0]|0;
        $1998 = $1997 & 1;
        $1999 = ($1998<<24>>24)==(0);
        $2000 = ((($46)) + 4|0);
        $2001 = HEAP32[$2000>>2]|0;
        $2002 = $1997&255;
        $2003 = $2002 >>> 1;
        $2004 = $1999 ? $2003 : $2001;
        $2005 = ((($46)) + 8|0);
        $2006 = HEAP32[$2005>>2]|0;
        $2007 = ((($46)) + 1|0);
        $2008 = $1999 ? $2007 : $2006;
        $2009 = ($2004>>>0)>(9);
        $2010 = $2009 ? 9 : $2004;
        $2011 = (_memcmp($2008,6338,$2010)|0);
        $2012 = ($2011|0)==(0);
        $2013 = ($2004>>>0)<(9);
        $$$i$i$i$i180 = $2009&1;
        $$$$i$i$i$i181 = $2013 ? -1 : $$$i$i$i$i180;
        $2014 = $2012 ? $$$$i$i$i$i181 : $2011;
        $2015 = ($2014|0)==(0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($46);
        L759: do {
         if ($2015) {
          $2047 = HEAP32[$1967>>2]|0;
          $2048 = ((($2047)) + -24|0);
          __THREW__ = 0;
          invoke_vii(96,($proto|0),($2048|0));
          $2049 = __THREW__; __THREW__ = 0;
          $2050 = $2049&1;
          if ($2050) {
           label = 581;
           break L757;
          }
          $2051 = HEAP32[$1967>>2]|0;
          $2052 = ((($2051)) + -24|0);
          $2053 = $2051;
          while(1) {
           $2054 = ($2053|0)==($2052|0);
           if ($2054) {
            break;
           }
           $2055 = ((($2053)) + -24|0);
           HEAP32[$1967>>2] = $2055;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2055);
           $$pre$i184 = HEAP32[$1967>>2]|0;
           $2053 = $$pre$i184;
          }
          $2056 = HEAP8[$proto>>0]|0;
          $2057 = $2056 & 1;
          $2058 = ($2057<<24>>24)==(0);
          $2059 = ((($proto)) + 8|0);
          $2060 = HEAP32[$2059>>2]|0;
          $2061 = ((($proto)) + 1|0);
          $2062 = $2058 ? $2061 : $2060;
          $2063 = ((($2062)) + 9|0);
          $2064 = ((($proto)) + 4|0);
          $2065 = HEAP32[$2064>>2]|0;
          $2066 = $2056&255;
          $2067 = $2066 >>> 1;
          $2068 = $2058 ? $2067 : $2065;
          $2069 = (($2062) + ($2068)|0);
          __THREW__ = 0;
          $2070 = (invoke_iiii(105,($2063|0),($2069|0),($db|0))|0);
          $2071 = __THREW__; __THREW__ = 0;
          $2072 = $2071&1;
          L766: do {
           if ($2072) {
            label = 602;
           } else {
            $2073 = HEAP8[$proto>>0]|0;
            $2074 = $2073 & 1;
            $2075 = ($2074<<24>>24)==(0);
            $2076 = HEAP32[$2059>>2]|0;
            $2077 = $2075 ? $2061 : $2076;
            $2078 = ((($2077)) + 9|0);
            $2079 = ($2070|0)==($2078|0);
            L768: do {
             if ($2079) {
              __THREW__ = 0;
              invoke_viii(104,($58|0),($type|0),(6150|0));
              $2118 = __THREW__; __THREW__ = 0;
              $2119 = $2118&1;
              if ($2119) {
               label = 602;
               break L766;
              }
              $2120 = HEAP8[$proto>>0]|0;
              $2121 = $2120 & 1;
              $2122 = ($2121<<24>>24)==(0);
              $2123 = HEAP32[$2059>>2]|0;
              $2124 = $2122 ? $2061 : $2123;
              $2125 = HEAP32[$2064>>2]|0;
              $2126 = $2120&255;
              $2127 = $2126 >>> 1;
              $2128 = $2122 ? $2127 : $2125;
              __THREW__ = 0;
              $2129 = (invoke_iiii(91,($58|0),($2124|0),($2128|0))|0);
              $2130 = __THREW__; __THREW__ = 0;
              $2131 = $2130&1;
              do {
               if ($2131) {
                $2160 = ___cxa_find_matching_catch_2()|0;
                $2161 = tempRet0;
                $$617 = $2160;$$628 = $2161;
               } else {
                ;HEAP32[$57>>2]=HEAP32[$2129>>2]|0;HEAP32[$57+4>>2]=HEAP32[$2129+4>>2]|0;HEAP32[$57+8>>2]=HEAP32[$2129+8>>2]|0;
                $__i$0$i$i$i196 = 0;
                while(1) {
                 $exitcond$i$i$i197 = ($__i$0$i$i$i196|0)==(3);
                 if ($exitcond$i$i$i197) {
                  break;
                 }
                 $2132 = (($2129) + ($__i$0$i$i$i196<<2)|0);
                 HEAP32[$2132>>2] = 0;
                 $2133 = (($__i$0$i$i$i196) + 1)|0;
                 $__i$0$i$i$i196 = $2133;
                }
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($56,$57);
                $2134 = HEAP32[$1967>>2]|0;
                $2135 = ((($db)) + 8|0);
                $2136 = HEAP32[$2135>>2]|0;
                $2137 = ($2134>>>0)<($2136>>>0);
                $2138 = $2136;
                if ($2137) {
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2134,$56);
                 $2139 = HEAP32[$1967>>2]|0;
                 $2140 = ((($2139)) + 24|0);
                 HEAP32[$1967>>2] = $2140;
                } else {
                 $2141 = $2134;
                 $2142 = ((($db)) + 12|0);
                 $2143 = HEAP32[$db>>2]|0;
                 $2144 = (($2141) - ($2143))|0;
                 $2145 = (($2144|0) / 24)&-1;
                 $2146 = (($2145) + 1)|0;
                 $2147 = ($2144|0)<(-24);
                 if ($2147) {
                  __THREW__ = 0;
                  invoke_vi(102,($db|0));
                  $2148 = __THREW__; __THREW__ = 0;
                  $2149 = ___cxa_find_matching_catch_2()|0;
                  $2150 = tempRet0;
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($56);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($57);
                  $$617 = $2149;$$628 = $2150;
                  break;
                 }
                 $2151 = (($2138) - ($2143))|0;
                 $2152 = (($2151|0) / 24)&-1;
                 $2153 = ($2152>>>0)<(1073741823);
                 if ($2153) {
                  $2154 = $2152 << 1;
                  $2155 = ($2154>>>0)<($2146>>>0);
                  $2156 = $2155 ? $2146 : $2154;
                  $$0$i$i$i200 = $2156;
                 } else {
                  $$0$i$i$i200 = 2147483647;
                 }
                 __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i199,$$0$i$i$i200,$2145,$2142);
                 $2157 = ((($__v$i$i199)) + 8|0);
                 $2158 = HEAP32[$2157>>2]|0;
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2158,$56);
                 $2159 = ((($2158)) + 24|0);
                 HEAP32[$2157>>2] = $2159;
                 __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i199);
                 __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i199);
                }
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($56);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($57);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($58);
                break L768;
               }
              } while(0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($58);
              $$718 = $$617;$$729 = $$628;
              break L766;
             } else {
              $2080 = HEAP32[$1967>>2]|0;
              $2081 = ((($2080)) + -24|0);
              __THREW__ = 0;
              invoke_viii(104,($54|0),($type|0),(5691|0));
              $2082 = __THREW__; __THREW__ = 0;
              $2083 = $2082&1;
              if ($2083) {
               label = 602;
               break L766;
              }
              $2084 = HEAP32[$1967>>2]|0;
              $2085 = ((($2084)) + -24|0);
              __THREW__ = 0;
              invoke_vii(96,($55|0),($2085|0));
              $2086 = __THREW__; __THREW__ = 0;
              $2087 = $2086&1;
              if ($2087) {
               $2112 = ___cxa_find_matching_catch_2()|0;
               $2113 = tempRet0;
               $$516 = $2112;$$527 = $2113;
              } else {
               $2088 = HEAP8[$55>>0]|0;
               $2089 = $2088 & 1;
               $2090 = ($2089<<24>>24)==(0);
               $2091 = ((($55)) + 8|0);
               $2092 = HEAP32[$2091>>2]|0;
               $2093 = ((($55)) + 1|0);
               $2094 = $2090 ? $2093 : $2092;
               $2095 = ((($55)) + 4|0);
               $2096 = HEAP32[$2095>>2]|0;
               $2097 = $2088&255;
               $2098 = $2097 >>> 1;
               $2099 = $2090 ? $2098 : $2096;
               __THREW__ = 0;
               $2100 = (invoke_iiii(91,($54|0),($2094|0),($2099|0))|0);
               $2101 = __THREW__; __THREW__ = 0;
               $2102 = $2101&1;
               do {
                if ($2102) {
                 $2114 = ___cxa_find_matching_catch_2()|0;
                 $2115 = tempRet0;
                 $$415 = $2114;$$426 = $2115;
                } else {
                 ;HEAP32[$53>>2]=HEAP32[$2100>>2]|0;HEAP32[$53+4>>2]=HEAP32[$2100+4>>2]|0;HEAP32[$53+8>>2]=HEAP32[$2100+8>>2]|0;
                 $__i$0$i$i$i189 = 0;
                 while(1) {
                  $exitcond$i$i$i190 = ($__i$0$i$i$i189|0)==(3);
                  if ($exitcond$i$i$i190) {
                   break;
                  }
                  $2103 = (($2100) + ($__i$0$i$i$i189<<2)|0);
                  HEAP32[$2103>>2] = 0;
                  $2104 = (($__i$0$i$i$i189) + 1)|0;
                  $__i$0$i$i$i189 = $2104;
                 }
                 __THREW__ = 0;
                 $2105 = (invoke_iii(93,($53|0),(5106|0))|0);
                 $2106 = __THREW__; __THREW__ = 0;
                 $2107 = $2106&1;
                 if ($2107) {
                  $2116 = ___cxa_find_matching_catch_2()|0;
                  $2117 = tempRet0;
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($53);
                  $$415 = $2116;$$426 = $2117;
                  break;
                 }
                 ;HEAP32[$52>>2]=HEAP32[$2105>>2]|0;HEAP32[$52+4>>2]=HEAP32[$2105+4>>2]|0;HEAP32[$52+8>>2]=HEAP32[$2105+8>>2]|0;
                 $__i$0$i$i$i193 = 0;
                 while(1) {
                  $exitcond$i$i$i194 = ($__i$0$i$i$i193|0)==(3);
                  if ($exitcond$i$i$i194) {
                   break;
                  }
                  $2108 = (($2105) + ($__i$0$i$i$i193<<2)|0);
                  HEAP32[$2108>>2] = 0;
                  $2109 = (($__i$0$i$i$i193) + 1)|0;
                  $__i$0$i$i$i193 = $2109;
                 }
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($51,$52);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2081,$51);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($51);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($52);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($53);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($55);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($54);
                 break L768;
                }
               } while(0);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($55);
               $$516 = $$415;$$527 = $$426;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($54);
              $$718 = $$516;$$729 = $$527;
              break L766;
             }
            } while(0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($proto);
            break L759;
           }
          } while(0);
          if ((label|0) == 602) {
           $2110 = ___cxa_find_matching_catch_2()|0;
           $2111 = tempRet0;
           $$718 = $2110;$$729 = $2111;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($proto);
          $$819 = $$718;$$830 = $$729;
          break L757;
         } else {
          $2016 = HEAP32[$1967>>2]|0;
          $2017 = ((($2016)) + -24|0);
          __THREW__ = 0;
          invoke_viii(104,($49|0),($type|0),(6150|0));
          $2018 = __THREW__; __THREW__ = 0;
          $2019 = $2018&1;
          if ($2019) {
           label = 581;
           break L757;
          }
          $2020 = HEAP32[$1967>>2]|0;
          $2021 = ((($2020)) + -24|0);
          __THREW__ = 0;
          invoke_vii(96,($50|0),($2021|0));
          $2022 = __THREW__; __THREW__ = 0;
          $2023 = $2022&1;
          do {
           if ($2023) {
            $2043 = ___cxa_find_matching_catch_2()|0;
            $2044 = tempRet0;
            $$213 = $2043;$$224 = $2044;
           } else {
            $2024 = HEAP8[$50>>0]|0;
            $2025 = $2024 & 1;
            $2026 = ($2025<<24>>24)==(0);
            $2027 = ((($50)) + 8|0);
            $2028 = HEAP32[$2027>>2]|0;
            $2029 = ((($50)) + 1|0);
            $2030 = $2026 ? $2029 : $2028;
            $2031 = ((($50)) + 4|0);
            $2032 = HEAP32[$2031>>2]|0;
            $2033 = $2024&255;
            $2034 = $2033 >>> 1;
            $2035 = $2026 ? $2034 : $2032;
            __THREW__ = 0;
            $2036 = (invoke_iiii(91,($49|0),($2030|0),($2035|0))|0);
            $2037 = __THREW__; __THREW__ = 0;
            $2038 = $2037&1;
            if ($2038) {
             $2045 = ___cxa_find_matching_catch_2()|0;
             $2046 = tempRet0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($50);
             $$213 = $2045;$$224 = $2046;
             break;
            }
            ;HEAP32[$48>>2]=HEAP32[$2036>>2]|0;HEAP32[$48+4>>2]=HEAP32[$2036+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$2036+8>>2]|0;
            $__i$0$i$i$i = 0;
            while(1) {
             $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
             if ($exitcond$i$i$i) {
              break;
             }
             $2039 = (($2036) + ($__i$0$i$i$i<<2)|0);
             HEAP32[$2039>>2] = 0;
             $2040 = (($__i$0$i$i$i) + 1)|0;
             $__i$0$i$i$i = $2040;
            }
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($47,$48);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2017,$47);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($47);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($48);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($50);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($49);
            break L759;
           }
          } while(0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($49);
          $$819 = $$213;$$830 = $$224;
          break L757;
         }
        } while(0);
        $2162 = HEAP32[$1967>>2]|0;
        $2163 = ((($2162)) + -24|0);
        $2164 = ((($db)) + 12|0);
        $2165 = HEAP32[$2164>>2]|0;
        HEAP32[$60>>2] = $2165;
        __THREW__ = 0;
        invoke_viii(103,($59|0),($2163|0),($60|0));
        $2166 = __THREW__; __THREW__ = 0;
        $2167 = $2166&1;
        if ($2167) {
         label = 581;
        } else {
         $2168 = ((($db)) + 16|0);
         $2169 = ((($db)) + 20|0);
         $2170 = HEAP32[$2169>>2]|0;
         $2171 = ((($db)) + 24|0);
         $2172 = HEAP32[$2171>>2]|0;
         $2173 = ($2170>>>0)<($2172>>>0);
         $2174 = $2172;
         if ($2173) {
          $2175 = ((($59)) + 12|0);
          $2176 = ((($2170)) + 4|0);
          $2177 = HEAP32[$2175>>2]|0;
          $2178 = ((($2170)) + 12|0);
          HEAP32[$2178>>2] = $2177;
          $2179 = HEAP32[$59>>2]|0;
          HEAP32[$2170>>2] = $2179;
          $2180 = ((($59)) + 4|0);
          $2181 = HEAP32[$2180>>2]|0;
          HEAP32[$2176>>2] = $2181;
          $2182 = ((($59)) + 8|0);
          $2183 = HEAP32[$2182>>2]|0;
          $2184 = ((($2170)) + 8|0);
          HEAP32[$2184>>2] = $2183;
          HEAP32[$2182>>2] = 0;
          HEAP32[$2180>>2] = 0;
          HEAP32[$59>>2] = 0;
          $2185 = HEAP32[$2169>>2]|0;
          $2186 = ((($2185)) + 16|0);
          HEAP32[$2169>>2] = $2186;
         } else {
          $2187 = $2170;
          $2188 = ((($db)) + 28|0);
          $2189 = HEAP32[$2168>>2]|0;
          $2190 = (($2187) - ($2189))|0;
          $2191 = $2190 >> 4;
          $2192 = (($2191) + 1)|0;
          $2193 = ($2190|0)<(-16);
          if ($2193) {
           __THREW__ = 0;
           invoke_vi(102,($2168|0));
           $2194 = __THREW__; __THREW__ = 0;
           $2195 = ___cxa_find_matching_catch_2()|0;
           $2196 = tempRet0;
           __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($59);
           $$819 = $2195;$$830 = $2196;
           break;
          }
          $2197 = (($2174) - ($2189))|0;
          $2198 = $2197 >> 4;
          $2199 = ($2198>>>0)<(1073741823);
          if ($2199) {
           $2200 = $2197 >> 3;
           $2201 = ($2200>>>0)<($2192>>>0);
           $2202 = $2201 ? $2192 : $2200;
           $$0$i$i$i172 = $2202;
          } else {
           $$0$i$i$i172 = 2147483647;
          }
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i171,$$0$i$i$i172,$2191,$2188);
          $2203 = ((($__v$i$i171)) + 8|0);
          $2204 = HEAP32[$2203>>2]|0;
          $2205 = ((($59)) + 12|0);
          $2206 = ((($2204)) + 4|0);
          $2207 = HEAP32[$2205>>2]|0;
          $2208 = ((($2204)) + 12|0);
          HEAP32[$2208>>2] = $2207;
          $2209 = HEAP32[$59>>2]|0;
          HEAP32[$2204>>2] = $2209;
          $2210 = ((($59)) + 4|0);
          $2211 = HEAP32[$2210>>2]|0;
          HEAP32[$2206>>2] = $2211;
          $2212 = ((($59)) + 8|0);
          $2213 = HEAP32[$2212>>2]|0;
          $2214 = ((($2204)) + 8|0);
          HEAP32[$2214>>2] = $2213;
          HEAP32[$2212>>2] = 0;
          HEAP32[$2210>>2] = 0;
          HEAP32[$59>>2] = 0;
          $2215 = ((($2204)) + 16|0);
          HEAP32[$2203>>2] = $2215;
          __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2168,$__v$i$i171);
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i171);
         }
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($59);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($type);
         $$5 = $1965;
         break L1;
        }
       }
      } while(0);
      if ((label|0) == 581) {
       $2041 = ___cxa_find_matching_catch_2()|0;
       $2042 = tempRet0;
       $$819 = $2041;$$830 = $2042;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($type);
      $$1021 = $$819;$$1032 = $$830;
      break;
     }
     case 83:  {
      $2216 = ((($first)) + 1|0);
      $2217 = ($2216|0)==($last|0);
      if (!($2217)) {
       $2218 = HEAP8[$2216>>0]|0;
       $2219 = ($2218<<24>>24)==(116);
       if ($2219) {
        $2220 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
        $2221 = ($2220|0)==($first|0);
        if ($2221) {
         $$5 = $first;
         break L1;
        }
        $2222 = HEAP32[$db>>2]|0;
        $2223 = ((($db)) + 4|0);
        $2224 = HEAP32[$2223>>2]|0;
        $2225 = ($2222|0)==($2224|0);
        if ($2225) {
         $$5 = $first;
         break L1;
        }
        $2226 = ((($db)) + 16|0);
        $2227 = ((($2224)) + -24|0);
        $2228 = ((($db)) + 12|0);
        $2229 = HEAP32[$2228>>2]|0;
        HEAP32[$62>>2] = $2229;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($61,$2227,$62);
        $2230 = ((($db)) + 20|0);
        $2231 = HEAP32[$2230>>2]|0;
        $2232 = ((($db)) + 24|0);
        $2233 = HEAP32[$2232>>2]|0;
        $2234 = ($2231>>>0)<($2233>>>0);
        $2235 = $2233;
        if ($2234) {
         $2236 = ((($61)) + 12|0);
         $2237 = ((($2231)) + 4|0);
         $2238 = HEAP32[$2236>>2]|0;
         $2239 = ((($2231)) + 12|0);
         HEAP32[$2239>>2] = $2238;
         $2240 = HEAP32[$61>>2]|0;
         HEAP32[$2231>>2] = $2240;
         $2241 = ((($61)) + 4|0);
         $2242 = HEAP32[$2241>>2]|0;
         HEAP32[$2237>>2] = $2242;
         $2243 = ((($61)) + 8|0);
         $2244 = HEAP32[$2243>>2]|0;
         $2245 = ((($2231)) + 8|0);
         HEAP32[$2245>>2] = $2244;
         HEAP32[$2243>>2] = 0;
         HEAP32[$2241>>2] = 0;
         HEAP32[$61>>2] = 0;
         $2246 = HEAP32[$2230>>2]|0;
         $2247 = ((($2246)) + 16|0);
         HEAP32[$2230>>2] = $2247;
        } else {
         $2248 = $2231;
         $2249 = ((($db)) + 28|0);
         $2250 = HEAP32[$2226>>2]|0;
         $2251 = (($2248) - ($2250))|0;
         $2252 = $2251 >> 4;
         $2253 = (($2252) + 1)|0;
         $2254 = ($2251|0)<(-16);
         if ($2254) {
          __THREW__ = 0;
          invoke_vi(102,($2226|0));
          $2255 = __THREW__; __THREW__ = 0;
          $2256 = ___cxa_find_matching_catch_2()|0;
          $2257 = tempRet0;
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($61);
          $$1021 = $2256;$$1032 = $2257;
          break L77;
         }
         $2258 = (($2235) - ($2250))|0;
         $2259 = $2258 >> 4;
         $2260 = ($2259>>>0)<(1073741823);
         if ($2260) {
          $2261 = $2258 >> 3;
          $2262 = ($2261>>>0)<($2253>>>0);
          $2263 = $2262 ? $2253 : $2261;
          $$0$i$i$i70 = $2263;
         } else {
          $$0$i$i$i70 = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i69,$$0$i$i$i70,$2252,$2249);
         $2264 = ((($__v$i$i69)) + 8|0);
         $2265 = HEAP32[$2264>>2]|0;
         $2266 = ((($61)) + 12|0);
         $2267 = ((($2265)) + 4|0);
         $2268 = HEAP32[$2266>>2]|0;
         $2269 = ((($2265)) + 12|0);
         HEAP32[$2269>>2] = $2268;
         $2270 = HEAP32[$61>>2]|0;
         HEAP32[$2265>>2] = $2270;
         $2271 = ((($61)) + 4|0);
         $2272 = HEAP32[$2271>>2]|0;
         HEAP32[$2267>>2] = $2272;
         $2273 = ((($61)) + 8|0);
         $2274 = HEAP32[$2273>>2]|0;
         $2275 = ((($2265)) + 8|0);
         HEAP32[$2275>>2] = $2274;
         HEAP32[$2273>>2] = 0;
         HEAP32[$2271>>2] = 0;
         HEAP32[$61>>2] = 0;
         $2276 = ((($2265)) + 16|0);
         HEAP32[$2264>>2] = $2276;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2226,$__v$i$i69);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i69);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($61);
        $$5 = $2220;
        break L1;
       }
      }
      $2277 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
      $2278 = ($2277|0)==($first|0);
      if ($2278) {
       $$5 = $first;
       break L1;
      }
      $2279 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($2277,$last,$db)|0);
      $2280 = ($2279|0)==($2277|0);
      if ($2280) {
       $$5 = $2277;
       break L1;
      }
      $2281 = ((($db)) + 4|0);
      $2282 = HEAP32[$2281>>2]|0;
      $2283 = HEAP32[$db>>2]|0;
      $2284 = (($2282) - ($2283))|0;
      $2285 = (($2284|0) / 24)&-1;
      $2286 = ($2285>>>0)<(2);
      if ($2286) {
       $$5 = $2277;
       break L1;
      }
      $2287 = $2282;
      $2288 = ((($2287)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($template_args,$2288);
      $2289 = HEAP32[$2281>>2]|0;
      $2290 = ((($2289)) + -24|0);
      $2291 = $2289;
      while(1) {
       $2292 = ($2291|0)==($2290|0);
       if ($2292) {
        break;
       }
       $2293 = ((($2291)) + -24|0);
       HEAP32[$2281>>2] = $2293;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2293);
       $$pre$i = HEAP32[$2281>>2]|0;
       $2291 = $$pre$i;
      }
      $2294 = ((($2289)) + -48|0);
      $2295 = HEAP8[$template_args>>0]|0;
      $2296 = $2295 & 1;
      $2297 = ($2296<<24>>24)==(0);
      $2298 = ((($template_args)) + 8|0);
      $2299 = HEAP32[$2298>>2]|0;
      $2300 = ((($template_args)) + 1|0);
      $2301 = $2297 ? $2300 : $2299;
      $2302 = ((($template_args)) + 4|0);
      $2303 = HEAP32[$2302>>2]|0;
      $2304 = $2295&255;
      $2305 = $2304 >>> 1;
      $2306 = $2297 ? $2305 : $2303;
      __THREW__ = 0;
      (invoke_iiii(91,($2294|0),($2301|0),($2306|0))|0);
      $2307 = __THREW__; __THREW__ = 0;
      $2308 = $2307&1;
      do {
       if ($2308) {
        label = 663;
       } else {
        $2309 = HEAP32[$2281>>2]|0;
        $2310 = ((($2309)) + -24|0);
        $2311 = ((($db)) + 12|0);
        $2312 = HEAP32[$2311>>2]|0;
        HEAP32[$64>>2] = $2312;
        __THREW__ = 0;
        invoke_viii(103,($63|0),($2310|0),($64|0));
        $2313 = __THREW__; __THREW__ = 0;
        $2314 = $2313&1;
        if ($2314) {
         label = 663;
        } else {
         $2315 = ((($db)) + 16|0);
         $2316 = ((($db)) + 20|0);
         $2317 = HEAP32[$2316>>2]|0;
         $2318 = ((($db)) + 24|0);
         $2319 = HEAP32[$2318>>2]|0;
         $2320 = ($2317>>>0)<($2319>>>0);
         $2321 = $2319;
         if ($2320) {
          $2322 = ((($63)) + 12|0);
          $2323 = ((($2317)) + 4|0);
          $2324 = HEAP32[$2322>>2]|0;
          $2325 = ((($2317)) + 12|0);
          HEAP32[$2325>>2] = $2324;
          $2326 = HEAP32[$63>>2]|0;
          HEAP32[$2317>>2] = $2326;
          $2327 = ((($63)) + 4|0);
          $2328 = HEAP32[$2327>>2]|0;
          HEAP32[$2323>>2] = $2328;
          $2329 = ((($63)) + 8|0);
          $2330 = HEAP32[$2329>>2]|0;
          $2331 = ((($2317)) + 8|0);
          HEAP32[$2331>>2] = $2330;
          HEAP32[$2329>>2] = 0;
          HEAP32[$2327>>2] = 0;
          HEAP32[$63>>2] = 0;
          $2332 = HEAP32[$2316>>2]|0;
          $2333 = ((($2332)) + 16|0);
          HEAP32[$2316>>2] = $2333;
         } else {
          $2334 = $2317;
          $2335 = ((($db)) + 28|0);
          $2336 = HEAP32[$2315>>2]|0;
          $2337 = (($2334) - ($2336))|0;
          $2338 = $2337 >> 4;
          $2339 = (($2338) + 1)|0;
          $2340 = ($2337|0)<(-16);
          if ($2340) {
           __THREW__ = 0;
           invoke_vi(102,($2315|0));
           $2341 = __THREW__; __THREW__ = 0;
           $2342 = ___cxa_find_matching_catch_2()|0;
           $2343 = tempRet0;
           __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($63);
           $$920 = $2342;$$931 = $2343;
           break;
          }
          $2344 = (($2321) - ($2336))|0;
          $2345 = $2344 >> 4;
          $2346 = ($2345>>>0)<(1073741823);
          if ($2346) {
           $2347 = $2344 >> 3;
           $2348 = ($2347>>>0)<($2339>>>0);
           $2349 = $2348 ? $2339 : $2347;
           $$0$i$i$i50 = $2349;
          } else {
           $$0$i$i$i50 = 2147483647;
          }
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i49,$$0$i$i$i50,$2338,$2335);
          $2350 = ((($__v$i$i49)) + 8|0);
          $2351 = HEAP32[$2350>>2]|0;
          $2352 = ((($63)) + 12|0);
          $2353 = ((($2351)) + 4|0);
          $2354 = HEAP32[$2352>>2]|0;
          $2355 = ((($2351)) + 12|0);
          HEAP32[$2355>>2] = $2354;
          $2356 = HEAP32[$63>>2]|0;
          HEAP32[$2351>>2] = $2356;
          $2357 = ((($63)) + 4|0);
          $2358 = HEAP32[$2357>>2]|0;
          HEAP32[$2353>>2] = $2358;
          $2359 = ((($63)) + 8|0);
          $2360 = HEAP32[$2359>>2]|0;
          $2361 = ((($2351)) + 8|0);
          HEAP32[$2361>>2] = $2360;
          HEAP32[$2359>>2] = 0;
          HEAP32[$2357>>2] = 0;
          HEAP32[$63>>2] = 0;
          $2362 = ((($2351)) + 16|0);
          HEAP32[$2350>>2] = $2362;
          __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2315,$__v$i$i49);
          __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i49);
         }
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($63);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($template_args);
         $$5 = $2279;
         break L1;
        }
       }
      } while(0);
      if ((label|0) == 663) {
       $2363 = ___cxa_find_matching_catch_2()|0;
       $2364 = tempRet0;
       $$920 = $2363;$$931 = $2364;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($template_args);
      $$1021 = $$920;$$1032 = $$931;
      break;
     }
     case 68:  {
      $2365 = ((($first)) + 1|0);
      $2366 = ($2365|0)==($last|0);
      if ($2366) {
       label = 800;
      } else {
       $2367 = HEAP8[$2365>>0]|0;
       $2368 = $2367 << 24 >> 24;
       switch ($2368|0) {
       case 112:  {
        $2369 = ((($db)) + 4|0);
        $2370 = HEAP32[$2369>>2]|0;
        $2371 = HEAP32[$db>>2]|0;
        $2372 = (($2370) - ($2371))|0;
        $2373 = (($2372|0) / 24)&-1;
        $2374 = ((($first)) + 2|0);
        $2375 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2374,$last,$db)|0);
        $2376 = HEAP32[$2369>>2]|0;
        $2377 = HEAP32[$db>>2]|0;
        $2378 = (($2376) - ($2377))|0;
        $2379 = (($2378|0) / 24)&-1;
        $2380 = ($2375|0)==($2374|0);
        if ($2380) {
         label = 800;
         break L77;
        }
        $2381 = ((($db)) + 16|0);
        $2382 = ((($db)) + 12|0);
        $2383 = HEAP32[$2382>>2]|0;
        $2384 = ((($db)) + 20|0);
        $2385 = HEAP32[$2384>>2]|0;
        $2386 = ((($db)) + 24|0);
        $2387 = HEAP32[$2386>>2]|0;
        $2388 = ($2385>>>0)<($2387>>>0);
        $2389 = $2387;
        if ($2388) {
         HEAP32[$2385>>2] = 0;
         $2390 = ((($2385)) + 4|0);
         HEAP32[$2390>>2] = 0;
         $2391 = ((($2385)) + 8|0);
         HEAP32[$2391>>2] = 0;
         $2392 = ((($2385)) + 12|0);
         HEAP32[$2392>>2] = $2383;
         $2393 = HEAP32[$2384>>2]|0;
         $2394 = ((($2393)) + 16|0);
         HEAP32[$2384>>2] = $2394;
        } else {
         $2395 = $2385;
         $2396 = ((($db)) + 28|0);
         $2397 = HEAP32[$2381>>2]|0;
         $2398 = (($2395) - ($2397))|0;
         $2399 = $2398 >> 4;
         $2400 = (($2399) + 1)|0;
         $2401 = ($2398|0)<(-16);
         if ($2401) {
          __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($2381);
          // unreachable;
         }
         $2402 = (($2389) - ($2397))|0;
         $2403 = $2402 >> 4;
         $2404 = ($2403>>>0)<(1073741823);
         if ($2404) {
          $2405 = $2402 >> 3;
          $2406 = ($2405>>>0)<($2400>>>0);
          $2407 = $2406 ? $2400 : $2405;
          $$0$i$i$i48 = $2407;
         } else {
          $$0$i$i$i48 = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i47,$$0$i$i$i48,$2399,$2396);
         $2408 = ((($__v$i$i47)) + 8|0);
         $2409 = HEAP32[$2408>>2]|0;
         HEAP32[$2409>>2] = 0;
         $2410 = ((($2409)) + 4|0);
         HEAP32[$2410>>2] = 0;
         $2411 = ((($2409)) + 8|0);
         HEAP32[$2411>>2] = 0;
         $2412 = ((($2409)) + 12|0);
         HEAP32[$2412>>2] = $2383;
         $2413 = ((($2409)) + 16|0);
         HEAP32[$2408>>2] = $2413;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2381,$__v$i$i47);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i47);
        }
        $2414 = ((($__v$i$i45)) + 8|0);
        $k20$0 = $2373;
        while(1) {
         $2415 = ($k20$0>>>0)<($2379>>>0);
         if (!($2415)) {
          $$5 = $2375;
          break L1;
         }
         $2416 = HEAP32[$2384>>2]|0;
         $2417 = ((($2416)) + -16|0);
         $2418 = HEAP32[$db>>2]|0;
         $2419 = (($2418) + (($k20$0*24)|0)|0);
         $2420 = ((($2416)) + -12|0);
         $2421 = HEAP32[$2420>>2]|0;
         $2422 = ((($2416)) + -8|0);
         $2423 = HEAP32[$2422>>2]|0;
         $2424 = ($2421|0)==($2423|0);
         $2425 = $2423;
         if ($2424) {
          $2434 = $2421;
          $2435 = ((($2416)) + -4|0);
          $2436 = HEAP32[$2417>>2]|0;
          $2437 = (($2434) - ($2436))|0;
          $2438 = (($2437|0) / 24)&-1;
          $2439 = (($2438) + 1)|0;
          $2440 = ($2437|0)<(-24);
          if ($2440) {
           $$lcssa675 = $2417;
           label = 682;
           break;
          }
          $2441 = (($2425) - ($2436))|0;
          $2442 = (($2441|0) / 24)&-1;
          $2443 = ($2442>>>0)<(1073741823);
          if ($2443) {
           $2444 = $2442 << 1;
           $2445 = ($2444>>>0)<($2439>>>0);
           $2446 = $2445 ? $2439 : $2444;
           $$0$i$i$i46 = $2446;
          } else {
           $$0$i$i$i46 = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i45,$$0$i$i$i46,$2438,$2435);
          $2447 = HEAP32[$2414>>2]|0;
          __THREW__ = 0;
          invoke_vii(100,($2447|0),($2419|0));
          $2448 = __THREW__; __THREW__ = 0;
          $2449 = $2448&1;
          if ($2449) {
           label = 688;
           break;
          }
          $2450 = ((($2447)) + 12|0);
          $2451 = (((($2418) + (($k20$0*24)|0)|0)) + 12|0);
          __THREW__ = 0;
          invoke_vii(100,($2450|0),($2451|0));
          $2452 = __THREW__; __THREW__ = 0;
          $2453 = $2452&1;
          if ($2453) {
           $$lcssa680 = $2447;
           label = 687;
           break;
          }
          $2458 = ((($2447)) + 24|0);
          HEAP32[$2414>>2] = $2458;
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($2417,$__v$i$i45);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i45);
         } else {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($2421,$2419);
          $2426 = ((($2421)) + 12|0);
          $2427 = (((($2418) + (($k20$0*24)|0)|0)) + 12|0);
          __THREW__ = 0;
          invoke_vii(100,($2426|0),($2427|0));
          $2428 = __THREW__; __THREW__ = 0;
          $2429 = $2428&1;
          if ($2429) {
           $$lcssa678 = $2421;
           label = 679;
           break;
          }
          $2432 = HEAP32[$2420>>2]|0;
          $2433 = ((($2432)) + 24|0);
          HEAP32[$2420>>2] = $2433;
         }
         $2459 = (($k20$0) + 1)|0;
         $k20$0 = $2459;
        }
        if ((label|0) == 679) {
         $2430 = ___cxa_find_matching_catch_2()|0;
         $2431 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa678);
         ___resumeException($2430|0);
         // unreachable;
        }
        else if ((label|0) == 682) {
         __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($$lcssa675);
         // unreachable;
        }
        else if ((label|0) == 687) {
         $2454 = ___cxa_find_matching_catch_2()|0;
         $2455 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa680);
         $eh$lpad$body$i$i$index34Z2D = $2455;$eh$lpad$body$i$i$indexZ2D = $2454;
        }
        else if ((label|0) == 688) {
         $2456 = ___cxa_find_matching_catch_2()|0;
         $2457 = tempRet0;
         $eh$lpad$body$i$i$index34Z2D = $2457;$eh$lpad$body$i$i$indexZ2D = $2456;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i45);
        ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
        // unreachable;
        break;
       }
       case 84: case 116:  {
        $2460 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
        $2461 = ($2460|0)==($first|0);
        if ($2461) {
         label = 800;
         break L77;
        }
        $2462 = HEAP32[$db>>2]|0;
        $2463 = ((($db)) + 4|0);
        $2464 = HEAP32[$2463>>2]|0;
        $2465 = ($2462|0)==($2464|0);
        if ($2465) {
         $$5 = $first;
         break L1;
        }
        $2466 = ((($db)) + 16|0);
        $2467 = ((($2464)) + -24|0);
        $2468 = ((($db)) + 12|0);
        $2469 = HEAP32[$2468>>2]|0;
        HEAP32[$66>>2] = $2469;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($65,$2467,$66);
        $2470 = ((($db)) + 20|0);
        $2471 = HEAP32[$2470>>2]|0;
        $2472 = ((($db)) + 24|0);
        $2473 = HEAP32[$2472>>2]|0;
        $2474 = ($2471>>>0)<($2473>>>0);
        $2475 = $2473;
        if ($2474) {
         $2476 = ((($65)) + 12|0);
         $2477 = ((($2471)) + 4|0);
         $2478 = HEAP32[$2476>>2]|0;
         $2479 = ((($2471)) + 12|0);
         HEAP32[$2479>>2] = $2478;
         $2480 = HEAP32[$65>>2]|0;
         HEAP32[$2471>>2] = $2480;
         $2481 = ((($65)) + 4|0);
         $2482 = HEAP32[$2481>>2]|0;
         HEAP32[$2477>>2] = $2482;
         $2483 = ((($65)) + 8|0);
         $2484 = HEAP32[$2483>>2]|0;
         $2485 = ((($2471)) + 8|0);
         HEAP32[$2485>>2] = $2484;
         HEAP32[$2483>>2] = 0;
         HEAP32[$2481>>2] = 0;
         HEAP32[$65>>2] = 0;
         $2486 = HEAP32[$2470>>2]|0;
         $2487 = ((($2486)) + 16|0);
         HEAP32[$2470>>2] = $2487;
        } else {
         $2488 = $2471;
         $2489 = ((($db)) + 28|0);
         $2490 = HEAP32[$2466>>2]|0;
         $2491 = (($2488) - ($2490))|0;
         $2492 = $2491 >> 4;
         $2493 = (($2492) + 1)|0;
         $2494 = ($2491|0)<(-16);
         if ($2494) {
          __THREW__ = 0;
          invoke_vi(102,($2466|0));
          $2495 = __THREW__; __THREW__ = 0;
          $2496 = ___cxa_find_matching_catch_2()|0;
          $2497 = tempRet0;
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($65);
          $$1021 = $2496;$$1032 = $2497;
          break L77;
         }
         $2498 = (($2475) - ($2490))|0;
         $2499 = $2498 >> 4;
         $2500 = ($2499>>>0)<(1073741823);
         if ($2500) {
          $2501 = $2498 >> 3;
          $2502 = ($2501>>>0)<($2493>>>0);
          $2503 = $2502 ? $2493 : $2501;
          $$0$i$i$i41 = $2503;
         } else {
          $$0$i$i$i41 = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i40,$$0$i$i$i41,$2492,$2489);
         $2504 = ((($__v$i$i40)) + 8|0);
         $2505 = HEAP32[$2504>>2]|0;
         $2506 = ((($65)) + 12|0);
         $2507 = ((($2505)) + 4|0);
         $2508 = HEAP32[$2506>>2]|0;
         $2509 = ((($2505)) + 12|0);
         HEAP32[$2509>>2] = $2508;
         $2510 = HEAP32[$65>>2]|0;
         HEAP32[$2505>>2] = $2510;
         $2511 = ((($65)) + 4|0);
         $2512 = HEAP32[$2511>>2]|0;
         HEAP32[$2507>>2] = $2512;
         $2513 = ((($65)) + 8|0);
         $2514 = HEAP32[$2513>>2]|0;
         $2515 = ((($2505)) + 8|0);
         HEAP32[$2515>>2] = $2514;
         HEAP32[$2513>>2] = 0;
         HEAP32[$2511>>2] = 0;
         HEAP32[$65>>2] = 0;
         $2516 = ((($2505)) + 16|0);
         HEAP32[$2504>>2] = $2516;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2466,$__v$i$i40);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i40);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($65);
        $$5 = $2460;
        break L1;
        break;
       }
       case 118:  {
        $2517 = $last;
        $2518 = $first;
        $2519 = (($2517) - ($2518))|0;
        $2520 = ($2519|0)>(3);
        $2521 = ($225<<24>>24)==(68);
        $or$cond525 = $2520 & $2521;
        $2522 = ($2367<<24>>24)==(118);
        $or$cond526 = $or$cond525 & $2522;
        L931: do {
         if ($or$cond526) {
          $2523 = ((($first)) + 2|0);
          $2524 = HEAP8[$2523>>0]|0;
          $$off = (($2524) + -49)<<24>>24;
          $2525 = ($$off&255)<(9);
          do {
           if ($2525) {
            $2526 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($2523,$last)|0);
            $2527 = ($2526|0)==($last|0);
            if ($2527) {
             $$9$i290 = $first;
             break L931;
            }
            $2528 = HEAP8[$2526>>0]|0;
            $2529 = ($2528<<24>>24)==(95);
            if (!($2529)) {
             $$9$i290 = $first;
             break L931;
            }
            $2530 = $2526;
            $2531 = $2523;
            $2532 = (($2530) - ($2531))|0;
            $2533 = ((($2526)) + 1|0);
            $2534 = ($2533|0)==($last|0);
            if ($2534) {
             $$9$i290 = $first;
             break L931;
            }
            $2535 = HEAP8[$2533>>0]|0;
            $2536 = ($2535<<24>>24)==(112);
            if (!($2536)) {
             $2537 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2533,$last,$db)|0);
             $2538 = ($2537|0)==($2533|0);
             if ($2538) {
              $$9$i290 = $first;
              break L931;
             }
             $2539 = HEAP32[$db>>2]|0;
             $2540 = ((($db)) + 4|0);
             $2541 = HEAP32[$2540>>2]|0;
             $2542 = ($2539|0)==($2541|0);
             if ($2542) {
              $$9$i290 = $first;
              break L931;
             }
             $2543 = ((($2541)) + -24|0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2,$2523,$2532);
             __THREW__ = 0;
             $2544 = (invoke_iiii(92,($2|0),0,(6369|0))|0);
             $2545 = __THREW__; __THREW__ = 0;
             $2546 = $2545&1;
             if ($2546) {
              $2568 = ___cxa_find_matching_catch_2()|0;
              $2569 = tempRet0;
              $$115$i255 = $2569;$$122$i = $2568;
             } else {
              ;HEAP32[$1>>2]=HEAP32[$2544>>2]|0;HEAP32[$1+4>>2]=HEAP32[$2544+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$2544+8>>2]|0;
              $__i$0$i$i$i$i250 = 0;
              while(1) {
               $exitcond$i$i$i$i251 = ($__i$0$i$i$i$i250|0)==(3);
               if ($exitcond$i$i$i$i251) {
                break;
               }
               $2547 = (($2544) + ($__i$0$i$i$i$i250<<2)|0);
               HEAP32[$2547>>2] = 0;
               $2548 = (($__i$0$i$i$i$i250) + 1)|0;
               $__i$0$i$i$i$i250 = $2548;
              }
              __THREW__ = 0;
              $2549 = (invoke_iii(93,($1|0),(5057|0))|0);
              $2550 = __THREW__; __THREW__ = 0;
              $2551 = $2550&1;
              do {
               if ($2551) {
                $2570 = ___cxa_find_matching_catch_2()|0;
                $2571 = tempRet0;
                $$014$i = $2571;$$021$i = $2570;
               } else {
                ;HEAP32[$0>>2]=HEAP32[$2549>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2549+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2549+8>>2]|0;
                $__i$0$i$i$i34$i = 0;
                while(1) {
                 $exitcond$i$i$i35$i = ($__i$0$i$i$i34$i|0)==(3);
                 if ($exitcond$i$i$i35$i) {
                  break;
                 }
                 $2552 = (($2549) + ($__i$0$i$i$i34$i<<2)|0);
                 HEAP32[$2552>>2] = 0;
                 $2553 = (($__i$0$i$i$i34$i) + 1)|0;
                 $__i$0$i$i$i34$i = $2553;
                }
                $2554 = HEAP8[$0>>0]|0;
                $2555 = $2554 & 1;
                $2556 = ($2555<<24>>24)==(0);
                $2557 = ((($0)) + 8|0);
                $2558 = HEAP32[$2557>>2]|0;
                $2559 = ((($0)) + 1|0);
                $2560 = $2556 ? $2559 : $2558;
                $2561 = ((($0)) + 4|0);
                $2562 = HEAP32[$2561>>2]|0;
                $2563 = $2554&255;
                $2564 = $2563 >>> 1;
                $2565 = $2556 ? $2564 : $2562;
                __THREW__ = 0;
                (invoke_iiii(91,($2543|0),($2560|0),($2565|0))|0);
                $2566 = __THREW__; __THREW__ = 0;
                $2567 = $2566&1;
                if ($2567) {
                 $2572 = ___cxa_find_matching_catch_2()|0;
                 $2573 = tempRet0;
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
                 $$014$i = $2573;$$021$i = $2572;
                 break;
                } else {
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
                 $$9$i290 = $2537;
                 break L931;
                }
               }
              } while(0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
              $$115$i255 = $$014$i;$$122$i = $$021$i;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
             $$620$i = $$115$i255;$$627$i = $$122$i;
             break;
            }
            $2574 = ((($2526)) + 2|0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6,$2523,$2532);
            __THREW__ = 0;
            $2575 = (invoke_iiii(92,($6|0),0,(6378|0))|0);
            $2576 = __THREW__; __THREW__ = 0;
            $2577 = $2576&1;
            if ($2577) {
             $2612 = ___cxa_find_matching_catch_2()|0;
             $2613 = tempRet0;
             $$317$i259 = $2613;$$324$i = $2612;
            } else {
             ;HEAP32[$5>>2]=HEAP32[$2575>>2]|0;HEAP32[$5+4>>2]=HEAP32[$2575+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$2575+8>>2]|0;
             $__i$0$i$i$i38$i = 0;
             while(1) {
              $exitcond$i$i$i39$i = ($__i$0$i$i$i38$i|0)==(3);
              if ($exitcond$i$i$i39$i) {
               break;
              }
              $2578 = (($2575) + ($__i$0$i$i$i38$i<<2)|0);
              HEAP32[$2578>>2] = 0;
              $2579 = (($__i$0$i$i$i38$i) + 1)|0;
              $__i$0$i$i$i38$i = $2579;
             }
             __THREW__ = 0;
             $2580 = (invoke_iii(93,($5|0),(5057|0))|0);
             $2581 = __THREW__; __THREW__ = 0;
             $2582 = $2581&1;
             do {
              if ($2582) {
               $2614 = ___cxa_find_matching_catch_2()|0;
               $2615 = tempRet0;
               $$216$i258 = $2615;$$223$i = $2614;
              } else {
               ;HEAP32[$4>>2]=HEAP32[$2580>>2]|0;HEAP32[$4+4>>2]=HEAP32[$2580+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$2580+8>>2]|0;
               $__i$0$i$i$i42$i = 0;
               while(1) {
                $exitcond$i$i$i43$i = ($__i$0$i$i$i42$i|0)==(3);
                if ($exitcond$i$i$i43$i) {
                 break;
                }
                $2583 = (($2580) + ($__i$0$i$i$i42$i<<2)|0);
                HEAP32[$2583>>2] = 0;
                $2584 = (($__i$0$i$i$i42$i) + 1)|0;
                $__i$0$i$i$i42$i = $2584;
               }
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
               $2585 = ((($db)) + 4|0);
               $2586 = HEAP32[$2585>>2]|0;
               $2587 = ((($db)) + 8|0);
               $2588 = HEAP32[$2587>>2]|0;
               $2589 = ($2586>>>0)<($2588>>>0);
               $2590 = $2588;
               if ($2589) {
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2586,$3);
                $2591 = HEAP32[$2585>>2]|0;
                $2592 = ((($2591)) + 24|0);
                HEAP32[$2585>>2] = $2592;
               } else {
                $2593 = $2586;
                $2594 = ((($db)) + 12|0);
                $2595 = HEAP32[$db>>2]|0;
                $2596 = (($2593) - ($2595))|0;
                $2597 = (($2596|0) / 24)&-1;
                $2598 = (($2597) + 1)|0;
                $2599 = ($2596|0)<(-24);
                if ($2599) {
                 __THREW__ = 0;
                 invoke_vi(102,($db|0));
                 $2600 = __THREW__; __THREW__ = 0;
                 $2601 = ___cxa_find_matching_catch_2()|0;
                 $2602 = tempRet0;
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
                 $$216$i258 = $2602;$$223$i = $2601;
                 break;
                }
                $2603 = (($2590) - ($2595))|0;
                $2604 = (($2603|0) / 24)&-1;
                $2605 = ($2604>>>0)<(1073741823);
                if ($2605) {
                 $2606 = $2604 << 1;
                 $2607 = ($2606>>>0)<($2598>>>0);
                 $2608 = $2607 ? $2598 : $2606;
                 $$0$i$i$i$i = $2608;
                } else {
                 $$0$i$i$i$i = 2147483647;
                }
                __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i$i,$2597,$2594);
                $2609 = ((($__v$i$i$i)) + 8|0);
                $2610 = HEAP32[$2609>>2]|0;
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2610,$3);
                $2611 = ((($2610)) + 24|0);
                HEAP32[$2609>>2] = $2611;
                __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i);
                __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
               }
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
               $$9$i290 = $2574;
               break L931;
              }
             } while(0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
             $$317$i259 = $$216$i258;$$324$i = $$223$i;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
            $$620$i = $$317$i259;$$627$i = $$324$i;
           } else {
            $__i$0$i$i$i262 = 0;
            while(1) {
             $exitcond$i$i$i263 = ($__i$0$i$i$i262|0)==(3);
             if ($exitcond$i$i$i263) {
              break;
             }
             $2616 = (($num2$i) + ($__i$0$i$i$i262<<2)|0);
             HEAP32[$2616>>2] = 0;
             $2617 = (($__i$0$i$i$i262) + 1)|0;
             $__i$0$i$i$i262 = $2617;
            }
            $2618 = ($2524<<24>>24)==(95);
            L993: do {
             if ($2618) {
              $t13$2$i = $2523;
              label = 770;
             } else {
              __THREW__ = 0;
              $2619 = (invoke_iiii(106,($2523|0),($last|0),($db|0))|0);
              $2620 = __THREW__; __THREW__ = 0;
              $2621 = $2620&1;
              if ($2621) {
               label = 752;
              } else {
               $2622 = ($2619|0)==($2523|0);
               if ($2622) {
                $t13$2$i = $2523;
                label = 770;
               } else {
                $2623 = HEAP32[$db>>2]|0;
                $2624 = ((($db)) + 4|0);
                $2625 = HEAP32[$2624>>2]|0;
                $2626 = ($2623|0)==($2625|0);
                if ($2626) {
                 label = 787;
                } else {
                 $2629 = ((($2625)) + -24|0);
                 __THREW__ = 0;
                 invoke_vii(96,($7|0),($2629|0));
                 $2630 = __THREW__; __THREW__ = 0;
                 $2631 = $2630&1;
                 if ($2631) {
                  label = 752;
                 } else {
                  $2632 = HEAP8[$num2$i>>0]|0;
                  $2633 = $2632 & 1;
                  $2634 = ($2633<<24>>24)==(0);
                  L999: do {
                   if ($2634) {
                    $2635 = ((($num2$i)) + 1|0);
                    HEAP8[$2635>>0] = 0;
                    HEAP8[$num2$i>>0] = 0;
                   } else {
                    $2636 = ((($num2$i)) + 8|0);
                    $2637 = HEAP32[$2636>>2]|0;
                    HEAP8[$2637>>0] = 0;
                    $2638 = ((($num2$i)) + 4|0);
                    HEAP32[$2638>>2] = 0;
                    $2639 = HEAP32[$num2$i>>2]|0;
                    $2640 = $2639 & -2;
                    $phitmp$i$i$i$i$i$i$i267 = (($2640) + -1)|0;
                    $2641 = $2639&255;
                    $2642 = $2641 & 1;
                    $2643 = ($2642<<24>>24)==(0);
                    do {
                     if ($2643) {
                      $2644 = $2639 >>> 1;
                      $2645 = $2644 & 127;
                      $2646 = ($2641&255)<(22);
                      if ($2646) {
                       $2653 = ((($num2$i)) + 1|0);
                       $2654 = $2639 >>> 1;
                       $2655 = $2654 & 127;
                       $2656 = (($2655) + 1)|0;
                       _memcpy(($2653|0),($2637|0),($2656|0))|0;
                       _free($2637);
                       $$ph467 = $2645;
                       break;
                      }
                      $2647 = (($2645) + 16)|0;
                      $2648 = $2647 & 240;
                      $phitmp$i2$i$i$i$i$i$i270 = (($2648) + -1)|0;
                      $2649 = ($phitmp$i2$i$i$i$i$i$i270|0)==($phitmp$i$i$i$i$i$i$i267|0);
                      if ($2649) {
                       break L999;
                      }
                      $2650 = ($phitmp$i2$i$i$i$i$i$i270>>>0)<=($phitmp$i$i$i$i$i$i$i267>>>0);
                      $2651 = (_malloc($2648)|0);
                      $2652 = ($2651|0)==(0|0);
                      $or$cond$i$i$i$i$i$i272 = $2650 & $2652;
                      if ($or$cond$i$i$i$i$i$i272) {
                       break L999;
                      }
                      $2658 = ((($num2$i)) + 1|0);
                      $2659 = $2639 >>> 1;
                      $2660 = $2659 & 127;
                      $2661 = (($2660) + 1)|0;
                      _memcpy(($2651|0),($2658|0),($2661|0))|0;
                      $2662 = $2648 | 1;
                      HEAP32[$num2$i>>2] = $2662;
                      HEAP32[$2638>>2] = $2645;
                      HEAP32[$2636>>2] = $2651;
                      break L999;
                     } else {
                      $2657 = ((($num2$i)) + 1|0);
                      HEAP8[$2657>>0] = 0;
                      _free($2637);
                      $$ph467 = 0;
                     }
                    } while(0);
                    $2663 = $$ph467 << 1;
                    $2664 = $2663&255;
                    HEAP8[$num2$i>>0] = $2664;
                   }
                  } while(0);
                  ;HEAP32[$num2$i>>2]=HEAP32[$7>>2]|0;HEAP32[$num2$i+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$num2$i+8>>2]=HEAP32[$7+8>>2]|0;
                  $__i$0$i$i$i$i$i280 = 0;
                  while(1) {
                   $exitcond$i$i$i$i$i281 = ($__i$0$i$i$i$i$i280|0)==(3);
                   if ($exitcond$i$i$i$i$i281) {
                    break;
                   }
                   $2665 = (($7) + ($__i$0$i$i$i$i$i280<<2)|0);
                   HEAP32[$2665>>2] = 0;
                   $2666 = (($__i$0$i$i$i$i$i280) + 1)|0;
                   $__i$0$i$i$i$i$i280 = $2666;
                  }
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
                  $2667 = HEAP32[$2624>>2]|0;
                  $2668 = ((($2667)) + -24|0);
                  $2669 = $2667;
                  while(1) {
                   $2670 = ($2669|0)==($2668|0);
                   if ($2670) {
                    $t13$2$i = $2619;
                    label = 770;
                    break L993;
                   }
                   $2671 = ((($2669)) + -24|0);
                   HEAP32[$2624>>2] = $2671;
                   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2671);
                   $$pre$i$i283 = HEAP32[$2624>>2]|0;
                   $2669 = $$pre$i$i283;
                  }
                 }
                }
               }
              }
             }
            } while(0);
            L1019: do {
             if ((label|0) == 770) {
              $2672 = ($t13$2$i|0)==($last|0);
              L1021: do {
               if ($2672) {
                $$812$i$ph = $first;
               } else {
                $2673 = HEAP8[$t13$2$i>>0]|0;
                $2674 = ($2673<<24>>24)==(95);
                if ($2674) {
                 $2675 = ((($t13$2$i)) + 1|0);
                 $2676 = ($2675|0)==($last|0);
                 if ($2676) {
                  $$812$i$ph = $first;
                 } else {
                  __THREW__ = 0;
                  $2677 = (invoke_iiii(94,($2675|0),($last|0),($db|0))|0);
                  $2678 = __THREW__; __THREW__ = 0;
                  $2679 = $2678&1;
                  if ($2679) {
                   label = 752;
                   break L1019;
                  }
                  $2680 = ($2677|0)==($2675|0);
                  if ($2680) {
                   $$812$i$ph = $first;
                  } else {
                   $2681 = HEAP32[$db>>2]|0;
                   $2682 = ((($db)) + 4|0);
                   $2683 = HEAP32[$2682>>2]|0;
                   $2684 = ($2681|0)==($2683|0);
                   if ($2684) {
                    label = 787;
                    break L1019;
                   }
                   $2685 = ((($2683)) + -24|0);
                   __THREW__ = 0;
                   invoke_viii(107,($9|0),(6369|0),($num2$i|0));
                   $2686 = __THREW__; __THREW__ = 0;
                   $2687 = $2686&1;
                   if ($2687) {
                    label = 752;
                    break L1019;
                   }
                   __THREW__ = 0;
                   $2688 = (invoke_iii(93,($9|0),(5057|0))|0);
                   $2689 = __THREW__; __THREW__ = 0;
                   $2690 = $2689&1;
                   do {
                    if ($2690) {
                     $2707 = ___cxa_find_matching_catch_2()|0;
                     $2708 = tempRet0;
                     $$418$i286 = $2708;$$425$i = $2707;
                    } else {
                     ;HEAP32[$8>>2]=HEAP32[$2688>>2]|0;HEAP32[$8+4>>2]=HEAP32[$2688+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$2688+8>>2]|0;
                     $__i$0$i$i$i47$i = 0;
                     while(1) {
                      $exitcond$i$i$i48$i = ($__i$0$i$i$i47$i|0)==(3);
                      if ($exitcond$i$i$i48$i) {
                       break;
                      }
                      $2691 = (($2688) + ($__i$0$i$i$i47$i<<2)|0);
                      HEAP32[$2691>>2] = 0;
                      $2692 = (($__i$0$i$i$i47$i) + 1)|0;
                      $__i$0$i$i$i47$i = $2692;
                     }
                     $2693 = HEAP8[$8>>0]|0;
                     $2694 = $2693 & 1;
                     $2695 = ($2694<<24>>24)==(0);
                     $2696 = ((($8)) + 8|0);
                     $2697 = HEAP32[$2696>>2]|0;
                     $2698 = ((($8)) + 1|0);
                     $2699 = $2695 ? $2698 : $2697;
                     $2700 = ((($8)) + 4|0);
                     $2701 = HEAP32[$2700>>2]|0;
                     $2702 = $2693&255;
                     $2703 = $2702 >>> 1;
                     $2704 = $2695 ? $2703 : $2701;
                     __THREW__ = 0;
                     (invoke_iiii(91,($2685|0),($2699|0),($2704|0))|0);
                     $2705 = __THREW__; __THREW__ = 0;
                     $2706 = $2705&1;
                     if ($2706) {
                      $2709 = ___cxa_find_matching_catch_2()|0;
                      $2710 = tempRet0;
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
                      $$418$i286 = $2710;$$425$i = $2709;
                      break;
                     } else {
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
                      $$812$i$ph = $2677;
                      break L1021;
                     }
                    }
                   } while(0);
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
                   $$519$i = $$418$i286;$$526$i = $$425$i;
                   break L1019;
                  }
                 }
                } else {
                 $$812$i$ph = $first;
                }
               }
              } while(0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($num2$i);
              $$9$i290 = $$812$i$ph;
              break L931;
             }
            } while(0);
            if ((label|0) == 752) {
             $2627 = ___cxa_find_matching_catch_2()|0;
             $2628 = tempRet0;
             $$519$i = $2628;$$526$i = $2627;
            }
            else if ((label|0) == 787) {
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($num2$i);
             $$9$i290 = $first;
             break L931;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($num2$i);
            $$620$i = $$519$i;$$627$i = $$526$i;
           }
          } while(0);
          ___resumeException($$627$i|0);
          // unreachable;
         } else {
          $$9$i290 = $first;
         }
        } while(0);
        $2711 = ($$9$i290|0)==($first|0);
        if ($2711) {
         label = 800;
         break L77;
        }
        $2712 = HEAP32[$db>>2]|0;
        $2713 = ((($db)) + 4|0);
        $2714 = HEAP32[$2713>>2]|0;
        $2715 = ($2712|0)==($2714|0);
        if ($2715) {
         $$5 = $first;
         break L1;
        }
        $2716 = ((($db)) + 16|0);
        $2717 = ((($2714)) + -24|0);
        $2718 = ((($db)) + 12|0);
        $2719 = HEAP32[$2718>>2]|0;
        HEAP32[$68>>2] = $2719;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($67,$2717,$68);
        $2720 = ((($db)) + 20|0);
        $2721 = HEAP32[$2720>>2]|0;
        $2722 = ((($db)) + 24|0);
        $2723 = HEAP32[$2722>>2]|0;
        $2724 = ($2721>>>0)<($2723>>>0);
        $2725 = $2723;
        if ($2724) {
         $2726 = ((($67)) + 12|0);
         $2727 = ((($2721)) + 4|0);
         $2728 = HEAP32[$2726>>2]|0;
         $2729 = ((($2721)) + 12|0);
         HEAP32[$2729>>2] = $2728;
         $2730 = HEAP32[$67>>2]|0;
         HEAP32[$2721>>2] = $2730;
         $2731 = ((($67)) + 4|0);
         $2732 = HEAP32[$2731>>2]|0;
         HEAP32[$2727>>2] = $2732;
         $2733 = ((($67)) + 8|0);
         $2734 = HEAP32[$2733>>2]|0;
         $2735 = ((($2721)) + 8|0);
         HEAP32[$2735>>2] = $2734;
         HEAP32[$2733>>2] = 0;
         HEAP32[$2731>>2] = 0;
         HEAP32[$67>>2] = 0;
         $2736 = HEAP32[$2720>>2]|0;
         $2737 = ((($2736)) + 16|0);
         HEAP32[$2720>>2] = $2737;
        } else {
         $2738 = $2721;
         $2739 = ((($db)) + 28|0);
         $2740 = HEAP32[$2716>>2]|0;
         $2741 = (($2738) - ($2740))|0;
         $2742 = $2741 >> 4;
         $2743 = (($2742) + 1)|0;
         $2744 = ($2741|0)<(-16);
         if ($2744) {
          __THREW__ = 0;
          invoke_vi(102,($2716|0));
          $2745 = __THREW__; __THREW__ = 0;
          $2746 = ___cxa_find_matching_catch_2()|0;
          $2747 = tempRet0;
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($67);
          $$1021 = $2746;$$1032 = $2747;
          break L77;
         }
         $2748 = (($2725) - ($2740))|0;
         $2749 = $2748 >> 4;
         $2750 = ($2749>>>0)<(1073741823);
         if ($2750) {
          $2751 = $2748 >> 3;
          $2752 = ($2751>>>0)<($2743>>>0);
          $2753 = $2752 ? $2743 : $2751;
          $$0$i$i$i36 = $2753;
         } else {
          $$0$i$i$i36 = 2147483647;
         }
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i35,$$0$i$i$i36,$2742,$2739);
         $2754 = ((($__v$i$i35)) + 8|0);
         $2755 = HEAP32[$2754>>2]|0;
         $2756 = ((($67)) + 12|0);
         $2757 = ((($2755)) + 4|0);
         $2758 = HEAP32[$2756>>2]|0;
         $2759 = ((($2755)) + 12|0);
         HEAP32[$2759>>2] = $2758;
         $2760 = HEAP32[$67>>2]|0;
         HEAP32[$2755>>2] = $2760;
         $2761 = ((($67)) + 4|0);
         $2762 = HEAP32[$2761>>2]|0;
         HEAP32[$2757>>2] = $2762;
         $2763 = ((($67)) + 8|0);
         $2764 = HEAP32[$2763>>2]|0;
         $2765 = ((($2755)) + 8|0);
         HEAP32[$2765>>2] = $2764;
         HEAP32[$2763>>2] = 0;
         HEAP32[$2761>>2] = 0;
         HEAP32[$67>>2] = 0;
         $2766 = ((($2755)) + 16|0);
         HEAP32[$2754>>2] = $2766;
         __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2716,$__v$i$i35);
         __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i35);
        }
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($67);
        $$5 = $$9$i290;
        break L1;
        break;
       }
       default: {
        label = 800;
        break L77;
       }
       }
      }
      break;
     }
     default: {
      label = 800;
     }
     }
    } while(0);
    do {
     if ((label|0) == 800) {
      $2767 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
      $2768 = ($2767|0)==($first|0);
      if (!($2768)) {
       $$5 = $2767;
       break L1;
      }
      $2769 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
      $2770 = ($2769|0)==($first|0);
      if ($2770) {
       $$5 = $first;
       break L1;
      }
      $2771 = HEAP32[$db>>2]|0;
      $2772 = ((($db)) + 4|0);
      $2773 = HEAP32[$2772>>2]|0;
      $2774 = ($2771|0)==($2773|0);
      if ($2774) {
       $$5 = $first;
       break L1;
      }
      $2775 = ((($db)) + 16|0);
      $2776 = ((($2773)) + -24|0);
      $2777 = ((($db)) + 12|0);
      $2778 = HEAP32[$2777>>2]|0;
      HEAP32[$70>>2] = $2778;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($69,$2776,$70);
      $2779 = ((($db)) + 20|0);
      $2780 = HEAP32[$2779>>2]|0;
      $2781 = ((($db)) + 24|0);
      $2782 = HEAP32[$2781>>2]|0;
      $2783 = ($2780>>>0)<($2782>>>0);
      $2784 = $2782;
      if ($2783) {
       $2785 = ((($69)) + 12|0);
       $2786 = ((($2780)) + 4|0);
       $2787 = HEAP32[$2785>>2]|0;
       $2788 = ((($2780)) + 12|0);
       HEAP32[$2788>>2] = $2787;
       $2789 = HEAP32[$69>>2]|0;
       HEAP32[$2780>>2] = $2789;
       $2790 = ((($69)) + 4|0);
       $2791 = HEAP32[$2790>>2]|0;
       HEAP32[$2786>>2] = $2791;
       $2792 = ((($69)) + 8|0);
       $2793 = HEAP32[$2792>>2]|0;
       $2794 = ((($2780)) + 8|0);
       HEAP32[$2794>>2] = $2793;
       HEAP32[$2792>>2] = 0;
       HEAP32[$2790>>2] = 0;
       HEAP32[$69>>2] = 0;
       $2795 = HEAP32[$2779>>2]|0;
       $2796 = ((($2795)) + 16|0);
       HEAP32[$2779>>2] = $2796;
      } else {
       $2797 = $2780;
       $2798 = ((($db)) + 28|0);
       $2799 = HEAP32[$2775>>2]|0;
       $2800 = (($2797) - ($2799))|0;
       $2801 = $2800 >> 4;
       $2802 = (($2801) + 1)|0;
       $2803 = ($2800|0)<(-16);
       if ($2803) {
        __THREW__ = 0;
        invoke_vi(102,($2775|0));
        $2804 = __THREW__; __THREW__ = 0;
        $2805 = ___cxa_find_matching_catch_2()|0;
        $2806 = tempRet0;
        __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($69);
        $$1021 = $2805;$$1032 = $2806;
        break;
       }
       $2807 = (($2784) - ($2799))|0;
       $2808 = $2807 >> 4;
       $2809 = ($2808>>>0)<(1073741823);
       if ($2809) {
        $2810 = $2807 >> 3;
        $2811 = ($2810>>>0)<($2802>>>0);
        $2812 = $2811 ? $2802 : $2810;
        $$0$i$i$i = $2812;
       } else {
        $$0$i$i$i = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i,$$0$i$i$i,$2801,$2798);
       $2813 = ((($__v$i$i)) + 8|0);
       $2814 = HEAP32[$2813>>2]|0;
       $2815 = ((($69)) + 12|0);
       $2816 = ((($2814)) + 4|0);
       $2817 = HEAP32[$2815>>2]|0;
       $2818 = ((($2814)) + 12|0);
       HEAP32[$2818>>2] = $2817;
       $2819 = HEAP32[$69>>2]|0;
       HEAP32[$2814>>2] = $2819;
       $2820 = ((($69)) + 4|0);
       $2821 = HEAP32[$2820>>2]|0;
       HEAP32[$2816>>2] = $2821;
       $2822 = ((($69)) + 8|0);
       $2823 = HEAP32[$2822>>2]|0;
       $2824 = ((($2814)) + 8|0);
       HEAP32[$2824>>2] = $2823;
       HEAP32[$2822>>2] = 0;
       HEAP32[$2820>>2] = 0;
       HEAP32[$69>>2] = 0;
       $2825 = ((($2814)) + 16|0);
       HEAP32[$2813>>2] = $2825;
       __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($2775,$__v$i$i);
       __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i);
      }
      __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($69);
      $$5 = $2769;
      break L1;
     }
    } while(0);
    ___resumeException($$1021|0);
    // unreachable;
   } else {
    $$5 = $223;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$5|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first,$last,$cv) {
 $first = $first|0;
 $last = $last|0;
 $cv = $cv|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$cv>>2] = 0;
 $0 = ($first|0)==($last|0);
 if ($0) {
  $$2 = $first;
 } else {
  $1 = HEAP8[$first>>0]|0;
  $2 = ($1<<24>>24)==(114);
  if ($2) {
   HEAP32[$cv>>2] = 4;
   $3 = ((($first)) + 1|0);
   $$pre = HEAP8[$3>>0]|0;
   $$0 = $3;$4 = $$pre;$7 = 4;
  } else {
   $$0 = $first;$4 = $1;$7 = 0;
  }
  $5 = ($4<<24>>24)==(86);
  if ($5) {
   $6 = $7 | 2;
   HEAP32[$cv>>2] = $6;
   $8 = ((($$0)) + 1|0);
   $$pre1 = HEAP8[$8>>0]|0;
   $$1 = $8;$12 = $6;$9 = $$pre1;
  } else {
   $$1 = $$0;$12 = $7;$9 = $4;
  }
  $10 = ($9<<24>>24)==(75);
  if ($10) {
   $11 = $12 | 1;
   HEAP32[$cv>>2] = $11;
   $13 = ((($$1)) + 1|0);
   $$2 = $13;
  } else {
   $$2 = $$1;
  }
 }
 return ($$2|0);
}
function __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $6 = 0;
 } else {
  $3 = HEAP32[$__a>>2]|0;
  $4 = $__cap << 4;
  $5 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($3,$4)|0);
  $6 = $5;
 }
 HEAP32[$this>>2] = $6;
 $7 = (($6) + ($__start<<4)|0);
 $8 = ((($this)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($this)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = (($6) + ($__cap<<4)|0);
 $11 = ((($this)) + 12|0);
 HEAP32[$11>>2] = $10;
 return;
}
function __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($__v)) + 4|0);
 $$0$i = $2;
 while(1) {
  $4 = ($$0$i|0)==($0|0);
  if ($4) {
   break;
  }
  $5 = HEAP32[$3>>2]|0;
  $6 = ((($5)) + -16|0);
  $7 = ((($$0$i)) + -16|0);
  $8 = ((($$0$i)) + -4|0);
  HEAP32[$6>>2] = 0;
  $9 = ((($5)) + -12|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($5)) + -8|0);
  $11 = HEAP32[$8>>2]|0;
  HEAP32[$10>>2] = 0;
  $12 = ((($5)) + -4|0);
  HEAP32[$12>>2] = $11;
  $13 = HEAP32[$7>>2]|0;
  HEAP32[$6>>2] = $13;
  $14 = ((($$0$i)) + -12|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$9>>2] = $15;
  $16 = ((($$0$i)) + -8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($5)) + -8|0);
  HEAP32[$18>>2] = $17;
  HEAP32[$16>>2] = 0;
  HEAP32[$14>>2] = 0;
  HEAP32[$7>>2] = 0;
  $19 = HEAP32[$3>>2]|0;
  $20 = ((($19)) + -16|0);
  HEAP32[$3>>2] = $20;
  $$0$i = $7;
 }
 $21 = HEAP32[$this>>2]|0;
 $22 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $22;
 HEAP32[$3>>2] = $21;
 $23 = ((($__v)) + 8|0);
 $24 = HEAP32[$1>>2]|0;
 $25 = HEAP32[$23>>2]|0;
 HEAP32[$1>>2] = $25;
 HEAP32[$23>>2] = $24;
 $26 = ((($this)) + 8|0);
 $27 = ((($__v)) + 12|0);
 $28 = HEAP32[$26>>2]|0;
 $29 = HEAP32[$27>>2]|0;
 HEAP32[$26>>2] = $29;
 HEAP32[$27>>2] = $28;
 $30 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $30;
 return;
}
function __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==($1|0);
  if ($4) {
   break;
  }
  $5 = ((($3)) + -16|0);
  HEAP32[$2>>2] = $5;
  __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
 }
 $6 = HEAP32[$this>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = $6;
  $9 = ((($this)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($this)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) - ($8))|0;
  $14 = HEAP32[$10>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($14,$6,$13);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($this,$__pos,$__s) {
 $this = $this|0;
 $__pos = $__pos|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($this,$__pos,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($this,$__pos,$__s,$__n) {
 $this = $this|0;
 $__pos = $__pos|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $7 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $7 = $4;
 }
 $8 = ($7>>>0)<($__pos>>>0);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 if ($2) {
  $13 = 10;$17 = $0;
 } else {
  $9 = HEAP32[$this>>2]|0;
  $10 = $9 & -2;
  $phitmp$i = (($10) + -1)|0;
  $11 = $9&255;
  $13 = $phitmp$i;$17 = $11;
 }
 $12 = (($13) - ($7))|0;
 $14 = ($12>>>0)<($__n>>>0);
 if ($14) {
  $39 = (($7) + ($__n))|0;
  $40 = (($39) - ($13))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$13,$40,$7,$__pos,0,$__n,$__s);
 } else {
  $15 = ($__n|0)==(0);
  if (!($15)) {
   $16 = $17 & 1;
   $18 = ($16<<24>>24)==(0);
   if ($18) {
    $21 = ((($this)) + 1|0);
    $23 = $21;
   } else {
    $19 = ((($this)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   }
   $22 = ($7|0)==($__pos|0);
   if ($22) {
    $$pre = (($23) + ($__pos)|0);
    $$1 = $__s;$$pre$phiZ2D = $$pre;
   } else {
    $24 = (($7) - ($__pos))|0;
    $25 = (($23) + ($__pos)|0);
    $26 = ($25>>>0)<=($__s>>>0);
    $27 = (($23) + ($7)|0);
    $28 = ($27>>>0)>($__s>>>0);
    $or$cond = $26 & $28;
    $29 = (($__s) + ($__n)|0);
    $$0 = $or$cond ? $29 : $__s;
    $30 = (($25) + ($__n)|0);
    _memmove(($30|0),($25|0),($24|0))|0;
    $$1 = $$0;$$pre$phiZ2D = $25;
   }
   _memmove(($$pre$phiZ2D|0),($$1|0),($__n|0))|0;
   $31 = (($7) + ($__n))|0;
   $32 = HEAP8[$this>>0]|0;
   $33 = $32 & 1;
   $34 = ($33<<24>>24)==(0);
   if ($34) {
    $36 = $31 << 1;
    $37 = $36&255;
    HEAP8[$this>>0] = $37;
   } else {
    $35 = ((($this)) + 4|0);
    HEAP32[$35>>2] = $31;
   }
   $38 = (($23) + ($31)|0);
   HEAP8[$38>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (_malloc($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $26 = (($18) + ($__n_copy)|0);
  $27 = (($26) + ($__n_add)|0);
  $28 = (($20) + ($__n_copy)|0);
  $29 = (($28) + ($__n_del)|0);
  _memcpy(($27|0),($29|0),($25|0))|0;
 }
 $30 = ($__old_cap|0)==(10);
 if (!($30)) {
  _free($20);
 }
 $31 = ((($this)) + 8|0);
 HEAP32[$31>>2] = $18;
 $32 = $17 | 1;
 HEAP32[$this>>2] = $32;
 $33 = (($23) + ($__n_add))|0;
 $34 = ((($this)) + 4|0);
 HEAP32[$34>>2] = $33;
 $35 = (($18) + ($33)|0);
 HEAP8[$35>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $15 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $15 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = ((($this)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($15))|0;
  $34 = (($33) + ($14))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$15,$34,$14,$14,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = ((($this)) + 1|0);
    $24 = $22;
   } else {
    $20 = ((($this)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($14)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($14) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = ((($this)) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = ((($__str)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($__str)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (_malloc($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 if ($2) {
  $6 = 0;
 } else {
  $3 = HEAP32[$__a>>2]|0;
  $4 = ($__cap*24)|0;
  $5 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($3,$4)|0);
  $6 = $5;
 }
 HEAP32[$this>>2] = $6;
 $7 = (($6) + (($__start*24)|0)|0);
 $8 = ((($this)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($this)) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = (($6) + (($__cap*24)|0)|0);
 $11 = ((($this)) + 12|0);
 HEAP32[$11>>2] = $10;
 return;
}
function __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 8|0);
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==($1|0);
  if ($4) {
   break;
  }
  $5 = ((($3)) + -24|0);
  HEAP32[$2>>2] = $5;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
 }
 $6 = HEAP32[$this>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = $6;
  $9 = ((($this)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($this)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) - ($8))|0;
  $14 = HEAP32[$10>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($14,$6,$13);
 }
 return;
}
function __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($__v)) + 4|0);
 $$0$i = $2;
 while(1) {
  $4 = ($$0$i|0)==($0|0);
  if ($4) {
   break;
  }
  $5 = HEAP32[$3>>2]|0;
  $6 = ((($5)) + -24|0);
  $7 = ((($$0$i)) + -24|0);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($6,$7);
  $8 = HEAP32[$3>>2]|0;
  $9 = ((($8)) + -24|0);
  HEAP32[$3>>2] = $9;
  $$0$i = $7;
 }
 $10 = HEAP32[$this>>2]|0;
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $11;
 HEAP32[$3>>2] = $10;
 $12 = ((($__v)) + 8|0);
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$12>>2]|0;
 HEAP32[$1>>2] = $14;
 HEAP32[$12>>2] = $13;
 $15 = ((($this)) + 8|0);
 $16 = ((($__v)) + 12|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$15>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $19;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0, $exitcond$i$i = 0, $exitcond$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$this>>2]=HEAP32[$0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$0+8>>2]|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($0) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 $3 = ((($this)) + 12|0);
 $4 = ((($0)) + 12|0);
 ;HEAP32[$3>>2]=HEAP32[$4>>2]|0;HEAP32[$3+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$4+8>>2]|0;
 $__i$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($__i$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $5 = (($4) + ($__i$0$i$i1<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($__i$0$i$i1) + 1)|0;
  $__i$0$i$i1 = $6;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0$i$i$i = 0, $$0$i$i$i103 = 0, $$0$i$i$i108 = 0, $$0$i$i$i113 = 0, $$0$i$i$i118 = 0, $$0$i$i$i123 = 0, $$0$i$i$i128 = 0, $$0$i$i$i133 = 0, $$0$i$i$i138 = 0, $$0$i$i$i14 = 0, $$0$i$i$i143 = 0, $$0$i$i$i19 = 0, $$0$i$i$i24 = 0, $$0$i$i$i29 = 0, $$0$i$i$i34 = 0, $$0$i$i$i39 = 0, $$0$i$i$i4 = 0, $$0$i$i$i44 = 0, $$0$i$i$i49 = 0, $$0$i$i$i54 = 0;
 var $$0$i$i$i59 = 0, $$0$i$i$i66 = 0, $$0$i$i$i71 = 0, $$0$i$i$i76 = 0, $$0$i$i$i81 = 0, $$0$i$i$i88 = 0, $$0$i$i$i9 = 0, $$0$i$i$i93 = 0, $$0$i$i$i98 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__i$0$i$i$i = 0, $__i$0$i$i$i63 = 0, $__i$0$i$i$i85 = 0, $__v$i$i = 0, $__v$i$i102 = 0, $__v$i$i107 = 0, $__v$i$i112 = 0, $__v$i$i117 = 0, $__v$i$i122 = 0, $__v$i$i127 = 0, $__v$i$i13 = 0, $__v$i$i132 = 0, $__v$i$i137 = 0, $__v$i$i142 = 0, $__v$i$i18 = 0, $__v$i$i23 = 0, $__v$i$i28 = 0, $__v$i$i3 = 0, $__v$i$i33 = 0, $__v$i$i38 = 0;
 var $__v$i$i43 = 0, $__v$i$i48 = 0, $__v$i$i53 = 0, $__v$i$i58 = 0, $__v$i$i65 = 0, $__v$i$i70 = 0, $__v$i$i75 = 0, $__v$i$i8 = 0, $__v$i$i80 = 0, $__v$i$i87 = 0, $__v$i$i92 = 0, $__v$i$i97 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i64 = 0, $exitcond$i$i$i86 = 0, $first$ = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i142 = sp + 1256|0;
 $__v$i$i137 = sp + 1236|0;
 $__v$i$i132 = sp + 1216|0;
 $__v$i$i127 = sp + 1196|0;
 $__v$i$i122 = sp + 1176|0;
 $__v$i$i117 = sp + 1156|0;
 $__v$i$i112 = sp + 1136|0;
 $__v$i$i107 = sp + 1116|0;
 $__v$i$i102 = sp + 1096|0;
 $__v$i$i97 = sp + 1076|0;
 $__v$i$i92 = sp + 1056|0;
 $__v$i$i87 = sp + 1036|0;
 $__v$i$i80 = sp + 1016|0;
 $__v$i$i75 = sp + 996|0;
 $__v$i$i70 = sp + 976|0;
 $__v$i$i65 = sp + 956|0;
 $__v$i$i58 = sp + 936|0;
 $__v$i$i53 = sp + 916|0;
 $__v$i$i48 = sp + 896|0;
 $__v$i$i43 = sp + 876|0;
 $__v$i$i38 = sp + 856|0;
 $__v$i$i33 = sp + 836|0;
 $__v$i$i28 = sp + 816|0;
 $__v$i$i23 = sp + 796|0;
 $__v$i$i18 = sp + 776|0;
 $__v$i$i13 = sp + 756|0;
 $__v$i$i8 = sp + 736|0;
 $__v$i$i3 = sp + 716|0;
 $__v$i$i = sp + 696|0;
 $0 = sp + 672|0;
 $1 = sp + 648|0;
 $2 = sp + 624|0;
 $3 = sp + 600|0;
 $4 = sp + 576|0;
 $5 = sp + 552|0;
 $6 = sp + 528|0;
 $7 = sp + 504|0;
 $8 = sp + 480|0;
 $9 = sp + 456|0;
 $10 = sp + 432|0;
 $11 = sp + 408|0;
 $12 = sp + 384|0;
 $13 = sp + 360|0;
 $14 = sp + 336|0;
 $15 = sp + 312|0;
 $16 = sp + 288|0;
 $17 = sp + 264|0;
 $18 = sp + 240|0;
 $19 = sp + 216|0;
 $20 = sp + 192|0;
 $21 = sp + 168|0;
 $22 = sp + 144|0;
 $23 = sp + 120|0;
 $24 = sp + 96|0;
 $25 = sp + 72|0;
 $26 = sp + 48|0;
 $27 = sp + 24|0;
 $28 = sp;
 $29 = ($first|0)==($last|0);
 L1: do {
  if ($29) {
   $$1 = $first;
  } else {
   $30 = HEAP8[$first>>0]|0;
   $31 = $30 << 24 >> 24;
   L3: do {
    switch ($31|0) {
    case 118:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($0,4736);
     $32 = ((($db)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ((($db)) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ($33>>>0)<($35>>>0);
     $37 = $35;
     if ($36) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($33,$0);
      $38 = HEAP32[$32>>2]|0;
      $39 = ((($38)) + 24|0);
      HEAP32[$32>>2] = $39;
     } else {
      $40 = $33;
      $41 = ((($db)) + 12|0);
      $42 = HEAP32[$db>>2]|0;
      $43 = (($40) - ($42))|0;
      $44 = (($43|0) / 24)&-1;
      $45 = (($44) + 1)|0;
      $46 = ($43|0)<(-24);
      if ($46) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $47 = __THREW__; __THREW__ = 0;
       $48 = ___cxa_find_matching_catch_2()|0;
       $49 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
       $$01 = $49;$$02 = $48;
       break L3;
      }
      $50 = (($37) - ($42))|0;
      $51 = (($50|0) / 24)&-1;
      $52 = ($51>>>0)<(1073741823);
      if ($52) {
       $53 = $51 << 1;
       $54 = ($53>>>0)<($45>>>0);
       $55 = $54 ? $45 : $53;
       $$0$i$i$i = $55;
      } else {
       $$0$i$i$i = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$44,$41);
      $56 = ((($__v$i$i)) + 8|0);
      $57 = HEAP32[$56>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($57,$0);
      $58 = ((($57)) + 24|0);
      HEAP32[$56>>2] = $58;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
     $59 = ((($first)) + 1|0);
     $$1 = $59;
     break L1;
     break;
    }
    case 119:  {
     HEAP8[$1>>0] = 14;
     $60 = ((($1)) + 1|0);
     ;HEAP8[$60>>0]=HEAP8[4741>>0]|0;HEAP8[$60+1>>0]=HEAP8[4741+1>>0]|0;HEAP8[$60+2>>0]=HEAP8[4741+2>>0]|0;HEAP8[$60+3>>0]=HEAP8[4741+3>>0]|0;HEAP8[$60+4>>0]=HEAP8[4741+4>>0]|0;HEAP8[$60+5>>0]=HEAP8[4741+5>>0]|0;HEAP8[$60+6>>0]=HEAP8[4741+6>>0]|0;
     $61 = ((($1)) + 8|0);
     HEAP8[$61>>0] = 0;
     $62 = ((($1)) + 12|0);
     $__i$0$i$i$i = 0;
     while(1) {
      $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
      if ($exitcond$i$i$i) {
       break;
      }
      $63 = (($62) + ($__i$0$i$i$i<<2)|0);
      HEAP32[$63>>2] = 0;
      $64 = (($__i$0$i$i$i) + 1)|0;
      $__i$0$i$i$i = $64;
     }
     $65 = ((($db)) + 4|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ((($db)) + 8|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($66>>>0)<($68>>>0);
     $70 = $68;
     if ($69) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($66,$1);
      $71 = HEAP32[$65>>2]|0;
      $72 = ((($71)) + 24|0);
      HEAP32[$65>>2] = $72;
     } else {
      $73 = $66;
      $74 = ((($db)) + 12|0);
      $75 = HEAP32[$db>>2]|0;
      $76 = (($73) - ($75))|0;
      $77 = (($76|0) / 24)&-1;
      $78 = (($77) + 1)|0;
      $79 = ($76|0)<(-24);
      if ($79) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $80 = __THREW__; __THREW__ = 0;
       $81 = ___cxa_find_matching_catch_2()|0;
       $82 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
       $$01 = $82;$$02 = $81;
       break L3;
      }
      $83 = (($70) - ($75))|0;
      $84 = (($83|0) / 24)&-1;
      $85 = ($84>>>0)<(1073741823);
      if ($85) {
       $86 = $84 << 1;
       $87 = ($86>>>0)<($78>>>0);
       $88 = $87 ? $78 : $86;
       $$0$i$i$i4 = $88;
      } else {
       $$0$i$i$i4 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i3,$$0$i$i$i4,$77,$74);
      $89 = ((($__v$i$i3)) + 8|0);
      $90 = HEAP32[$89>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($90,$1);
      $91 = ((($90)) + 24|0);
      HEAP32[$89>>2] = $91;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i3);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i3);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
     $92 = ((($first)) + 1|0);
     $$1 = $92;
     break L1;
     break;
    }
    case 98:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($2,4749);
     $93 = ((($db)) + 4|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($db)) + 8|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     $98 = $96;
     if ($97) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($94,$2);
      $99 = HEAP32[$93>>2]|0;
      $100 = ((($99)) + 24|0);
      HEAP32[$93>>2] = $100;
     } else {
      $101 = $94;
      $102 = ((($db)) + 12|0);
      $103 = HEAP32[$db>>2]|0;
      $104 = (($101) - ($103))|0;
      $105 = (($104|0) / 24)&-1;
      $106 = (($105) + 1)|0;
      $107 = ($104|0)<(-24);
      if ($107) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $108 = __THREW__; __THREW__ = 0;
       $109 = ___cxa_find_matching_catch_2()|0;
       $110 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
       $$01 = $110;$$02 = $109;
       break L3;
      }
      $111 = (($98) - ($103))|0;
      $112 = (($111|0) / 24)&-1;
      $113 = ($112>>>0)<(1073741823);
      if ($113) {
       $114 = $112 << 1;
       $115 = ($114>>>0)<($106>>>0);
       $116 = $115 ? $106 : $114;
       $$0$i$i$i9 = $116;
      } else {
       $$0$i$i$i9 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i8,$$0$i$i$i9,$105,$102);
      $117 = ((($__v$i$i8)) + 8|0);
      $118 = HEAP32[$117>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($118,$2);
      $119 = ((($118)) + 24|0);
      HEAP32[$117>>2] = $119;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i8);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i8);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
     $120 = ((($first)) + 1|0);
     $$1 = $120;
     break L1;
     break;
    }
    case 99:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3,4754);
     $121 = ((($db)) + 4|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ((($db)) + 8|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ($122>>>0)<($124>>>0);
     $126 = $124;
     if ($125) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($122,$3);
      $127 = HEAP32[$121>>2]|0;
      $128 = ((($127)) + 24|0);
      HEAP32[$121>>2] = $128;
     } else {
      $129 = $122;
      $130 = ((($db)) + 12|0);
      $131 = HEAP32[$db>>2]|0;
      $132 = (($129) - ($131))|0;
      $133 = (($132|0) / 24)&-1;
      $134 = (($133) + 1)|0;
      $135 = ($132|0)<(-24);
      if ($135) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $136 = __THREW__; __THREW__ = 0;
       $137 = ___cxa_find_matching_catch_2()|0;
       $138 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
       $$01 = $138;$$02 = $137;
       break L3;
      }
      $139 = (($126) - ($131))|0;
      $140 = (($139|0) / 24)&-1;
      $141 = ($140>>>0)<(1073741823);
      if ($141) {
       $142 = $140 << 1;
       $143 = ($142>>>0)<($134>>>0);
       $144 = $143 ? $134 : $142;
       $$0$i$i$i14 = $144;
      } else {
       $$0$i$i$i14 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i13,$$0$i$i$i14,$133,$130);
      $145 = ((($__v$i$i13)) + 8|0);
      $146 = HEAP32[$145>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($146,$3);
      $147 = ((($146)) + 24|0);
      HEAP32[$145>>2] = $147;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i13);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i13);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $148 = ((($first)) + 1|0);
     $$1 = $148;
     break L1;
     break;
    }
    case 97:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($4,4759);
     $149 = ((($db)) + 4|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ((($db)) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($150>>>0)<($152>>>0);
     $154 = $152;
     if ($153) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($150,$4);
      $155 = HEAP32[$149>>2]|0;
      $156 = ((($155)) + 24|0);
      HEAP32[$149>>2] = $156;
     } else {
      $157 = $150;
      $158 = ((($db)) + 12|0);
      $159 = HEAP32[$db>>2]|0;
      $160 = (($157) - ($159))|0;
      $161 = (($160|0) / 24)&-1;
      $162 = (($161) + 1)|0;
      $163 = ($160|0)<(-24);
      if ($163) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $164 = __THREW__; __THREW__ = 0;
       $165 = ___cxa_find_matching_catch_2()|0;
       $166 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       $$01 = $166;$$02 = $165;
       break L3;
      }
      $167 = (($154) - ($159))|0;
      $168 = (($167|0) / 24)&-1;
      $169 = ($168>>>0)<(1073741823);
      if ($169) {
       $170 = $168 << 1;
       $171 = ($170>>>0)<($162>>>0);
       $172 = $171 ? $162 : $170;
       $$0$i$i$i19 = $172;
      } else {
       $$0$i$i$i19 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i18,$$0$i$i$i19,$161,$158);
      $173 = ((($__v$i$i18)) + 8|0);
      $174 = HEAP32[$173>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($174,$4);
      $175 = ((($174)) + 24|0);
      HEAP32[$173>>2] = $175;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i18);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i18);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     $176 = ((($first)) + 1|0);
     $$1 = $176;
     break L1;
     break;
    }
    case 104:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($5,4771);
     $177 = ((($db)) + 4|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ((($db)) + 8|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = ($178>>>0)<($180>>>0);
     $182 = $180;
     if ($181) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($178,$5);
      $183 = HEAP32[$177>>2]|0;
      $184 = ((($183)) + 24|0);
      HEAP32[$177>>2] = $184;
     } else {
      $185 = $178;
      $186 = ((($db)) + 12|0);
      $187 = HEAP32[$db>>2]|0;
      $188 = (($185) - ($187))|0;
      $189 = (($188|0) / 24)&-1;
      $190 = (($189) + 1)|0;
      $191 = ($188|0)<(-24);
      if ($191) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $192 = __THREW__; __THREW__ = 0;
       $193 = ___cxa_find_matching_catch_2()|0;
       $194 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
       $$01 = $194;$$02 = $193;
       break L3;
      }
      $195 = (($182) - ($187))|0;
      $196 = (($195|0) / 24)&-1;
      $197 = ($196>>>0)<(1073741823);
      if ($197) {
       $198 = $196 << 1;
       $199 = ($198>>>0)<($190>>>0);
       $200 = $199 ? $190 : $198;
       $$0$i$i$i24 = $200;
      } else {
       $$0$i$i$i24 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i23,$$0$i$i$i24,$189,$186);
      $201 = ((($__v$i$i23)) + 8|0);
      $202 = HEAP32[$201>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($202,$5);
      $203 = ((($202)) + 24|0);
      HEAP32[$201>>2] = $203;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i23);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i23);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     $204 = ((($first)) + 1|0);
     $$1 = $204;
     break L1;
     break;
    }
    case 115:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($6,4785);
     $205 = ((($db)) + 4|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = ((($db)) + 8|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($206>>>0)<($208>>>0);
     $210 = $208;
     if ($209) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($206,$6);
      $211 = HEAP32[$205>>2]|0;
      $212 = ((($211)) + 24|0);
      HEAP32[$205>>2] = $212;
     } else {
      $213 = $206;
      $214 = ((($db)) + 12|0);
      $215 = HEAP32[$db>>2]|0;
      $216 = (($213) - ($215))|0;
      $217 = (($216|0) / 24)&-1;
      $218 = (($217) + 1)|0;
      $219 = ($216|0)<(-24);
      if ($219) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $220 = __THREW__; __THREW__ = 0;
       $221 = ___cxa_find_matching_catch_2()|0;
       $222 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
       $$01 = $222;$$02 = $221;
       break L3;
      }
      $223 = (($210) - ($215))|0;
      $224 = (($223|0) / 24)&-1;
      $225 = ($224>>>0)<(1073741823);
      if ($225) {
       $226 = $224 << 1;
       $227 = ($226>>>0)<($218>>>0);
       $228 = $227 ? $218 : $226;
       $$0$i$i$i29 = $228;
      } else {
       $$0$i$i$i29 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i28,$$0$i$i$i29,$217,$214);
      $229 = ((($__v$i$i28)) + 8|0);
      $230 = HEAP32[$229>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($230,$6);
      $231 = ((($230)) + 24|0);
      HEAP32[$229>>2] = $231;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i28);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i28);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
     $232 = ((($first)) + 1|0);
     $$1 = $232;
     break L1;
     break;
    }
    case 116:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($7,4791);
     $233 = ((($db)) + 4|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = ((($db)) + 8|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = ($234>>>0)<($236>>>0);
     $238 = $236;
     if ($237) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($234,$7);
      $239 = HEAP32[$233>>2]|0;
      $240 = ((($239)) + 24|0);
      HEAP32[$233>>2] = $240;
     } else {
      $241 = $234;
      $242 = ((($db)) + 12|0);
      $243 = HEAP32[$db>>2]|0;
      $244 = (($241) - ($243))|0;
      $245 = (($244|0) / 24)&-1;
      $246 = (($245) + 1)|0;
      $247 = ($244|0)<(-24);
      if ($247) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $248 = __THREW__; __THREW__ = 0;
       $249 = ___cxa_find_matching_catch_2()|0;
       $250 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
       $$01 = $250;$$02 = $249;
       break L3;
      }
      $251 = (($238) - ($243))|0;
      $252 = (($251|0) / 24)&-1;
      $253 = ($252>>>0)<(1073741823);
      if ($253) {
       $254 = $252 << 1;
       $255 = ($254>>>0)<($246>>>0);
       $256 = $255 ? $246 : $254;
       $$0$i$i$i34 = $256;
      } else {
       $$0$i$i$i34 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i33,$$0$i$i$i34,$245,$242);
      $257 = ((($__v$i$i33)) + 8|0);
      $258 = HEAP32[$257>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($258,$7);
      $259 = ((($258)) + 24|0);
      HEAP32[$257>>2] = $259;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i33);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i33);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
     $260 = ((($first)) + 1|0);
     $$1 = $260;
     break L1;
     break;
    }
    case 105:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($8,4806);
     $261 = ((($db)) + 4|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = ((($db)) + 8|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = ($262>>>0)<($264>>>0);
     $266 = $264;
     if ($265) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($262,$8);
      $267 = HEAP32[$261>>2]|0;
      $268 = ((($267)) + 24|0);
      HEAP32[$261>>2] = $268;
     } else {
      $269 = $262;
      $270 = ((($db)) + 12|0);
      $271 = HEAP32[$db>>2]|0;
      $272 = (($269) - ($271))|0;
      $273 = (($272|0) / 24)&-1;
      $274 = (($273) + 1)|0;
      $275 = ($272|0)<(-24);
      if ($275) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $276 = __THREW__; __THREW__ = 0;
       $277 = ___cxa_find_matching_catch_2()|0;
       $278 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
       $$01 = $278;$$02 = $277;
       break L3;
      }
      $279 = (($266) - ($271))|0;
      $280 = (($279|0) / 24)&-1;
      $281 = ($280>>>0)<(1073741823);
      if ($281) {
       $282 = $280 << 1;
       $283 = ($282>>>0)<($274>>>0);
       $284 = $283 ? $274 : $282;
       $$0$i$i$i39 = $284;
      } else {
       $$0$i$i$i39 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i38,$$0$i$i$i39,$273,$270);
      $285 = ((($__v$i$i38)) + 8|0);
      $286 = HEAP32[$285>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($286,$8);
      $287 = ((($286)) + 24|0);
      HEAP32[$285>>2] = $287;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i38);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
     $288 = ((($first)) + 1|0);
     $$1 = $288;
     break L1;
     break;
    }
    case 106:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($9,4810);
     $289 = ((($db)) + 4|0);
     $290 = HEAP32[$289>>2]|0;
     $291 = ((($db)) + 8|0);
     $292 = HEAP32[$291>>2]|0;
     $293 = ($290>>>0)<($292>>>0);
     $294 = $292;
     if ($293) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($290,$9);
      $295 = HEAP32[$289>>2]|0;
      $296 = ((($295)) + 24|0);
      HEAP32[$289>>2] = $296;
     } else {
      $297 = $290;
      $298 = ((($db)) + 12|0);
      $299 = HEAP32[$db>>2]|0;
      $300 = (($297) - ($299))|0;
      $301 = (($300|0) / 24)&-1;
      $302 = (($301) + 1)|0;
      $303 = ($300|0)<(-24);
      if ($303) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $304 = __THREW__; __THREW__ = 0;
       $305 = ___cxa_find_matching_catch_2()|0;
       $306 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
       $$01 = $306;$$02 = $305;
       break L3;
      }
      $307 = (($294) - ($299))|0;
      $308 = (($307|0) / 24)&-1;
      $309 = ($308>>>0)<(1073741823);
      if ($309) {
       $310 = $308 << 1;
       $311 = ($310>>>0)<($302>>>0);
       $312 = $311 ? $302 : $310;
       $$0$i$i$i44 = $312;
      } else {
       $$0$i$i$i44 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i43,$$0$i$i$i44,$301,$298);
      $313 = ((($__v$i$i43)) + 8|0);
      $314 = HEAP32[$313>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($314,$9);
      $315 = ((($314)) + 24|0);
      HEAP32[$313>>2] = $315;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i43);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i43);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
     $316 = ((($first)) + 1|0);
     $$1 = $316;
     break L1;
     break;
    }
    case 108:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($10,4823);
     $317 = ((($db)) + 4|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = ((($db)) + 8|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = ($318>>>0)<($320>>>0);
     $322 = $320;
     if ($321) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($318,$10);
      $323 = HEAP32[$317>>2]|0;
      $324 = ((($323)) + 24|0);
      HEAP32[$317>>2] = $324;
     } else {
      $325 = $318;
      $326 = ((($db)) + 12|0);
      $327 = HEAP32[$db>>2]|0;
      $328 = (($325) - ($327))|0;
      $329 = (($328|0) / 24)&-1;
      $330 = (($329) + 1)|0;
      $331 = ($328|0)<(-24);
      if ($331) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $332 = __THREW__; __THREW__ = 0;
       $333 = ___cxa_find_matching_catch_2()|0;
       $334 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
       $$01 = $334;$$02 = $333;
       break L3;
      }
      $335 = (($322) - ($327))|0;
      $336 = (($335|0) / 24)&-1;
      $337 = ($336>>>0)<(1073741823);
      if ($337) {
       $338 = $336 << 1;
       $339 = ($338>>>0)<($330>>>0);
       $340 = $339 ? $330 : $338;
       $$0$i$i$i49 = $340;
      } else {
       $$0$i$i$i49 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i48,$$0$i$i$i49,$329,$326);
      $341 = ((($__v$i$i48)) + 8|0);
      $342 = HEAP32[$341>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($342,$10);
      $343 = ((($342)) + 24|0);
      HEAP32[$341>>2] = $343;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i48);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i48);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
     $344 = ((($first)) + 1|0);
     $$1 = $344;
     break L1;
     break;
    }
    case 109:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($11,4828);
     $345 = ((($db)) + 4|0);
     $346 = HEAP32[$345>>2]|0;
     $347 = ((($db)) + 8|0);
     $348 = HEAP32[$347>>2]|0;
     $349 = ($346>>>0)<($348>>>0);
     $350 = $348;
     if ($349) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($346,$11);
      $351 = HEAP32[$345>>2]|0;
      $352 = ((($351)) + 24|0);
      HEAP32[$345>>2] = $352;
     } else {
      $353 = $346;
      $354 = ((($db)) + 12|0);
      $355 = HEAP32[$db>>2]|0;
      $356 = (($353) - ($355))|0;
      $357 = (($356|0) / 24)&-1;
      $358 = (($357) + 1)|0;
      $359 = ($356|0)<(-24);
      if ($359) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $360 = __THREW__; __THREW__ = 0;
       $361 = ___cxa_find_matching_catch_2()|0;
       $362 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
       $$01 = $362;$$02 = $361;
       break L3;
      }
      $363 = (($350) - ($355))|0;
      $364 = (($363|0) / 24)&-1;
      $365 = ($364>>>0)<(1073741823);
      if ($365) {
       $366 = $364 << 1;
       $367 = ($366>>>0)<($358>>>0);
       $368 = $367 ? $358 : $366;
       $$0$i$i$i54 = $368;
      } else {
       $$0$i$i$i54 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i53,$$0$i$i$i54,$357,$354);
      $369 = ((($__v$i$i53)) + 8|0);
      $370 = HEAP32[$369>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($370,$11);
      $371 = ((($370)) + 24|0);
      HEAP32[$369>>2] = $371;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i53);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i53);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
     $372 = ((($first)) + 1|0);
     $$1 = $372;
     break L1;
     break;
    }
    case 120:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($12,4842);
     $373 = ((($db)) + 4|0);
     $374 = HEAP32[$373>>2]|0;
     $375 = ((($db)) + 8|0);
     $376 = HEAP32[$375>>2]|0;
     $377 = ($374>>>0)<($376>>>0);
     $378 = $376;
     if ($377) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($374,$12);
      $379 = HEAP32[$373>>2]|0;
      $380 = ((($379)) + 24|0);
      HEAP32[$373>>2] = $380;
     } else {
      $381 = $374;
      $382 = ((($db)) + 12|0);
      $383 = HEAP32[$db>>2]|0;
      $384 = (($381) - ($383))|0;
      $385 = (($384|0) / 24)&-1;
      $386 = (($385) + 1)|0;
      $387 = ($384|0)<(-24);
      if ($387) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $388 = __THREW__; __THREW__ = 0;
       $389 = ___cxa_find_matching_catch_2()|0;
       $390 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
       $$01 = $390;$$02 = $389;
       break L3;
      }
      $391 = (($378) - ($383))|0;
      $392 = (($391|0) / 24)&-1;
      $393 = ($392>>>0)<(1073741823);
      if ($393) {
       $394 = $392 << 1;
       $395 = ($394>>>0)<($386>>>0);
       $396 = $395 ? $386 : $394;
       $$0$i$i$i59 = $396;
      } else {
       $$0$i$i$i59 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i58,$$0$i$i$i59,$385,$382);
      $397 = ((($__v$i$i58)) + 8|0);
      $398 = HEAP32[$397>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($398,$12);
      $399 = ((($398)) + 24|0);
      HEAP32[$397>>2] = $399;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i58);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i58);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
     $400 = ((($first)) + 1|0);
     $$1 = $400;
     break L1;
     break;
    }
    case 121:  {
     $401 = (_malloc(32)|0);
     $402 = ((($13)) + 8|0);
     HEAP32[$402>>2] = $401;
     HEAP32[$13>>2] = 33;
     $403 = ((($13)) + 4|0);
     HEAP32[$403>>2] = 18;
     dest=$401; src=4852; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     $404 = ((($401)) + 18|0);
     HEAP8[$404>>0] = 0;
     $405 = ((($13)) + 12|0);
     $__i$0$i$i$i63 = 0;
     while(1) {
      $exitcond$i$i$i64 = ($__i$0$i$i$i63|0)==(3);
      if ($exitcond$i$i$i64) {
       break;
      }
      $406 = (($405) + ($__i$0$i$i$i63<<2)|0);
      HEAP32[$406>>2] = 0;
      $407 = (($__i$0$i$i$i63) + 1)|0;
      $__i$0$i$i$i63 = $407;
     }
     $408 = ((($db)) + 4|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = ((($db)) + 8|0);
     $411 = HEAP32[$410>>2]|0;
     $412 = ($409>>>0)<($411>>>0);
     $413 = $411;
     if ($412) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($409,$13);
      $414 = HEAP32[$408>>2]|0;
      $415 = ((($414)) + 24|0);
      HEAP32[$408>>2] = $415;
     } else {
      $416 = $409;
      $417 = ((($db)) + 12|0);
      $418 = HEAP32[$db>>2]|0;
      $419 = (($416) - ($418))|0;
      $420 = (($419|0) / 24)&-1;
      $421 = (($420) + 1)|0;
      $422 = ($419|0)<(-24);
      if ($422) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $423 = __THREW__; __THREW__ = 0;
       $424 = ___cxa_find_matching_catch_2()|0;
       $425 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
       $$01 = $425;$$02 = $424;
       break L3;
      }
      $426 = (($413) - ($418))|0;
      $427 = (($426|0) / 24)&-1;
      $428 = ($427>>>0)<(1073741823);
      if ($428) {
       $429 = $427 << 1;
       $430 = ($429>>>0)<($421>>>0);
       $431 = $430 ? $421 : $429;
       $$0$i$i$i66 = $431;
      } else {
       $$0$i$i$i66 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i65,$$0$i$i$i66,$420,$417);
      $432 = ((($__v$i$i65)) + 8|0);
      $433 = HEAP32[$432>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($433,$13);
      $434 = ((($433)) + 24|0);
      HEAP32[$432>>2] = $434;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i65);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i65);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
     $435 = ((($first)) + 1|0);
     $$1 = $435;
     break L1;
     break;
    }
    case 110:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($14,4871);
     $436 = ((($db)) + 4|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = ((($db)) + 8|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = ($437>>>0)<($439>>>0);
     $441 = $439;
     if ($440) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($437,$14);
      $442 = HEAP32[$436>>2]|0;
      $443 = ((($442)) + 24|0);
      HEAP32[$436>>2] = $443;
     } else {
      $444 = $437;
      $445 = ((($db)) + 12|0);
      $446 = HEAP32[$db>>2]|0;
      $447 = (($444) - ($446))|0;
      $448 = (($447|0) / 24)&-1;
      $449 = (($448) + 1)|0;
      $450 = ($447|0)<(-24);
      if ($450) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $451 = __THREW__; __THREW__ = 0;
       $452 = ___cxa_find_matching_catch_2()|0;
       $453 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
       $$01 = $453;$$02 = $452;
       break L3;
      }
      $454 = (($441) - ($446))|0;
      $455 = (($454|0) / 24)&-1;
      $456 = ($455>>>0)<(1073741823);
      if ($456) {
       $457 = $455 << 1;
       $458 = ($457>>>0)<($449>>>0);
       $459 = $458 ? $449 : $457;
       $$0$i$i$i71 = $459;
      } else {
       $$0$i$i$i71 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i70,$$0$i$i$i71,$448,$445);
      $460 = ((($__v$i$i70)) + 8|0);
      $461 = HEAP32[$460>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($461,$14);
      $462 = ((($461)) + 24|0);
      HEAP32[$460>>2] = $462;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i70);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i70);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
     $463 = ((($first)) + 1|0);
     $$1 = $463;
     break L1;
     break;
    }
    case 111:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($15,4880);
     $464 = ((($db)) + 4|0);
     $465 = HEAP32[$464>>2]|0;
     $466 = ((($db)) + 8|0);
     $467 = HEAP32[$466>>2]|0;
     $468 = ($465>>>0)<($467>>>0);
     $469 = $467;
     if ($468) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($465,$15);
      $470 = HEAP32[$464>>2]|0;
      $471 = ((($470)) + 24|0);
      HEAP32[$464>>2] = $471;
     } else {
      $472 = $465;
      $473 = ((($db)) + 12|0);
      $474 = HEAP32[$db>>2]|0;
      $475 = (($472) - ($474))|0;
      $476 = (($475|0) / 24)&-1;
      $477 = (($476) + 1)|0;
      $478 = ($475|0)<(-24);
      if ($478) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $479 = __THREW__; __THREW__ = 0;
       $480 = ___cxa_find_matching_catch_2()|0;
       $481 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
       $$01 = $481;$$02 = $480;
       break L3;
      }
      $482 = (($469) - ($474))|0;
      $483 = (($482|0) / 24)&-1;
      $484 = ($483>>>0)<(1073741823);
      if ($484) {
       $485 = $483 << 1;
       $486 = ($485>>>0)<($477>>>0);
       $487 = $486 ? $477 : $485;
       $$0$i$i$i76 = $487;
      } else {
       $$0$i$i$i76 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i75,$$0$i$i$i76,$476,$473);
      $488 = ((($__v$i$i75)) + 8|0);
      $489 = HEAP32[$488>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($489,$15);
      $490 = ((($489)) + 24|0);
      HEAP32[$488>>2] = $490;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i75);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i75);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
     $491 = ((($first)) + 1|0);
     $$1 = $491;
     break L1;
     break;
    }
    case 102:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($16,4898);
     $492 = ((($db)) + 4|0);
     $493 = HEAP32[$492>>2]|0;
     $494 = ((($db)) + 8|0);
     $495 = HEAP32[$494>>2]|0;
     $496 = ($493>>>0)<($495>>>0);
     $497 = $495;
     if ($496) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($493,$16);
      $498 = HEAP32[$492>>2]|0;
      $499 = ((($498)) + 24|0);
      HEAP32[$492>>2] = $499;
     } else {
      $500 = $493;
      $501 = ((($db)) + 12|0);
      $502 = HEAP32[$db>>2]|0;
      $503 = (($500) - ($502))|0;
      $504 = (($503|0) / 24)&-1;
      $505 = (($504) + 1)|0;
      $506 = ($503|0)<(-24);
      if ($506) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $507 = __THREW__; __THREW__ = 0;
       $508 = ___cxa_find_matching_catch_2()|0;
       $509 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
       $$01 = $509;$$02 = $508;
       break L3;
      }
      $510 = (($497) - ($502))|0;
      $511 = (($510|0) / 24)&-1;
      $512 = ($511>>>0)<(1073741823);
      if ($512) {
       $513 = $511 << 1;
       $514 = ($513>>>0)<($505>>>0);
       $515 = $514 ? $505 : $513;
       $$0$i$i$i81 = $515;
      } else {
       $$0$i$i$i81 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i80,$$0$i$i$i81,$504,$501);
      $516 = ((($__v$i$i80)) + 8|0);
      $517 = HEAP32[$516>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($517,$16);
      $518 = ((($517)) + 24|0);
      HEAP32[$516>>2] = $518;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i80);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i80);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
     $519 = ((($first)) + 1|0);
     $$1 = $519;
     break L1;
     break;
    }
    case 100:  {
     HEAP8[$17>>0] = 12;
     $520 = ((($17)) + 1|0);
     ;HEAP8[$520>>0]=HEAP8[4904>>0]|0;HEAP8[$520+1>>0]=HEAP8[4904+1>>0]|0;HEAP8[$520+2>>0]=HEAP8[4904+2>>0]|0;HEAP8[$520+3>>0]=HEAP8[4904+3>>0]|0;HEAP8[$520+4>>0]=HEAP8[4904+4>>0]|0;HEAP8[$520+5>>0]=HEAP8[4904+5>>0]|0;
     $521 = ((($17)) + 7|0);
     HEAP8[$521>>0] = 0;
     $522 = ((($17)) + 12|0);
     $__i$0$i$i$i85 = 0;
     while(1) {
      $exitcond$i$i$i86 = ($__i$0$i$i$i85|0)==(3);
      if ($exitcond$i$i$i86) {
       break;
      }
      $523 = (($522) + ($__i$0$i$i$i85<<2)|0);
      HEAP32[$523>>2] = 0;
      $524 = (($__i$0$i$i$i85) + 1)|0;
      $__i$0$i$i$i85 = $524;
     }
     $525 = ((($db)) + 4|0);
     $526 = HEAP32[$525>>2]|0;
     $527 = ((($db)) + 8|0);
     $528 = HEAP32[$527>>2]|0;
     $529 = ($526>>>0)<($528>>>0);
     $530 = $528;
     if ($529) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($526,$17);
      $531 = HEAP32[$525>>2]|0;
      $532 = ((($531)) + 24|0);
      HEAP32[$525>>2] = $532;
     } else {
      $533 = $526;
      $534 = ((($db)) + 12|0);
      $535 = HEAP32[$db>>2]|0;
      $536 = (($533) - ($535))|0;
      $537 = (($536|0) / 24)&-1;
      $538 = (($537) + 1)|0;
      $539 = ($536|0)<(-24);
      if ($539) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $540 = __THREW__; __THREW__ = 0;
       $541 = ___cxa_find_matching_catch_2()|0;
       $542 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
       $$01 = $542;$$02 = $541;
       break L3;
      }
      $543 = (($530) - ($535))|0;
      $544 = (($543|0) / 24)&-1;
      $545 = ($544>>>0)<(1073741823);
      if ($545) {
       $546 = $544 << 1;
       $547 = ($546>>>0)<($538>>>0);
       $548 = $547 ? $538 : $546;
       $$0$i$i$i88 = $548;
      } else {
       $$0$i$i$i88 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i87,$$0$i$i$i88,$537,$534);
      $549 = ((($__v$i$i87)) + 8|0);
      $550 = HEAP32[$549>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($550,$17);
      $551 = ((($550)) + 24|0);
      HEAP32[$549>>2] = $551;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i87);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i87);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
     $552 = ((($first)) + 1|0);
     $$1 = $552;
     break L1;
     break;
    }
    case 101:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($18,4911);
     $553 = ((($db)) + 4|0);
     $554 = HEAP32[$553>>2]|0;
     $555 = ((($db)) + 8|0);
     $556 = HEAP32[$555>>2]|0;
     $557 = ($554>>>0)<($556>>>0);
     $558 = $556;
     if ($557) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($554,$18);
      $559 = HEAP32[$553>>2]|0;
      $560 = ((($559)) + 24|0);
      HEAP32[$553>>2] = $560;
     } else {
      $561 = $554;
      $562 = ((($db)) + 12|0);
      $563 = HEAP32[$db>>2]|0;
      $564 = (($561) - ($563))|0;
      $565 = (($564|0) / 24)&-1;
      $566 = (($565) + 1)|0;
      $567 = ($564|0)<(-24);
      if ($567) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $568 = __THREW__; __THREW__ = 0;
       $569 = ___cxa_find_matching_catch_2()|0;
       $570 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
       $$01 = $570;$$02 = $569;
       break L3;
      }
      $571 = (($558) - ($563))|0;
      $572 = (($571|0) / 24)&-1;
      $573 = ($572>>>0)<(1073741823);
      if ($573) {
       $574 = $572 << 1;
       $575 = ($574>>>0)<($566>>>0);
       $576 = $575 ? $566 : $574;
       $$0$i$i$i93 = $576;
      } else {
       $$0$i$i$i93 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i92,$$0$i$i$i93,$565,$562);
      $577 = ((($__v$i$i92)) + 8|0);
      $578 = HEAP32[$577>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($578,$18);
      $579 = ((($578)) + 24|0);
      HEAP32[$577>>2] = $579;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i92);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i92);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
     $580 = ((($first)) + 1|0);
     $$1 = $580;
     break L1;
     break;
    }
    case 103:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($19,4923);
     $581 = ((($db)) + 4|0);
     $582 = HEAP32[$581>>2]|0;
     $583 = ((($db)) + 8|0);
     $584 = HEAP32[$583>>2]|0;
     $585 = ($582>>>0)<($584>>>0);
     $586 = $584;
     if ($585) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($582,$19);
      $587 = HEAP32[$581>>2]|0;
      $588 = ((($587)) + 24|0);
      HEAP32[$581>>2] = $588;
     } else {
      $589 = $582;
      $590 = ((($db)) + 12|0);
      $591 = HEAP32[$db>>2]|0;
      $592 = (($589) - ($591))|0;
      $593 = (($592|0) / 24)&-1;
      $594 = (($593) + 1)|0;
      $595 = ($592|0)<(-24);
      if ($595) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $596 = __THREW__; __THREW__ = 0;
       $597 = ___cxa_find_matching_catch_2()|0;
       $598 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
       $$01 = $598;$$02 = $597;
       break L3;
      }
      $599 = (($586) - ($591))|0;
      $600 = (($599|0) / 24)&-1;
      $601 = ($600>>>0)<(1073741823);
      if ($601) {
       $602 = $600 << 1;
       $603 = ($602>>>0)<($594>>>0);
       $604 = $603 ? $594 : $602;
       $$0$i$i$i98 = $604;
      } else {
       $$0$i$i$i98 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i97,$$0$i$i$i98,$593,$590);
      $605 = ((($__v$i$i97)) + 8|0);
      $606 = HEAP32[$605>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($606,$19);
      $607 = ((($606)) + 24|0);
      HEAP32[$605>>2] = $607;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i97);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i97);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
     $608 = ((($first)) + 1|0);
     $$1 = $608;
     break L1;
     break;
    }
    case 122:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($20,4934);
     $609 = ((($db)) + 4|0);
     $610 = HEAP32[$609>>2]|0;
     $611 = ((($db)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($610>>>0)<($612>>>0);
     $614 = $612;
     if ($613) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($610,$20);
      $615 = HEAP32[$609>>2]|0;
      $616 = ((($615)) + 24|0);
      HEAP32[$609>>2] = $616;
     } else {
      $617 = $610;
      $618 = ((($db)) + 12|0);
      $619 = HEAP32[$db>>2]|0;
      $620 = (($617) - ($619))|0;
      $621 = (($620|0) / 24)&-1;
      $622 = (($621) + 1)|0;
      $623 = ($620|0)<(-24);
      if ($623) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $624 = __THREW__; __THREW__ = 0;
       $625 = ___cxa_find_matching_catch_2()|0;
       $626 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
       $$01 = $626;$$02 = $625;
       break L3;
      }
      $627 = (($614) - ($619))|0;
      $628 = (($627|0) / 24)&-1;
      $629 = ($628>>>0)<(1073741823);
      if ($629) {
       $630 = $628 << 1;
       $631 = ($630>>>0)<($622>>>0);
       $632 = $631 ? $622 : $630;
       $$0$i$i$i103 = $632;
      } else {
       $$0$i$i$i103 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i102,$$0$i$i$i103,$621,$618);
      $633 = ((($__v$i$i102)) + 8|0);
      $634 = HEAP32[$633>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($634,$20);
      $635 = ((($634)) + 24|0);
      HEAP32[$633>>2] = $635;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i102);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i102);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
     $636 = ((($first)) + 1|0);
     $$1 = $636;
     break L1;
     break;
    }
    case 117:  {
     $637 = ((($first)) + 1|0);
     $638 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($637,$last,$db)|0);
     $639 = ($638|0)==($637|0);
     $first$ = $639 ? $first : $638;
     $$1 = $first$;
     break L1;
     break;
    }
    case 68:  {
     $640 = ((($first)) + 1|0);
     $641 = ($640|0)==($last|0);
     if ($641) {
      $$1 = $first;
      break L1;
     }
     $642 = HEAP8[$640>>0]|0;
     $643 = $642 << 24 >> 24;
     switch ($643|0) {
     case 100:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($21,4971);
      $644 = ((($db)) + 4|0);
      $645 = HEAP32[$644>>2]|0;
      $646 = ((($db)) + 8|0);
      $647 = HEAP32[$646>>2]|0;
      $648 = ($645>>>0)<($647>>>0);
      $649 = $647;
      if ($648) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($645,$21);
       $650 = HEAP32[$644>>2]|0;
       $651 = ((($650)) + 24|0);
       HEAP32[$644>>2] = $651;
      } else {
       $652 = $645;
       $653 = ((($db)) + 12|0);
       $654 = HEAP32[$db>>2]|0;
       $655 = (($652) - ($654))|0;
       $656 = (($655|0) / 24)&-1;
       $657 = (($656) + 1)|0;
       $658 = ($655|0)<(-24);
       if ($658) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $659 = __THREW__; __THREW__ = 0;
        $660 = ___cxa_find_matching_catch_2()|0;
        $661 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
        $$01 = $661;$$02 = $660;
        break L3;
       }
       $662 = (($649) - ($654))|0;
       $663 = (($662|0) / 24)&-1;
       $664 = ($663>>>0)<(1073741823);
       if ($664) {
        $665 = $663 << 1;
        $666 = ($665>>>0)<($657>>>0);
        $667 = $666 ? $657 : $665;
        $$0$i$i$i108 = $667;
       } else {
        $$0$i$i$i108 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i107,$$0$i$i$i108,$656,$653);
       $668 = ((($__v$i$i107)) + 8|0);
       $669 = HEAP32[$668>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($669,$21);
       $670 = ((($669)) + 24|0);
       HEAP32[$668>>2] = $670;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i107);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i107);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
      $671 = ((($first)) + 2|0);
      $$1 = $671;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($22,4981);
      $672 = ((($db)) + 4|0);
      $673 = HEAP32[$672>>2]|0;
      $674 = ((($db)) + 8|0);
      $675 = HEAP32[$674>>2]|0;
      $676 = ($673>>>0)<($675>>>0);
      $677 = $675;
      if ($676) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($673,$22);
       $678 = HEAP32[$672>>2]|0;
       $679 = ((($678)) + 24|0);
       HEAP32[$672>>2] = $679;
      } else {
       $680 = $673;
       $681 = ((($db)) + 12|0);
       $682 = HEAP32[$db>>2]|0;
       $683 = (($680) - ($682))|0;
       $684 = (($683|0) / 24)&-1;
       $685 = (($684) + 1)|0;
       $686 = ($683|0)<(-24);
       if ($686) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $687 = __THREW__; __THREW__ = 0;
        $688 = ___cxa_find_matching_catch_2()|0;
        $689 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
        $$01 = $689;$$02 = $688;
        break L3;
       }
       $690 = (($677) - ($682))|0;
       $691 = (($690|0) / 24)&-1;
       $692 = ($691>>>0)<(1073741823);
       if ($692) {
        $693 = $691 << 1;
        $694 = ($693>>>0)<($685>>>0);
        $695 = $694 ? $685 : $693;
        $$0$i$i$i113 = $695;
       } else {
        $$0$i$i$i113 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i112,$$0$i$i$i113,$684,$681);
       $696 = ((($__v$i$i112)) + 8|0);
       $697 = HEAP32[$696>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($697,$22);
       $698 = ((($697)) + 24|0);
       HEAP32[$696>>2] = $698;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i112);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i112);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
      $699 = ((($first)) + 2|0);
      $$1 = $699;
      break L1;
      break;
     }
     case 102:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($23,4992);
      $700 = ((($db)) + 4|0);
      $701 = HEAP32[$700>>2]|0;
      $702 = ((($db)) + 8|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = ($701>>>0)<($703>>>0);
      $705 = $703;
      if ($704) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($701,$23);
       $706 = HEAP32[$700>>2]|0;
       $707 = ((($706)) + 24|0);
       HEAP32[$700>>2] = $707;
      } else {
       $708 = $701;
       $709 = ((($db)) + 12|0);
       $710 = HEAP32[$db>>2]|0;
       $711 = (($708) - ($710))|0;
       $712 = (($711|0) / 24)&-1;
       $713 = (($712) + 1)|0;
       $714 = ($711|0)<(-24);
       if ($714) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $715 = __THREW__; __THREW__ = 0;
        $716 = ___cxa_find_matching_catch_2()|0;
        $717 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
        $$01 = $717;$$02 = $716;
        break L3;
       }
       $718 = (($705) - ($710))|0;
       $719 = (($718|0) / 24)&-1;
       $720 = ($719>>>0)<(1073741823);
       if ($720) {
        $721 = $719 << 1;
        $722 = ($721>>>0)<($713>>>0);
        $723 = $722 ? $713 : $721;
        $$0$i$i$i118 = $723;
       } else {
        $$0$i$i$i118 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i117,$$0$i$i$i118,$712,$709);
       $724 = ((($__v$i$i117)) + 8|0);
       $725 = HEAP32[$724>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($725,$23);
       $726 = ((($725)) + 24|0);
       HEAP32[$724>>2] = $726;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i117);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i117);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
      $727 = ((($first)) + 2|0);
      $$1 = $727;
      break L1;
      break;
     }
     case 104:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($24,5002);
      $728 = ((($db)) + 4|0);
      $729 = HEAP32[$728>>2]|0;
      $730 = ((($db)) + 8|0);
      $731 = HEAP32[$730>>2]|0;
      $732 = ($729>>>0)<($731>>>0);
      $733 = $731;
      if ($732) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($729,$24);
       $734 = HEAP32[$728>>2]|0;
       $735 = ((($734)) + 24|0);
       HEAP32[$728>>2] = $735;
      } else {
       $736 = $729;
       $737 = ((($db)) + 12|0);
       $738 = HEAP32[$db>>2]|0;
       $739 = (($736) - ($738))|0;
       $740 = (($739|0) / 24)&-1;
       $741 = (($740) + 1)|0;
       $742 = ($739|0)<(-24);
       if ($742) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $743 = __THREW__; __THREW__ = 0;
        $744 = ___cxa_find_matching_catch_2()|0;
        $745 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
        $$01 = $745;$$02 = $744;
        break L3;
       }
       $746 = (($733) - ($738))|0;
       $747 = (($746|0) / 24)&-1;
       $748 = ($747>>>0)<(1073741823);
       if ($748) {
        $749 = $747 << 1;
        $750 = ($749>>>0)<($741>>>0);
        $751 = $750 ? $741 : $749;
        $$0$i$i$i123 = $751;
       } else {
        $$0$i$i$i123 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i122,$$0$i$i$i123,$740,$737);
       $752 = ((($__v$i$i122)) + 8|0);
       $753 = HEAP32[$752>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($753,$24);
       $754 = ((($753)) + 24|0);
       HEAP32[$752>>2] = $754;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i122);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i122);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
      $755 = ((($first)) + 2|0);
      $$1 = $755;
      break L1;
      break;
     }
     case 105:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($25,5012);
      $756 = ((($db)) + 4|0);
      $757 = HEAP32[$756>>2]|0;
      $758 = ((($db)) + 8|0);
      $759 = HEAP32[$758>>2]|0;
      $760 = ($757>>>0)<($759>>>0);
      $761 = $759;
      if ($760) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($757,$25);
       $762 = HEAP32[$756>>2]|0;
       $763 = ((($762)) + 24|0);
       HEAP32[$756>>2] = $763;
      } else {
       $764 = $757;
       $765 = ((($db)) + 12|0);
       $766 = HEAP32[$db>>2]|0;
       $767 = (($764) - ($766))|0;
       $768 = (($767|0) / 24)&-1;
       $769 = (($768) + 1)|0;
       $770 = ($767|0)<(-24);
       if ($770) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $771 = __THREW__; __THREW__ = 0;
        $772 = ___cxa_find_matching_catch_2()|0;
        $773 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
        $$01 = $773;$$02 = $772;
        break L3;
       }
       $774 = (($761) - ($766))|0;
       $775 = (($774|0) / 24)&-1;
       $776 = ($775>>>0)<(1073741823);
       if ($776) {
        $777 = $775 << 1;
        $778 = ($777>>>0)<($769>>>0);
        $779 = $778 ? $769 : $777;
        $$0$i$i$i128 = $779;
       } else {
        $$0$i$i$i128 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i127,$$0$i$i$i128,$768,$765);
       $780 = ((($__v$i$i127)) + 8|0);
       $781 = HEAP32[$780>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($781,$25);
       $782 = ((($781)) + 24|0);
       HEAP32[$780>>2] = $782;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i127);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i127);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
      $783 = ((($first)) + 2|0);
      $$1 = $783;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($26,5021);
      $784 = ((($db)) + 4|0);
      $785 = HEAP32[$784>>2]|0;
      $786 = ((($db)) + 8|0);
      $787 = HEAP32[$786>>2]|0;
      $788 = ($785>>>0)<($787>>>0);
      $789 = $787;
      if ($788) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($785,$26);
       $790 = HEAP32[$784>>2]|0;
       $791 = ((($790)) + 24|0);
       HEAP32[$784>>2] = $791;
      } else {
       $792 = $785;
       $793 = ((($db)) + 12|0);
       $794 = HEAP32[$db>>2]|0;
       $795 = (($792) - ($794))|0;
       $796 = (($795|0) / 24)&-1;
       $797 = (($796) + 1)|0;
       $798 = ($795|0)<(-24);
       if ($798) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $799 = __THREW__; __THREW__ = 0;
        $800 = ___cxa_find_matching_catch_2()|0;
        $801 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
        $$01 = $801;$$02 = $800;
        break L3;
       }
       $802 = (($789) - ($794))|0;
       $803 = (($802|0) / 24)&-1;
       $804 = ($803>>>0)<(1073741823);
       if ($804) {
        $805 = $803 << 1;
        $806 = ($805>>>0)<($797>>>0);
        $807 = $806 ? $797 : $805;
        $$0$i$i$i133 = $807;
       } else {
        $$0$i$i$i133 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i132,$$0$i$i$i133,$796,$793);
       $808 = ((($__v$i$i132)) + 8|0);
       $809 = HEAP32[$808>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($809,$26);
       $810 = ((($809)) + 24|0);
       HEAP32[$808>>2] = $810;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i132);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i132);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
      $811 = ((($first)) + 2|0);
      $$1 = $811;
      break L1;
      break;
     }
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($27,5030);
      $812 = ((($db)) + 4|0);
      $813 = HEAP32[$812>>2]|0;
      $814 = ((($db)) + 8|0);
      $815 = HEAP32[$814>>2]|0;
      $816 = ($813>>>0)<($815>>>0);
      $817 = $815;
      if ($816) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($813,$27);
       $818 = HEAP32[$812>>2]|0;
       $819 = ((($818)) + 24|0);
       HEAP32[$812>>2] = $819;
      } else {
       $820 = $813;
       $821 = ((($db)) + 12|0);
       $822 = HEAP32[$db>>2]|0;
       $823 = (($820) - ($822))|0;
       $824 = (($823|0) / 24)&-1;
       $825 = (($824) + 1)|0;
       $826 = ($823|0)<(-24);
       if ($826) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $827 = __THREW__; __THREW__ = 0;
        $828 = ___cxa_find_matching_catch_2()|0;
        $829 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
        $$01 = $829;$$02 = $828;
        break L3;
       }
       $830 = (($817) - ($822))|0;
       $831 = (($830|0) / 24)&-1;
       $832 = ($831>>>0)<(1073741823);
       if ($832) {
        $833 = $831 << 1;
        $834 = ($833>>>0)<($825>>>0);
        $835 = $834 ? $825 : $833;
        $$0$i$i$i138 = $835;
       } else {
        $$0$i$i$i138 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i137,$$0$i$i$i138,$824,$821);
       $836 = ((($__v$i$i137)) + 8|0);
       $837 = HEAP32[$836>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($837,$27);
       $838 = ((($837)) + 24|0);
       HEAP32[$836>>2] = $838;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i137);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i137);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
      $839 = ((($first)) + 2|0);
      $$1 = $839;
      break L1;
      break;
     }
     case 110:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($28,5035);
      $840 = ((($db)) + 4|0);
      $841 = HEAP32[$840>>2]|0;
      $842 = ((($db)) + 8|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = ($841>>>0)<($843>>>0);
      $845 = $843;
      if ($844) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($841,$28);
       $846 = HEAP32[$840>>2]|0;
       $847 = ((($846)) + 24|0);
       HEAP32[$840>>2] = $847;
      } else {
       $848 = $841;
       $849 = ((($db)) + 12|0);
       $850 = HEAP32[$db>>2]|0;
       $851 = (($848) - ($850))|0;
       $852 = (($851|0) / 24)&-1;
       $853 = (($852) + 1)|0;
       $854 = ($851|0)<(-24);
       if ($854) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $855 = __THREW__; __THREW__ = 0;
        $856 = ___cxa_find_matching_catch_2()|0;
        $857 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
        $$01 = $857;$$02 = $856;
        break L3;
       }
       $858 = (($845) - ($850))|0;
       $859 = (($858|0) / 24)&-1;
       $860 = ($859>>>0)<(1073741823);
       if ($860) {
        $861 = $859 << 1;
        $862 = ($861>>>0)<($853>>>0);
        $863 = $862 ? $853 : $861;
        $$0$i$i$i143 = $863;
       } else {
        $$0$i$i$i143 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i143,$852,$849);
       $864 = ((($__v$i$i142)) + 8|0);
       $865 = HEAP32[$864>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($865,$28);
       $866 = ((($865)) + 24|0);
       HEAP32[$864>>2] = $866;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
      $867 = ((($first)) + 2|0);
      $$1 = $867;
      break L1;
      break;
     }
     default: {
      $$1 = $first;
      break L1;
     }
     }
     break;
    }
    default: {
     $$1 = $first;
     break L1;
    }
    }
   } while(0);
   ___resumeException($$02|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 8;
 $0 = ((($this)) + 1|0);
 $1 = HEAPU8[$s>>0]|(HEAPU8[$s+1>>0]<<8)|(HEAPU8[$s+2>>0]<<16)|(HEAPU8[$s+3>>0]<<24);
 HEAP8[$0>>0]=$1&255;HEAP8[$0+1>>0]=($1>>8)&255;HEAP8[$0+2>>0]=($1>>16)&255;HEAP8[$0+3>>0]=$1>>24;
 $2 = ((($this)) + 5|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $4 = (($3) + ($__i$0$i$i<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $5;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$s,11);
 $0 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($0) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$s,13);
 $0 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($0) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 10;
 $0 = ((($this)) + 1|0);
 ;HEAP8[$0>>0]=HEAP8[$s>>0]|0;HEAP8[$0+1>>0]=HEAP8[$s+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$s+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$s+3>>0]|0;HEAP8[$0+4>>0]=HEAP8[$s+4>>0]|0;
 $1 = ((($this)) + 6|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$s,14);
 $0 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($0) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 6;
 $0 = ((($this)) + 1|0);
 ;HEAP8[$0>>0]=HEAP8[$s>>0]|0;HEAP8[$0+1>>0]=HEAP8[$s+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$s+2>>0]|0;
 $1 = ((($this)) + 4|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$s,12);
 $0 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($0) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 18;
 $0 = ((($this)) + 1|0);
 dest=$0; src=$s; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $1 = ((($this)) + 10|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 16;
 $0 = ((($this)) + 1|0);
 $1 = $s;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 $7 = $0;
 $8 = $7;
 HEAP8[$8>>0]=$3&255;HEAP8[$8+1>>0]=($3>>8)&255;HEAP8[$8+2>>0]=($3>>16)&255;HEAP8[$8+3>>0]=$3>>24;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP8[$10>>0]=$6&255;HEAP8[$10+1>>0]=($6>>8)&255;HEAP8[$10+2>>0]=($6>>16)&255;HEAP8[$10+3>>0]=$6>>24;
 $11 = ((($this)) + 9|0);
 HEAP8[$11>>0] = 0;
 $12 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $13 = (($12) + ($__i$0$i$i<<2)|0);
  HEAP32[$13>>2] = 0;
  $14 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $14;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($this,$s,17);
 $0 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($0) + ($__i$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $2;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 20;
 $0 = ((($this)) + 1|0);
 dest=$0; src=$s; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $1 = ((($this)) + 11|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$$$i$i$i = 0, $$$i$i$i = 0, $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i13 = 0, $$01 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i = 0, $__i$0$i$i$i = 0, $__v$i$i = 0, $__v$i$i12 = 0, $c$0 = 0, $c$0$in = 0, $c$0$in$lcssa = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, $isdigit = 0, $isdigit10 = 0, $isdigittmp = 0, $isdigittmp9 = 0, $n$0 = 0;
 var $n$0$lcssa = 0, $r = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i12 = sp + 108|0;
 $__v$i$i = sp + 88|0;
 $r = sp + 76|0;
 $0 = sp + 64|0;
 $1 = sp + 40|0;
 $2 = sp + 16|0;
 $3 = sp;
 $4 = ($first|0)==($last|0);
 L1: do {
  if ($4) {
   $$3 = $first;
  } else {
   $5 = HEAP8[$first>>0]|0;
   $6 = $5 << 24 >> 24;
   $isdigittmp = (($6) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $7 = ((($first)) + 1|0);
    $8 = ($7|0)==($last|0);
    if ($8) {
     $$3 = $first;
    } else {
     $c$0$in = $7;$n$0 = $isdigittmp;
     while(1) {
      $c$0 = HEAP8[$c$0$in>>0]|0;
      $9 = $c$0 << 24 >> 24;
      $isdigittmp9 = (($9) + -48)|0;
      $isdigit10 = ($isdigittmp9>>>0)<(10);
      if (!($isdigit10)) {
       $c$0$in$lcssa = $c$0$in;$n$0$lcssa = $n$0;
       break;
      }
      $10 = ((($c$0$in)) + 1|0);
      $11 = ($10|0)==($last|0);
      if ($11) {
       $$3 = $first;
       break L1;
      }
      $12 = ($n$0*10)|0;
      $13 = (($isdigittmp9) + ($12))|0;
      $c$0$in = $10;$n$0 = $13;
     }
     $14 = $last;
     $15 = $c$0$in$lcssa;
     $16 = (($14) - ($15))|0;
     $17 = ($16>>>0)<($n$0$lcssa>>>0);
     if ($17) {
      $$3 = $first;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($r,$c$0$in$lcssa,$n$0$lcssa);
      $18 = HEAP8[$r>>0]|0;
      $19 = $18 & 1;
      $20 = ($19<<24>>24)==(0);
      $21 = ((($r)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = $18&255;
      $24 = $23 >>> 1;
      $25 = $20 ? $24 : $22;
      $26 = ((($r)) + 8|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ((($r)) + 1|0);
      $29 = $20 ? $28 : $27;
      $30 = ($25>>>0)<(10);
      $31 = $30 ? $25 : 10;
      __THREW__ = 0;
      invoke_viii(101,($0|0),($29|0),($31|0));
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      do {
       if ($33) {
        $87 = ___cxa_find_matching_catch_2()|0;
        $88 = tempRet0;
        $$0 = $88;$$01 = $87;
       } else {
        $34 = HEAP8[$0>>0]|0;
        $35 = $34 & 1;
        $36 = ($35<<24>>24)==(0);
        $37 = ((($0)) + 4|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = $34&255;
        $40 = $39 >>> 1;
        $41 = $36 ? $40 : $38;
        $42 = ((($0)) + 8|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = ((($0)) + 1|0);
        $45 = $36 ? $44 : $43;
        $46 = ($41>>>0)>(10);
        $47 = $46 ? 10 : $41;
        $48 = (_memcmp($45,4938,$47)|0);
        $49 = ($48|0)==(0);
        $50 = ($41>>>0)<(10);
        $$$i$i$i = $46&1;
        $$$$i$i$i = $50 ? -1 : $$$i$i$i;
        $51 = $49 ? $$$$i$i$i : $48;
        $52 = ($51|0)==(0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
        if ($52) {
         $53 = (_malloc(32)|0);
         $54 = ((($1)) + 8|0);
         HEAP32[$54>>2] = $53;
         HEAP32[$1>>2] = 33;
         $55 = ((($1)) + 4|0);
         HEAP32[$55>>2] = 21;
         dest=$53; src=4949; stop=dest+21|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
         $56 = ((($53)) + 21|0);
         HEAP8[$56>>0] = 0;
         $57 = ((($1)) + 12|0);
         $__i$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $58 = (($57) + ($__i$0$i$i$i<<2)|0);
          HEAP32[$58>>2] = 0;
          $59 = (($__i$0$i$i$i) + 1)|0;
          $__i$0$i$i$i = $59;
         }
         $60 = ((($db)) + 4|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = ((($db)) + 8|0);
         $63 = HEAP32[$62>>2]|0;
         $64 = ($61>>>0)<($63>>>0);
         $65 = $63;
         if ($64) {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($61,$1);
          $66 = HEAP32[$60>>2]|0;
          $67 = ((($66)) + 24|0);
          HEAP32[$60>>2] = $67;
         } else {
          $68 = $61;
          $69 = ((($db)) + 12|0);
          $70 = HEAP32[$db>>2]|0;
          $71 = (($68) - ($70))|0;
          $72 = (($71|0) / 24)&-1;
          $73 = (($72) + 1)|0;
          $74 = ($71|0)<(-24);
          if ($74) {
           __THREW__ = 0;
           invoke_vi(102,($db|0));
           $75 = __THREW__; __THREW__ = 0;
           $76 = ___cxa_find_matching_catch_2()|0;
           $77 = tempRet0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
           $$0 = $77;$$01 = $76;
           break;
          }
          $78 = (($65) - ($70))|0;
          $79 = (($78|0) / 24)&-1;
          $80 = ($79>>>0)<(1073741823);
          if ($80) {
           $81 = $79 << 1;
           $82 = ($81>>>0)<($73>>>0);
           $83 = $82 ? $73 : $81;
           $$0$i$i$i = $83;
          } else {
           $$0$i$i$i = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$72,$69);
          $84 = ((($__v$i$i)) + 8|0);
          $85 = HEAP32[$84>>2]|0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($85,$1);
          $86 = ((($85)) + 24|0);
          HEAP32[$84>>2] = $86;
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
        } else {
         ;HEAP32[$3>>2]=HEAP32[$r>>2]|0;HEAP32[$3+4>>2]=HEAP32[$r+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$r+8>>2]|0;
         $__i$0$i$i = 0;
         while(1) {
          $exitcond$i$i = ($__i$0$i$i|0)==(3);
          if ($exitcond$i$i) {
           break;
          }
          $89 = (($r) + ($__i$0$i$i<<2)|0);
          HEAP32[$89>>2] = 0;
          $90 = (($__i$0$i$i) + 1)|0;
          $__i$0$i$i = $90;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($2,$3);
         $91 = ((($db)) + 4|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = ((($db)) + 8|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = ($92>>>0)<($94>>>0);
         $96 = $94;
         if ($95) {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($92,$2);
          $97 = HEAP32[$91>>2]|0;
          $98 = ((($97)) + 24|0);
          HEAP32[$91>>2] = $98;
         } else {
          $99 = $92;
          $100 = ((($db)) + 12|0);
          $101 = HEAP32[$db>>2]|0;
          $102 = (($99) - ($101))|0;
          $103 = (($102|0) / 24)&-1;
          $104 = (($103) + 1)|0;
          $105 = ($102|0)<(-24);
          if ($105) {
           __THREW__ = 0;
           invoke_vi(102,($db|0));
           $106 = __THREW__; __THREW__ = 0;
           $107 = ___cxa_find_matching_catch_2()|0;
           $108 = tempRet0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           $$0 = $108;$$01 = $107;
           break;
          }
          $109 = (($96) - ($101))|0;
          $110 = (($109|0) / 24)&-1;
          $111 = ($110>>>0)<(1073741823);
          if ($111) {
           $112 = $110 << 1;
           $113 = ($112>>>0)<($104>>>0);
           $114 = $113 ? $104 : $112;
           $$0$i$i$i13 = $114;
          } else {
           $$0$i$i$i13 = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i12,$$0$i$i$i13,$103,$100);
          $115 = ((($__v$i$i12)) + 8|0);
          $116 = HEAP32[$115>>2]|0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($116,$2);
          $117 = ((($116)) + 24|0);
          HEAP32[$115>>2] = $117;
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i12);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i12);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        }
        $118 = (($c$0$in$lcssa) + ($n$0$lcssa)|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($r);
        $$3 = $118;
        break L1;
       }
      } while(0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($r);
      ___resumeException($$01|0);
      // unreachable;
     }
    }
   } else {
    $$3 = $first;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__i$0$i$i = 0, $__i$0$i$i1 = 0, $exitcond$i$i = 0, $exitcond$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$this>>2]=HEAP32[$f>>2]|0;HEAP32[$this+4>>2]=HEAP32[$f+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$f+8>>2]|0;
 $__i$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($__i$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $0 = (($f) + ($__i$0$i$i1<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i1) + 1)|0;
  $__i$0$i$i1 = $1;
 }
 $2 = ((($this)) + 12|0);
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($__i$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $4;
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($this) {
 $this = $this|0;
 var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = $0&255;
  $8 = $7 >>> 1;
  $9 = ((($this)) + 1|0);
  $10 = $8;$14 = $9;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $10 = $4;$14 = $6;
 }
 $not$ = ($10|0)!=(0);
 $11 = $not$&1;
 $12 = ($10|0)==($11|0);
 $$pre1 = (($10) - ($11))|0;
 if ($12) {
  $16 = $0;
 } else {
  $13 = (($14) + ($11)|0);
  _memmove(($14|0),($13|0),($$pre1|0))|0;
  $$pre = HEAP8[$this>>0]|0;
  $16 = $$pre;
 }
 $15 = $16 & 1;
 $17 = ($15<<24>>24)==(0);
 if ($17) {
  $19 = $$pre1 << 1;
  $20 = $19&255;
  HEAP8[$this>>0] = $20;
 } else {
  $18 = ((($this)) + 4|0);
  HEAP32[$18>>2] = $$pre1;
 }
 $21 = (($14) + ($$pre1)|0);
 HEAP8[$21>>0] = 0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $$0 = 0, $$2 = 0, $$first = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, $t$0$pn = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($first|0)==($last|0);
 L1: do {
  if ($0) {
   $$2 = $first;
  } else {
   $1 = HEAP8[$first>>0]|0;
   $2 = ($1<<24>>24)==(110);
   $3 = ((($first)) + 1|0);
   $$first = $2 ? $3 : $first;
   $4 = ($$first|0)==($last|0);
   if ($4) {
    $$2 = $first;
   } else {
    $5 = HEAP8[$$first>>0]|0;
    $6 = ($5<<24>>24)==(48);
    if ($6) {
     $7 = ((($$first)) + 1|0);
     $$2 = $7;
     break;
    }
    $$off = (($5) + -49)<<24>>24;
    $8 = ($$off&255)<(9);
    if ($8) {
     $t$0$pn = $$first;
     while(1) {
      $$0 = ((($t$0$pn)) + 1|0);
      $9 = ($$0|0)==($last|0);
      if ($9) {
       $$2 = $last;
       break L1;
      }
      $10 = HEAP8[$$0>>0]|0;
      $11 = $10 << 24 >> 24;
      $isdigittmp = (($11) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if ($isdigit) {
       $t$0$pn = $$0;
      } else {
       $$2 = $$0;
       break;
      }
     }
    } else {
     $$2 = $first;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i368 = 0, $$0$i$i$i$i444 = 0, $$0$i364 = 0, $$0$i382 = 0, $$0$i395 = 0, $$01$i = 0, $$01$i381 = 0, $$01$i394 = 0, $$027$i = 0, $$03$i332 = 0, $$04$i = 0, $$1$i = 0, $$1$i218 = 0, $$1$i225 = 0, $$1$i234 = 0, $$1$i246 = 0, $$1$i260 = 0;
 var $$1$i274 = 0, $$1$i297 = 0, $$1$i331 = 0, $$1$i366 = 0, $$1$i425 = 0, $$1$i458 = 0, $$1$i529 = 0, $$1$i573 = 0, $$1$i606 = 0, $$10$i = 0, $$1034 = 0, $$1055 = 0, $$12$i = 0, $$12$i217 = 0, $$12$i233 = 0, $$12$i245 = 0, $$12$i259 = 0, $$12$i273 = 0, $$12$i296 = 0, $$12$i330 = 0;
 var $$12$i424 = 0, $$12$i528 = 0, $$12$i572 = 0, $$12$i605 = 0, $$1236 = 0, $$125 = 0, $$1257 = 0, $$128$i = 0, $$14 = 0, $$14$i = 0, $$1438 = 0, $$1459 = 0, $$146 = 0, $$15$i = 0, $$15$i236 = 0, $$15$i250 = 0, $$15$i264 = 0, $$15$i365 = 0, $$15$i457 = 0, $$15$i577 = 0;
 var $$15$i610 = 0, $$16$i377 = 0, $$1640 = 0, $$1661 = 0, $$1741 = 0, $$1762 = 0, $$1842 = 0, $$1863 = 0, $$1943 = 0, $$1964 = 0, $$2$i275 = 0, $$2$i299 = 0, $$2$i372 = 0, $$2$i427 = 0, $$2$i460 = 0, $$2$i531 = 0, $$2044 = 0, $$2065 = 0, $$21 = 0, $$2166 = 0;
 var $$22 = 0, $$226 = 0, $$2267 = 0, $$23 = 0, $$23$i = 0, $$23$i298 = 0, $$23$i426 = 0, $$23$i530 = 0, $$2368 = 0, $$247 = 0, $$26$i = 0, $$26$i459 = 0, $$3$i = 0, $$3$i301 = 0, $$3$i373 = 0, $$3$i389 = 0, $$3$i404 = 0, $$3$i429 = 0, $$3$i462 = 0, $$3$i533 = 0;
 var $$311$i = 0, $$311$i312 = 0, $$311$i440 = 0, $$311$i544 = 0, $$320$i = 0, $$34$i = 0, $$34$i300 = 0, $$34$i428 = 0, $$34$i532 = 0, $$37$i = 0, $$37$i461 = 0, $$4$i = 0, $$4$i303 = 0, $$4$i374 = 0, $$4$i431 = 0, $$4$i464 = 0, $$4$i535 = 0, $$421$i = 0, $$428 = 0, $$449 = 0;
 var $$45$i = 0, $$45$i302 = 0, $$45$i430 = 0, $$45$i534 = 0, $$48$i = 0, $$48$i463 = 0, $$529 = 0, $$550 = 0, $$6$i508 = 0, $$731 = 0, $$752 = 0, $$832 = 0, $$853 = 0, $$933 = 0, $$954 = 0, $$first = 0, $$first$i = 0, $$ph741 = 0, $$ph743747 = 0, $$phi$trans$insert = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i472 = 0, $$pre$i$i$i$i554 = 0, $$pre$i$i$i$i587 = 0, $$pre$i$i$i133 = 0, $$pre$i$i266 = 0, $$pre$i$i278 = 0, $$pre$i$i314 = 0, $$pre$i$i356 = 0, $$pre$i$i378 = 0, $$pre$i$i391 = 0, $$pre$i$i406 = 0, $$pre$i$i449 = 0, $$pre$i$i493 = 0, $$pre$i$i510 = 0, $$pre$i162 = 0;
 var $$pre$i179 = 0, $$pre$i181 = 0, $$pre$i203 = 0, $$pre$i205 = 0, $$pre$i207 = 0, $$pre$i40$i = 0, $$pre$i64$i = 0, $$pre$phi734Z2D = 0, $$pre$phiZ2D = 0, $$pre731 = 0, $$pre732 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0;
 var $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0;
 var $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0;
 var $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0;
 var $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0;
 var $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0;
 var $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0;
 var $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0;
 var $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0;
 var $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0;
 var $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0;
 var $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0;
 var $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0;
 var $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0;
 var $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0;
 var $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0;
 var $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0;
 var $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0;
 var $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0;
 var $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0;
 var $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0;
 var $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0;
 var $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0;
 var $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0;
 var $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0;
 var $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0;
 var $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0;
 var $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0;
 var $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0;
 var $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0;
 var $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0;
 var $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0;
 var $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0;
 var $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0;
 var $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0;
 var $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0;
 var $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0;
 var $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0;
 var $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0;
 var $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0;
 var $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0;
 var $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0;
 var $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0;
 var $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0;
 var $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0;
 var $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0;
 var $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0;
 var $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0;
 var $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0;
 var $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0;
 var $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0;
 var $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0;
 var $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0;
 var $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0;
 var $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0;
 var $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0;
 var $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0;
 var $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0;
 var $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0;
 var $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0;
 var $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0;
 var $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0;
 var $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0;
 var $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0;
 var $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0;
 var $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0;
 var $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0;
 var $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0;
 var $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0;
 var $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0;
 var $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0;
 var $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0;
 var $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__i$0$i$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i$i = 0, $__i$0$i$i$i$i$i$i$i = 0, $__i$0$i$i$i$i$i$i$i$i = 0, $__i$0$i$i$i$i$i353 = 0, $__i$0$i$i$i$i$i487 = 0, $__i$0$i$i$i$i$i569 = 0;
 var $__i$0$i$i$i$i$i602 = 0, $__i$0$i$i$i$i148 = 0, $__i$0$i$i$i$i209 = 0, $__i$0$i$i$i$i214 = 0, $__i$0$i$i$i$i221 = 0, $__i$0$i$i$i$i227 = 0, $__i$0$i$i$i$i238 = 0, $__i$0$i$i$i$i252 = 0, $__i$0$i$i$i$i269 = 0, $__i$0$i$i$i$i281 = 0, $__i$0$i$i$i$i326 = 0, $__i$0$i$i$i$i360 = 0, $__i$0$i$i$i$i409 = 0, $__i$0$i$i$i$i452 = 0, $__i$0$i$i$i$i513 = 0, $__i$0$i$i$i$i546 = 0, $__i$0$i$i$i$i579 = 0, $__i$0$i$i$i$i61$i = 0, $__i$0$i$i$i118 = 0, $__i$0$i$i$i124 = 0;
 var $__i$0$i$i$i128 = 0, $__i$0$i$i$i151 = 0, $__i$0$i$i$i155 = 0, $__i$0$i$i$i158 = 0, $__i$0$i$i$i164 = 0, $__i$0$i$i$i167 = 0, $__i$0$i$i$i17$i = 0, $__i$0$i$i$i17$i285 = 0, $__i$0$i$i$i17$i413 = 0, $__i$0$i$i$i17$i517 = 0, $__i$0$i$i$i171 = 0, $__i$0$i$i$i175 = 0, $__i$0$i$i$i183 = 0, $__i$0$i$i$i187 = 0, $__i$0$i$i$i191 = 0, $__i$0$i$i$i195 = 0, $__i$0$i$i$i199 = 0, $__i$0$i$i$i20$i = 0, $__i$0$i$i$i20$i289 = 0, $__i$0$i$i$i20$i417 = 0;
 var $__i$0$i$i$i20$i521 = 0, $__i$0$i$i$i211 = 0, $__i$0$i$i$i23$i = 0, $__i$0$i$i$i23$i293 = 0, $__i$0$i$i$i23$i421 = 0, $__i$0$i$i$i23$i525 = 0, $__i$0$i$i$i26$i = 0, $__i$0$i$i$i29$i = 0, $__i$0$i$i$i32$i = 0, $__i$0$i$i$i335 = 0, $__i$0$i$i$i468 = 0, $__i$0$i$i$i5$i = 0, $__i$0$i$i$i73$i = 0, $__i$0$i$i$i8$i = 0, $__i$0$i$i$i8$i231 = 0, $__i$0$i$i$i8$i242 = 0, $__i$0$i$i$i8$i256 = 0, $__i$0$i$i$i8$i550 = 0, $__i$0$i$i$i8$i583 = 0, $__i$0$i$i1$i$i$i$i$i = 0;
 var $__i$0$i$i1$i$i$i$i$i$i = 0, $__i$0$i$i121 = 0, $__i$0$i$i42$i = 0, $__i$0$i$i66$i = 0, $__i$0$i$i79$i = 0, $__v$i$i = 0, $__v$i$i$i = 0, $__v$i$i$i333 = 0, $__v$i$i$i441 = 0, $cond$i371 = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i$i = 0, $exitcond$i$i$i$i$i$i$i = 0, $exitcond$i$i$i$i$i$i$i$i = 0, $exitcond$i$i$i$i$i354 = 0, $exitcond$i$i$i$i$i488 = 0, $exitcond$i$i$i$i$i570 = 0, $exitcond$i$i$i$i$i603 = 0;
 var $exitcond$i$i$i$i149 = 0, $exitcond$i$i$i$i210 = 0, $exitcond$i$i$i$i215 = 0, $exitcond$i$i$i$i222 = 0, $exitcond$i$i$i$i228 = 0, $exitcond$i$i$i$i239 = 0, $exitcond$i$i$i$i253 = 0, $exitcond$i$i$i$i270 = 0, $exitcond$i$i$i$i282 = 0, $exitcond$i$i$i$i327 = 0, $exitcond$i$i$i$i361 = 0, $exitcond$i$i$i$i410 = 0, $exitcond$i$i$i$i453 = 0, $exitcond$i$i$i$i514 = 0, $exitcond$i$i$i$i547 = 0, $exitcond$i$i$i$i580 = 0, $exitcond$i$i$i$i62$i = 0, $exitcond$i$i$i119 = 0, $exitcond$i$i$i125 = 0, $exitcond$i$i$i129 = 0;
 var $exitcond$i$i$i152 = 0, $exitcond$i$i$i156 = 0, $exitcond$i$i$i159 = 0, $exitcond$i$i$i165 = 0, $exitcond$i$i$i168 = 0, $exitcond$i$i$i172 = 0, $exitcond$i$i$i176 = 0, $exitcond$i$i$i18$i = 0, $exitcond$i$i$i18$i286 = 0, $exitcond$i$i$i18$i414 = 0, $exitcond$i$i$i18$i518 = 0, $exitcond$i$i$i184 = 0, $exitcond$i$i$i188 = 0, $exitcond$i$i$i192 = 0, $exitcond$i$i$i196 = 0, $exitcond$i$i$i200 = 0, $exitcond$i$i$i21$i = 0, $exitcond$i$i$i21$i290 = 0, $exitcond$i$i$i21$i418 = 0, $exitcond$i$i$i21$i522 = 0;
 var $exitcond$i$i$i212 = 0, $exitcond$i$i$i24$i = 0, $exitcond$i$i$i24$i294 = 0, $exitcond$i$i$i24$i422 = 0, $exitcond$i$i$i24$i526 = 0, $exitcond$i$i$i27$i = 0, $exitcond$i$i$i30$i = 0, $exitcond$i$i$i33$i = 0, $exitcond$i$i$i336 = 0, $exitcond$i$i$i469 = 0, $exitcond$i$i$i6$i = 0, $exitcond$i$i$i74$i = 0, $exitcond$i$i$i9$i = 0, $exitcond$i$i$i9$i232 = 0, $exitcond$i$i$i9$i243 = 0, $exitcond$i$i$i9$i257 = 0, $exitcond$i$i$i9$i551 = 0, $exitcond$i$i$i9$i584 = 0, $exitcond$i$i122 = 0, $exitcond$i$i2$i$i$i$i$i = 0;
 var $exitcond$i$i2$i$i$i$i$i$i = 0, $exitcond$i$i43$i = 0, $exitcond$i$i67$i = 0, $exitcond$i$i80$i = 0, $expr$i = 0, $expr$i277 = 0, $expr$i390 = 0, $expr$i405 = 0, $expr$i509 = 0, $expr_list$i = 0, $first$ = 0, $first$$i = 0, $first$100 = 0, $first$101 = 0, $first$102 = 0, $first$103 = 0, $first$104 = 0, $first$105 = 0, $first$106 = 0, $first$107 = 0;
 var $first$108 = 0, $first$109 = 0, $first$110 = 0, $first$111 = 0, $first$112 = 0, $first$113 = 0, $first$114 = 0, $first$115 = 0, $first$116 = 0, $first$117 = 0, $first$79 = 0, $first$80 = 0, $first$81 = 0, $first$82 = 0, $first$83 = 0, $first$84 = 0, $first$85 = 0, $first$86 = 0, $first$87 = 0, $first$88 = 0;
 var $first$89 = 0, $first$90 = 0, $first$91 = 0, $first$92 = 0, $first$93 = 0, $first$94 = 0, $first$95 = 0, $first$96 = 0, $first$97 = 0, $first$98 = 0, $first$99 = 0, $has_expr_list$0$off0$$i = 0, $has_expr_list$0$off0$i = 0, $has_expr_list$0$off0$i$lcssa = 0, $has_init$0$off0$i736 = 0, $init_list$i = 0, $k$0$i = 0, $k$0$in$i = 0, $k1$0$i = 0, $lpad$phi$i$index = 0;
 var $lpad$phi$i$index2 = 0, $name$i = 0, $not$or$cond$i = 0, $not$or$cond$i$demorgan = 0, $op1 = 0, $op113 = 0, $op2 = 0, $op212 = 0, $op3 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i = 0, $or$cond$i$i$i$i$i$i345 = 0, $or$cond$i$i$i$i$i$i479 = 0, $or$cond$i$i$i$i$i$i561 = 0, $or$cond$i$i$i$i$i$i594 = 0, $or$cond$i$i$i$i$i140 = 0, $or$cond$i$i$i$i$i53$i = 0, $or$cond$i442 = 0;
 var $or$cond$i492 = 0, $or$cond25$i = 0, $or$cond37$i = 0, $or$cond38$i = 0, $or$cond759 = 0, $parsed_gs$0$off0 = 0, $parsed_gs$0$off0$i = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i340 = 0, $phitmp$i$i$i$i$i$i$i474 = 0, $phitmp$i$i$i$i$i$i$i556 = 0, $phitmp$i$i$i$i$i$i$i589 = 0, $phitmp$i$i$i$i$i$i135 = 0, $phitmp$i$i$i$i$i$i48$i = 0, $phitmp$i2$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i343 = 0, $phitmp$i2$i$i$i$i$i$i477 = 0, $phitmp$i2$i$i$i$i$i$i559 = 0;
 var $phitmp$i2$i$i$i$i$i$i592 = 0, $phitmp$i2$i$i$i$i$i138 = 0, $phitmp$i2$i$i$i$i$i51$i = 0, $r$i = 0, $t$0 = 0, $t$0$i = 0, $t$0$i334 = 0, $t$0$i490 = 0, $t$0$i490$lcssa = 0, $t$1$i = 0, $t$1$i$lcssa = 0, $t$1$i445 = 0, $t$2$i = 0, $t$3$i = 0, $t$4$i448 = 0, $t$4$i735 = 0, $t$5$i = 0, $tmp$i = 0, $tmp$i313 = 0, $tmp$i467 = 0;
 var $tmp5$i = 0, $type$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 2240|0;
 $1 = sp + 2228|0;
 $2 = sp + 2216|0;
 $3 = sp + 2204|0;
 $4 = sp + 2192|0;
 $5 = sp + 2180|0;
 $expr$i509 = sp + 2168|0;
 $6 = sp + 2144|0;
 $7 = sp + 2128|0;
 $8 = sp + 2116|0;
 $9 = sp + 2104|0;
 $10 = sp + 2092|0;
 $11 = sp + 2080|0;
 $12 = sp + 2068|0;
 $tmp$i467 = sp + 2056|0;
 $__v$i$i$i441 = sp + 2036|0;
 $tmp5$i = sp + 2024|0;
 $13 = sp + 2000|0;
 $14 = sp + 1988|0;
 $15 = sp + 1976|0;
 $16 = sp + 1964|0;
 $17 = sp + 1952|0;
 $18 = sp + 1940|0;
 $expr$i405 = sp + 1928|0;
 $19 = sp + 1904|0;
 $20 = sp + 1892|0;
 $21 = sp + 1880|0;
 $22 = sp + 1868|0;
 $23 = sp + 1856|0;
 $24 = sp + 1844|0;
 $expr$i390 = sp + 1832|0;
 $25 = sp + 1820|0;
 $name$i = sp + 1808|0;
 $26 = sp + 1796|0;
 $__v$i$i$i333 = sp + 1776|0;
 $init_list$i = sp + 1764|0;
 $27 = sp + 1752|0;
 $type$i = sp + 1740|0;
 $expr_list$i = sp + 1728|0;
 $28 = sp + 1716|0;
 $r$i = sp + 1704|0;
 $29 = sp + 1692|0;
 $30 = sp + 1680|0;
 $31 = sp + 1668|0;
 $32 = sp + 1656|0;
 $33 = sp + 1632|0;
 $34 = sp + 1620|0;
 $35 = sp + 1608|0;
 $36 = sp + 1596|0;
 $37 = sp + 1584|0;
 $tmp$i313 = sp + 1572|0;
 $expr$i277 = sp + 1560|0;
 $38 = sp + 1536|0;
 $39 = sp + 1524|0;
 $40 = sp + 1512|0;
 $41 = sp + 1500|0;
 $42 = sp + 1488|0;
 $43 = sp + 1476|0;
 $expr$i = sp + 1464|0;
 $44 = sp + 1440|0;
 $45 = sp + 1424|0;
 $46 = sp + 1412|0;
 $47 = sp + 1400|0;
 $48 = sp + 1388|0;
 $49 = sp + 1376|0;
 $50 = sp + 1352|0;
 $51 = sp + 1336|0;
 $52 = sp + 1324|0;
 $53 = sp + 1312|0;
 $54 = sp + 1288|0;
 $55 = sp + 1272|0;
 $56 = sp + 1260|0;
 $57 = sp + 1248|0;
 $58 = sp + 1224|0;
 $59 = sp + 1208|0;
 $60 = sp + 1196|0;
 $61 = sp + 1184|0;
 $62 = sp + 1160|0;
 $63 = sp + 1144|0;
 $64 = sp + 1132|0;
 $__v$i$i = sp + 1112|0;
 $65 = sp + 1088|0;
 $66 = sp + 1076|0;
 $67 = sp + 1064|0;
 $68 = sp + 1052|0;
 $__v$i$i$i = sp + 1032|0;
 $tmp$i = sp + 1020|0;
 $69 = sp + 1008|0;
 $70 = sp + 996|0;
 $71 = sp + 984|0;
 $72 = sp + 960|0;
 $73 = sp + 948|0;
 $74 = sp + 936|0;
 $75 = sp + 924|0;
 $76 = sp + 912|0;
 $77 = sp + 900|0;
 $78 = sp + 888|0;
 $79 = sp + 876|0;
 $80 = sp + 864|0;
 $81 = sp + 852|0;
 $82 = sp + 840|0;
 $83 = sp + 828|0;
 $84 = sp + 816|0;
 $85 = sp + 804|0;
 $86 = sp + 792|0;
 $87 = sp + 780|0;
 $88 = sp + 768|0;
 $89 = sp + 756|0;
 $90 = sp + 744|0;
 $91 = sp + 732|0;
 $92 = sp + 720|0;
 $93 = sp + 708|0;
 $94 = sp + 696|0;
 $95 = sp + 684|0;
 $96 = sp + 672|0;
 $op2 = sp + 660|0;
 $op1 = sp + 648|0;
 $97 = sp + 624|0;
 $98 = sp + 608|0;
 $99 = sp + 596|0;
 $100 = sp + 584|0;
 $101 = sp + 572|0;
 $102 = sp + 560|0;
 $103 = sp + 548|0;
 $104 = sp + 536|0;
 $105 = sp + 524|0;
 $106 = sp + 512|0;
 $107 = sp + 500|0;
 $108 = sp + 488|0;
 $109 = sp + 476|0;
 $110 = sp + 464|0;
 $111 = sp + 440|0;
 $112 = sp + 424|0;
 $113 = sp + 412|0;
 $114 = sp + 400|0;
 $115 = sp + 388|0;
 $116 = sp + 376|0;
 $117 = sp + 364|0;
 $118 = sp + 352|0;
 $119 = sp + 340|0;
 $120 = sp + 328|0;
 $121 = sp + 316|0;
 $122 = sp + 304|0;
 $123 = sp + 292|0;
 $124 = sp + 280|0;
 $125 = sp + 256|0;
 $126 = sp + 240|0;
 $127 = sp + 228|0;
 $128 = sp + 216|0;
 $129 = sp + 204|0;
 $op3 = sp + 192|0;
 $op212 = sp + 180|0;
 $op113 = sp + 168|0;
 $130 = sp + 144|0;
 $131 = sp + 132|0;
 $132 = sp + 120|0;
 $133 = sp + 108|0;
 $134 = sp + 96|0;
 $135 = sp + 84|0;
 $136 = sp + 72|0;
 $137 = sp + 60|0;
 $138 = sp + 48|0;
 $139 = sp + 36|0;
 $140 = sp + 24|0;
 $141 = sp;
 $142 = $last;
 $143 = $first;
 $144 = (($142) - ($143))|0;
 $145 = ($144|0)>(1);
 L1: do {
  if ($145) {
   $146 = ($144|0)>(3);
   if ($146) {
    $147 = HEAP8[$first>>0]|0;
    $148 = ($147<<24>>24)==(103);
    if ($148) {
     $149 = ((($first)) + 1|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = ($150<<24>>24)==(115);
     $152 = ((($first)) + 2|0);
     $$first = $151 ? $152 : $first;
     $parsed_gs$0$off0 = $151;$t$0 = $$first;
    } else {
     $parsed_gs$0$off0 = 0;$t$0 = $first;
    }
   } else {
    $parsed_gs$0$off0 = 0;$t$0 = $first;
   }
   $153 = HEAP8[$t$0>>0]|0;
   $154 = $153 << 24 >> 24;
   L7: do {
    switch ($154|0) {
    case 76:  {
     $155 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $$14 = $155;
     break L1;
     break;
    }
    case 84:  {
     $156 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $$14 = $156;
     break L1;
     break;
    }
    case 102:  {
     $157 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $$14 = $157;
     break L1;
     break;
    }
    case 97:  {
     $158 = ((($t$0)) + 1|0);
     $159 = HEAP8[$158>>0]|0;
     $160 = $159 << 24 >> 24;
     switch ($160|0) {
     case 97:  {
      $161 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($74,5103,2);
      __THREW__ = 0;
      $162 = (invoke_iiiii(108,($161|0),($last|0),($74|0),($db|0))|0);
      $163 = __THREW__; __THREW__ = 0;
      $164 = $163&1;
      if ($164) {
       $166 = ___cxa_find_matching_catch_2()|0;
       $167 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($74);
       $$23 = $166;$$2368 = $167;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($74);
       $165 = ($162|0)==($161|0);
       $first$ = $165 ? $first : $162;
       $$14 = $first$;
       break L1;
      }
      break;
     }
     case 100:  {
      $168 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($75,5114,1);
      __THREW__ = 0;
      $169 = (invoke_iiiii(109,($168|0),($last|0),($75|0),($db|0))|0);
      $170 = __THREW__; __THREW__ = 0;
      $171 = $170&1;
      if ($171) {
       $173 = ___cxa_find_matching_catch_2()|0;
       $174 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($75);
       $$23 = $173;$$2368 = $174;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($75);
       $172 = ($169|0)==($168|0);
       $first$79 = $172 ? $first : $169;
       $$14 = $first$79;
       break L1;
      }
      break;
     }
     case 110:  {
      $175 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($76,5114,1);
      __THREW__ = 0;
      $176 = (invoke_iiiii(108,($175|0),($last|0),($76|0),($db|0))|0);
      $177 = __THREW__; __THREW__ = 0;
      $178 = $177&1;
      if ($178) {
       $180 = ___cxa_find_matching_catch_2()|0;
       $181 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($76);
       $$23 = $180;$$2368 = $181;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($76);
       $179 = ($176|0)==($175|0);
       $first$80 = $179 ? $first : $176;
       $$14 = $first$80;
       break L1;
      }
      break;
     }
     case 78:  {
      $182 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($77,5116,2);
      __THREW__ = 0;
      $183 = (invoke_iiiii(108,($182|0),($last|0),($77|0),($db|0))|0);
      $184 = __THREW__; __THREW__ = 0;
      $185 = $184&1;
      if ($185) {
       $187 = ___cxa_find_matching_catch_2()|0;
       $188 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($77);
       $$23 = $187;$$2368 = $188;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($77);
       $186 = ($183|0)==($182|0);
       $first$81 = $186 ? $first : $183;
       $$14 = $first$81;
       break L1;
      }
      break;
     }
     case 83:  {
      $189 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($78,5119,1);
      __THREW__ = 0;
      $190 = (invoke_iiiii(108,($189|0),($last|0),($78|0),($db|0))|0);
      $191 = __THREW__; __THREW__ = 0;
      $192 = $191&1;
      if ($192) {
       $194 = ___cxa_find_matching_catch_2()|0;
       $195 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($78);
       $$23 = $194;$$2368 = $195;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($78);
       $193 = ($190|0)==($189|0);
       $first$82 = $193 ? $first : $190;
       $$14 = $first$82;
       break L1;
      }
      break;
     }
     case 116:  {
      $196 = ($144|0)>(2);
      L34: do {
       if ($196) {
        $197 = HEAP8[$first>>0]|0;
        $198 = ($197<<24>>24)==(97);
        if ($198) {
         $199 = ((($first)) + 1|0);
         $200 = HEAP8[$199>>0]|0;
         $201 = ($200<<24>>24)==(116);
         if ($201) {
          $202 = ((($first)) + 2|0);
          $203 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($202,$last,$db)|0);
          $204 = ($203|0)==($202|0);
          if ($204) {
           $$15$i610 = $first;
          } else {
           $205 = HEAP32[$db>>2]|0;
           $206 = ((($db)) + 4|0);
           $207 = HEAP32[$206>>2]|0;
           $208 = ($205|0)==($207|0);
           if ($208) {
            $$15$i610 = $first;
           } else {
            $209 = ((($207)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($2,$209);
            __THREW__ = 0;
            $210 = (invoke_iiii(92,($2|0),0,(5121|0))|0);
            $211 = __THREW__; __THREW__ = 0;
            $212 = $211&1;
            do {
             if ($212) {
              $266 = ___cxa_find_matching_catch_2()|0;
              $267 = tempRet0;
              $$1$i606 = $267;$$12$i605 = $266;
             } else {
              ;HEAP32[$1>>2]=HEAP32[$210>>2]|0;HEAP32[$1+4>>2]=HEAP32[$210+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$210+8>>2]|0;
              $__i$0$i$i$i$i579 = 0;
              while(1) {
               $exitcond$i$i$i$i580 = ($__i$0$i$i$i$i579|0)==(3);
               if ($exitcond$i$i$i$i580) {
                break;
               }
               $213 = (($210) + ($__i$0$i$i$i$i579<<2)|0);
               HEAP32[$213>>2] = 0;
               $214 = (($__i$0$i$i$i$i579) + 1)|0;
               $__i$0$i$i$i$i579 = $214;
              }
              __THREW__ = 0;
              $215 = (invoke_iii(93,($1|0),(5061|0))|0);
              $216 = __THREW__; __THREW__ = 0;
              $217 = $216&1;
              if ($217) {
               $268 = ___cxa_find_matching_catch_2()|0;
               $269 = tempRet0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
               $$1$i606 = $269;$$12$i605 = $268;
               break;
              }
              ;HEAP32[$0>>2]=HEAP32[$215>>2]|0;HEAP32[$0+4>>2]=HEAP32[$215+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$215+8>>2]|0;
              $__i$0$i$i$i8$i583 = 0;
              while(1) {
               $exitcond$i$i$i9$i584 = ($__i$0$i$i$i8$i583|0)==(3);
               if ($exitcond$i$i$i9$i584) {
                break;
               }
               $218 = (($215) + ($__i$0$i$i$i8$i583<<2)|0);
               HEAP32[$218>>2] = 0;
               $219 = (($__i$0$i$i$i8$i583) + 1)|0;
               $__i$0$i$i$i8$i583 = $219;
              }
              $220 = HEAP8[$209>>0]|0;
              $221 = $220 & 1;
              $222 = ($221<<24>>24)==(0);
              do {
               if ($222) {
                $223 = ((($209)) + 1|0);
                HEAP8[$223>>0] = 0;
                HEAP8[$209>>0] = 0;
               } else {
                $224 = ((($207)) + -16|0);
                $225 = HEAP32[$224>>2]|0;
                HEAP8[$225>>0] = 0;
                $226 = ((($207)) + -20|0);
                HEAP32[$226>>2] = 0;
                $$pre$i$i$i$i587 = HEAP8[$209>>0]|0;
                $227 = $$pre$i$i$i$i587 & 1;
                $228 = ($227<<24>>24)==(0);
                if ($228) {
                 $233 = $$pre$i$i$i$i587;$242 = 10;
                } else {
                 $229 = HEAP32[$209>>2]|0;
                 $230 = $229 & -2;
                 $phitmp$i$i$i$i$i$i$i589 = (($230) + -1)|0;
                 $231 = $229&255;
                 $233 = $231;$242 = $phitmp$i$i$i$i$i$i$i589;
                }
                $232 = $233 & 1;
                $234 = ($232<<24>>24)==(0);
                if ($234) {
                 $235 = $233&255;
                 $236 = $235 >>> 1;
                 $237 = ($233&255)<(22);
                 if ($237) {
                  $2294 = 1;$240 = 10;$261 = $236;
                 } else {
                  $238 = (($236) + 16)|0;
                  $239 = $238 & 240;
                  $phitmp$i2$i$i$i$i$i$i592 = (($239) + -1)|0;
                  $2294 = 1;$240 = $phitmp$i2$i$i$i$i$i$i592;$261 = $236;
                 }
                } else {
                 $2294 = 0;$240 = 10;$261 = 0;
                }
                $241 = ($240|0)==($242|0);
                if (!($241)) {
                 $243 = ($240|0)==(10);
                 if ($243) {
                  $248 = ((($209)) + 1|0);
                  $249 = HEAP32[$224>>2]|0;
                  if ($2294) {
                   $250 = $233&255;
                   $251 = $250 >>> 1;
                   $252 = (($251) + 1)|0;
                   _memcpy(($248|0),($249|0),($252|0))|0;
                   _free($249);
                  } else {
                   $257 = HEAP8[$249>>0]|0;
                   HEAP8[$248>>0] = $257;
                   _free($249);
                  }
                  $262 = $261 << 1;
                  $263 = $262&255;
                  HEAP8[$209>>0] = $263;
                  break;
                 }
                 $244 = ($240>>>0)<=($242>>>0);
                 $245 = (($240) + 1)|0;
                 $246 = (_malloc($245)|0);
                 $247 = ($246|0)==(0|0);
                 $or$cond$i$i$i$i$i$i594 = $244 & $247;
                 if ($or$cond$i$i$i$i$i$i594) {
                  break;
                 }
                 if ($2294) {
                  $253 = ((($209)) + 1|0);
                  $254 = $233&255;
                  $255 = $254 >>> 1;
                  $256 = (($255) + 1)|0;
                  _memcpy(($246|0),($253|0),($256|0))|0;
                 } else {
                  $258 = HEAP32[$224>>2]|0;
                  $259 = HEAP8[$258>>0]|0;
                  HEAP8[$246>>0] = $259;
                  _free($258);
                 }
                 $260 = $245 | 1;
                 HEAP32[$209>>2] = $260;
                 HEAP32[$226>>2] = $261;
                 HEAP32[$224>>2] = $246;
                }
               }
              } while(0);
              ;HEAP32[$209>>2]=HEAP32[$0>>2]|0;HEAP32[$209+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$209+8>>2]=HEAP32[$0+8>>2]|0;
              $__i$0$i$i$i$i$i602 = 0;
              while(1) {
               $exitcond$i$i$i$i$i603 = ($__i$0$i$i$i$i$i602|0)==(3);
               if ($exitcond$i$i$i$i$i603) {
                break;
               }
               $264 = (($0) + ($__i$0$i$i$i$i$i602<<2)|0);
               HEAP32[$264>>2] = 0;
               $265 = (($__i$0$i$i$i$i$i602) + 1)|0;
               $__i$0$i$i$i$i$i602 = $265;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
              $$15$i610 = $203;
              break L34;
             }
            } while(0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            ___resumeException($$12$i605|0);
            // unreachable;
           }
          }
         } else {
          $$15$i610 = $first;
         }
        } else {
         $$15$i610 = $first;
        }
       } else {
        $$15$i610 = $first;
       }
      } while(0);
      $$14 = $$15$i610;
      break L1;
      break;
     }
     case 122:  {
      $270 = ($144|0)>(2);
      L85: do {
       if ($270) {
        $271 = HEAP8[$first>>0]|0;
        $272 = ($271<<24>>24)==(97);
        if ($272) {
         $273 = ((($first)) + 1|0);
         $274 = HEAP8[$273>>0]|0;
         $275 = ($274<<24>>24)==(122);
         if ($275) {
          $276 = ((($first)) + 2|0);
          $277 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($276,$last,$db)|0);
          $278 = ($277|0)==($276|0);
          if ($278) {
           $$15$i577 = $first;
          } else {
           $279 = HEAP32[$db>>2]|0;
           $280 = ((($db)) + 4|0);
           $281 = HEAP32[$280>>2]|0;
           $282 = ($279|0)==($281|0);
           if ($282) {
            $$15$i577 = $first;
           } else {
            $283 = ((($281)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$283);
            __THREW__ = 0;
            $284 = (invoke_iiii(92,($5|0),0,(5121|0))|0);
            $285 = __THREW__; __THREW__ = 0;
            $286 = $285&1;
            do {
             if ($286) {
              $340 = ___cxa_find_matching_catch_2()|0;
              $341 = tempRet0;
              $$1$i573 = $341;$$12$i572 = $340;
             } else {
              ;HEAP32[$4>>2]=HEAP32[$284>>2]|0;HEAP32[$4+4>>2]=HEAP32[$284+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$284+8>>2]|0;
              $__i$0$i$i$i$i546 = 0;
              while(1) {
               $exitcond$i$i$i$i547 = ($__i$0$i$i$i$i546|0)==(3);
               if ($exitcond$i$i$i$i547) {
                break;
               }
               $287 = (($284) + ($__i$0$i$i$i$i546<<2)|0);
               HEAP32[$287>>2] = 0;
               $288 = (($__i$0$i$i$i$i546) + 1)|0;
               $__i$0$i$i$i$i546 = $288;
              }
              __THREW__ = 0;
              $289 = (invoke_iii(93,($4|0),(5061|0))|0);
              $290 = __THREW__; __THREW__ = 0;
              $291 = $290&1;
              if ($291) {
               $342 = ___cxa_find_matching_catch_2()|0;
               $343 = tempRet0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
               $$1$i573 = $343;$$12$i572 = $342;
               break;
              }
              ;HEAP32[$3>>2]=HEAP32[$289>>2]|0;HEAP32[$3+4>>2]=HEAP32[$289+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$289+8>>2]|0;
              $__i$0$i$i$i8$i550 = 0;
              while(1) {
               $exitcond$i$i$i9$i551 = ($__i$0$i$i$i8$i550|0)==(3);
               if ($exitcond$i$i$i9$i551) {
                break;
               }
               $292 = (($289) + ($__i$0$i$i$i8$i550<<2)|0);
               HEAP32[$292>>2] = 0;
               $293 = (($__i$0$i$i$i8$i550) + 1)|0;
               $__i$0$i$i$i8$i550 = $293;
              }
              $294 = HEAP8[$283>>0]|0;
              $295 = $294 & 1;
              $296 = ($295<<24>>24)==(0);
              do {
               if ($296) {
                $297 = ((($283)) + 1|0);
                HEAP8[$297>>0] = 0;
                HEAP8[$283>>0] = 0;
               } else {
                $298 = ((($281)) + -16|0);
                $299 = HEAP32[$298>>2]|0;
                HEAP8[$299>>0] = 0;
                $300 = ((($281)) + -20|0);
                HEAP32[$300>>2] = 0;
                $$pre$i$i$i$i554 = HEAP8[$283>>0]|0;
                $301 = $$pre$i$i$i$i554 & 1;
                $302 = ($301<<24>>24)==(0);
                if ($302) {
                 $307 = $$pre$i$i$i$i554;$316 = 10;
                } else {
                 $303 = HEAP32[$283>>2]|0;
                 $304 = $303 & -2;
                 $phitmp$i$i$i$i$i$i$i556 = (($304) + -1)|0;
                 $305 = $303&255;
                 $307 = $305;$316 = $phitmp$i$i$i$i$i$i$i556;
                }
                $306 = $307 & 1;
                $308 = ($306<<24>>24)==(0);
                if ($308) {
                 $309 = $307&255;
                 $310 = $309 >>> 1;
                 $311 = ($307&255)<(22);
                 if ($311) {
                  $2295 = 1;$314 = 10;$335 = $310;
                 } else {
                  $312 = (($310) + 16)|0;
                  $313 = $312 & 240;
                  $phitmp$i2$i$i$i$i$i$i559 = (($313) + -1)|0;
                  $2295 = 1;$314 = $phitmp$i2$i$i$i$i$i$i559;$335 = $310;
                 }
                } else {
                 $2295 = 0;$314 = 10;$335 = 0;
                }
                $315 = ($314|0)==($316|0);
                if (!($315)) {
                 $317 = ($314|0)==(10);
                 if ($317) {
                  $322 = ((($283)) + 1|0);
                  $323 = HEAP32[$298>>2]|0;
                  if ($2295) {
                   $324 = $307&255;
                   $325 = $324 >>> 1;
                   $326 = (($325) + 1)|0;
                   _memcpy(($322|0),($323|0),($326|0))|0;
                   _free($323);
                  } else {
                   $331 = HEAP8[$323>>0]|0;
                   HEAP8[$322>>0] = $331;
                   _free($323);
                  }
                  $336 = $335 << 1;
                  $337 = $336&255;
                  HEAP8[$283>>0] = $337;
                  break;
                 }
                 $318 = ($314>>>0)<=($316>>>0);
                 $319 = (($314) + 1)|0;
                 $320 = (_malloc($319)|0);
                 $321 = ($320|0)==(0|0);
                 $or$cond$i$i$i$i$i$i561 = $318 & $321;
                 if ($or$cond$i$i$i$i$i$i561) {
                  break;
                 }
                 if ($2295) {
                  $327 = ((($283)) + 1|0);
                  $328 = $307&255;
                  $329 = $328 >>> 1;
                  $330 = (($329) + 1)|0;
                  _memcpy(($320|0),($327|0),($330|0))|0;
                 } else {
                  $332 = HEAP32[$298>>2]|0;
                  $333 = HEAP8[$332>>0]|0;
                  HEAP8[$320>>0] = $333;
                  _free($332);
                 }
                 $334 = $319 | 1;
                 HEAP32[$283>>2] = $334;
                 HEAP32[$300>>2] = $335;
                 HEAP32[$298>>2] = $320;
                }
               }
              } while(0);
              ;HEAP32[$283>>2]=HEAP32[$3>>2]|0;HEAP32[$283+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$283+8>>2]=HEAP32[$3+8>>2]|0;
              $__i$0$i$i$i$i$i569 = 0;
              while(1) {
               $exitcond$i$i$i$i$i570 = ($__i$0$i$i$i$i$i569|0)==(3);
               if ($exitcond$i$i$i$i$i570) {
                break;
               }
               $338 = (($3) + ($__i$0$i$i$i$i$i569<<2)|0);
               HEAP32[$338>>2] = 0;
               $339 = (($__i$0$i$i$i$i$i569) + 1)|0;
               $__i$0$i$i$i$i$i569 = $339;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
              $$15$i577 = $277;
              break L85;
             }
            } while(0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
            ___resumeException($$12$i572|0);
            // unreachable;
           }
          }
         } else {
          $$15$i577 = $first;
         }
        } else {
         $$15$i577 = $first;
        }
       } else {
        $$15$i577 = $first;
       }
      } while(0);
      $$14 = $$15$i577;
      break L1;
      break;
     }
     default: {
      $$14 = $first;
      break L1;
     }
     }
     break;
    }
    case 99:  {
     $344 = ((($t$0)) + 1|0);
     $345 = HEAP8[$344>>0]|0;
     $346 = $345 << 24 >> 24;
     switch ($346|0) {
     case 99:  {
      $347 = ($144|0)>(2);
      L138: do {
       if ($347) {
        $348 = HEAP8[$first>>0]|0;
        $349 = ($348<<24>>24)==(99);
        if ($349) {
         $350 = ((($first)) + 1|0);
         $351 = HEAP8[$350>>0]|0;
         $352 = ($351<<24>>24)==(99);
         if ($352) {
          $353 = ((($first)) + 2|0);
          $354 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($353,$last,$db)|0);
          $355 = ($354|0)==($353|0);
          if ($355) {
           $$311$i544 = $first;
          } else {
           $356 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($354,$last,$db)|0);
           $357 = ($356|0)==($354|0);
           if ($357) {
            $$311$i544 = $first;
           } else {
            $358 = ((($db)) + 4|0);
            $359 = HEAP32[$358>>2]|0;
            $360 = HEAP32[$db>>2]|0;
            $361 = (($359) - ($360))|0;
            $362 = (($361|0) / 24)&-1;
            $363 = ($362>>>0)<(2);
            if ($363) {
             $$311$i544 = $first;
            } else {
             $364 = $359;
             $365 = ((($364)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i509,$365);
             $366 = HEAP32[$358>>2]|0;
             $367 = ((($366)) + -24|0);
             $368 = $366;
             while(1) {
              $369 = ($368|0)==($367|0);
              if ($369) {
               break;
              }
              $370 = ((($368)) + -24|0);
              HEAP32[$358>>2] = $370;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($370);
              $$pre$i$i510 = HEAP32[$358>>2]|0;
              $368 = $$pre$i$i510;
             }
             $371 = ((($366)) + -48|0);
             __THREW__ = 0;
             invoke_vii(96,($11|0),($371|0));
             $372 = __THREW__; __THREW__ = 0;
             $373 = $372&1;
             if ($373) {
              $406 = ___cxa_find_matching_catch_2()|0;
              $407 = tempRet0;
              $$4$i535 = $407;$$45$i534 = $406;
             } else {
              __THREW__ = 0;
              $374 = (invoke_iiii(92,($11|0),0,(5131|0))|0);
              $375 = __THREW__; __THREW__ = 0;
              $376 = $375&1;
              if ($376) {
               $408 = ___cxa_find_matching_catch_2()|0;
               $409 = tempRet0;
               $$3$i533 = $409;$$34$i532 = $408;
              } else {
               ;HEAP32[$10>>2]=HEAP32[$374>>2]|0;HEAP32[$10+4>>2]=HEAP32[$374+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$374+8>>2]|0;
               $__i$0$i$i$i$i513 = 0;
               while(1) {
                $exitcond$i$i$i$i514 = ($__i$0$i$i$i$i513|0)==(3);
                if ($exitcond$i$i$i$i514) {
                 break;
                }
                $377 = (($374) + ($__i$0$i$i$i$i513<<2)|0);
                HEAP32[$377>>2] = 0;
                $378 = (($__i$0$i$i$i$i513) + 1)|0;
                $__i$0$i$i$i$i513 = $378;
               }
               __THREW__ = 0;
               $379 = (invoke_iii(93,($10|0),(5143|0))|0);
               $380 = __THREW__; __THREW__ = 0;
               $381 = $380&1;
               if ($381) {
                $410 = ___cxa_find_matching_catch_2()|0;
                $411 = tempRet0;
                $$2$i531 = $411;$$23$i530 = $410;
               } else {
                ;HEAP32[$9>>2]=HEAP32[$379>>2]|0;HEAP32[$9+4>>2]=HEAP32[$379+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$379+8>>2]|0;
                $__i$0$i$i$i17$i517 = 0;
                while(1) {
                 $exitcond$i$i$i18$i518 = ($__i$0$i$i$i17$i517|0)==(3);
                 if ($exitcond$i$i$i18$i518) {
                  break;
                 }
                 $382 = (($379) + ($__i$0$i$i$i17$i517<<2)|0);
                 HEAP32[$382>>2] = 0;
                 $383 = (($__i$0$i$i$i17$i517) + 1)|0;
                 $__i$0$i$i$i17$i517 = $383;
                }
                $384 = HEAP8[$expr$i509>>0]|0;
                $385 = $384 & 1;
                $386 = ($385<<24>>24)==(0);
                $387 = ((($expr$i509)) + 8|0);
                $388 = HEAP32[$387>>2]|0;
                $389 = ((($expr$i509)) + 1|0);
                $390 = $386 ? $389 : $388;
                $391 = ((($expr$i509)) + 4|0);
                $392 = HEAP32[$391>>2]|0;
                $393 = $384&255;
                $394 = $393 >>> 1;
                $395 = $386 ? $394 : $392;
                __THREW__ = 0;
                $396 = (invoke_iiii(91,($9|0),($390|0),($395|0))|0);
                $397 = __THREW__; __THREW__ = 0;
                $398 = $397&1;
                do {
                 if ($398) {
                  $412 = ___cxa_find_matching_catch_2()|0;
                  $413 = tempRet0;
                  $$1$i529 = $413;$$12$i528 = $412;
                 } else {
                  ;HEAP32[$8>>2]=HEAP32[$396>>2]|0;HEAP32[$8+4>>2]=HEAP32[$396+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$396+8>>2]|0;
                  $__i$0$i$i$i20$i521 = 0;
                  while(1) {
                   $exitcond$i$i$i21$i522 = ($__i$0$i$i$i20$i521|0)==(3);
                   if ($exitcond$i$i$i21$i522) {
                    break;
                   }
                   $399 = (($396) + ($__i$0$i$i$i20$i521<<2)|0);
                   HEAP32[$399>>2] = 0;
                   $400 = (($__i$0$i$i$i20$i521) + 1)|0;
                   $__i$0$i$i$i20$i521 = $400;
                  }
                  __THREW__ = 0;
                  $401 = (invoke_iii(93,($8|0),(5061|0))|0);
                  $402 = __THREW__; __THREW__ = 0;
                  $403 = $402&1;
                  if ($403) {
                   $414 = ___cxa_find_matching_catch_2()|0;
                   $415 = tempRet0;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
                   $$1$i529 = $415;$$12$i528 = $414;
                   break;
                  }
                  ;HEAP32[$7>>2]=HEAP32[$401>>2]|0;HEAP32[$7+4>>2]=HEAP32[$401+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$401+8>>2]|0;
                  $__i$0$i$i$i23$i525 = 0;
                  while(1) {
                   $exitcond$i$i$i24$i526 = ($__i$0$i$i$i23$i525|0)==(3);
                   if ($exitcond$i$i$i24$i526) {
                    break;
                   }
                   $404 = (($401) + ($__i$0$i$i$i23$i525<<2)|0);
                   HEAP32[$404>>2] = 0;
                   $405 = (($__i$0$i$i$i23$i525) + 1)|0;
                   $__i$0$i$i$i23$i525 = $405;
                  }
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($6,$7);
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($371,$6);
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i509);
                  $$311$i544 = $356;
                  break L138;
                 }
                } while(0);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
                $$2$i531 = $$1$i529;$$23$i530 = $$12$i528;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
               $$3$i533 = $$2$i531;$$34$i532 = $$23$i530;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
              $$4$i535 = $$3$i533;$$45$i534 = $$34$i532;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i509);
             ___resumeException($$45$i534|0);
             // unreachable;
            }
           }
          }
         } else {
          $$311$i544 = $first;
         }
        } else {
         $$311$i544 = $first;
        }
       } else {
        $$311$i544 = $first;
       }
      } while(0);
      $$14 = $$311$i544;
      break L1;
      break;
     }
     case 108:  {
      L186: do {
       if ($146) {
        $416 = HEAP8[$first>>0]|0;
        $417 = ($416<<24>>24)==(99);
        if ($417) {
         $418 = ((($first)) + 1|0);
         $419 = HEAP8[$418>>0]|0;
         $420 = ($419<<24>>24)==(108);
         if ($420) {
          $421 = ((($first)) + 2|0);
          $422 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($421,$last,$db)|0);
          $423 = ($422|0)==($421|0);
          $424 = ($422|0)==($last|0);
          $or$cond = $423 | $424;
          if ($or$cond) {
           $$6$i508 = $first;
          } else {
           $425 = HEAP32[$db>>2]|0;
           $426 = ((($db)) + 4|0);
           $427 = HEAP32[$426>>2]|0;
           $428 = ($425|0)==($427|0);
           if ($428) {
            $$6$i508 = $first;
           } else {
            $429 = ((($427)) + -24|0);
            $430 = ((($427)) + -12|0);
            $431 = HEAP8[$430>>0]|0;
            $432 = $431 & 1;
            $433 = ($432<<24>>24)==(0);
            $434 = ((($427)) + -4|0);
            $435 = HEAP32[$434>>2]|0;
            $436 = ((($430)) + 1|0);
            $437 = $433 ? $436 : $435;
            $438 = ((($427)) + -8|0);
            $439 = HEAP32[$438>>2]|0;
            $440 = $431&255;
            $441 = $440 >>> 1;
            $442 = $433 ? $441 : $439;
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($429,$437,$442)|0);
            $443 = HEAP32[$426>>2]|0;
            $__i$0$i$i$i468 = 0;
            while(1) {
             $exitcond$i$i$i469 = ($__i$0$i$i$i468|0)==(3);
             if ($exitcond$i$i$i469) {
              break;
             }
             $444 = (($12) + ($__i$0$i$i$i468<<2)|0);
             HEAP32[$444>>2] = 0;
             $445 = (($__i$0$i$i$i468) + 1)|0;
             $__i$0$i$i$i468 = $445;
            }
            $446 = ((($443)) + -12|0);
            $447 = HEAP8[$446>>0]|0;
            $448 = $447 & 1;
            $449 = ($448<<24>>24)==(0);
            do {
             if ($449) {
              $450 = ((($446)) + 1|0);
              HEAP8[$450>>0] = 0;
              HEAP8[$446>>0] = 0;
             } else {
              $451 = ((($443)) + -4|0);
              $452 = HEAP32[$451>>2]|0;
              HEAP8[$452>>0] = 0;
              $453 = ((($443)) + -8|0);
              HEAP32[$453>>2] = 0;
              $$pre$i$i$i$i472 = HEAP8[$446>>0]|0;
              $454 = $$pre$i$i$i$i472 & 1;
              $455 = ($454<<24>>24)==(0);
              if ($455) {
               $460 = $$pre$i$i$i$i472;$469 = 10;
              } else {
               $456 = HEAP32[$446>>2]|0;
               $457 = $456 & -2;
               $phitmp$i$i$i$i$i$i$i474 = (($457) + -1)|0;
               $458 = $456&255;
               $460 = $458;$469 = $phitmp$i$i$i$i$i$i$i474;
              }
              $459 = $460 & 1;
              $461 = ($459<<24>>24)==(0);
              if ($461) {
               $462 = $460&255;
               $463 = $462 >>> 1;
               $464 = ($460&255)<(22);
               if ($464) {
                $2296 = 1;$467 = 10;$488 = $463;
               } else {
                $465 = (($463) + 16)|0;
                $466 = $465 & 240;
                $phitmp$i2$i$i$i$i$i$i477 = (($466) + -1)|0;
                $2296 = 1;$467 = $phitmp$i2$i$i$i$i$i$i477;$488 = $463;
               }
              } else {
               $2296 = 0;$467 = 10;$488 = 0;
              }
              $468 = ($467|0)==($469|0);
              if (!($468)) {
               $470 = ($467|0)==(10);
               if ($470) {
                $475 = ((($446)) + 1|0);
                $476 = HEAP32[$451>>2]|0;
                if ($2296) {
                 $477 = $460&255;
                 $478 = $477 >>> 1;
                 $479 = (($478) + 1)|0;
                 _memcpy(($475|0),($476|0),($479|0))|0;
                 _free($476);
                } else {
                 $484 = HEAP8[$476>>0]|0;
                 HEAP8[$475>>0] = $484;
                 _free($476);
                }
                $489 = $488 << 1;
                $490 = $489&255;
                HEAP8[$446>>0] = $490;
                break;
               }
               $471 = ($467>>>0)<=($469>>>0);
               $472 = (($467) + 1)|0;
               $473 = (_malloc($472)|0);
               $474 = ($473|0)==(0|0);
               $or$cond$i$i$i$i$i$i479 = $471 & $474;
               if (!($or$cond$i$i$i$i$i$i479)) {
                if ($2296) {
                 $480 = ((($446)) + 1|0);
                 $481 = $460&255;
                 $482 = $481 >>> 1;
                 $483 = (($482) + 1)|0;
                 _memcpy(($473|0),($480|0),($483|0))|0;
                } else {
                 $485 = HEAP32[$451>>2]|0;
                 $486 = HEAP8[$485>>0]|0;
                 HEAP8[$473>>0] = $486;
                 _free($485);
                }
                $487 = $472 | 1;
                HEAP32[$446>>2] = $487;
                HEAP32[$453>>2] = $488;
                HEAP32[$451>>2] = $473;
               }
              }
             }
            } while(0);
            ;HEAP32[$446>>2]=HEAP32[$12>>2]|0;HEAP32[$446+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$446+8>>2]=HEAP32[$12+8>>2]|0;
            $__i$0$i$i$i$i$i487 = 0;
            while(1) {
             $exitcond$i$i$i$i$i488 = ($__i$0$i$i$i$i$i487|0)==(3);
             if ($exitcond$i$i$i$i$i488) {
              break;
             }
             $491 = (($12) + ($__i$0$i$i$i$i$i487<<2)|0);
             HEAP32[$491>>2] = 0;
             $492 = (($__i$0$i$i$i$i$i487) + 1)|0;
             $__i$0$i$i$i$i$i487 = $492;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
            $493 = HEAP32[$426>>2]|0;
            $494 = ((($493)) + -24|0);
            (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($494,5059)|0);
            $495 = ((($tmp$i467)) + 4|0);
            $496 = ((($tmp$i467)) + 8|0);
            $497 = ((($tmp$i467)) + 1|0);
            $t$0$i490 = $422;
            while(1) {
             $498 = HEAP8[$t$0$i490>>0]|0;
             $499 = ($498<<24>>24)==(69);
             if ($499) {
              $t$0$i490$lcssa = $t$0$i490;
              label = 183;
              break;
             }
             $500 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$0$i490,$last,$db)|0);
             $501 = ($500|0)==($t$0$i490|0);
             $502 = ($500|0)==($last|0);
             $or$cond$i492 = $501 | $502;
             if ($or$cond$i492) {
              $$6$i508 = $first;
              break L186;
             }
             $503 = HEAP32[$db>>2]|0;
             $504 = HEAP32[$426>>2]|0;
             $505 = ($503|0)==($504|0);
             if ($505) {
              $$6$i508 = $first;
              break L186;
             }
             $506 = ((($504)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp$i467,$506);
             $507 = HEAP32[$426>>2]|0;
             $508 = ((($507)) + -24|0);
             $509 = $507;
             while(1) {
              $510 = ($509|0)==($508|0);
              if ($510) {
               break;
              }
              $511 = ((($509)) + -24|0);
              HEAP32[$426>>2] = $511;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($511);
              $$pre$i$i493 = HEAP32[$426>>2]|0;
              $509 = $$pre$i$i493;
             }
             $512 = HEAP8[$tmp$i467>>0]|0;
             $513 = $512 & 1;
             $514 = ($513<<24>>24)==(0);
             $515 = HEAP32[$495>>2]|0;
             $516 = $512&255;
             $517 = $516 >>> 1;
             $518 = $514 ? $517 : $515;
             $519 = ($518|0)==(0);
             if (!($519)) {
              $520 = HEAP32[$db>>2]|0;
              $521 = ($520|0)==($508|0);
              if ($521) {
               label = 182;
               break;
              }
              $524 = ((($507)) + -48|0);
              $525 = HEAP32[$496>>2]|0;
              $526 = $514 ? $497 : $525;
              __THREW__ = 0;
              (invoke_iiii(91,($524|0),($526|0),($518|0))|0);
              $527 = __THREW__; __THREW__ = 0;
              $528 = $527&1;
              if ($528) {
               label = 179;
               break;
              }
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i467);
             $t$0$i490 = $500;
            }
            if ((label|0) == 179) {
             $522 = ___cxa_find_matching_catch_2()|0;
             $523 = tempRet0;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i467);
             ___resumeException($522|0);
             // unreachable;
            }
            else if ((label|0) == 182) {
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i467);
             $$6$i508 = $first;
             break;
            }
            else if ((label|0) == 183) {
             $529 = HEAP32[$db>>2]|0;
             $530 = HEAP32[$426>>2]|0;
             $531 = ($529|0)==($530|0);
             if ($531) {
              $$6$i508 = $first;
              break;
             }
             $532 = ((($t$0$i490$lcssa)) + 1|0);
             $533 = ((($530)) + -24|0);
             (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($533,5061)|0);
             $$6$i508 = $532;
             break;
            }
           }
          }
         } else {
          $$6$i508 = $first;
         }
        } else {
         $$6$i508 = $first;
        }
       } else {
        $$6$i508 = $first;
       }
      } while(0);
      $$14 = $$6$i508;
      break L1;
      break;
     }
     case 109:  {
      $534 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($79,5146,1);
      __THREW__ = 0;
      $535 = (invoke_iiiii(108,($534|0),($last|0),($79|0),($db|0))|0);
      $536 = __THREW__; __THREW__ = 0;
      $537 = $536&1;
      if ($537) {
       $539 = ___cxa_find_matching_catch_2()|0;
       $540 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($79);
       $$23 = $539;$$2368 = $540;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($79);
       $538 = ($535|0)==($534|0);
       $first$83 = $538 ? $first : $535;
       $$14 = $first$83;
       break L1;
      }
      break;
     }
     case 111:  {
      $541 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($80,5148,1);
      __THREW__ = 0;
      $542 = (invoke_iiiii(109,($541|0),($last|0),($80|0),($db|0))|0);
      $543 = __THREW__; __THREW__ = 0;
      $544 = $543&1;
      if ($544) {
       $546 = ___cxa_find_matching_catch_2()|0;
       $547 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($80);
       $$23 = $546;$$2368 = $547;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($80);
       $545 = ($542|0)==($541|0);
       $first$84 = $545 ? $first : $542;
       $$14 = $first$84;
       break L1;
      }
      break;
     }
     case 118:  {
      $548 = ($144|0)>(2);
      L252: do {
       if ($548) {
        $549 = HEAP8[$first>>0]|0;
        $550 = ($549<<24>>24)==(99);
        if ($550) {
         $551 = ((($first)) + 1|0);
         $552 = HEAP8[$551>>0]|0;
         $553 = ($552<<24>>24)==(118);
         if ($553) {
          $554 = ((($db)) + 63|0);
          $555 = HEAP8[$554>>0]|0;
          HEAP8[$554>>0] = 0;
          $556 = ((($first)) + 2|0);
          $557 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($556,$last,$db)|0);
          HEAP8[$554>>0] = $555;
          $558 = ($557|0)==($556|0);
          $559 = ($557|0)==($last|0);
          $or$cond$i442 = $558 | $559;
          if ($or$cond$i442) {
           $$10$i = $first;
          } else {
           $560 = HEAP8[$557>>0]|0;
           $561 = ($560<<24>>24)==(95);
           if ($561) {
            $564 = ((($557)) + 1|0);
            $565 = ($564|0)==($last|0);
            if ($565) {
             $$10$i = $first;
             break;
            }
            $566 = HEAP8[$564>>0]|0;
            $567 = ($566<<24>>24)==(69);
            L260: do {
             if ($567) {
              $568 = ((($db)) + 4|0);
              $569 = HEAP32[$568>>2]|0;
              $570 = ((($db)) + 8|0);
              $571 = HEAP32[$570>>2]|0;
              $572 = ($569>>>0)<($571>>>0);
              $573 = $571;
              if ($572) {
               ;HEAP32[$569>>2]=0|0;HEAP32[$569+4>>2]=0|0;HEAP32[$569+8>>2]=0|0;HEAP32[$569+12>>2]=0|0;HEAP32[$569+16>>2]=0|0;HEAP32[$569+20>>2]=0|0;
               $__i$0$i$i$i$i$i$i$i = 0;
               while(1) {
                $exitcond$i$i$i$i$i$i$i = ($__i$0$i$i$i$i$i$i$i|0)==(3);
                if ($exitcond$i$i$i$i$i$i$i) {
                 break;
                }
                $574 = (($569) + ($__i$0$i$i$i$i$i$i$i<<2)|0);
                HEAP32[$574>>2] = 0;
                $575 = (($__i$0$i$i$i$i$i$i$i) + 1)|0;
                $__i$0$i$i$i$i$i$i$i = $575;
               }
               $576 = ((($569)) + 12|0);
               $__i$0$i$i1$i$i$i$i$i = 0;
               while(1) {
                $exitcond$i$i2$i$i$i$i$i = ($__i$0$i$i1$i$i$i$i$i|0)==(3);
                if ($exitcond$i$i2$i$i$i$i$i) {
                 break;
                }
                $577 = (($576) + ($__i$0$i$i1$i$i$i$i$i<<2)|0);
                HEAP32[$577>>2] = 0;
                $578 = (($__i$0$i$i1$i$i$i$i$i) + 1)|0;
                $__i$0$i$i1$i$i$i$i$i = $578;
               }
               $579 = HEAP32[$568>>2]|0;
               $580 = ((($579)) + 24|0);
               HEAP32[$568>>2] = $580;
               $t$4$i448 = $564;
               break;
              }
              $581 = $569;
              $582 = ((($db)) + 12|0);
              $583 = HEAP32[$db>>2]|0;
              $584 = (($581) - ($583))|0;
              $585 = (($584|0) / 24)&-1;
              $586 = (($585) + 1)|0;
              $587 = ($584|0)<(-24);
              if ($587) {
               __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
               // unreachable;
              }
              $588 = (($573) - ($583))|0;
              $589 = (($588|0) / 24)&-1;
              $590 = ($589>>>0)<(1073741823);
              if ($590) {
               $591 = $589 << 1;
               $592 = ($591>>>0)<($586>>>0);
               $593 = $592 ? $586 : $591;
               $$0$i$i$i$i444 = $593;
              } else {
               $$0$i$i$i$i444 = 2147483647;
              }
              __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i441,$$0$i$i$i$i444,$585,$582);
              $594 = ((($__v$i$i$i441)) + 8|0);
              $595 = HEAP32[$594>>2]|0;
              ;HEAP32[$595>>2]=0|0;HEAP32[$595+4>>2]=0|0;HEAP32[$595+8>>2]=0|0;HEAP32[$595+12>>2]=0|0;HEAP32[$595+16>>2]=0|0;HEAP32[$595+20>>2]=0|0;
              $__i$0$i$i$i$i$i$i$i$i = 0;
              while(1) {
               $exitcond$i$i$i$i$i$i$i$i = ($__i$0$i$i$i$i$i$i$i$i|0)==(3);
               if ($exitcond$i$i$i$i$i$i$i$i) {
                break;
               }
               $596 = (($595) + ($__i$0$i$i$i$i$i$i$i$i<<2)|0);
               HEAP32[$596>>2] = 0;
               $597 = (($__i$0$i$i$i$i$i$i$i$i) + 1)|0;
               $__i$0$i$i$i$i$i$i$i$i = $597;
              }
              $598 = ((($595)) + 12|0);
              $__i$0$i$i1$i$i$i$i$i$i = 0;
              while(1) {
               $exitcond$i$i2$i$i$i$i$i$i = ($__i$0$i$i1$i$i$i$i$i$i|0)==(3);
               if ($exitcond$i$i2$i$i$i$i$i$i) {
                break;
               }
               $599 = (($598) + ($__i$0$i$i1$i$i$i$i$i$i<<2)|0);
               HEAP32[$599>>2] = 0;
               $600 = (($__i$0$i$i1$i$i$i$i$i$i) + 1)|0;
               $__i$0$i$i1$i$i$i$i$i$i = $600;
              }
              $601 = ((($595)) + 24|0);
              HEAP32[$594>>2] = $601;
              __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i441);
              __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i441);
              $t$4$i448 = $564;
             } else {
              $602 = $566;$t$1$i445 = $564;
              while(1) {
               $603 = ($602<<24>>24)==(69);
               if ($603) {
                $t$4$i448 = $t$1$i445;
                break L260;
               }
               $604 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$1$i445,$last,$db)|0);
               $605 = ($604|0)==($t$1$i445|0);
               $606 = ($604|0)==($last|0);
               $or$cond25$i = $605 | $606;
               if ($or$cond25$i) {
                $$10$i = $first;
                break L252;
               }
               $t$2$i = $or$cond25$i ? $t$1$i445 : $604;
               $$pre732 = HEAP8[$t$2$i>>0]|0;
               $602 = $$pre732;$t$1$i445 = $604;
              }
             }
            } while(0);
            $607 = ((($t$4$i448)) + 1|0);
            $t$5$i = $607;
           } else {
            $562 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($557,$last,$db)|0);
            $563 = ($562|0)==($557|0);
            if ($563) {
             $$10$i = $first;
             break;
            } else {
             $t$5$i = $562;
            }
           }
           $608 = ((($db)) + 4|0);
           $609 = HEAP32[$608>>2]|0;
           $610 = HEAP32[$db>>2]|0;
           $611 = (($609) - ($610))|0;
           $612 = (($611|0) / 24)&-1;
           $613 = ($612>>>0)<(2);
           if ($613) {
            $$10$i = $first;
           } else {
            $614 = $609;
            $615 = ((($614)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp5$i,$615);
            $616 = HEAP32[$608>>2]|0;
            $617 = ((($616)) + -24|0);
            $618 = $616;
            while(1) {
             $619 = ($618|0)==($617|0);
             if ($619) {
              break;
             }
             $620 = ((($618)) + -24|0);
             HEAP32[$608>>2] = $620;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($620);
             $$pre$i$i449 = HEAP32[$608>>2]|0;
             $618 = $$pre$i$i449;
            }
            $621 = ((($616)) + -48|0);
            __THREW__ = 0;
            invoke_vii(96,($18|0),($621|0));
            $622 = __THREW__; __THREW__ = 0;
            $623 = $622&1;
            if ($623) {
             $656 = ___cxa_find_matching_catch_2()|0;
             $657 = tempRet0;
             $$4$i464 = $657;$$48$i463 = $656;
            } else {
             __THREW__ = 0;
             $624 = (invoke_iiii(92,($18|0),0,(5059|0))|0);
             $625 = __THREW__; __THREW__ = 0;
             $626 = $625&1;
             if ($626) {
              $658 = ___cxa_find_matching_catch_2()|0;
              $659 = tempRet0;
              $$3$i462 = $659;$$37$i461 = $658;
             } else {
              ;HEAP32[$17>>2]=HEAP32[$624>>2]|0;HEAP32[$17+4>>2]=HEAP32[$624+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$624+8>>2]|0;
              $__i$0$i$i$i$i452 = 0;
              while(1) {
               $exitcond$i$i$i$i453 = ($__i$0$i$i$i$i452|0)==(3);
               if ($exitcond$i$i$i$i453) {
                break;
               }
               $627 = (($624) + ($__i$0$i$i$i$i452<<2)|0);
               HEAP32[$627>>2] = 0;
               $628 = (($__i$0$i$i$i$i452) + 1)|0;
               $__i$0$i$i$i$i452 = $628;
              }
              __THREW__ = 0;
              $629 = (invoke_iii(93,($17|0),(5150|0))|0);
              $630 = __THREW__; __THREW__ = 0;
              $631 = $630&1;
              if ($631) {
               $660 = ___cxa_find_matching_catch_2()|0;
               $661 = tempRet0;
               $$2$i460 = $661;$$26$i459 = $660;
              } else {
               ;HEAP32[$16>>2]=HEAP32[$629>>2]|0;HEAP32[$16+4>>2]=HEAP32[$629+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$629+8>>2]|0;
               $__i$0$i$i$i26$i = 0;
               while(1) {
                $exitcond$i$i$i27$i = ($__i$0$i$i$i26$i|0)==(3);
                if ($exitcond$i$i$i27$i) {
                 break;
                }
                $632 = (($629) + ($__i$0$i$i$i26$i<<2)|0);
                HEAP32[$632>>2] = 0;
                $633 = (($__i$0$i$i$i26$i) + 1)|0;
                $__i$0$i$i$i26$i = $633;
               }
               $634 = HEAP8[$tmp5$i>>0]|0;
               $635 = $634 & 1;
               $636 = ($635<<24>>24)==(0);
               $637 = ((($tmp5$i)) + 8|0);
               $638 = HEAP32[$637>>2]|0;
               $639 = ((($tmp5$i)) + 1|0);
               $640 = $636 ? $639 : $638;
               $641 = ((($tmp5$i)) + 4|0);
               $642 = HEAP32[$641>>2]|0;
               $643 = $634&255;
               $644 = $643 >>> 1;
               $645 = $636 ? $644 : $642;
               __THREW__ = 0;
               $646 = (invoke_iiii(91,($16|0),($640|0),($645|0))|0);
               $647 = __THREW__; __THREW__ = 0;
               $648 = $647&1;
               do {
                if ($648) {
                 $662 = ___cxa_find_matching_catch_2()|0;
                 $663 = tempRet0;
                 $$1$i458 = $663;$$15$i457 = $662;
                } else {
                 ;HEAP32[$15>>2]=HEAP32[$646>>2]|0;HEAP32[$15+4>>2]=HEAP32[$646+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$646+8>>2]|0;
                 $__i$0$i$i$i29$i = 0;
                 while(1) {
                  $exitcond$i$i$i30$i = ($__i$0$i$i$i29$i|0)==(3);
                  if ($exitcond$i$i$i30$i) {
                   break;
                  }
                  $649 = (($646) + ($__i$0$i$i$i29$i<<2)|0);
                  HEAP32[$649>>2] = 0;
                  $650 = (($__i$0$i$i$i29$i) + 1)|0;
                  $__i$0$i$i$i29$i = $650;
                 }
                 __THREW__ = 0;
                 $651 = (invoke_iii(93,($15|0),(5061|0))|0);
                 $652 = __THREW__; __THREW__ = 0;
                 $653 = $652&1;
                 if ($653) {
                  $664 = ___cxa_find_matching_catch_2()|0;
                  $665 = tempRet0;
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
                  $$1$i458 = $665;$$15$i457 = $664;
                  break;
                 }
                 ;HEAP32[$14>>2]=HEAP32[$651>>2]|0;HEAP32[$14+4>>2]=HEAP32[$651+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$651+8>>2]|0;
                 $__i$0$i$i$i32$i = 0;
                 while(1) {
                  $exitcond$i$i$i33$i = ($__i$0$i$i$i32$i|0)==(3);
                  if ($exitcond$i$i$i33$i) {
                   break;
                  }
                  $654 = (($651) + ($__i$0$i$i$i32$i<<2)|0);
                  HEAP32[$654>>2] = 0;
                  $655 = (($__i$0$i$i$i32$i) + 1)|0;
                  $__i$0$i$i$i32$i = $655;
                 }
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($13,$14);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($621,$13);
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp5$i);
                 $$10$i = $t$5$i;
                 break L252;
                }
               } while(0);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
               $$2$i460 = $$1$i458;$$26$i459 = $$15$i457;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
              $$3$i462 = $$2$i460;$$37$i461 = $$26$i459;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
             $$4$i464 = $$3$i462;$$48$i463 = $$37$i461;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp5$i);
            ___resumeException($$48$i463|0);
            // unreachable;
           }
          }
         } else {
          $$10$i = $first;
         }
        } else {
         $$10$i = $first;
        }
       } else {
        $$10$i = $first;
       }
      } while(0);
      $$14 = $$10$i;
      break L1;
      break;
     }
     default: {
      $$14 = $first;
      break L1;
     }
     }
     break;
    }
    case 100:  {
     $666 = ((($t$0)) + 1|0);
     $667 = HEAP8[$666>>0]|0;
     $668 = $667 << 24 >> 24;
     switch ($668|0) {
     case 97:  {
      $669 = ((($t$0)) + 2|0);
      $670 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($669,$last,$db)|0);
      $671 = ($670|0)==($669|0);
      if ($671) {
       $$14 = $first;
       break L1;
      }
      $672 = HEAP32[$db>>2]|0;
      $673 = ((($db)) + 4|0);
      $674 = HEAP32[$673>>2]|0;
      $675 = ($672|0)==($674|0);
      if ($675) {
       $$14 = $first;
       break L1;
      }
      $676 = ((($674)) + -24|0);
      L340: do {
       if ($parsed_gs$0$off0) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($83,5153,2);
       } else {
        $__i$0$i$i = 0;
        while(1) {
         $exitcond$i$i = ($__i$0$i$i|0)==(3);
         if ($exitcond$i$i) {
          break L340;
         }
         $677 = (($83) + ($__i$0$i$i<<2)|0);
         HEAP32[$677>>2] = 0;
         $678 = (($__i$0$i$i) + 1)|0;
         $__i$0$i$i = $678;
        }
       }
      } while(0);
      __THREW__ = 0;
      $679 = (invoke_iii(93,($83|0),(5156|0))|0);
      $680 = __THREW__; __THREW__ = 0;
      $681 = $680&1;
      if ($681) {
       $751 = ___cxa_find_matching_catch_2()|0;
       $752 = tempRet0;
       $$226 = $751;$$247 = $752;
      } else {
       ;HEAP32[$82>>2]=HEAP32[$679>>2]|0;HEAP32[$82+4>>2]=HEAP32[$679+4>>2]|0;HEAP32[$82+8>>2]=HEAP32[$679+8>>2]|0;
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $682 = (($679) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$682>>2] = 0;
        $683 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $683;
       }
       $684 = HEAP32[$673>>2]|0;
       $685 = ((($684)) + -24|0);
       __THREW__ = 0;
       invoke_vii(96,($84|0),($685|0));
       $686 = __THREW__; __THREW__ = 0;
       $687 = $686&1;
       do {
        if ($687) {
         $753 = ___cxa_find_matching_catch_2()|0;
         $754 = tempRet0;
         $$125 = $753;$$146 = $754;
        } else {
         $688 = HEAP8[$84>>0]|0;
         $689 = $688 & 1;
         $690 = ($689<<24>>24)==(0);
         $691 = ((($84)) + 8|0);
         $692 = HEAP32[$691>>2]|0;
         $693 = ((($84)) + 1|0);
         $694 = $690 ? $693 : $692;
         $695 = ((($84)) + 4|0);
         $696 = HEAP32[$695>>2]|0;
         $697 = $688&255;
         $698 = $697 >>> 1;
         $699 = $690 ? $698 : $696;
         __THREW__ = 0;
         $700 = (invoke_iiii(91,($82|0),($694|0),($699|0))|0);
         $701 = __THREW__; __THREW__ = 0;
         $702 = $701&1;
         if ($702) {
          $755 = ___cxa_find_matching_catch_2()|0;
          $756 = tempRet0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($84);
          $$125 = $755;$$146 = $756;
          break;
         }
         ;HEAP32[$81>>2]=HEAP32[$700>>2]|0;HEAP32[$81+4>>2]=HEAP32[$700+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$700+8>>2]|0;
         $__i$0$i$i$i118 = 0;
         while(1) {
          $exitcond$i$i$i119 = ($__i$0$i$i$i118|0)==(3);
          if ($exitcond$i$i$i119) {
           break;
          }
          $703 = (($700) + ($__i$0$i$i$i118<<2)|0);
          HEAP32[$703>>2] = 0;
          $704 = (($__i$0$i$i$i118) + 1)|0;
          $__i$0$i$i$i118 = $704;
         }
         $705 = HEAP8[$676>>0]|0;
         $706 = $705 & 1;
         $707 = ($706<<24>>24)==(0);
         do {
          if ($707) {
           $708 = ((($676)) + 1|0);
           HEAP8[$708>>0] = 0;
           HEAP8[$676>>0] = 0;
          } else {
           $709 = ((($674)) + -16|0);
           $710 = HEAP32[$709>>2]|0;
           HEAP8[$710>>0] = 0;
           $711 = ((($674)) + -20|0);
           HEAP32[$711>>2] = 0;
           $$pre$i$i$i = HEAP8[$676>>0]|0;
           $712 = $$pre$i$i$i & 1;
           $713 = ($712<<24>>24)==(0);
           if ($713) {
            $718 = $$pre$i$i$i;$727 = 10;
           } else {
            $714 = HEAP32[$676>>2]|0;
            $715 = $714 & -2;
            $phitmp$i$i$i$i$i$i = (($715) + -1)|0;
            $716 = $714&255;
            $718 = $716;$727 = $phitmp$i$i$i$i$i$i;
           }
           $717 = $718 & 1;
           $719 = ($717<<24>>24)==(0);
           if ($719) {
            $720 = $718&255;
            $721 = $720 >>> 1;
            $722 = ($718&255)<(22);
            if ($722) {
             $2297 = 1;$725 = 10;$746 = $721;
            } else {
             $723 = (($721) + 16)|0;
             $724 = $723 & 240;
             $phitmp$i2$i$i$i$i$i = (($724) + -1)|0;
             $2297 = 1;$725 = $phitmp$i2$i$i$i$i$i;$746 = $721;
            }
           } else {
            $2297 = 0;$725 = 10;$746 = 0;
           }
           $726 = ($725|0)==($727|0);
           if (!($726)) {
            $728 = ($725|0)==(10);
            if ($728) {
             $733 = ((($676)) + 1|0);
             $734 = HEAP32[$709>>2]|0;
             if ($2297) {
              $735 = $718&255;
              $736 = $735 >>> 1;
              $737 = (($736) + 1)|0;
              _memcpy(($733|0),($734|0),($737|0))|0;
              _free($734);
             } else {
              $742 = HEAP8[$734>>0]|0;
              HEAP8[$733>>0] = $742;
              _free($734);
             }
             $747 = $746 << 1;
             $748 = $747&255;
             HEAP8[$676>>0] = $748;
             break;
            }
            $729 = ($725>>>0)<=($727>>>0);
            $730 = (($725) + 1)|0;
            $731 = (_malloc($730)|0);
            $732 = ($731|0)==(0|0);
            $or$cond$i$i$i$i$i = $729 & $732;
            if (!($or$cond$i$i$i$i$i)) {
             if ($2297) {
              $738 = ((($676)) + 1|0);
              $739 = $718&255;
              $740 = $739 >>> 1;
              $741 = (($740) + 1)|0;
              _memcpy(($731|0),($738|0),($741|0))|0;
             } else {
              $743 = HEAP32[$709>>2]|0;
              $744 = HEAP8[$743>>0]|0;
              HEAP8[$731>>0] = $744;
              _free($743);
             }
             $745 = $730 | 1;
             HEAP32[$676>>2] = $745;
             HEAP32[$711>>2] = $746;
             HEAP32[$709>>2] = $731;
            }
           }
          }
         } while(0);
         ;HEAP32[$676>>2]=HEAP32[$81>>2]|0;HEAP32[$676+4>>2]=HEAP32[$81+4>>2]|0;HEAP32[$676+8>>2]=HEAP32[$81+8>>2]|0;
         $__i$0$i$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i$i = ($__i$0$i$i$i$i|0)==(3);
          if ($exitcond$i$i$i$i) {
           break;
          }
          $749 = (($81) + ($__i$0$i$i$i$i<<2)|0);
          HEAP32[$749>>2] = 0;
          $750 = (($__i$0$i$i$i$i) + 1)|0;
          $__i$0$i$i$i$i = $750;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($81);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($84);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($82);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($83);
         $$14 = $670;
         break L1;
        }
       } while(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($82);
       $$226 = $$125;$$247 = $$146;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($83);
      $$23 = $$226;$$2368 = $$247;
      break L7;
      break;
     }
     case 99:  {
      $757 = ($144|0)>(2);
      L395: do {
       if ($757) {
        $758 = HEAP8[$first>>0]|0;
        $759 = ($758<<24>>24)==(100);
        if ($759) {
         $760 = ((($first)) + 1|0);
         $761 = HEAP8[$760>>0]|0;
         $762 = ($761<<24>>24)==(99);
         if ($762) {
          $763 = ((($first)) + 2|0);
          $764 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($763,$last,$db)|0);
          $765 = ($764|0)==($763|0);
          if ($765) {
           $$311$i440 = $first;
          } else {
           $766 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($764,$last,$db)|0);
           $767 = ($766|0)==($764|0);
           if ($767) {
            $$311$i440 = $first;
           } else {
            $768 = ((($db)) + 4|0);
            $769 = HEAP32[$768>>2]|0;
            $770 = HEAP32[$db>>2]|0;
            $771 = (($769) - ($770))|0;
            $772 = (($771|0) / 24)&-1;
            $773 = ($772>>>0)<(2);
            if ($773) {
             $$311$i440 = $first;
            } else {
             $774 = $769;
             $775 = ((($774)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i405,$775);
             $776 = HEAP32[$768>>2]|0;
             $777 = ((($776)) + -24|0);
             $778 = $776;
             while(1) {
              $779 = ($778|0)==($777|0);
              if ($779) {
               break;
              }
              $780 = ((($778)) + -24|0);
              HEAP32[$768>>2] = $780;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($780);
              $$pre$i$i406 = HEAP32[$768>>2]|0;
              $778 = $$pre$i$i406;
             }
             $781 = ((($776)) + -48|0);
             __THREW__ = 0;
             invoke_vii(96,($24|0),($781|0));
             $782 = __THREW__; __THREW__ = 0;
             $783 = $782&1;
             if ($783) {
              $816 = ___cxa_find_matching_catch_2()|0;
              $817 = tempRet0;
              $$4$i431 = $817;$$45$i430 = $816;
             } else {
              __THREW__ = 0;
              $784 = (invoke_iiii(92,($24|0),0,(5166|0))|0);
              $785 = __THREW__; __THREW__ = 0;
              $786 = $785&1;
              if ($786) {
               $818 = ___cxa_find_matching_catch_2()|0;
               $819 = tempRet0;
               $$3$i429 = $819;$$34$i428 = $818;
              } else {
               ;HEAP32[$23>>2]=HEAP32[$784>>2]|0;HEAP32[$23+4>>2]=HEAP32[$784+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$784+8>>2]|0;
               $__i$0$i$i$i$i409 = 0;
               while(1) {
                $exitcond$i$i$i$i410 = ($__i$0$i$i$i$i409|0)==(3);
                if ($exitcond$i$i$i$i410) {
                 break;
                }
                $787 = (($784) + ($__i$0$i$i$i$i409<<2)|0);
                HEAP32[$787>>2] = 0;
                $788 = (($__i$0$i$i$i$i409) + 1)|0;
                $__i$0$i$i$i$i409 = $788;
               }
               __THREW__ = 0;
               $789 = (invoke_iii(93,($23|0),(5143|0))|0);
               $790 = __THREW__; __THREW__ = 0;
               $791 = $790&1;
               if ($791) {
                $820 = ___cxa_find_matching_catch_2()|0;
                $821 = tempRet0;
                $$2$i427 = $821;$$23$i426 = $820;
               } else {
                ;HEAP32[$22>>2]=HEAP32[$789>>2]|0;HEAP32[$22+4>>2]=HEAP32[$789+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$789+8>>2]|0;
                $__i$0$i$i$i17$i413 = 0;
                while(1) {
                 $exitcond$i$i$i18$i414 = ($__i$0$i$i$i17$i413|0)==(3);
                 if ($exitcond$i$i$i18$i414) {
                  break;
                 }
                 $792 = (($789) + ($__i$0$i$i$i17$i413<<2)|0);
                 HEAP32[$792>>2] = 0;
                 $793 = (($__i$0$i$i$i17$i413) + 1)|0;
                 $__i$0$i$i$i17$i413 = $793;
                }
                $794 = HEAP8[$expr$i405>>0]|0;
                $795 = $794 & 1;
                $796 = ($795<<24>>24)==(0);
                $797 = ((($expr$i405)) + 8|0);
                $798 = HEAP32[$797>>2]|0;
                $799 = ((($expr$i405)) + 1|0);
                $800 = $796 ? $799 : $798;
                $801 = ((($expr$i405)) + 4|0);
                $802 = HEAP32[$801>>2]|0;
                $803 = $794&255;
                $804 = $803 >>> 1;
                $805 = $796 ? $804 : $802;
                __THREW__ = 0;
                $806 = (invoke_iiii(91,($22|0),($800|0),($805|0))|0);
                $807 = __THREW__; __THREW__ = 0;
                $808 = $807&1;
                do {
                 if ($808) {
                  $822 = ___cxa_find_matching_catch_2()|0;
                  $823 = tempRet0;
                  $$1$i425 = $823;$$12$i424 = $822;
                 } else {
                  ;HEAP32[$21>>2]=HEAP32[$806>>2]|0;HEAP32[$21+4>>2]=HEAP32[$806+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$806+8>>2]|0;
                  $__i$0$i$i$i20$i417 = 0;
                  while(1) {
                   $exitcond$i$i$i21$i418 = ($__i$0$i$i$i20$i417|0)==(3);
                   if ($exitcond$i$i$i21$i418) {
                    break;
                   }
                   $809 = (($806) + ($__i$0$i$i$i20$i417<<2)|0);
                   HEAP32[$809>>2] = 0;
                   $810 = (($__i$0$i$i$i20$i417) + 1)|0;
                   $__i$0$i$i$i20$i417 = $810;
                  }
                  __THREW__ = 0;
                  $811 = (invoke_iii(93,($21|0),(5061|0))|0);
                  $812 = __THREW__; __THREW__ = 0;
                  $813 = $812&1;
                  if ($813) {
                   $824 = ___cxa_find_matching_catch_2()|0;
                   $825 = tempRet0;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
                   $$1$i425 = $825;$$12$i424 = $824;
                   break;
                  }
                  ;HEAP32[$20>>2]=HEAP32[$811>>2]|0;HEAP32[$20+4>>2]=HEAP32[$811+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$811+8>>2]|0;
                  $__i$0$i$i$i23$i421 = 0;
                  while(1) {
                   $exitcond$i$i$i24$i422 = ($__i$0$i$i$i23$i421|0)==(3);
                   if ($exitcond$i$i$i24$i422) {
                    break;
                   }
                   $814 = (($811) + ($__i$0$i$i$i23$i421<<2)|0);
                   HEAP32[$814>>2] = 0;
                   $815 = (($__i$0$i$i$i23$i421) + 1)|0;
                   $__i$0$i$i$i23$i421 = $815;
                  }
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($19,$20);
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($781,$19);
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i405);
                  $$311$i440 = $766;
                  break L395;
                 }
                } while(0);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
                $$2$i427 = $$1$i425;$$23$i426 = $$12$i424;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
               $$3$i429 = $$2$i427;$$34$i428 = $$23$i426;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
              $$4$i431 = $$3$i429;$$45$i430 = $$34$i428;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i405);
             ___resumeException($$45$i430|0);
             // unreachable;
            }
           }
          }
         } else {
          $$311$i440 = $first;
         }
        } else {
         $$311$i440 = $first;
        }
       } else {
        $$311$i440 = $first;
       }
      } while(0);
      $$14 = $$311$i440;
      break L1;
      break;
     }
     case 101:  {
      $826 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($85,5180,1);
      __THREW__ = 0;
      $827 = (invoke_iiiii(109,($826|0),($last|0),($85|0),($db|0))|0);
      $828 = __THREW__; __THREW__ = 0;
      $829 = $828&1;
      if ($829) {
       $831 = ___cxa_find_matching_catch_2()|0;
       $832 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($85);
       $$23 = $831;$$2368 = $832;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($85);
       $830 = ($827|0)==($826|0);
       $first$85 = $830 ? $first : $827;
       $$14 = $first$85;
       break L1;
      }
      break;
     }
     case 108:  {
      $833 = ((($t$0)) + 2|0);
      $834 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($833,$last,$db)|0);
      $835 = ($834|0)==($833|0);
      if ($835) {
       $$14 = $first;
       break L1;
      }
      $836 = HEAP32[$db>>2]|0;
      $837 = ((($db)) + 4|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = ($836|0)==($838|0);
      if ($839) {
       $$14 = $first;
       break L1;
      }
      $840 = ((($838)) + -24|0);
      L449: do {
       if ($parsed_gs$0$off0) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($88,5153,2);
       } else {
        $__i$0$i$i121 = 0;
        while(1) {
         $exitcond$i$i122 = ($__i$0$i$i121|0)==(3);
         if ($exitcond$i$i122) {
          break L449;
         }
         $841 = (($88) + ($__i$0$i$i121<<2)|0);
         HEAP32[$841>>2] = 0;
         $842 = (($__i$0$i$i121) + 1)|0;
         $__i$0$i$i121 = $842;
        }
       }
      } while(0);
      __THREW__ = 0;
      $843 = (invoke_iii(93,($88|0),(5182|0))|0);
      $844 = __THREW__; __THREW__ = 0;
      $845 = $844&1;
      if ($845) {
       $915 = ___cxa_find_matching_catch_2()|0;
       $916 = tempRet0;
       $$529 = $915;$$550 = $916;
      } else {
       ;HEAP32[$87>>2]=HEAP32[$843>>2]|0;HEAP32[$87+4>>2]=HEAP32[$843+4>>2]|0;HEAP32[$87+8>>2]=HEAP32[$843+8>>2]|0;
       $__i$0$i$i$i124 = 0;
       while(1) {
        $exitcond$i$i$i125 = ($__i$0$i$i$i124|0)==(3);
        if ($exitcond$i$i$i125) {
         break;
        }
        $846 = (($843) + ($__i$0$i$i$i124<<2)|0);
        HEAP32[$846>>2] = 0;
        $847 = (($__i$0$i$i$i124) + 1)|0;
        $__i$0$i$i$i124 = $847;
       }
       $848 = HEAP32[$837>>2]|0;
       $849 = ((($848)) + -24|0);
       __THREW__ = 0;
       invoke_vii(96,($89|0),($849|0));
       $850 = __THREW__; __THREW__ = 0;
       $851 = $850&1;
       do {
        if ($851) {
         $917 = ___cxa_find_matching_catch_2()|0;
         $918 = tempRet0;
         $$428 = $917;$$449 = $918;
        } else {
         $852 = HEAP8[$89>>0]|0;
         $853 = $852 & 1;
         $854 = ($853<<24>>24)==(0);
         $855 = ((($89)) + 8|0);
         $856 = HEAP32[$855>>2]|0;
         $857 = ((($89)) + 1|0);
         $858 = $854 ? $857 : $856;
         $859 = ((($89)) + 4|0);
         $860 = HEAP32[$859>>2]|0;
         $861 = $852&255;
         $862 = $861 >>> 1;
         $863 = $854 ? $862 : $860;
         __THREW__ = 0;
         $864 = (invoke_iiii(91,($87|0),($858|0),($863|0))|0);
         $865 = __THREW__; __THREW__ = 0;
         $866 = $865&1;
         if ($866) {
          $919 = ___cxa_find_matching_catch_2()|0;
          $920 = tempRet0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($89);
          $$428 = $919;$$449 = $920;
          break;
         }
         ;HEAP32[$86>>2]=HEAP32[$864>>2]|0;HEAP32[$86+4>>2]=HEAP32[$864+4>>2]|0;HEAP32[$86+8>>2]=HEAP32[$864+8>>2]|0;
         $__i$0$i$i$i128 = 0;
         while(1) {
          $exitcond$i$i$i129 = ($__i$0$i$i$i128|0)==(3);
          if ($exitcond$i$i$i129) {
           break;
          }
          $867 = (($864) + ($__i$0$i$i$i128<<2)|0);
          HEAP32[$867>>2] = 0;
          $868 = (($__i$0$i$i$i128) + 1)|0;
          $__i$0$i$i$i128 = $868;
         }
         $869 = HEAP8[$840>>0]|0;
         $870 = $869 & 1;
         $871 = ($870<<24>>24)==(0);
         do {
          if ($871) {
           $872 = ((($840)) + 1|0);
           HEAP8[$872>>0] = 0;
           HEAP8[$840>>0] = 0;
          } else {
           $873 = ((($838)) + -16|0);
           $874 = HEAP32[$873>>2]|0;
           HEAP8[$874>>0] = 0;
           $875 = ((($838)) + -20|0);
           HEAP32[$875>>2] = 0;
           $$pre$i$i$i133 = HEAP8[$840>>0]|0;
           $876 = $$pre$i$i$i133 & 1;
           $877 = ($876<<24>>24)==(0);
           if ($877) {
            $882 = $$pre$i$i$i133;$891 = 10;
           } else {
            $878 = HEAP32[$840>>2]|0;
            $879 = $878 & -2;
            $phitmp$i$i$i$i$i$i135 = (($879) + -1)|0;
            $880 = $878&255;
            $882 = $880;$891 = $phitmp$i$i$i$i$i$i135;
           }
           $881 = $882 & 1;
           $883 = ($881<<24>>24)==(0);
           if ($883) {
            $884 = $882&255;
            $885 = $884 >>> 1;
            $886 = ($882&255)<(22);
            if ($886) {
             $2298 = 1;$889 = 10;$910 = $885;
            } else {
             $887 = (($885) + 16)|0;
             $888 = $887 & 240;
             $phitmp$i2$i$i$i$i$i138 = (($888) + -1)|0;
             $2298 = 1;$889 = $phitmp$i2$i$i$i$i$i138;$910 = $885;
            }
           } else {
            $2298 = 0;$889 = 10;$910 = 0;
           }
           $890 = ($889|0)==($891|0);
           if (!($890)) {
            $892 = ($889|0)==(10);
            if ($892) {
             $897 = ((($840)) + 1|0);
             $898 = HEAP32[$873>>2]|0;
             if ($2298) {
              $899 = $882&255;
              $900 = $899 >>> 1;
              $901 = (($900) + 1)|0;
              _memcpy(($897|0),($898|0),($901|0))|0;
              _free($898);
             } else {
              $906 = HEAP8[$898>>0]|0;
              HEAP8[$897>>0] = $906;
              _free($898);
             }
             $911 = $910 << 1;
             $912 = $911&255;
             HEAP8[$840>>0] = $912;
             break;
            }
            $893 = ($889>>>0)<=($891>>>0);
            $894 = (($889) + 1)|0;
            $895 = (_malloc($894)|0);
            $896 = ($895|0)==(0|0);
            $or$cond$i$i$i$i$i140 = $893 & $896;
            if (!($or$cond$i$i$i$i$i140)) {
             if ($2298) {
              $902 = ((($840)) + 1|0);
              $903 = $882&255;
              $904 = $903 >>> 1;
              $905 = (($904) + 1)|0;
              _memcpy(($895|0),($902|0),($905|0))|0;
             } else {
              $907 = HEAP32[$873>>2]|0;
              $908 = HEAP8[$907>>0]|0;
              HEAP8[$895>>0] = $908;
              _free($907);
             }
             $909 = $894 | 1;
             HEAP32[$840>>2] = $909;
             HEAP32[$875>>2] = $910;
             HEAP32[$873>>2] = $895;
            }
           }
          }
         } while(0);
         ;HEAP32[$840>>2]=HEAP32[$86>>2]|0;HEAP32[$840+4>>2]=HEAP32[$86+4>>2]|0;HEAP32[$840+8>>2]=HEAP32[$86+8>>2]|0;
         $__i$0$i$i$i$i148 = 0;
         while(1) {
          $exitcond$i$i$i$i149 = ($__i$0$i$i$i$i148|0)==(3);
          if ($exitcond$i$i$i$i149) {
           break;
          }
          $913 = (($86) + ($__i$0$i$i$i$i148<<2)|0);
          HEAP32[$913>>2] = 0;
          $914 = (($__i$0$i$i$i$i148) + 1)|0;
          $__i$0$i$i$i$i148 = $914;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($86);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($89);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($87);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($88);
         $$14 = $834;
         break L1;
        }
       } while(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($87);
       $$529 = $$428;$$550 = $$449;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($88);
      $$23 = $$529;$$2368 = $$550;
      break L7;
      break;
     }
     case 110:  {
      $921 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
      $$14 = $921;
      break L1;
      break;
     }
     case 115:  {
      $922 = ($144|0)>(2);
      L505: do {
       if ($922) {
        $923 = HEAP8[$first>>0]|0;
        $924 = ($923<<24>>24)==(100);
        if ($924) {
         $925 = ((($first)) + 1|0);
         $926 = HEAP8[$925>>0]|0;
         $927 = ($926<<24>>24)==(115);
         if ($927) {
          $928 = ((($first)) + 2|0);
          $929 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($928,$last,$db)|0);
          $930 = ($929|0)==($928|0);
          if ($930) {
           $$3$i404 = $first;
          } else {
           $931 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($929,$last,$db)|0);
           $932 = ($931|0)==($929|0);
           if ($932) {
            $$3$i404 = $first;
           } else {
            $933 = ((($db)) + 4|0);
            $934 = HEAP32[$933>>2]|0;
            $935 = HEAP32[$db>>2]|0;
            $936 = (($934) - ($935))|0;
            $937 = (($936|0) / 24)&-1;
            $938 = ($937>>>0)<(2);
            if ($938) {
             $$3$i404 = $first;
            } else {
             $939 = $934;
             $940 = ((($939)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i390,$940);
             $941 = HEAP32[$933>>2]|0;
             $942 = ((($941)) + -24|0);
             $943 = $941;
             while(1) {
              $944 = ($943|0)==($942|0);
              if ($944) {
               break;
              }
              $945 = ((($943)) + -24|0);
              HEAP32[$933>>2] = $945;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($945);
              $$pre$i$i391 = HEAP32[$933>>2]|0;
              $943 = $$pre$i$i391;
             }
             __THREW__ = 0;
             invoke_viii(107,($25|0),(6097|0),($expr$i390|0));
             $946 = __THREW__; __THREW__ = 0;
             $947 = $946&1;
             do {
              if ($947) {
               $963 = ___cxa_find_matching_catch_2()|0;
               $964 = tempRet0;
               $$0$i395 = $964;$$01$i394 = $963;
              } else {
               $948 = ((($941)) + -48|0);
               $949 = HEAP8[$25>>0]|0;
               $950 = $949 & 1;
               $951 = ($950<<24>>24)==(0);
               $952 = ((($25)) + 8|0);
               $953 = HEAP32[$952>>2]|0;
               $954 = ((($25)) + 1|0);
               $955 = $951 ? $954 : $953;
               $956 = ((($25)) + 4|0);
               $957 = HEAP32[$956>>2]|0;
               $958 = $949&255;
               $959 = $958 >>> 1;
               $960 = $951 ? $959 : $957;
               __THREW__ = 0;
               (invoke_iiii(91,($948|0),($955|0),($960|0))|0);
               $961 = __THREW__; __THREW__ = 0;
               $962 = $961&1;
               if ($962) {
                $965 = ___cxa_find_matching_catch_2()|0;
                $966 = tempRet0;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($25);
                $$0$i395 = $966;$$01$i394 = $965;
                break;
               } else {
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($25);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i390);
                $$3$i404 = $931;
                break L505;
               }
              }
             } while(0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i390);
             ___resumeException($$01$i394|0);
             // unreachable;
            }
           }
          }
         } else {
          $$3$i404 = $first;
         }
        } else {
         $$3$i404 = $first;
        }
       } else {
        $$3$i404 = $first;
       }
      } while(0);
      $$14 = $$3$i404;
      break L1;
      break;
     }
     case 116:  {
      $967 = ($144|0)>(2);
      L525: do {
       if ($967) {
        $968 = HEAP8[$first>>0]|0;
        $969 = ($968<<24>>24)==(100);
        if ($969) {
         $970 = ((($first)) + 1|0);
         $971 = HEAP8[$970>>0]|0;
         $972 = ($971<<24>>24)==(116);
         if ($972) {
          $973 = ((($first)) + 2|0);
          $974 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($973,$last,$db)|0);
          $975 = ($974|0)==($973|0);
          if ($975) {
           $$3$i389 = $first;
          } else {
           $976 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($974,$last,$db)|0);
           $977 = ($976|0)==($974|0);
           if ($977) {
            $$3$i389 = $first;
           } else {
            $978 = ((($db)) + 4|0);
            $979 = HEAP32[$978>>2]|0;
            $980 = HEAP32[$db>>2]|0;
            $981 = (($979) - ($980))|0;
            $982 = (($981|0) / 24)&-1;
            $983 = ($982>>>0)<(2);
            if ($983) {
             $$3$i389 = $first;
            } else {
             $984 = $979;
             $985 = ((($984)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i,$985);
             $986 = HEAP32[$978>>2]|0;
             $987 = ((($986)) + -24|0);
             $988 = $986;
             while(1) {
              $989 = ($988|0)==($987|0);
              if ($989) {
               break;
              }
              $990 = ((($988)) + -24|0);
              HEAP32[$978>>2] = $990;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($990);
              $$pre$i$i378 = HEAP32[$978>>2]|0;
              $988 = $$pre$i$i378;
             }
             __THREW__ = 0;
             invoke_viii(107,($26|0),(6100|0),($name$i|0));
             $991 = __THREW__; __THREW__ = 0;
             $992 = $991&1;
             do {
              if ($992) {
               $1008 = ___cxa_find_matching_catch_2()|0;
               $1009 = tempRet0;
               $$0$i382 = $1009;$$01$i381 = $1008;
              } else {
               $993 = ((($986)) + -48|0);
               $994 = HEAP8[$26>>0]|0;
               $995 = $994 & 1;
               $996 = ($995<<24>>24)==(0);
               $997 = ((($26)) + 8|0);
               $998 = HEAP32[$997>>2]|0;
               $999 = ((($26)) + 1|0);
               $1000 = $996 ? $999 : $998;
               $1001 = ((($26)) + 4|0);
               $1002 = HEAP32[$1001>>2]|0;
               $1003 = $994&255;
               $1004 = $1003 >>> 1;
               $1005 = $996 ? $1004 : $1002;
               __THREW__ = 0;
               (invoke_iiii(91,($993|0),($1000|0),($1005|0))|0);
               $1006 = __THREW__; __THREW__ = 0;
               $1007 = $1006&1;
               if ($1007) {
                $1010 = ___cxa_find_matching_catch_2()|0;
                $1011 = tempRet0;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
                $$0$i382 = $1011;$$01$i381 = $1010;
                break;
               } else {
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i);
                $$3$i389 = $976;
                break L525;
               }
              }
             } while(0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i);
             ___resumeException($$01$i381|0);
             // unreachable;
            }
           }
          }
         } else {
          $$3$i389 = $first;
         }
        } else {
         $$3$i389 = $first;
        }
       } else {
        $$3$i389 = $first;
       }
      } while(0);
      $$14 = $$3$i389;
      break L1;
      break;
     }
     case 118:  {
      $1012 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($90,6102,1);
      __THREW__ = 0;
      $1013 = (invoke_iiiii(108,($1012|0),($last|0),($90|0),($db|0))|0);
      $1014 = __THREW__; __THREW__ = 0;
      $1015 = $1014&1;
      if ($1015) {
       $1017 = ___cxa_find_matching_catch_2()|0;
       $1018 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($90);
       $$23 = $1017;$$2368 = $1018;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($90);
       $1016 = ($1013|0)==($1012|0);
       $first$86 = $1016 ? $first : $1013;
       $$14 = $first$86;
       break L1;
      }
      break;
     }
     case 86:  {
      $1019 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($91,6104,2);
      __THREW__ = 0;
      $1020 = (invoke_iiiii(108,($1019|0),($last|0),($91|0),($db|0))|0);
      $1021 = __THREW__; __THREW__ = 0;
      $1022 = $1021&1;
      if ($1022) {
       $1024 = ___cxa_find_matching_catch_2()|0;
       $1025 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($91);
       $$23 = $1024;$$2368 = $1025;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($91);
       $1023 = ($1020|0)==($1019|0);
       $first$87 = $1023 ? $first : $1020;
       $$14 = $first$87;
       break L1;
      }
      break;
     }
     default: {
      $$14 = $first;
      break L1;
     }
     }
     break;
    }
    case 101:  {
     $1026 = ((($t$0)) + 1|0);
     $1027 = HEAP8[$1026>>0]|0;
     $1028 = $1027 << 24 >> 24;
     switch ($1028|0) {
     case 111:  {
      $1029 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($92,6107,1);
      __THREW__ = 0;
      $1030 = (invoke_iiiii(108,($1029|0),($last|0),($92|0),($db|0))|0);
      $1031 = __THREW__; __THREW__ = 0;
      $1032 = $1031&1;
      if ($1032) {
       $1034 = ___cxa_find_matching_catch_2()|0;
       $1035 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($92);
       $$23 = $1034;$$2368 = $1035;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($92);
       $1033 = ($1030|0)==($1029|0);
       $first$88 = $1033 ? $first : $1030;
       $$14 = $first$88;
       break L1;
      }
      break;
     }
     case 79:  {
      $1036 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($93,6109,2);
      __THREW__ = 0;
      $1037 = (invoke_iiiii(108,($1036|0),($last|0),($93|0),($db|0))|0);
      $1038 = __THREW__; __THREW__ = 0;
      $1039 = $1038&1;
      if ($1039) {
       $1041 = ___cxa_find_matching_catch_2()|0;
       $1042 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($93);
       $$23 = $1041;$$2368 = $1042;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($93);
       $1040 = ($1037|0)==($1036|0);
       $first$89 = $1040 ? $first : $1037;
       $$14 = $first$89;
       break L1;
      }
      break;
     }
     case 113:  {
      $1043 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($94,6112,2);
      __THREW__ = 0;
      $1044 = (invoke_iiiii(108,($1043|0),($last|0),($94|0),($db|0))|0);
      $1045 = __THREW__; __THREW__ = 0;
      $1046 = $1045&1;
      if ($1046) {
       $1048 = ___cxa_find_matching_catch_2()|0;
       $1049 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($94);
       $$23 = $1048;$$2368 = $1049;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($94);
       $1047 = ($1044|0)==($1043|0);
       $first$90 = $1047 ? $first : $1044;
       $$14 = $first$90;
       break L1;
      }
      break;
     }
     default: {
      $$14 = $first;
      break L1;
     }
     }
     break;
    }
    case 103:  {
     $1050 = ((($t$0)) + 1|0);
     $1051 = HEAP8[$1050>>0]|0;
     $1052 = $1051 << 24 >> 24;
     switch ($1052|0) {
     case 101:  {
      $1053 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($95,6115,2);
      __THREW__ = 0;
      $1054 = (invoke_iiiii(108,($1053|0),($last|0),($95|0),($db|0))|0);
      $1055 = __THREW__; __THREW__ = 0;
      $1056 = $1055&1;
      if ($1056) {
       $1058 = ___cxa_find_matching_catch_2()|0;
       $1059 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($95);
       $$23 = $1058;$$2368 = $1059;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($95);
       $1057 = ($1054|0)==($1053|0);
       $first$91 = $1057 ? $first : $1054;
       $$14 = $first$91;
       break L1;
      }
      break;
     }
     case 116:  {
      $1060 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($96,5106,1);
      __THREW__ = 0;
      $1061 = (invoke_iiiii(108,($1060|0),($last|0),($96|0),($db|0))|0);
      $1062 = __THREW__; __THREW__ = 0;
      $1063 = $1062&1;
      if ($1063) {
       $1065 = ___cxa_find_matching_catch_2()|0;
       $1066 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($96);
       $$23 = $1065;$$2368 = $1066;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($96);
       $1064 = ($1061|0)==($1060|0);
       $first$92 = $1064 ? $first : $1061;
       $$14 = $first$92;
       break L1;
      }
      break;
     }
     default: {
      $$14 = $first;
      break L1;
     }
     }
     break;
    }
    case 105:  {
     $1067 = ((($t$0)) + 1|0);
     $1068 = HEAP8[$1067>>0]|0;
     $1069 = ($1068<<24>>24)==(120);
     if (!($1069)) {
      $$14 = $first;
      break L1;
     }
     $1070 = ((($first)) + 2|0);
     $1071 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1070,$last,$db)|0);
     $1072 = ($1071|0)==($1070|0);
     if ($1072) {
      $$14 = $first;
      break L1;
     }
     $1073 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1071,$last,$db)|0);
     $1074 = ($1073|0)==($1071|0);
     $1075 = ((($db)) + 4|0);
     if ($1074) {
      $1132 = HEAP32[$1075>>2]|0;
      $1133 = ((($1132)) + -24|0);
      $1134 = $1132;
      while(1) {
       $1135 = ($1134|0)==($1133|0);
       if ($1135) {
        $$14 = $first;
        break L1;
       }
       $1136 = ((($1134)) + -24|0);
       HEAP32[$1075>>2] = $1136;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1136);
       $$pre$i162 = HEAP32[$1075>>2]|0;
       $1134 = $$pre$i162;
      }
     }
     $1076 = HEAP32[$1075>>2]|0;
     $1077 = HEAP32[$db>>2]|0;
     $1078 = (($1076) - ($1077))|0;
     $1079 = (($1078|0) / 24)&-1;
     $1080 = ($1079>>>0)<(2);
     if ($1080) {
      $$14 = $first;
      break L1;
     }
     $1081 = $1076;
     $1082 = ((($1081)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op2,$1082);
     $1083 = HEAP32[$1075>>2]|0;
     $1084 = ((($1083)) + -24|0);
     $1085 = $1083;
     while(1) {
      $1086 = ($1085|0)==($1084|0);
      if ($1086) {
       break;
      }
      $1087 = ((($1085)) + -24|0);
      HEAP32[$1075>>2] = $1087;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1087);
      $$pre$i = HEAP32[$1075>>2]|0;
      $1085 = $$pre$i;
     }
     $1088 = ((($1083)) + -48|0);
     __THREW__ = 0;
     invoke_vii(96,($op1|0),($1088|0));
     $1089 = __THREW__; __THREW__ = 0;
     $1090 = $1089&1;
     if ($1090) {
      $1122 = ___cxa_find_matching_catch_2()|0;
      $1123 = tempRet0;
      $$1034 = $1122;$$1055 = $1123;
     } else {
      $1091 = HEAP32[$1075>>2]|0;
      $1092 = ((($1091)) + -24|0);
      __THREW__ = 0;
      invoke_viii(107,($101|0),(5059|0),($op1|0));
      $1093 = __THREW__; __THREW__ = 0;
      $1094 = $1093&1;
      if ($1094) {
       $1124 = ___cxa_find_matching_catch_2()|0;
       $1125 = tempRet0;
       $$933 = $1124;$$954 = $1125;
      } else {
       __THREW__ = 0;
       $1095 = (invoke_iii(93,($101|0),(6118|0))|0);
       $1096 = __THREW__; __THREW__ = 0;
       $1097 = $1096&1;
       if ($1097) {
        $1126 = ___cxa_find_matching_catch_2()|0;
        $1127 = tempRet0;
        $$832 = $1126;$$853 = $1127;
       } else {
        ;HEAP32[$100>>2]=HEAP32[$1095>>2]|0;HEAP32[$100+4>>2]=HEAP32[$1095+4>>2]|0;HEAP32[$100+8>>2]=HEAP32[$1095+8>>2]|0;
        $__i$0$i$i$i151 = 0;
        while(1) {
         $exitcond$i$i$i152 = ($__i$0$i$i$i151|0)==(3);
         if ($exitcond$i$i$i152) {
          break;
         }
         $1098 = (($1095) + ($__i$0$i$i$i151<<2)|0);
         HEAP32[$1098>>2] = 0;
         $1099 = (($__i$0$i$i$i151) + 1)|0;
         $__i$0$i$i$i151 = $1099;
        }
        $1100 = HEAP8[$op2>>0]|0;
        $1101 = $1100 & 1;
        $1102 = ($1101<<24>>24)==(0);
        $1103 = ((($op2)) + 8|0);
        $1104 = HEAP32[$1103>>2]|0;
        $1105 = ((($op2)) + 1|0);
        $1106 = $1102 ? $1105 : $1104;
        $1107 = ((($op2)) + 4|0);
        $1108 = HEAP32[$1107>>2]|0;
        $1109 = $1100&255;
        $1110 = $1109 >>> 1;
        $1111 = $1102 ? $1110 : $1108;
        __THREW__ = 0;
        $1112 = (invoke_iiii(91,($100|0),($1106|0),($1111|0))|0);
        $1113 = __THREW__; __THREW__ = 0;
        $1114 = $1113&1;
        do {
         if ($1114) {
          $1128 = ___cxa_find_matching_catch_2()|0;
          $1129 = tempRet0;
          $$731 = $1128;$$752 = $1129;
         } else {
          ;HEAP32[$99>>2]=HEAP32[$1112>>2]|0;HEAP32[$99+4>>2]=HEAP32[$1112+4>>2]|0;HEAP32[$99+8>>2]=HEAP32[$1112+8>>2]|0;
          $__i$0$i$i$i155 = 0;
          while(1) {
           $exitcond$i$i$i156 = ($__i$0$i$i$i155|0)==(3);
           if ($exitcond$i$i$i156) {
            break;
           }
           $1115 = (($1112) + ($__i$0$i$i$i155<<2)|0);
           HEAP32[$1115>>2] = 0;
           $1116 = (($__i$0$i$i$i155) + 1)|0;
           $__i$0$i$i$i155 = $1116;
          }
          __THREW__ = 0;
          $1117 = (invoke_iii(93,($99|0),(5057|0))|0);
          $1118 = __THREW__; __THREW__ = 0;
          $1119 = $1118&1;
          if ($1119) {
           $1130 = ___cxa_find_matching_catch_2()|0;
           $1131 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($99);
           $$731 = $1130;$$752 = $1131;
           break;
          }
          ;HEAP32[$98>>2]=HEAP32[$1117>>2]|0;HEAP32[$98+4>>2]=HEAP32[$1117+4>>2]|0;HEAP32[$98+8>>2]=HEAP32[$1117+8>>2]|0;
          $__i$0$i$i$i158 = 0;
          while(1) {
           $exitcond$i$i$i159 = ($__i$0$i$i$i158|0)==(3);
           if ($exitcond$i$i$i159) {
            break;
           }
           $1120 = (($1117) + ($__i$0$i$i$i158<<2)|0);
           HEAP32[$1120>>2] = 0;
           $1121 = (($__i$0$i$i$i158) + 1)|0;
           $__i$0$i$i$i158 = $1121;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($97,$98);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1092,$97);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($97);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($98);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($99);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($100);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($101);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op1);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op2);
          $$14 = $1073;
          break L1;
         }
        } while(0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($100);
        $$832 = $$731;$$853 = $$752;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($101);
       $$933 = $$832;$$954 = $$853;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op1);
      $$1034 = $$933;$$1055 = $$954;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op2);
     $$23 = $$1034;$$2368 = $$1055;
     break;
    }
    case 108:  {
     $1137 = ((($t$0)) + 1|0);
     $1138 = HEAP8[$1137>>0]|0;
     $1139 = $1138 << 24 >> 24;
     switch ($1139|0) {
     case 101:  {
      $1140 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($102,6121,2);
      __THREW__ = 0;
      $1141 = (invoke_iiiii(108,($1140|0),($last|0),($102|0),($db|0))|0);
      $1142 = __THREW__; __THREW__ = 0;
      $1143 = $1142&1;
      if ($1143) {
       $1145 = ___cxa_find_matching_catch_2()|0;
       $1146 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($102);
       $$23 = $1145;$$2368 = $1146;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($102);
       $1144 = ($1141|0)==($1140|0);
       $first$93 = $1144 ? $first : $1141;
       $$14 = $first$93;
       break L1;
      }
      break;
     }
     case 115:  {
      $1147 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($103,6124,2);
      __THREW__ = 0;
      $1148 = (invoke_iiiii(108,($1147|0),($last|0),($103|0),($db|0))|0);
      $1149 = __THREW__; __THREW__ = 0;
      $1150 = $1149&1;
      if ($1150) {
       $1152 = ___cxa_find_matching_catch_2()|0;
       $1153 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($103);
       $$23 = $1152;$$2368 = $1153;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($103);
       $1151 = ($1148|0)==($1147|0);
       $first$94 = $1151 ? $first : $1148;
       $$14 = $first$94;
       break L1;
      }
      break;
     }
     case 83:  {
      $1154 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($104,6127,3);
      __THREW__ = 0;
      $1155 = (invoke_iiiii(108,($1154|0),($last|0),($104|0),($db|0))|0);
      $1156 = __THREW__; __THREW__ = 0;
      $1157 = $1156&1;
      if ($1157) {
       $1159 = ___cxa_find_matching_catch_2()|0;
       $1160 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($104);
       $$23 = $1159;$$2368 = $1160;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($104);
       $1158 = ($1155|0)==($1154|0);
       $first$95 = $1158 ? $first : $1155;
       $$14 = $first$95;
       break L1;
      }
      break;
     }
     case 116:  {
      $1161 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($105,5691,1);
      __THREW__ = 0;
      $1162 = (invoke_iiiii(108,($1161|0),($last|0),($105|0),($db|0))|0);
      $1163 = __THREW__; __THREW__ = 0;
      $1164 = $1163&1;
      if ($1164) {
       $1166 = ___cxa_find_matching_catch_2()|0;
       $1167 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($105);
       $$23 = $1166;$$2368 = $1167;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($105);
       $1165 = ($1162|0)==($1161|0);
       $first$96 = $1165 ? $first : $1162;
       $$14 = $first$96;
       break L1;
      }
      break;
     }
     default: {
      $$14 = $first;
      break L1;
     }
     }
     break;
    }
    case 109:  {
     $1168 = ((($t$0)) + 1|0);
     $1169 = HEAP8[$1168>>0]|0;
     $1170 = $1169 << 24 >> 24;
     switch ($1170|0) {
     case 105:  {
      $1171 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($106,6131,1);
      __THREW__ = 0;
      $1172 = (invoke_iiiii(108,($1171|0),($last|0),($106|0),($db|0))|0);
      $1173 = __THREW__; __THREW__ = 0;
      $1174 = $1173&1;
      if ($1174) {
       $1176 = ___cxa_find_matching_catch_2()|0;
       $1177 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($106);
       $$23 = $1176;$$2368 = $1177;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($106);
       $1175 = ($1172|0)==($1171|0);
       $first$97 = $1175 ? $first : $1172;
       $$14 = $first$97;
       break L1;
      }
      break;
     }
     case 73:  {
      $1178 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($107,6133,2);
      __THREW__ = 0;
      $1179 = (invoke_iiiii(108,($1178|0),($last|0),($107|0),($db|0))|0);
      $1180 = __THREW__; __THREW__ = 0;
      $1181 = $1180&1;
      if ($1181) {
       $1183 = ___cxa_find_matching_catch_2()|0;
       $1184 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($107);
       $$23 = $1183;$$2368 = $1184;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($107);
       $1182 = ($1179|0)==($1178|0);
       $first$98 = $1182 ? $first : $1179;
       $$14 = $first$98;
       break L1;
      }
      break;
     }
     case 108:  {
      $1185 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($108,5180,1);
      __THREW__ = 0;
      $1186 = (invoke_iiiii(108,($1185|0),($last|0),($108|0),($db|0))|0);
      $1187 = __THREW__; __THREW__ = 0;
      $1188 = $1187&1;
      if ($1188) {
       $1190 = ___cxa_find_matching_catch_2()|0;
       $1191 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($108);
       $$23 = $1190;$$2368 = $1191;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($108);
       $1189 = ($1186|0)==($1185|0);
       $first$99 = $1189 ? $first : $1186;
       $$14 = $first$99;
       break L1;
      }
      break;
     }
     case 76:  {
      $1192 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($109,6136,2);
      __THREW__ = 0;
      $1193 = (invoke_iiiii(108,($1192|0),($last|0),($109|0),($db|0))|0);
      $1194 = __THREW__; __THREW__ = 0;
      $1195 = $1194&1;
      if ($1195) {
       $1197 = ___cxa_find_matching_catch_2()|0;
       $1198 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($109);
       $$23 = $1197;$$2368 = $1198;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($109);
       $1196 = ($1193|0)==($1192|0);
       $first$100 = $1196 ? $first : $1193;
       $$14 = $first$100;
       break L1;
      }
      break;
     }
     case 109:  {
      $1199 = ((($first)) + 2|0);
      $1200 = ($1199|0)==($last|0);
      if (!($1200)) {
       $1201 = HEAP8[$1199>>0]|0;
       $1202 = ($1201<<24>>24)==(95);
       if ($1202) {
        $1203 = ((($first)) + 3|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($110,6139,2);
        __THREW__ = 0;
        $1204 = (invoke_iiiii(109,($1203|0),($last|0),($110|0),($db|0))|0);
        $1205 = __THREW__; __THREW__ = 0;
        $1206 = $1205&1;
        if ($1206) {
         $1208 = ___cxa_find_matching_catch_2()|0;
         $1209 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($110);
         $$23 = $1208;$$2368 = $1209;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($110);
         $1207 = ($1204|0)==($1203|0);
         $first$101 = $1207 ? $first : $1204;
         $$14 = $first$101;
         break L1;
        }
       }
      }
      $1210 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1199,$last,$db)|0);
      $1211 = ($1210|0)==($1199|0);
      if ($1211) {
       $$14 = $first;
       break L1;
      }
      $1212 = HEAP32[$db>>2]|0;
      $1213 = ((($db)) + 4|0);
      $1214 = HEAP32[$1213>>2]|0;
      $1215 = ($1212|0)==($1214|0);
      if ($1215) {
       $$14 = $first;
       break L1;
      }
      $1216 = ((($1214)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($114,$1216);
      __THREW__ = 0;
      $1217 = (invoke_iiii(92,($114|0),0,(5059|0))|0);
      $1218 = __THREW__; __THREW__ = 0;
      $1219 = $1218&1;
      do {
       if ($1219) {
        $1227 = ___cxa_find_matching_catch_2()|0;
        $1228 = tempRet0;
        $$1236 = $1227;$$1257 = $1228;
       } else {
        ;HEAP32[$113>>2]=HEAP32[$1217>>2]|0;HEAP32[$113+4>>2]=HEAP32[$1217+4>>2]|0;HEAP32[$113+8>>2]=HEAP32[$1217+8>>2]|0;
        $__i$0$i$i$i164 = 0;
        while(1) {
         $exitcond$i$i$i165 = ($__i$0$i$i$i164|0)==(3);
         if ($exitcond$i$i$i165) {
          break;
         }
         $1220 = (($1217) + ($__i$0$i$i$i164<<2)|0);
         HEAP32[$1220>>2] = 0;
         $1221 = (($__i$0$i$i$i164) + 1)|0;
         $__i$0$i$i$i164 = $1221;
        }
        __THREW__ = 0;
        $1222 = (invoke_iii(93,($113|0),(6142|0))|0);
        $1223 = __THREW__; __THREW__ = 0;
        $1224 = $1223&1;
        if ($1224) {
         $1229 = ___cxa_find_matching_catch_2()|0;
         $1230 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($113);
         $$1236 = $1229;$$1257 = $1230;
         break;
        }
        ;HEAP32[$112>>2]=HEAP32[$1222>>2]|0;HEAP32[$112+4>>2]=HEAP32[$1222+4>>2]|0;HEAP32[$112+8>>2]=HEAP32[$1222+8>>2]|0;
        $__i$0$i$i$i167 = 0;
        while(1) {
         $exitcond$i$i$i168 = ($__i$0$i$i$i167|0)==(3);
         if ($exitcond$i$i$i168) {
          break;
         }
         $1225 = (($1222) + ($__i$0$i$i$i167<<2)|0);
         HEAP32[$1225>>2] = 0;
         $1226 = (($__i$0$i$i$i167) + 1)|0;
         $__i$0$i$i$i167 = $1226;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($111,$112);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1216,$111);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($111);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($112);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($113);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($114);
        $$14 = $1210;
        break L1;
       }
      } while(0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($114);
      $$23 = $$1236;$$2368 = $$1257;
      break L7;
      break;
     }
     default: {
      $$14 = $first;
      break L1;
     }
     }
     break;
    }
    case 110:  {
     $1231 = ((($t$0)) + 1|0);
     $1232 = HEAP8[$1231>>0]|0;
     $1233 = $1232 << 24 >> 24;
     switch ($1233|0) {
     case 119: case 97:  {
      L685: do {
       if ($146) {
        $1234 = HEAP8[$first>>0]|0;
        $1235 = ($1234<<24>>24)==(103);
        if ($1235) {
         $1236 = ((($first)) + 1|0);
         $1237 = HEAP8[$1236>>0]|0;
         $1238 = ($1237<<24>>24)==(115);
         $1239 = ((($first)) + 2|0);
         $$first$i = $1238 ? $1239 : $first;
         $$pre = HEAP8[$$first$i>>0]|0;
         $1240 = $$pre;$parsed_gs$0$off0$i = $1238;$t$0$i334 = $$first$i;
        } else {
         $1240 = $1234;$parsed_gs$0$off0$i = 0;$t$0$i334 = $first;
        }
        $1241 = ($1240<<24>>24)==(110);
        if ($1241) {
         $1242 = ((($t$0$i334)) + 1|0);
         $1243 = HEAP8[$1242>>0]|0;
         switch ($1243<<24>>24) {
         case 97: case 119:  {
          break;
         }
         default: {
          $$16$i377 = $first;
          break L685;
         }
         }
         $1244 = ($1243<<24>>24)==(97);
         $1245 = ((($t$0$i334)) + 2|0);
         $1246 = ($1245|0)==($last|0);
         L692: do {
          if (!($1246)) {
           $has_expr_list$0$off0$i = 0;$t$1$i = $1245;
           while(1) {
            $1247 = HEAP8[$t$1$i>>0]|0;
            $1248 = ($1247<<24>>24)==(95);
            if ($1248) {
             $has_expr_list$0$off0$i$lcssa = $has_expr_list$0$off0$i;$t$1$i$lcssa = $t$1$i;
             break;
            }
            $1249 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$1$i,$last,$db)|0);
            $1250 = ($1249|0)==($t$1$i|0);
            $1251 = ($1249|0)==($last|0);
            $or$cond$i = $1250 | $1251;
            $not$or$cond$i$demorgan = $1250 | $1251;
            $not$or$cond$i = $not$or$cond$i$demorgan ^ 1;
            $has_expr_list$0$off0$$i = $has_expr_list$0$off0$i | $not$or$cond$i;
            if ($or$cond$i) {
             break L692;
            } else {
             $has_expr_list$0$off0$i = $has_expr_list$0$off0$$i;$t$1$i = $1249;
            }
           }
           $1252 = ((($t$1$i$lcssa)) + 1|0);
           $1253 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1252,$last,$db)|0);
           $1254 = ($1253|0)==($1252|0);
           $1255 = ($1253|0)==($last|0);
           $or$cond37$i = $1254 | $1255;
           if (!($or$cond37$i)) {
            $1256 = $1253;
            $1257 = (($142) - ($1256))|0;
            $1258 = ($1257|0)>(2);
            $1259 = HEAP8[$1253>>0]|0;
            $1260 = ($1259<<24>>24)==(112);
            $or$cond759 = $1258 & $1260;
            L698: do {
             if ($or$cond759) {
              $1261 = ((($1253)) + 1|0);
              $1262 = HEAP8[$1261>>0]|0;
              $1263 = ($1262<<24>>24)==(105);
              if (!($1263)) {
               break L692;
              }
              $1264 = ((($1253)) + 2|0);
              $t$3$i = $1264;
              while(1) {
               $1265 = HEAP8[$t$3$i>>0]|0;
               $1266 = ($1265<<24>>24)==(69);
               if ($1266) {
                $has_init$0$off0$i736 = 1;$t$4$i735 = $t$3$i;
                break L698;
               }
               $1267 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$3$i,$last,$db)|0);
               $1268 = ($1267|0)==($t$3$i|0);
               $1269 = ($1267|0)==($last|0);
               $or$cond38$i = $1268 | $1269;
               if ($or$cond38$i) {
                break L692;
               } else {
                $t$3$i = $1267;
               }
              }
             } else {
              $1270 = ($1259<<24>>24)==(69);
              if ($1270) {
               $has_init$0$off0$i736 = 0;$t$4$i735 = $1253;
              } else {
               break L692;
              }
             }
            } while(0);
            $__i$0$i$i$i335 = 0;
            while(1) {
             $exitcond$i$i$i336 = ($__i$0$i$i$i335|0)==(3);
             if ($exitcond$i$i$i336) {
              break;
             }
             $1271 = (($init_list$i) + ($__i$0$i$i$i335<<2)|0);
             HEAP32[$1271>>2] = 0;
             $1272 = (($__i$0$i$i$i335) + 1)|0;
             $__i$0$i$i$i335 = $1272;
            }
            L710: do {
             if ($has_init$0$off0$i736) {
              $1273 = HEAP32[$db>>2]|0;
              $1274 = ((($db)) + 4|0);
              $1275 = HEAP32[$1274>>2]|0;
              $1276 = ($1273|0)==($1275|0);
              if ($1276) {
               $$128$i = $first;$$421$i = 1;
               label = 629;
              } else {
               $1277 = ((($1275)) + -24|0);
               __THREW__ = 0;
               invoke_vii(96,($27|0),($1277|0));
               $1278 = __THREW__; __THREW__ = 0;
               $1279 = $1278&1;
               if ($1279) {
                label = 556;
               } else {
                $1280 = HEAP8[$init_list$i>>0]|0;
                $1281 = $1280 & 1;
                $1282 = ($1281<<24>>24)==(0);
                L714: do {
                 if ($1282) {
                  $1283 = ((($init_list$i)) + 1|0);
                  HEAP8[$1283>>0] = 0;
                  HEAP8[$init_list$i>>0] = 0;
                 } else {
                  $1284 = ((($init_list$i)) + 8|0);
                  $1285 = HEAP32[$1284>>2]|0;
                  HEAP8[$1285>>0] = 0;
                  $1286 = ((($init_list$i)) + 4|0);
                  HEAP32[$1286>>2] = 0;
                  $1287 = HEAP32[$init_list$i>>2]|0;
                  $1288 = $1287 & -2;
                  $phitmp$i$i$i$i$i$i$i340 = (($1288) + -1)|0;
                  $1289 = $1287&255;
                  $1290 = $1289 & 1;
                  $1291 = ($1290<<24>>24)==(0);
                  do {
                   if ($1291) {
                    $1292 = $1287 >>> 1;
                    $1293 = $1292 & 127;
                    $1294 = ($1289&255)<(22);
                    if ($1294) {
                     $1301 = ((($init_list$i)) + 1|0);
                     $1302 = $1287 >>> 1;
                     $1303 = $1302 & 127;
                     $1304 = (($1303) + 1)|0;
                     _memcpy(($1301|0),($1285|0),($1304|0))|0;
                     _free($1285);
                     $$ph741 = $1293;
                     break;
                    }
                    $1295 = (($1293) + 16)|0;
                    $1296 = $1295 & 240;
                    $phitmp$i2$i$i$i$i$i$i343 = (($1296) + -1)|0;
                    $1297 = ($phitmp$i2$i$i$i$i$i$i343|0)==($phitmp$i$i$i$i$i$i$i340|0);
                    if ($1297) {
                     break L714;
                    }
                    $1298 = ($phitmp$i2$i$i$i$i$i$i343>>>0)<=($phitmp$i$i$i$i$i$i$i340>>>0);
                    $1299 = (_malloc($1296)|0);
                    $1300 = ($1299|0)==(0|0);
                    $or$cond$i$i$i$i$i$i345 = $1298 & $1300;
                    if ($or$cond$i$i$i$i$i$i345) {
                     break L714;
                    }
                    $1306 = ((($init_list$i)) + 1|0);
                    $1307 = $1287 >>> 1;
                    $1308 = $1307 & 127;
                    $1309 = (($1308) + 1)|0;
                    _memcpy(($1299|0),($1306|0),($1309|0))|0;
                    $1310 = $1296 | 1;
                    HEAP32[$init_list$i>>2] = $1310;
                    HEAP32[$1286>>2] = $1293;
                    HEAP32[$1284>>2] = $1299;
                    break L714;
                   } else {
                    $1305 = ((($init_list$i)) + 1|0);
                    HEAP8[$1305>>0] = 0;
                    _free($1285);
                    $$ph741 = 0;
                   }
                  } while(0);
                  $1311 = $$ph741 << 1;
                  $1312 = $1311&255;
                  HEAP8[$init_list$i>>0] = $1312;
                 }
                } while(0);
                ;HEAP32[$init_list$i>>2]=HEAP32[$27>>2]|0;HEAP32[$init_list$i+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$init_list$i+8>>2]=HEAP32[$27+8>>2]|0;
                $__i$0$i$i$i$i$i353 = 0;
                while(1) {
                 $exitcond$i$i$i$i$i354 = ($__i$0$i$i$i$i$i353|0)==(3);
                 if ($exitcond$i$i$i$i$i354) {
                  break;
                 }
                 $1313 = (($27) + ($__i$0$i$i$i$i$i353<<2)|0);
                 HEAP32[$1313>>2] = 0;
                 $1314 = (($__i$0$i$i$i$i$i353) + 1)|0;
                 $__i$0$i$i$i$i$i353 = $1314;
                }
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
                $1315 = HEAP32[$1274>>2]|0;
                $1316 = ((($1315)) + -24|0);
                $1317 = $1315;
                while(1) {
                 $1318 = ($1317|0)==($1316|0);
                 if ($1318) {
                  $$pre$phi734Z2D = $1274;$$pre$phiZ2D = $db;$1324 = $1316;
                  label = 557;
                  break L710;
                 }
                 $1319 = ((($1317)) + -24|0);
                 HEAP32[$1274>>2] = $1319;
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1319);
                 $$pre$i$i356 = HEAP32[$1274>>2]|0;
                 $1317 = $$pre$i$i356;
                }
               }
              }
             } else {
              $$phi$trans$insert = ((($db)) + 4|0);
              $$pre731 = HEAP32[$$phi$trans$insert>>2]|0;
              $$pre$phi734Z2D = $$phi$trans$insert;$$pre$phiZ2D = $db;$1324 = $$pre731;
              label = 557;
             }
            } while(0);
            do {
             if ((label|0) == 557) {
              $1322 = HEAP32[$$pre$phiZ2D>>2]|0;
              $1323 = ($1322|0)==($1324|0);
              if ($1323) {
               $$128$i = $first;$$421$i = 1;
               label = 629;
              } else {
               $1325 = ((($1324)) + -24|0);
               __THREW__ = 0;
               invoke_vii(96,($type$i|0),($1325|0));
               $1326 = __THREW__; __THREW__ = 0;
               $1327 = $1326&1;
               if ($1327) {
                label = 556;
               } else {
                $1328 = HEAP32[$$pre$phi734Z2D>>2]|0;
                $1329 = ((($1328)) + -24|0);
                $1330 = $1328;
                while(1) {
                 $1331 = ($1330|0)==($1329|0);
                 if ($1331) {
                  break;
                 }
                 $1332 = ((($1330)) + -24|0);
                 HEAP32[$$pre$phi734Z2D>>2] = $1332;
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1332);
                 $$pre$i40$i = HEAP32[$$pre$phi734Z2D>>2]|0;
                 $1330 = $$pre$i40$i;
                }
                $__i$0$i$i42$i = 0;
                while(1) {
                 $exitcond$i$i43$i = ($__i$0$i$i42$i|0)==(3);
                 if ($exitcond$i$i43$i) {
                  break;
                 }
                 $1333 = (($expr_list$i) + ($__i$0$i$i42$i<<2)|0);
                 HEAP32[$1333>>2] = 0;
                 $1334 = (($__i$0$i$i42$i) + 1)|0;
                 $__i$0$i$i42$i = $1334;
                }
                L747: do {
                 if ($has_expr_list$0$off0$i$lcssa) {
                  $1335 = HEAP32[$$pre$phiZ2D>>2]|0;
                  $1336 = ($1335|0)==($1329|0);
                  if ($1336) {
                   $$027$i = $first;$$320$i = 1;
                   label = 628;
                  } else {
                   $1337 = ((($1328)) + -48|0);
                   __THREW__ = 0;
                   invoke_vii(96,($28|0),($1337|0));
                   $1338 = __THREW__; __THREW__ = 0;
                   $1339 = $1338&1;
                   if ($1339) {
                    $1380 = ___cxa_find_matching_catch_2()|0;
                    $1381 = tempRet0;
                    $$3$i373 = $1381;$$37$i = $1380;
                    label = 631;
                    break;
                   }
                   $1340 = HEAP8[$expr_list$i>>0]|0;
                   $1341 = $1340 & 1;
                   $1342 = ($1341<<24>>24)==(0);
                   L753: do {
                    if ($1342) {
                     $1343 = ((($expr_list$i)) + 1|0);
                     HEAP8[$1343>>0] = 0;
                     HEAP8[$expr_list$i>>0] = 0;
                    } else {
                     $1344 = ((($expr_list$i)) + 8|0);
                     $1345 = HEAP32[$1344>>2]|0;
                     HEAP8[$1345>>0] = 0;
                     $1346 = ((($expr_list$i)) + 4|0);
                     HEAP32[$1346>>2] = 0;
                     $1347 = HEAP32[$expr_list$i>>2]|0;
                     $1348 = $1347 & -2;
                     $phitmp$i$i$i$i$i$i48$i = (($1348) + -1)|0;
                     $1349 = $1347&255;
                     $1350 = $1349 & 1;
                     $1351 = ($1350<<24>>24)==(0);
                     do {
                      if ($1351) {
                       $1352 = $1347 >>> 1;
                       $1353 = $1352 & 127;
                       $1354 = ($1349&255)<(22);
                       if ($1354) {
                        $1361 = ((($expr_list$i)) + 1|0);
                        $1362 = $1347 >>> 1;
                        $1363 = $1362 & 127;
                        $1364 = (($1363) + 1)|0;
                        _memcpy(($1361|0),($1345|0),($1364|0))|0;
                        _free($1345);
                        $$ph743747 = $1353;
                        break;
                       }
                       $1355 = (($1353) + 16)|0;
                       $1356 = $1355 & 240;
                       $phitmp$i2$i$i$i$i$i51$i = (($1356) + -1)|0;
                       $1357 = ($phitmp$i2$i$i$i$i$i51$i|0)==($phitmp$i$i$i$i$i$i48$i|0);
                       if ($1357) {
                        break L753;
                       }
                       $1358 = ($phitmp$i2$i$i$i$i$i51$i>>>0)<=($phitmp$i$i$i$i$i$i48$i>>>0);
                       $1359 = (_malloc($1356)|0);
                       $1360 = ($1359|0)==(0|0);
                       $or$cond$i$i$i$i$i53$i = $1358 & $1360;
                       if ($or$cond$i$i$i$i$i53$i) {
                        break L753;
                       }
                       $1366 = ((($expr_list$i)) + 1|0);
                       $1367 = $1347 >>> 1;
                       $1368 = $1367 & 127;
                       $1369 = (($1368) + 1)|0;
                       _memcpy(($1359|0),($1366|0),($1369|0))|0;
                       $1370 = $1356 | 1;
                       HEAP32[$expr_list$i>>2] = $1370;
                       HEAP32[$1346>>2] = $1353;
                       HEAP32[$1344>>2] = $1359;
                       break L753;
                      } else {
                       $1365 = ((($expr_list$i)) + 1|0);
                       HEAP8[$1365>>0] = 0;
                       _free($1345);
                       $$ph743747 = 0;
                      }
                     } while(0);
                     $1371 = $$ph743747 << 1;
                     $1372 = $1371&255;
                     HEAP8[$expr_list$i>>0] = $1372;
                    }
                   } while(0);
                   ;HEAP32[$expr_list$i>>2]=HEAP32[$28>>2]|0;HEAP32[$expr_list$i+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$expr_list$i+8>>2]=HEAP32[$28+8>>2]|0;
                   $__i$0$i$i$i$i61$i = 0;
                   while(1) {
                    $exitcond$i$i$i$i62$i = ($__i$0$i$i$i$i61$i|0)==(3);
                    if ($exitcond$i$i$i$i62$i) {
                     break;
                    }
                    $1373 = (($28) + ($__i$0$i$i$i$i61$i<<2)|0);
                    HEAP32[$1373>>2] = 0;
                    $1374 = (($__i$0$i$i$i$i61$i) + 1)|0;
                    $__i$0$i$i$i$i61$i = $1374;
                   }
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
                   $1375 = HEAP32[$$pre$phi734Z2D>>2]|0;
                   $1376 = ((($1375)) + -24|0);
                   $1377 = $1375;
                   while(1) {
                    $1378 = ($1377|0)==($1376|0);
                    if ($1378) {
                     label = 585;
                     break L747;
                    }
                    $1379 = ((($1377)) + -24|0);
                    HEAP32[$$pre$phi734Z2D>>2] = $1379;
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1379);
                    $$pre$i64$i = HEAP32[$$pre$phi734Z2D>>2]|0;
                    $1377 = $$pre$i64$i;
                   }
                  }
                 } else {
                  label = 585;
                 }
                } while(0);
                L773: do {
                 if ((label|0) == 585) {
                  $__i$0$i$i66$i = 0;
                  while(1) {
                   $exitcond$i$i67$i = ($__i$0$i$i66$i|0)==(3);
                   if ($exitcond$i$i67$i) {
                    break;
                   }
                   $1382 = (($r$i) + ($__i$0$i$i66$i<<2)|0);
                   HEAP32[$1382>>2] = 0;
                   $1383 = (($__i$0$i$i66$i) + 1)|0;
                   $__i$0$i$i66$i = $1383;
                  }
                  if ($parsed_gs$0$off0$i) {
                   __THREW__ = 0;
                   invoke_viii(110,($r$i|0),(5153|0),2);
                   $1384 = __THREW__; __THREW__ = 0;
                   $1385 = $1384&1;
                   if ($1385) {
                    label = 590;
                   } else {
                    label = 591;
                   }
                  } else {
                   label = 591;
                  }
                  L781: do {
                   if ((label|0) == 591) {
                    if ($1244) {
                     __THREW__ = 0;
                     (invoke_iii(93,($r$i|0),(6146|0))|0);
                     $1388 = __THREW__; __THREW__ = 0;
                     $1389 = $1388&1;
                     if ($1389) {
                      label = 590;
                      break;
                     }
                    } else {
                     __THREW__ = 0;
                     (invoke_iii(93,($r$i|0),(6150|0))|0);
                     $1390 = __THREW__; __THREW__ = 0;
                     $1391 = $1390&1;
                     if ($1391) {
                      label = 590;
                      break;
                     }
                    }
                    L787: do {
                     if ($has_expr_list$0$off0$i$lcssa) {
                      __THREW__ = 0;
                      invoke_viii(107,($30|0),(5059|0),($expr_list$i|0));
                      $1392 = __THREW__; __THREW__ = 0;
                      $1393 = $1392&1;
                      if ($1393) {
                       label = 590;
                       break L781;
                      }
                      __THREW__ = 0;
                      $1394 = (invoke_iii(93,($30|0),(5108|0))|0);
                      $1395 = __THREW__; __THREW__ = 0;
                      $1396 = $1395&1;
                      do {
                       if ($1396) {
                        $1413 = ___cxa_find_matching_catch_2()|0;
                        $1414 = tempRet0;
                        $$0$i364 = $1414;$$04$i = $1413;
                       } else {
                        ;HEAP32[$29>>2]=HEAP32[$1394>>2]|0;HEAP32[$29+4>>2]=HEAP32[$1394+4>>2]|0;HEAP32[$29+8>>2]=HEAP32[$1394+8>>2]|0;
                        $__i$0$i$i$i$i360 = 0;
                        while(1) {
                         $exitcond$i$i$i$i361 = ($__i$0$i$i$i$i360|0)==(3);
                         if ($exitcond$i$i$i$i361) {
                          break;
                         }
                         $1397 = (($1394) + ($__i$0$i$i$i$i360<<2)|0);
                         HEAP32[$1397>>2] = 0;
                         $1398 = (($__i$0$i$i$i$i360) + 1)|0;
                         $__i$0$i$i$i$i360 = $1398;
                        }
                        $1399 = HEAP8[$29>>0]|0;
                        $1400 = $1399 & 1;
                        $1401 = ($1400<<24>>24)==(0);
                        $1402 = ((($29)) + 8|0);
                        $1403 = HEAP32[$1402>>2]|0;
                        $1404 = ((($29)) + 1|0);
                        $1405 = $1401 ? $1404 : $1403;
                        $1406 = ((($29)) + 4|0);
                        $1407 = HEAP32[$1406>>2]|0;
                        $1408 = $1399&255;
                        $1409 = $1408 >>> 1;
                        $1410 = $1401 ? $1409 : $1407;
                        __THREW__ = 0;
                        (invoke_iiii(91,($r$i|0),($1405|0),($1410|0))|0);
                        $1411 = __THREW__; __THREW__ = 0;
                        $1412 = $1411&1;
                        if ($1412) {
                         $1415 = ___cxa_find_matching_catch_2()|0;
                         $1416 = tempRet0;
                         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
                         $$0$i364 = $1416;$$04$i = $1415;
                         break;
                        } else {
                         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
                         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
                         break L787;
                        }
                       }
                      } while(0);
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
                      $$2$i372 = $$0$i364;$$26$i = $$04$i;
                      break L781;
                     }
                    } while(0);
                    $1417 = HEAP8[$type$i>>0]|0;
                    $1418 = $1417 & 1;
                    $1419 = ($1418<<24>>24)==(0);
                    $1420 = ((($type$i)) + 8|0);
                    $1421 = HEAP32[$1420>>2]|0;
                    $1422 = ((($type$i)) + 1|0);
                    $1423 = $1419 ? $1422 : $1421;
                    $1424 = ((($type$i)) + 4|0);
                    $1425 = HEAP32[$1424>>2]|0;
                    $1426 = $1417&255;
                    $1427 = $1426 >>> 1;
                    $1428 = $1419 ? $1427 : $1425;
                    __THREW__ = 0;
                    (invoke_iiii(91,($r$i|0),($1423|0),($1428|0))|0);
                    $1429 = __THREW__; __THREW__ = 0;
                    $1430 = $1429&1;
                    if ($1430) {
                     label = 590;
                     break;
                    }
                    L803: do {
                     if ($has_init$0$off0$i736) {
                      __THREW__ = 0;
                      invoke_viii(107,($32|0),(5111|0),($init_list$i|0));
                      $1431 = __THREW__; __THREW__ = 0;
                      $1432 = $1431&1;
                      if ($1432) {
                       label = 590;
                       break L781;
                      }
                      __THREW__ = 0;
                      $1433 = (invoke_iii(93,($32|0),(5061|0))|0);
                      $1434 = __THREW__; __THREW__ = 0;
                      $1435 = $1434&1;
                      do {
                       if ($1435) {
                        $1452 = ___cxa_find_matching_catch_2()|0;
                        $1453 = tempRet0;
                        $$1$i366 = $1453;$$15$i365 = $1452;
                       } else {
                        ;HEAP32[$31>>2]=HEAP32[$1433>>2]|0;HEAP32[$31+4>>2]=HEAP32[$1433+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$1433+8>>2]|0;
                        $__i$0$i$i$i73$i = 0;
                        while(1) {
                         $exitcond$i$i$i74$i = ($__i$0$i$i$i73$i|0)==(3);
                         if ($exitcond$i$i$i74$i) {
                          break;
                         }
                         $1436 = (($1433) + ($__i$0$i$i$i73$i<<2)|0);
                         HEAP32[$1436>>2] = 0;
                         $1437 = (($__i$0$i$i$i73$i) + 1)|0;
                         $__i$0$i$i$i73$i = $1437;
                        }
                        $1438 = HEAP8[$31>>0]|0;
                        $1439 = $1438 & 1;
                        $1440 = ($1439<<24>>24)==(0);
                        $1441 = ((($31)) + 8|0);
                        $1442 = HEAP32[$1441>>2]|0;
                        $1443 = ((($31)) + 1|0);
                        $1444 = $1440 ? $1443 : $1442;
                        $1445 = ((($31)) + 4|0);
                        $1446 = HEAP32[$1445>>2]|0;
                        $1447 = $1438&255;
                        $1448 = $1447 >>> 1;
                        $1449 = $1440 ? $1448 : $1446;
                        __THREW__ = 0;
                        (invoke_iiii(91,($r$i|0),($1444|0),($1449|0))|0);
                        $1450 = __THREW__; __THREW__ = 0;
                        $1451 = $1450&1;
                        if ($1451) {
                         $1454 = ___cxa_find_matching_catch_2()|0;
                         $1455 = tempRet0;
                         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($31);
                         $$1$i366 = $1455;$$15$i365 = $1454;
                         break;
                        } else {
                         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($31);
                         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($32);
                         break L803;
                        }
                       }
                      } while(0);
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($32);
                      $$2$i372 = $$1$i366;$$26$i = $$15$i365;
                      break L781;
                     }
                    } while(0);
                    ;HEAP32[$34>>2]=HEAP32[$r$i>>2]|0;HEAP32[$34+4>>2]=HEAP32[$r$i+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$r$i+8>>2]|0;
                    $__i$0$i$i79$i = 0;
                    while(1) {
                     $exitcond$i$i80$i = ($__i$0$i$i79$i|0)==(3);
                     if ($exitcond$i$i80$i) {
                      break;
                     }
                     $1456 = (($r$i) + ($__i$0$i$i79$i<<2)|0);
                     HEAP32[$1456>>2] = 0;
                     $1457 = (($__i$0$i$i79$i) + 1)|0;
                     $__i$0$i$i79$i = $1457;
                    }
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($33,$34);
                    $1458 = HEAP32[$$pre$phi734Z2D>>2]|0;
                    $1459 = ((($db)) + 8|0);
                    $1460 = HEAP32[$1459>>2]|0;
                    $1461 = ($1458>>>0)<($1460>>>0);
                    $1462 = $1460;
                    if ($1461) {
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1458,$33);
                     $1463 = HEAP32[$$pre$phi734Z2D>>2]|0;
                     $1464 = ((($1463)) + 24|0);
                     HEAP32[$$pre$phi734Z2D>>2] = $1464;
                    } else {
                     $1465 = $1458;
                     $1466 = ((($db)) + 12|0);
                     $1467 = HEAP32[$db>>2]|0;
                     $1468 = (($1465) - ($1467))|0;
                     $1469 = (($1468|0) / 24)&-1;
                     $1470 = (($1469) + 1)|0;
                     $1471 = ($1468|0)<(-24);
                     if ($1471) {
                      __THREW__ = 0;
                      invoke_vi(102,($db|0));
                      $1472 = __THREW__; __THREW__ = 0;
                      $1473 = ___cxa_find_matching_catch_2()|0;
                      $1474 = tempRet0;
                      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($34);
                      $$2$i372 = $1474;$$26$i = $1473;
                      break;
                     }
                     $1475 = (($1462) - ($1467))|0;
                     $1476 = (($1475|0) / 24)&-1;
                     $1477 = ($1476>>>0)<(1073741823);
                     if ($1477) {
                      $1478 = $1476 << 1;
                      $1479 = ($1478>>>0)<($1470>>>0);
                      $1480 = $1479 ? $1470 : $1478;
                      $$0$i$i$i$i368 = $1480;
                     } else {
                      $$0$i$i$i$i368 = 2147483647;
                     }
                     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i333,$$0$i$i$i$i368,$1469,$1466);
                     $1481 = ((($__v$i$i$i333)) + 8|0);
                     $1482 = HEAP32[$1481>>2]|0;
                     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1482,$33);
                     $1483 = ((($1482)) + 24|0);
                     HEAP32[$1481>>2] = $1483;
                     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i333);
                     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i333);
                    }
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($34);
                    $1484 = ((($t$4$i735)) + 1|0);
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($r$i);
                    $$027$i = $1484;$$320$i = 0;
                    label = 628;
                    break L773;
                   }
                  } while(0);
                  if ((label|0) == 590) {
                   $1386 = ___cxa_find_matching_catch_2()|0;
                   $1387 = tempRet0;
                   $$2$i372 = $1387;$$26$i = $1386;
                  }
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($r$i);
                  $$3$i373 = $$2$i372;$$37$i = $$26$i;
                  label = 631;
                 }
                } while(0);
                if ((label|0) == 628) {
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr_list$i);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($type$i);
                 $$128$i = $$027$i;$$421$i = $$320$i;
                 label = 629;
                 break;
                }
                else if ((label|0) == 631) {
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr_list$i);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($type$i);
                 $$4$i374 = $$3$i373;$$48$i = $$37$i;
                 break;
                }
               }
              }
             }
            } while(0);
            if ((label|0) == 556) {
             $1320 = ___cxa_find_matching_catch_2()|0;
             $1321 = tempRet0;
             $$4$i374 = $1321;$$48$i = $1320;
            }
            else if ((label|0) == 629) {
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($init_list$i);
             $cond$i371 = ($$421$i|0)==(0);
             if ($cond$i371) {
              $$16$i377 = $$128$i;
              break L685;
             } else {
              break;
             }
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($init_list$i);
            ___resumeException($$48$i|0);
            // unreachable;
           }
          }
         } while(0);
         $$16$i377 = $first;
        } else {
         $$16$i377 = $first;
        }
       } else {
        $$16$i377 = $first;
       }
      } while(0);
      $$14 = $$16$i377;
      break L1;
      break;
     }
     case 101:  {
      $1485 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($115,6152,2);
      __THREW__ = 0;
      $1486 = (invoke_iiiii(108,($1485|0),($last|0),($115|0),($db|0))|0);
      $1487 = __THREW__; __THREW__ = 0;
      $1488 = $1487&1;
      if ($1488) {
       $1490 = ___cxa_find_matching_catch_2()|0;
       $1491 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($115);
       $$23 = $1490;$$2368 = $1491;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($115);
       $1489 = ($1486|0)==($1485|0);
       $first$102 = $1489 ? $first : $1486;
       $$14 = $first$102;
       break L1;
      }
      break;
     }
     case 103:  {
      $1492 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($116,6131,1);
      __THREW__ = 0;
      $1493 = (invoke_iiiii(109,($1492|0),($last|0),($116|0),($db|0))|0);
      $1494 = __THREW__; __THREW__ = 0;
      $1495 = $1494&1;
      if ($1495) {
       $1497 = ___cxa_find_matching_catch_2()|0;
       $1498 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($116);
       $$23 = $1497;$$2368 = $1498;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($116);
       $1496 = ($1493|0)==($1492|0);
       $first$103 = $1496 ? $first : $1493;
       $$14 = $first$103;
       break L1;
      }
      break;
     }
     case 116:  {
      $1499 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($117,6155,1);
      __THREW__ = 0;
      $1500 = (invoke_iiiii(109,($1499|0),($last|0),($117|0),($db|0))|0);
      $1501 = __THREW__; __THREW__ = 0;
      $1502 = $1501&1;
      if ($1502) {
       $1504 = ___cxa_find_matching_catch_2()|0;
       $1505 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($117);
       $$23 = $1504;$$2368 = $1505;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($117);
       $1503 = ($1500|0)==($1499|0);
       $first$104 = $1503 ? $first : $1500;
       $$14 = $first$104;
       break L1;
      }
      break;
     }
     case 120:  {
      $1506 = ((($first)) + 2|0);
      $1507 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1506,$last,$db)|0);
      $1508 = ($1507|0)==($1506|0);
      L857: do {
       if ($1508) {
        $$03$i332 = $1506;
       } else {
        $1509 = HEAP32[$db>>2]|0;
        $1510 = ((($db)) + 4|0);
        $1511 = HEAP32[$1510>>2]|0;
        $1512 = ($1509|0)==($1511|0);
        if ($1512) {
         $$03$i332 = $1506;
        } else {
         $1513 = ((($1511)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($37,$1513);
         __THREW__ = 0;
         $1514 = (invoke_iiii(92,($37|0),0,(6157|0))|0);
         $1515 = __THREW__; __THREW__ = 0;
         $1516 = $1515&1;
         do {
          if ($1516) {
           $1570 = ___cxa_find_matching_catch_2()|0;
           $1571 = tempRet0;
           $$1$i331 = $1571;$$12$i330 = $1570;
          } else {
           ;HEAP32[$36>>2]=HEAP32[$1514>>2]|0;HEAP32[$36+4>>2]=HEAP32[$1514+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$1514+8>>2]|0;
           $__i$0$i$i$i$i326 = 0;
           while(1) {
            $exitcond$i$i$i$i327 = ($__i$0$i$i$i$i326|0)==(3);
            if ($exitcond$i$i$i$i327) {
             break;
            }
            $1517 = (($1514) + ($__i$0$i$i$i$i326<<2)|0);
            HEAP32[$1517>>2] = 0;
            $1518 = (($__i$0$i$i$i$i326) + 1)|0;
            $__i$0$i$i$i$i326 = $1518;
           }
           __THREW__ = 0;
           $1519 = (invoke_iii(93,($36|0),(5061|0))|0);
           $1520 = __THREW__; __THREW__ = 0;
           $1521 = $1520&1;
           if ($1521) {
            $1572 = ___cxa_find_matching_catch_2()|0;
            $1573 = tempRet0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($36);
            $$1$i331 = $1573;$$12$i330 = $1572;
            break;
           }
           ;HEAP32[$35>>2]=HEAP32[$1519>>2]|0;HEAP32[$35+4>>2]=HEAP32[$1519+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$1519+8>>2]|0;
           $__i$0$i$i$i5$i = 0;
           while(1) {
            $exitcond$i$i$i6$i = ($__i$0$i$i$i5$i|0)==(3);
            if ($exitcond$i$i$i6$i) {
             break;
            }
            $1522 = (($1519) + ($__i$0$i$i$i5$i<<2)|0);
            HEAP32[$1522>>2] = 0;
            $1523 = (($__i$0$i$i$i5$i) + 1)|0;
            $__i$0$i$i$i5$i = $1523;
           }
           $1524 = HEAP8[$1513>>0]|0;
           $1525 = $1524 & 1;
           $1526 = ($1525<<24>>24)==(0);
           do {
            if ($1526) {
             $1527 = ((($1513)) + 1|0);
             HEAP8[$1527>>0] = 0;
             HEAP8[$1513>>0] = 0;
            } else {
             $1528 = ((($1511)) + -16|0);
             $1529 = HEAP32[$1528>>2]|0;
             HEAP8[$1529>>0] = 0;
             $1530 = ((($1511)) + -20|0);
             HEAP32[$1530>>2] = 0;
             $$pre$i$i$i$i = HEAP8[$1513>>0]|0;
             $1531 = $$pre$i$i$i$i & 1;
             $1532 = ($1531<<24>>24)==(0);
             if ($1532) {
              $1537 = $$pre$i$i$i$i;$1546 = 10;
             } else {
              $1533 = HEAP32[$1513>>2]|0;
              $1534 = $1533 & -2;
              $phitmp$i$i$i$i$i$i$i = (($1534) + -1)|0;
              $1535 = $1533&255;
              $1537 = $1535;$1546 = $phitmp$i$i$i$i$i$i$i;
             }
             $1536 = $1537 & 1;
             $1538 = ($1536<<24>>24)==(0);
             if ($1538) {
              $1539 = $1537&255;
              $1540 = $1539 >>> 1;
              $1541 = ($1537&255)<(22);
              if ($1541) {
               $1544 = 10;$1565 = $1540;$2299 = 1;
              } else {
               $1542 = (($1540) + 16)|0;
               $1543 = $1542 & 240;
               $phitmp$i2$i$i$i$i$i$i = (($1543) + -1)|0;
               $1544 = $phitmp$i2$i$i$i$i$i$i;$1565 = $1540;$2299 = 1;
              }
             } else {
              $1544 = 10;$1565 = 0;$2299 = 0;
             }
             $1545 = ($1544|0)==($1546|0);
             if (!($1545)) {
              $1547 = ($1544|0)==(10);
              if ($1547) {
               $1552 = ((($1513)) + 1|0);
               $1553 = HEAP32[$1528>>2]|0;
               if ($2299) {
                $1554 = $1537&255;
                $1555 = $1554 >>> 1;
                $1556 = (($1555) + 1)|0;
                _memcpy(($1552|0),($1553|0),($1556|0))|0;
                _free($1553);
               } else {
                $1561 = HEAP8[$1553>>0]|0;
                HEAP8[$1552>>0] = $1561;
                _free($1553);
               }
               $1566 = $1565 << 1;
               $1567 = $1566&255;
               HEAP8[$1513>>0] = $1567;
               break;
              }
              $1548 = ($1544>>>0)<=($1546>>>0);
              $1549 = (($1544) + 1)|0;
              $1550 = (_malloc($1549)|0);
              $1551 = ($1550|0)==(0|0);
              $or$cond$i$i$i$i$i$i = $1548 & $1551;
              if (!($or$cond$i$i$i$i$i$i)) {
               if ($2299) {
                $1557 = ((($1513)) + 1|0);
                $1558 = $1537&255;
                $1559 = $1558 >>> 1;
                $1560 = (($1559) + 1)|0;
                _memcpy(($1550|0),($1557|0),($1560|0))|0;
               } else {
                $1562 = HEAP32[$1528>>2]|0;
                $1563 = HEAP8[$1562>>0]|0;
                HEAP8[$1550>>0] = $1563;
                _free($1562);
               }
               $1564 = $1549 | 1;
               HEAP32[$1513>>2] = $1564;
               HEAP32[$1530>>2] = $1565;
               HEAP32[$1528>>2] = $1550;
              }
             }
            }
           } while(0);
           ;HEAP32[$1513>>2]=HEAP32[$35>>2]|0;HEAP32[$1513+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$1513+8>>2]=HEAP32[$35+8>>2]|0;
           $__i$0$i$i$i$i$i = 0;
           while(1) {
            $exitcond$i$i$i$i$i = ($__i$0$i$i$i$i$i|0)==(3);
            if ($exitcond$i$i$i$i$i) {
             break;
            }
            $1568 = (($35) + ($__i$0$i$i$i$i$i<<2)|0);
            HEAP32[$1568>>2] = 0;
            $1569 = (($__i$0$i$i$i$i$i) + 1)|0;
            $__i$0$i$i$i$i$i = $1569;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($35);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($36);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($37);
           $$03$i332 = $1507;
           break L857;
          }
         } while(0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($37);
         ___resumeException($$12$i330|0);
         // unreachable;
        }
       }
      } while(0);
      $1574 = ($$03$i332|0)==($1506|0);
      $first$105 = $1574 ? $first : $$03$i332;
      $$14 = $first$105;
      break L1;
      break;
     }
     default: {
      $$14 = $first;
      break L1;
     }
     }
     break;
    }
    case 111:  {
     $1575 = ((($t$0)) + 1|0);
     $1576 = HEAP8[$1575>>0]|0;
     $1577 = $1576 << 24 >> 24;
     switch ($1577|0) {
     case 110:  {
      $1578 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
      $$14 = $1578;
      break L1;
      break;
     }
     case 111:  {
      $1579 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($118,6168,2);
      __THREW__ = 0;
      $1580 = (invoke_iiiii(108,($1579|0),($last|0),($118|0),($db|0))|0);
      $1581 = __THREW__; __THREW__ = 0;
      $1582 = $1581&1;
      if ($1582) {
       $1584 = ___cxa_find_matching_catch_2()|0;
       $1585 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($118);
       $$23 = $1584;$$2368 = $1585;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($118);
       $1583 = ($1580|0)==($1579|0);
       $first$106 = $1583 ? $first : $1580;
       $$14 = $first$106;
       break L1;
      }
      break;
     }
     case 114:  {
      $1586 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($119,6171,1);
      __THREW__ = 0;
      $1587 = (invoke_iiiii(108,($1586|0),($last|0),($119|0),($db|0))|0);
      $1588 = __THREW__; __THREW__ = 0;
      $1589 = $1588&1;
      if ($1589) {
       $1591 = ___cxa_find_matching_catch_2()|0;
       $1592 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($119);
       $$23 = $1591;$$2368 = $1592;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($119);
       $1590 = ($1587|0)==($1586|0);
       $first$107 = $1590 ? $first : $1587;
       $$14 = $first$107;
       break L1;
      }
      break;
     }
     case 82:  {
      $1593 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($120,6173,2);
      __THREW__ = 0;
      $1594 = (invoke_iiiii(108,($1593|0),($last|0),($120|0),($db|0))|0);
      $1595 = __THREW__; __THREW__ = 0;
      $1596 = $1595&1;
      if ($1596) {
       $1598 = ___cxa_find_matching_catch_2()|0;
       $1599 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($120);
       $$23 = $1598;$$2368 = $1599;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($120);
       $1597 = ($1594|0)==($1593|0);
       $first$108 = $1597 ? $first : $1594;
       $$14 = $first$108;
       break L1;
      }
      break;
     }
     default: {
      $$14 = $first;
      break L1;
     }
     }
     break;
    }
    case 112:  {
     $1600 = ((($t$0)) + 1|0);
     $1601 = HEAP8[$1600>>0]|0;
     $1602 = $1601 << 24 >> 24;
     switch ($1602|0) {
     case 109:  {
      $1603 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($121,6176,3);
      __THREW__ = 0;
      $1604 = (invoke_iiiii(108,($1603|0),($last|0),($121|0),($db|0))|0);
      $1605 = __THREW__; __THREW__ = 0;
      $1606 = $1605&1;
      if ($1606) {
       $1608 = ___cxa_find_matching_catch_2()|0;
       $1609 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($121);
       $$23 = $1608;$$2368 = $1609;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($121);
       $1607 = ($1604|0)==($1603|0);
       $first$109 = $1607 ? $first : $1604;
       $$14 = $first$109;
       break L1;
      }
      break;
     }
     case 108:  {
      $1610 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($122,6180,1);
      __THREW__ = 0;
      $1611 = (invoke_iiiii(108,($1610|0),($last|0),($122|0),($db|0))|0);
      $1612 = __THREW__; __THREW__ = 0;
      $1613 = $1612&1;
      if ($1613) {
       $1615 = ___cxa_find_matching_catch_2()|0;
       $1616 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($122);
       $$23 = $1615;$$2368 = $1616;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($122);
       $1614 = ($1611|0)==($1610|0);
       $first$110 = $1614 ? $first : $1611;
       $$14 = $first$110;
       break L1;
      }
      break;
     }
     case 76:  {
      $1617 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($123,6182,2);
      __THREW__ = 0;
      $1618 = (invoke_iiiii(108,($1617|0),($last|0),($123|0),($db|0))|0);
      $1619 = __THREW__; __THREW__ = 0;
      $1620 = $1619&1;
      if ($1620) {
       $1622 = ___cxa_find_matching_catch_2()|0;
       $1623 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($123);
       $$23 = $1622;$$2368 = $1623;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($123);
       $1621 = ($1618|0)==($1617|0);
       $first$111 = $1621 ? $first : $1618;
       $$14 = $first$111;
       break L1;
      }
      break;
     }
     case 112:  {
      $1624 = ((($first)) + 2|0);
      $1625 = ($1624|0)==($last|0);
      if (!($1625)) {
       $1626 = HEAP8[$1624>>0]|0;
       $1627 = ($1626<<24>>24)==(95);
       if ($1627) {
        $1628 = ((($first)) + 3|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($124,6185,2);
        __THREW__ = 0;
        $1629 = (invoke_iiiii(109,($1628|0),($last|0),($124|0),($db|0))|0);
        $1630 = __THREW__; __THREW__ = 0;
        $1631 = $1630&1;
        if ($1631) {
         $1633 = ___cxa_find_matching_catch_2()|0;
         $1634 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($124);
         $$23 = $1633;$$2368 = $1634;
         break L7;
        } else {
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($124);
         $1632 = ($1629|0)==($1628|0);
         $first$112 = $1632 ? $first : $1629;
         $$14 = $first$112;
         break L1;
        }
       }
      }
      $1635 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1624,$last,$db)|0);
      $1636 = ($1635|0)==($1624|0);
      if ($1636) {
       $$14 = $first;
       break L1;
      }
      $1637 = HEAP32[$db>>2]|0;
      $1638 = ((($db)) + 4|0);
      $1639 = HEAP32[$1638>>2]|0;
      $1640 = ($1637|0)==($1639|0);
      if ($1640) {
       $$14 = $first;
       break L1;
      }
      $1641 = ((($1639)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($128,$1641);
      __THREW__ = 0;
      $1642 = (invoke_iiii(92,($128|0),0,(5059|0))|0);
      $1643 = __THREW__; __THREW__ = 0;
      $1644 = $1643&1;
      do {
       if ($1644) {
        $1652 = ___cxa_find_matching_catch_2()|0;
        $1653 = tempRet0;
        $$1438 = $1652;$$1459 = $1653;
       } else {
        ;HEAP32[$127>>2]=HEAP32[$1642>>2]|0;HEAP32[$127+4>>2]=HEAP32[$1642+4>>2]|0;HEAP32[$127+8>>2]=HEAP32[$1642+8>>2]|0;
        $__i$0$i$i$i171 = 0;
        while(1) {
         $exitcond$i$i$i172 = ($__i$0$i$i$i171|0)==(3);
         if ($exitcond$i$i$i172) {
          break;
         }
         $1645 = (($1642) + ($__i$0$i$i$i171<<2)|0);
         HEAP32[$1645>>2] = 0;
         $1646 = (($__i$0$i$i$i171) + 1)|0;
         $__i$0$i$i$i171 = $1646;
        }
        __THREW__ = 0;
        $1647 = (invoke_iii(93,($127|0),(6188|0))|0);
        $1648 = __THREW__; __THREW__ = 0;
        $1649 = $1648&1;
        if ($1649) {
         $1654 = ___cxa_find_matching_catch_2()|0;
         $1655 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($127);
         $$1438 = $1654;$$1459 = $1655;
         break;
        }
        ;HEAP32[$126>>2]=HEAP32[$1647>>2]|0;HEAP32[$126+4>>2]=HEAP32[$1647+4>>2]|0;HEAP32[$126+8>>2]=HEAP32[$1647+8>>2]|0;
        $__i$0$i$i$i175 = 0;
        while(1) {
         $exitcond$i$i$i176 = ($__i$0$i$i$i175|0)==(3);
         if ($exitcond$i$i$i176) {
          break;
         }
         $1650 = (($1647) + ($__i$0$i$i$i175<<2)|0);
         HEAP32[$1650>>2] = 0;
         $1651 = (($__i$0$i$i$i175) + 1)|0;
         $__i$0$i$i$i175 = $1651;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($125,$126);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1641,$125);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($125);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($126);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($127);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($128);
        $$14 = $1635;
        break L1;
       }
      } while(0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($128);
      $$23 = $$1438;$$2368 = $$1459;
      break L7;
      break;
     }
     case 115:  {
      $1656 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($129,6180,1);
      __THREW__ = 0;
      $1657 = (invoke_iiiii(109,($1656|0),($last|0),($129|0),($db|0))|0);
      $1658 = __THREW__; __THREW__ = 0;
      $1659 = $1658&1;
      if ($1659) {
       $1661 = ___cxa_find_matching_catch_2()|0;
       $1662 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($129);
       $$23 = $1661;$$2368 = $1662;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($129);
       $1660 = ($1657|0)==($1656|0);
       $first$113 = $1660 ? $first : $1657;
       $$14 = $first$113;
       break L1;
      }
      break;
     }
     case 116:  {
      $1663 = ($144|0)>(2);
      if (!($1663)) {
       $$14 = $first;
       break L1;
      }
      $1664 = HEAP8[$first>>0]|0;
      $1665 = ($1664<<24>>24)==(112);
      if (!($1665)) {
       $$14 = $first;
       break L1;
      }
      $1666 = ((($first)) + 1|0);
      $1667 = HEAP8[$1666>>0]|0;
      $1668 = ($1667<<24>>24)==(116);
      if (!($1668)) {
       $$14 = $first;
       break L1;
      }
      $1669 = ((($first)) + 2|0);
      $1670 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1669,$last,$db)|0);
      $1671 = ($1670|0)==($1669|0);
      if ($1671) {
       $$14 = $first;
       break L1;
      }
      $1672 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1670,$last,$db)|0);
      $1673 = ($1672|0)==($1670|0);
      if ($1673) {
       $$14 = $first;
       break L1;
      }
      $1674 = ((($db)) + 4|0);
      $1675 = HEAP32[$1674>>2]|0;
      $1676 = HEAP32[$db>>2]|0;
      $1677 = (($1675) - ($1676))|0;
      $1678 = (($1677|0) / 24)&-1;
      $1679 = ($1678>>>0)<(2);
      if ($1679) {
       $$14 = $first;
       break L1;
      }
      $1680 = $1675;
      $1681 = ((($1680)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp$i313,$1681);
      $1682 = HEAP32[$1674>>2]|0;
      $1683 = ((($1682)) + -24|0);
      $1684 = $1682;
      while(1) {
       $1685 = ($1684|0)==($1683|0);
       if ($1685) {
        break;
       }
       $1686 = ((($1684)) + -24|0);
       HEAP32[$1674>>2] = $1686;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1686);
       $$pre$i$i314 = HEAP32[$1674>>2]|0;
       $1684 = $$pre$i$i314;
      }
      $1687 = ((($1682)) + -48|0);
      __THREW__ = 0;
      (invoke_iii(93,($1687|0),(6192|0))|0);
      $1688 = __THREW__; __THREW__ = 0;
      $1689 = $1688&1;
      if (!($1689)) {
       $1690 = HEAP32[$1674>>2]|0;
       $1691 = ((($1690)) + -24|0);
       $1692 = HEAP8[$tmp$i313>>0]|0;
       $1693 = $1692 & 1;
       $1694 = ($1693<<24>>24)==(0);
       $1695 = ((($tmp$i313)) + 8|0);
       $1696 = HEAP32[$1695>>2]|0;
       $1697 = ((($tmp$i313)) + 1|0);
       $1698 = $1694 ? $1697 : $1696;
       $1699 = ((($tmp$i313)) + 4|0);
       $1700 = HEAP32[$1699>>2]|0;
       $1701 = $1692&255;
       $1702 = $1701 >>> 1;
       $1703 = $1694 ? $1702 : $1700;
       __THREW__ = 0;
       (invoke_iiii(91,($1691|0),($1698|0),($1703|0))|0);
       $1704 = __THREW__; __THREW__ = 0;
       $1705 = $1704&1;
       if (!($1705)) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i313);
        $$14 = $1672;
        break L1;
       }
      }
      $1706 = ___cxa_find_matching_catch_2()|0;
      $1707 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i313);
      ___resumeException($1706|0);
      // unreachable;
      break;
     }
     default: {
      $$14 = $first;
      break L1;
     }
     }
     break;
    }
    case 113:  {
     $1708 = ((($t$0)) + 1|0);
     $1709 = HEAP8[$1708>>0]|0;
     $1710 = ($1709<<24>>24)==(117);
     if (!($1710)) {
      $$14 = $first;
      break L1;
     }
     $1711 = ((($first)) + 2|0);
     $1712 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1711,$last,$db)|0);
     $1713 = ($1712|0)==($1711|0);
     if ($1713) {
      $$14 = $first;
      break L1;
     }
     $1714 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1712,$last,$db)|0);
     $1715 = ($1714|0)==($1712|0);
     if ($1715) {
      $1820 = ((($db)) + 4|0);
      $1821 = HEAP32[$1820>>2]|0;
      $1822 = ((($1821)) + -24|0);
      $1823 = $1821;
      while(1) {
       $1824 = ($1823|0)==($1822|0);
       if ($1824) {
        $$14 = $first;
        break L1;
       }
       $1825 = ((($1823)) + -24|0);
       HEAP32[$1820>>2] = $1825;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1825);
       $$pre$i207 = HEAP32[$1820>>2]|0;
       $1823 = $$pre$i207;
      }
     }
     $1716 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1714,$last,$db)|0);
     $1717 = ($1716|0)==($1714|0);
     $1718 = ((($db)) + 4|0);
     if ($1717) {
      $1811 = HEAP32[$1718>>2]|0;
      $1812 = ((($1811)) + -24|0);
      $1813 = $1811;
      while(1) {
       $1814 = ($1813|0)==($1812|0);
       if ($1814) {
        break;
       }
       $1815 = ((($1813)) + -24|0);
       HEAP32[$1718>>2] = $1815;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1815);
       $$pre$i203 = HEAP32[$1718>>2]|0;
       $1813 = $$pre$i203;
      }
      $1816 = ((($1811)) + -48|0);
      $1817 = $1812;
      while(1) {
       $1818 = ($1817|0)==($1816|0);
       if ($1818) {
        $$14 = $first;
        break L1;
       }
       $1819 = ((($1817)) + -24|0);
       HEAP32[$1718>>2] = $1819;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1819);
       $$pre$i205 = HEAP32[$1718>>2]|0;
       $1817 = $$pre$i205;
      }
     }
     $1719 = HEAP32[$1718>>2]|0;
     $1720 = HEAP32[$db>>2]|0;
     $1721 = (($1719) - ($1720))|0;
     $1722 = (($1721|0) / 24)&-1;
     $1723 = ($1722>>>0)<(3);
     if ($1723) {
      $$14 = $first;
      break L1;
     }
     $1724 = $1719;
     $1725 = ((($1724)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op3,$1725);
     $1726 = HEAP32[$1718>>2]|0;
     $1727 = ((($1726)) + -24|0);
     $1728 = $1726;
     while(1) {
      $1729 = ($1728|0)==($1727|0);
      if ($1729) {
       break;
      }
      $1730 = ((($1728)) + -24|0);
      HEAP32[$1718>>2] = $1730;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1730);
      $$pre$i179 = HEAP32[$1718>>2]|0;
      $1728 = $$pre$i179;
     }
     $1731 = ((($1726)) + -48|0);
     __THREW__ = 0;
     invoke_vii(96,($op212|0),($1731|0));
     $1732 = __THREW__; __THREW__ = 0;
     $1733 = $1732&1;
     if ($1733) {
      $1795 = ___cxa_find_matching_catch_2()|0;
      $1796 = tempRet0;
      $$22 = $1795;$$2267 = $1796;
     } else {
      $1734 = HEAP32[$1718>>2]|0;
      $1735 = ((($1734)) + -24|0);
      $1736 = $1734;
      while(1) {
       $1737 = ($1736|0)==($1735|0);
       if ($1737) {
        break;
       }
       $1738 = ((($1736)) + -24|0);
       HEAP32[$1718>>2] = $1738;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1738);
       $$pre$i181 = HEAP32[$1718>>2]|0;
       $1736 = $$pre$i181;
      }
      $1739 = ((($1734)) + -48|0);
      __THREW__ = 0;
      invoke_vii(96,($op113|0),($1739|0));
      $1740 = __THREW__; __THREW__ = 0;
      $1741 = $1740&1;
      if ($1741) {
       $1797 = ___cxa_find_matching_catch_2()|0;
       $1798 = tempRet0;
       $$21 = $1797;$$2166 = $1798;
      } else {
       $1742 = HEAP32[$1718>>2]|0;
       $1743 = ((($1742)) + -24|0);
       __THREW__ = 0;
       invoke_viii(107,($136|0),(5059|0),($op113|0));
       $1744 = __THREW__; __THREW__ = 0;
       $1745 = $1744&1;
       if ($1745) {
        $1799 = ___cxa_find_matching_catch_2()|0;
        $1800 = tempRet0;
        $$2044 = $1799;$$2065 = $1800;
       } else {
        __THREW__ = 0;
        $1746 = (invoke_iii(93,($136|0),(6195|0))|0);
        $1747 = __THREW__; __THREW__ = 0;
        $1748 = $1747&1;
        if ($1748) {
         $1801 = ___cxa_find_matching_catch_2()|0;
         $1802 = tempRet0;
         $$1943 = $1801;$$1964 = $1802;
        } else {
         ;HEAP32[$135>>2]=HEAP32[$1746>>2]|0;HEAP32[$135+4>>2]=HEAP32[$1746+4>>2]|0;HEAP32[$135+8>>2]=HEAP32[$1746+8>>2]|0;
         $__i$0$i$i$i183 = 0;
         while(1) {
          $exitcond$i$i$i184 = ($__i$0$i$i$i183|0)==(3);
          if ($exitcond$i$i$i184) {
           break;
          }
          $1749 = (($1746) + ($__i$0$i$i$i183<<2)|0);
          HEAP32[$1749>>2] = 0;
          $1750 = (($__i$0$i$i$i183) + 1)|0;
          $__i$0$i$i$i183 = $1750;
         }
         $1751 = HEAP8[$op212>>0]|0;
         $1752 = $1751 & 1;
         $1753 = ($1752<<24>>24)==(0);
         $1754 = ((($op212)) + 8|0);
         $1755 = HEAP32[$1754>>2]|0;
         $1756 = ((($op212)) + 1|0);
         $1757 = $1753 ? $1756 : $1755;
         $1758 = ((($op212)) + 4|0);
         $1759 = HEAP32[$1758>>2]|0;
         $1760 = $1751&255;
         $1761 = $1760 >>> 1;
         $1762 = $1753 ? $1761 : $1759;
         __THREW__ = 0;
         $1763 = (invoke_iiii(91,($135|0),($1757|0),($1762|0))|0);
         $1764 = __THREW__; __THREW__ = 0;
         $1765 = $1764&1;
         if ($1765) {
          $1803 = ___cxa_find_matching_catch_2()|0;
          $1804 = tempRet0;
          $$1842 = $1803;$$1863 = $1804;
         } else {
          ;HEAP32[$134>>2]=HEAP32[$1763>>2]|0;HEAP32[$134+4>>2]=HEAP32[$1763+4>>2]|0;HEAP32[$134+8>>2]=HEAP32[$1763+8>>2]|0;
          $__i$0$i$i$i187 = 0;
          while(1) {
           $exitcond$i$i$i188 = ($__i$0$i$i$i187|0)==(3);
           if ($exitcond$i$i$i188) {
            break;
           }
           $1766 = (($1763) + ($__i$0$i$i$i187<<2)|0);
           HEAP32[$1766>>2] = 0;
           $1767 = (($__i$0$i$i$i187) + 1)|0;
           $__i$0$i$i$i187 = $1767;
          }
          __THREW__ = 0;
          $1768 = (invoke_iii(93,($134|0),(6201|0))|0);
          $1769 = __THREW__; __THREW__ = 0;
          $1770 = $1769&1;
          if ($1770) {
           $1805 = ___cxa_find_matching_catch_2()|0;
           $1806 = tempRet0;
           $$1741 = $1805;$$1762 = $1806;
          } else {
           ;HEAP32[$133>>2]=HEAP32[$1768>>2]|0;HEAP32[$133+4>>2]=HEAP32[$1768+4>>2]|0;HEAP32[$133+8>>2]=HEAP32[$1768+8>>2]|0;
           $__i$0$i$i$i191 = 0;
           while(1) {
            $exitcond$i$i$i192 = ($__i$0$i$i$i191|0)==(3);
            if ($exitcond$i$i$i192) {
             break;
            }
            $1771 = (($1768) + ($__i$0$i$i$i191<<2)|0);
            HEAP32[$1771>>2] = 0;
            $1772 = (($__i$0$i$i$i191) + 1)|0;
            $__i$0$i$i$i191 = $1772;
           }
           $1773 = HEAP8[$op3>>0]|0;
           $1774 = $1773 & 1;
           $1775 = ($1774<<24>>24)==(0);
           $1776 = ((($op3)) + 8|0);
           $1777 = HEAP32[$1776>>2]|0;
           $1778 = ((($op3)) + 1|0);
           $1779 = $1775 ? $1778 : $1777;
           $1780 = ((($op3)) + 4|0);
           $1781 = HEAP32[$1780>>2]|0;
           $1782 = $1773&255;
           $1783 = $1782 >>> 1;
           $1784 = $1775 ? $1783 : $1781;
           __THREW__ = 0;
           $1785 = (invoke_iiii(91,($133|0),($1779|0),($1784|0))|0);
           $1786 = __THREW__; __THREW__ = 0;
           $1787 = $1786&1;
           do {
            if ($1787) {
             $1807 = ___cxa_find_matching_catch_2()|0;
             $1808 = tempRet0;
             $$1640 = $1807;$$1661 = $1808;
            } else {
             ;HEAP32[$132>>2]=HEAP32[$1785>>2]|0;HEAP32[$132+4>>2]=HEAP32[$1785+4>>2]|0;HEAP32[$132+8>>2]=HEAP32[$1785+8>>2]|0;
             $__i$0$i$i$i195 = 0;
             while(1) {
              $exitcond$i$i$i196 = ($__i$0$i$i$i195|0)==(3);
              if ($exitcond$i$i$i196) {
               break;
              }
              $1788 = (($1785) + ($__i$0$i$i$i195<<2)|0);
              HEAP32[$1788>>2] = 0;
              $1789 = (($__i$0$i$i$i195) + 1)|0;
              $__i$0$i$i$i195 = $1789;
             }
             __THREW__ = 0;
             $1790 = (invoke_iii(93,($132|0),(5061|0))|0);
             $1791 = __THREW__; __THREW__ = 0;
             $1792 = $1791&1;
             if ($1792) {
              $1809 = ___cxa_find_matching_catch_2()|0;
              $1810 = tempRet0;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($132);
              $$1640 = $1809;$$1661 = $1810;
              break;
             }
             ;HEAP32[$131>>2]=HEAP32[$1790>>2]|0;HEAP32[$131+4>>2]=HEAP32[$1790+4>>2]|0;HEAP32[$131+8>>2]=HEAP32[$1790+8>>2]|0;
             $__i$0$i$i$i199 = 0;
             while(1) {
              $exitcond$i$i$i200 = ($__i$0$i$i$i199|0)==(3);
              if ($exitcond$i$i$i200) {
               break;
              }
              $1793 = (($1790) + ($__i$0$i$i$i199<<2)|0);
              HEAP32[$1793>>2] = 0;
              $1794 = (($__i$0$i$i$i199) + 1)|0;
              $__i$0$i$i$i199 = $1794;
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($130,$131);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1743,$130);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($130);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($131);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($132);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($133);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($134);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($135);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($136);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op113);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op212);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op3);
             $$14 = $1716;
             break L1;
            }
           } while(0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($133);
           $$1741 = $$1640;$$1762 = $$1661;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($134);
          $$1842 = $$1741;$$1863 = $$1762;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($135);
         $$1943 = $$1842;$$1964 = $$1863;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($136);
        $$2044 = $$1943;$$2065 = $$1964;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op113);
       $$21 = $$2044;$$2166 = $$2065;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op212);
      $$22 = $$21;$$2267 = $$2166;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op3);
     $$23 = $$22;$$2368 = $$2267;
     break;
    }
    case 114:  {
     $1826 = ((($t$0)) + 1|0);
     $1827 = HEAP8[$1826>>0]|0;
     $1828 = $1827 << 24 >> 24;
     switch ($1828|0) {
     case 99:  {
      $1829 = ($144|0)>(2);
      L1059: do {
       if ($1829) {
        $1830 = HEAP8[$first>>0]|0;
        $1831 = ($1830<<24>>24)==(114);
        if ($1831) {
         $1832 = ((($first)) + 1|0);
         $1833 = HEAP8[$1832>>0]|0;
         $1834 = ($1833<<24>>24)==(99);
         if ($1834) {
          $1835 = ((($first)) + 2|0);
          $1836 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1835,$last,$db)|0);
          $1837 = ($1836|0)==($1835|0);
          if ($1837) {
           $$311$i312 = $first;
          } else {
           $1838 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1836,$last,$db)|0);
           $1839 = ($1838|0)==($1836|0);
           if ($1839) {
            $$311$i312 = $first;
           } else {
            $1840 = ((($db)) + 4|0);
            $1841 = HEAP32[$1840>>2]|0;
            $1842 = HEAP32[$db>>2]|0;
            $1843 = (($1841) - ($1842))|0;
            $1844 = (($1843|0) / 24)&-1;
            $1845 = ($1844>>>0)<(2);
            if ($1845) {
             $$311$i312 = $first;
            } else {
             $1846 = $1841;
             $1847 = ((($1846)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i277,$1847);
             $1848 = HEAP32[$1840>>2]|0;
             $1849 = ((($1848)) + -24|0);
             $1850 = $1848;
             while(1) {
              $1851 = ($1850|0)==($1849|0);
              if ($1851) {
               break;
              }
              $1852 = ((($1850)) + -24|0);
              HEAP32[$1840>>2] = $1852;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1852);
              $$pre$i$i278 = HEAP32[$1840>>2]|0;
              $1850 = $$pre$i$i278;
             }
             $1853 = ((($1848)) + -48|0);
             __THREW__ = 0;
             invoke_vii(96,($43|0),($1853|0));
             $1854 = __THREW__; __THREW__ = 0;
             $1855 = $1854&1;
             if ($1855) {
              $1888 = ___cxa_find_matching_catch_2()|0;
              $1889 = tempRet0;
              $$4$i303 = $1889;$$45$i302 = $1888;
             } else {
              __THREW__ = 0;
              $1856 = (invoke_iiii(92,($43|0),0,(6207|0))|0);
              $1857 = __THREW__; __THREW__ = 0;
              $1858 = $1857&1;
              if ($1858) {
               $1890 = ___cxa_find_matching_catch_2()|0;
               $1891 = tempRet0;
               $$3$i301 = $1891;$$34$i300 = $1890;
              } else {
               ;HEAP32[$42>>2]=HEAP32[$1856>>2]|0;HEAP32[$42+4>>2]=HEAP32[$1856+4>>2]|0;HEAP32[$42+8>>2]=HEAP32[$1856+8>>2]|0;
               $__i$0$i$i$i$i281 = 0;
               while(1) {
                $exitcond$i$i$i$i282 = ($__i$0$i$i$i$i281|0)==(3);
                if ($exitcond$i$i$i$i282) {
                 break;
                }
                $1859 = (($1856) + ($__i$0$i$i$i$i281<<2)|0);
                HEAP32[$1859>>2] = 0;
                $1860 = (($__i$0$i$i$i$i281) + 1)|0;
                $__i$0$i$i$i$i281 = $1860;
               }
               __THREW__ = 0;
               $1861 = (invoke_iii(93,($42|0),(5143|0))|0);
               $1862 = __THREW__; __THREW__ = 0;
               $1863 = $1862&1;
               if ($1863) {
                $1892 = ___cxa_find_matching_catch_2()|0;
                $1893 = tempRet0;
                $$2$i299 = $1893;$$23$i298 = $1892;
               } else {
                ;HEAP32[$41>>2]=HEAP32[$1861>>2]|0;HEAP32[$41+4>>2]=HEAP32[$1861+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$1861+8>>2]|0;
                $__i$0$i$i$i17$i285 = 0;
                while(1) {
                 $exitcond$i$i$i18$i286 = ($__i$0$i$i$i17$i285|0)==(3);
                 if ($exitcond$i$i$i18$i286) {
                  break;
                 }
                 $1864 = (($1861) + ($__i$0$i$i$i17$i285<<2)|0);
                 HEAP32[$1864>>2] = 0;
                 $1865 = (($__i$0$i$i$i17$i285) + 1)|0;
                 $__i$0$i$i$i17$i285 = $1865;
                }
                $1866 = HEAP8[$expr$i277>>0]|0;
                $1867 = $1866 & 1;
                $1868 = ($1867<<24>>24)==(0);
                $1869 = ((($expr$i277)) + 8|0);
                $1870 = HEAP32[$1869>>2]|0;
                $1871 = ((($expr$i277)) + 1|0);
                $1872 = $1868 ? $1871 : $1870;
                $1873 = ((($expr$i277)) + 4|0);
                $1874 = HEAP32[$1873>>2]|0;
                $1875 = $1866&255;
                $1876 = $1875 >>> 1;
                $1877 = $1868 ? $1876 : $1874;
                __THREW__ = 0;
                $1878 = (invoke_iiii(91,($41|0),($1872|0),($1877|0))|0);
                $1879 = __THREW__; __THREW__ = 0;
                $1880 = $1879&1;
                do {
                 if ($1880) {
                  $1894 = ___cxa_find_matching_catch_2()|0;
                  $1895 = tempRet0;
                  $$1$i297 = $1895;$$12$i296 = $1894;
                 } else {
                  ;HEAP32[$40>>2]=HEAP32[$1878>>2]|0;HEAP32[$40+4>>2]=HEAP32[$1878+4>>2]|0;HEAP32[$40+8>>2]=HEAP32[$1878+8>>2]|0;
                  $__i$0$i$i$i20$i289 = 0;
                  while(1) {
                   $exitcond$i$i$i21$i290 = ($__i$0$i$i$i20$i289|0)==(3);
                   if ($exitcond$i$i$i21$i290) {
                    break;
                   }
                   $1881 = (($1878) + ($__i$0$i$i$i20$i289<<2)|0);
                   HEAP32[$1881>>2] = 0;
                   $1882 = (($__i$0$i$i$i20$i289) + 1)|0;
                   $__i$0$i$i$i20$i289 = $1882;
                  }
                  __THREW__ = 0;
                  $1883 = (invoke_iii(93,($40|0),(5061|0))|0);
                  $1884 = __THREW__; __THREW__ = 0;
                  $1885 = $1884&1;
                  if ($1885) {
                   $1896 = ___cxa_find_matching_catch_2()|0;
                   $1897 = tempRet0;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
                   $$1$i297 = $1897;$$12$i296 = $1896;
                   break;
                  }
                  ;HEAP32[$39>>2]=HEAP32[$1883>>2]|0;HEAP32[$39+4>>2]=HEAP32[$1883+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$1883+8>>2]|0;
                  $__i$0$i$i$i23$i293 = 0;
                  while(1) {
                   $exitcond$i$i$i24$i294 = ($__i$0$i$i$i23$i293|0)==(3);
                   if ($exitcond$i$i$i24$i294) {
                    break;
                   }
                   $1886 = (($1883) + ($__i$0$i$i$i23$i293<<2)|0);
                   HEAP32[$1886>>2] = 0;
                   $1887 = (($__i$0$i$i$i23$i293) + 1)|0;
                   $__i$0$i$i$i23$i293 = $1887;
                  }
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($38,$39);
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1853,$38);
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($39);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($41);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($42);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($43);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i277);
                  $$311$i312 = $1838;
                  break L1059;
                 }
                } while(0);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($41);
                $$2$i299 = $$1$i297;$$23$i298 = $$12$i296;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($42);
               $$3$i301 = $$2$i299;$$34$i300 = $$23$i298;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($43);
              $$4$i303 = $$3$i301;$$45$i302 = $$34$i300;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i277);
             ___resumeException($$45$i302|0);
             // unreachable;
            }
           }
          }
         } else {
          $$311$i312 = $first;
         }
        } else {
         $$311$i312 = $first;
        }
       } else {
        $$311$i312 = $first;
       }
      } while(0);
      $$14 = $$311$i312;
      break L1;
      break;
     }
     case 109:  {
      $1898 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($137,6225,1);
      __THREW__ = 0;
      $1899 = (invoke_iiiii(108,($1898|0),($last|0),($137|0),($db|0))|0);
      $1900 = __THREW__; __THREW__ = 0;
      $1901 = $1900&1;
      if ($1901) {
       $1903 = ___cxa_find_matching_catch_2()|0;
       $1904 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($137);
       $$23 = $1903;$$2368 = $1904;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($137);
       $1902 = ($1899|0)==($1898|0);
       $first$114 = $1902 ? $first : $1899;
       $$14 = $first$114;
       break L1;
      }
      break;
     }
     case 77:  {
      $1905 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($138,6227,2);
      __THREW__ = 0;
      $1906 = (invoke_iiiii(108,($1905|0),($last|0),($138|0),($db|0))|0);
      $1907 = __THREW__; __THREW__ = 0;
      $1908 = $1907&1;
      if ($1908) {
       $1910 = ___cxa_find_matching_catch_2()|0;
       $1911 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($138);
       $$23 = $1910;$$2368 = $1911;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($138);
       $1909 = ($1906|0)==($1905|0);
       $first$115 = $1909 ? $first : $1906;
       $$14 = $first$115;
       break L1;
      }
      break;
     }
     case 115:  {
      $1912 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($139,6230,2);
      __THREW__ = 0;
      $1913 = (invoke_iiiii(108,($1912|0),($last|0),($139|0),($db|0))|0);
      $1914 = __THREW__; __THREW__ = 0;
      $1915 = $1914&1;
      if ($1915) {
       $1917 = ___cxa_find_matching_catch_2()|0;
       $1918 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($139);
       $$23 = $1917;$$2368 = $1918;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($139);
       $1916 = ($1913|0)==($1912|0);
       $first$116 = $1916 ? $first : $1913;
       $$14 = $first$116;
       break L1;
      }
      break;
     }
     case 83:  {
      $1919 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($140,6233,3);
      __THREW__ = 0;
      $1920 = (invoke_iiiii(108,($1919|0),($last|0),($140|0),($db|0))|0);
      $1921 = __THREW__; __THREW__ = 0;
      $1922 = $1921&1;
      if ($1922) {
       $1924 = ___cxa_find_matching_catch_2()|0;
       $1925 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($140);
       $$23 = $1924;$$2368 = $1925;
       break L7;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($140);
       $1923 = ($1920|0)==($1919|0);
       $first$117 = $1923 ? $first : $1920;
       $$14 = $first$117;
       break L1;
      }
      break;
     }
     default: {
      $$14 = $first;
      break L1;
     }
     }
     break;
    }
    case 115:  {
     $1926 = ((($t$0)) + 1|0);
     $1927 = HEAP8[$1926>>0]|0;
     $1928 = $1927 << 24 >> 24;
     switch ($1928|0) {
     case 99:  {
      $1929 = ($144|0)>(2);
      L1125: do {
       if ($1929) {
        $1930 = HEAP8[$first>>0]|0;
        $1931 = ($1930<<24>>24)==(115);
        if ($1931) {
         $1932 = ((($first)) + 1|0);
         $1933 = HEAP8[$1932>>0]|0;
         $1934 = ($1933<<24>>24)==(99);
         if ($1934) {
          $1935 = ((($first)) + 2|0);
          $1936 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($1935,$last,$db)|0);
          $1937 = ($1936|0)==($1935|0);
          if ($1937) {
           $$311$i = $first;
          } else {
           $1938 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($1936,$last,$db)|0);
           $1939 = ($1938|0)==($1936|0);
           if ($1939) {
            $$311$i = $first;
           } else {
            $1940 = ((($db)) + 4|0);
            $1941 = HEAP32[$1940>>2]|0;
            $1942 = HEAP32[$db>>2]|0;
            $1943 = (($1941) - ($1942))|0;
            $1944 = (($1943|0) / 24)&-1;
            $1945 = ($1944>>>0)<(2);
            if ($1945) {
             $$311$i = $first;
            } else {
             $1946 = $1941;
             $1947 = ((($1946)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr$i,$1947);
             $1948 = HEAP32[$1940>>2]|0;
             $1949 = ((($1948)) + -24|0);
             $1950 = $1948;
             while(1) {
              $1951 = ($1950|0)==($1949|0);
              if ($1951) {
               break;
              }
              $1952 = ((($1950)) + -24|0);
              HEAP32[$1940>>2] = $1952;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1952);
              $$pre$i$i266 = HEAP32[$1940>>2]|0;
              $1950 = $$pre$i$i266;
             }
             $1953 = ((($1948)) + -48|0);
             __THREW__ = 0;
             invoke_vii(96,($49|0),($1953|0));
             $1954 = __THREW__; __THREW__ = 0;
             $1955 = $1954&1;
             if ($1955) {
              $1988 = ___cxa_find_matching_catch_2()|0;
              $1989 = tempRet0;
              $$4$i = $1989;$$45$i = $1988;
             } else {
              __THREW__ = 0;
              $1956 = (invoke_iiii(92,($49|0),0,(6237|0))|0);
              $1957 = __THREW__; __THREW__ = 0;
              $1958 = $1957&1;
              if ($1958) {
               $1990 = ___cxa_find_matching_catch_2()|0;
               $1991 = tempRet0;
               $$3$i = $1991;$$34$i = $1990;
              } else {
               ;HEAP32[$48>>2]=HEAP32[$1956>>2]|0;HEAP32[$48+4>>2]=HEAP32[$1956+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$1956+8>>2]|0;
               $__i$0$i$i$i$i269 = 0;
               while(1) {
                $exitcond$i$i$i$i270 = ($__i$0$i$i$i$i269|0)==(3);
                if ($exitcond$i$i$i$i270) {
                 break;
                }
                $1959 = (($1956) + ($__i$0$i$i$i$i269<<2)|0);
                HEAP32[$1959>>2] = 0;
                $1960 = (($__i$0$i$i$i$i269) + 1)|0;
                $__i$0$i$i$i$i269 = $1960;
               }
               __THREW__ = 0;
               $1961 = (invoke_iii(93,($48|0),(5143|0))|0);
               $1962 = __THREW__; __THREW__ = 0;
               $1963 = $1962&1;
               if ($1963) {
                $1992 = ___cxa_find_matching_catch_2()|0;
                $1993 = tempRet0;
                $$2$i275 = $1993;$$23$i = $1992;
               } else {
                ;HEAP32[$47>>2]=HEAP32[$1961>>2]|0;HEAP32[$47+4>>2]=HEAP32[$1961+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$1961+8>>2]|0;
                $__i$0$i$i$i17$i = 0;
                while(1) {
                 $exitcond$i$i$i18$i = ($__i$0$i$i$i17$i|0)==(3);
                 if ($exitcond$i$i$i18$i) {
                  break;
                 }
                 $1964 = (($1961) + ($__i$0$i$i$i17$i<<2)|0);
                 HEAP32[$1964>>2] = 0;
                 $1965 = (($__i$0$i$i$i17$i) + 1)|0;
                 $__i$0$i$i$i17$i = $1965;
                }
                $1966 = HEAP8[$expr$i>>0]|0;
                $1967 = $1966 & 1;
                $1968 = ($1967<<24>>24)==(0);
                $1969 = ((($expr$i)) + 8|0);
                $1970 = HEAP32[$1969>>2]|0;
                $1971 = ((($expr$i)) + 1|0);
                $1972 = $1968 ? $1971 : $1970;
                $1973 = ((($expr$i)) + 4|0);
                $1974 = HEAP32[$1973>>2]|0;
                $1975 = $1966&255;
                $1976 = $1975 >>> 1;
                $1977 = $1968 ? $1976 : $1974;
                __THREW__ = 0;
                $1978 = (invoke_iiii(91,($47|0),($1972|0),($1977|0))|0);
                $1979 = __THREW__; __THREW__ = 0;
                $1980 = $1979&1;
                do {
                 if ($1980) {
                  $1994 = ___cxa_find_matching_catch_2()|0;
                  $1995 = tempRet0;
                  $$1$i274 = $1995;$$12$i273 = $1994;
                 } else {
                  ;HEAP32[$46>>2]=HEAP32[$1978>>2]|0;HEAP32[$46+4>>2]=HEAP32[$1978+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$1978+8>>2]|0;
                  $__i$0$i$i$i20$i = 0;
                  while(1) {
                   $exitcond$i$i$i21$i = ($__i$0$i$i$i20$i|0)==(3);
                   if ($exitcond$i$i$i21$i) {
                    break;
                   }
                   $1981 = (($1978) + ($__i$0$i$i$i20$i<<2)|0);
                   HEAP32[$1981>>2] = 0;
                   $1982 = (($__i$0$i$i$i20$i) + 1)|0;
                   $__i$0$i$i$i20$i = $1982;
                  }
                  __THREW__ = 0;
                  $1983 = (invoke_iii(93,($46|0),(5061|0))|0);
                  $1984 = __THREW__; __THREW__ = 0;
                  $1985 = $1984&1;
                  if ($1985) {
                   $1996 = ___cxa_find_matching_catch_2()|0;
                   $1997 = tempRet0;
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($46);
                   $$1$i274 = $1997;$$12$i273 = $1996;
                   break;
                  }
                  ;HEAP32[$45>>2]=HEAP32[$1983>>2]|0;HEAP32[$45+4>>2]=HEAP32[$1983+4>>2]|0;HEAP32[$45+8>>2]=HEAP32[$1983+8>>2]|0;
                  $__i$0$i$i$i23$i = 0;
                  while(1) {
                   $exitcond$i$i$i24$i = ($__i$0$i$i$i23$i|0)==(3);
                   if ($exitcond$i$i$i24$i) {
                    break;
                   }
                   $1986 = (($1983) + ($__i$0$i$i$i23$i<<2)|0);
                   HEAP32[$1986>>2] = 0;
                   $1987 = (($__i$0$i$i$i23$i) + 1)|0;
                   $__i$0$i$i$i23$i = $1987;
                  }
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($44,$45);
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($1953,$44);
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($45);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($46);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($47);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($48);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($49);
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i);
                  $$311$i = $1938;
                  break L1125;
                 }
                } while(0);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($47);
                $$2$i275 = $$1$i274;$$23$i = $$12$i273;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($48);
               $$3$i = $$2$i275;$$34$i = $$23$i;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($49);
              $$4$i = $$3$i;$$45$i = $$34$i;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr$i);
             ___resumeException($$45$i|0);
             // unreachable;
            }
           }
          }
         } else {
          $$311$i = $first;
         }
        } else {
         $$311$i = $first;
        }
       } else {
        $$311$i = $first;
       }
      } while(0);
      $$14 = $$311$i;
      break L1;
      break;
     }
     case 112:  {
      $1998 = ($144|0)>(2);
      if (!($1998)) {
       $$14 = $first;
       break L1;
      }
      $1999 = HEAP8[$first>>0]|0;
      $2000 = ($1999<<24>>24)==(115);
      if (!($2000)) {
       $$14 = $first;
       break L1;
      }
      $2001 = ((($first)) + 1|0);
      $2002 = HEAP8[$2001>>0]|0;
      $2003 = ($2002<<24>>24)==(112);
      if (!($2003)) {
       $$14 = $first;
       break L1;
      }
      $2004 = ((($first)) + 2|0);
      $2005 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2004,$last,$db)|0);
      $2006 = ($2005|0)==($2004|0);
      $first$$i = $2006 ? $first : $2005;
      $$14 = $first$$i;
      break L1;
      break;
     }
     case 114:  {
      $2007 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
      $$14 = $2007;
      break L1;
      break;
     }
     case 116:  {
      $2008 = ($144|0)>(2);
      L1178: do {
       if ($2008) {
        $2009 = HEAP8[$first>>0]|0;
        $2010 = ($2009<<24>>24)==(115);
        if ($2010) {
         $2011 = ((($first)) + 1|0);
         $2012 = HEAP8[$2011>>0]|0;
         $2013 = ($2012<<24>>24)==(116);
         if ($2013) {
          $2014 = ((($first)) + 2|0);
          $2015 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2014,$last,$db)|0);
          $2016 = ($2015|0)==($2014|0);
          if ($2016) {
           $$15$i264 = $first;
          } else {
           $2017 = HEAP32[$db>>2]|0;
           $2018 = ((($db)) + 4|0);
           $2019 = HEAP32[$2018>>2]|0;
           $2020 = ($2017|0)==($2019|0);
           if ($2020) {
            $$15$i264 = $first;
           } else {
            $2021 = ((($2019)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($53,$2021);
            __THREW__ = 0;
            $2022 = (invoke_iiii(92,($53|0),0,(6250|0))|0);
            $2023 = __THREW__; __THREW__ = 0;
            $2024 = $2023&1;
            do {
             if ($2024) {
              $2032 = ___cxa_find_matching_catch_2()|0;
              $2033 = tempRet0;
              $$1$i260 = $2033;$$12$i259 = $2032;
             } else {
              ;HEAP32[$52>>2]=HEAP32[$2022>>2]|0;HEAP32[$52+4>>2]=HEAP32[$2022+4>>2]|0;HEAP32[$52+8>>2]=HEAP32[$2022+8>>2]|0;
              $__i$0$i$i$i$i252 = 0;
              while(1) {
               $exitcond$i$i$i$i253 = ($__i$0$i$i$i$i252|0)==(3);
               if ($exitcond$i$i$i$i253) {
                break;
               }
               $2025 = (($2022) + ($__i$0$i$i$i$i252<<2)|0);
               HEAP32[$2025>>2] = 0;
               $2026 = (($__i$0$i$i$i$i252) + 1)|0;
               $__i$0$i$i$i$i252 = $2026;
              }
              __THREW__ = 0;
              $2027 = (invoke_iii(93,($52|0),(5061|0))|0);
              $2028 = __THREW__; __THREW__ = 0;
              $2029 = $2028&1;
              if ($2029) {
               $2034 = ___cxa_find_matching_catch_2()|0;
               $2035 = tempRet0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($52);
               $$1$i260 = $2035;$$12$i259 = $2034;
               break;
              }
              ;HEAP32[$51>>2]=HEAP32[$2027>>2]|0;HEAP32[$51+4>>2]=HEAP32[$2027+4>>2]|0;HEAP32[$51+8>>2]=HEAP32[$2027+8>>2]|0;
              $__i$0$i$i$i8$i256 = 0;
              while(1) {
               $exitcond$i$i$i9$i257 = ($__i$0$i$i$i8$i256|0)==(3);
               if ($exitcond$i$i$i9$i257) {
                break;
               }
               $2030 = (($2027) + ($__i$0$i$i$i8$i256<<2)|0);
               HEAP32[$2030>>2] = 0;
               $2031 = (($__i$0$i$i$i8$i256) + 1)|0;
               $__i$0$i$i$i8$i256 = $2031;
              }
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($50,$51);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2021,$50);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($50);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($51);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($52);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($53);
              $$15$i264 = $2015;
              break L1178;
             }
            } while(0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($53);
            ___resumeException($$12$i259|0);
            // unreachable;
           }
          }
         } else {
          $$15$i264 = $first;
         }
        } else {
         $$15$i264 = $first;
        }
       } else {
        $$15$i264 = $first;
       }
      } while(0);
      $$14 = $$15$i264;
      break L1;
      break;
     }
     case 122:  {
      $2036 = ($144|0)>(2);
      L1201: do {
       if ($2036) {
        $2037 = HEAP8[$first>>0]|0;
        $2038 = ($2037<<24>>24)==(115);
        if ($2038) {
         $2039 = ((($first)) + 1|0);
         $2040 = HEAP8[$2039>>0]|0;
         $2041 = ($2040<<24>>24)==(122);
         if ($2041) {
          $2042 = ((($first)) + 2|0);
          $2043 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2042,$last,$db)|0);
          $2044 = ($2043|0)==($2042|0);
          if ($2044) {
           $$15$i250 = $first;
          } else {
           $2045 = HEAP32[$db>>2]|0;
           $2046 = ((($db)) + 4|0);
           $2047 = HEAP32[$2046>>2]|0;
           $2048 = ($2045|0)==($2047|0);
           if ($2048) {
            $$15$i250 = $first;
           } else {
            $2049 = ((($2047)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($57,$2049);
            __THREW__ = 0;
            $2050 = (invoke_iiii(92,($57|0),0,(6250|0))|0);
            $2051 = __THREW__; __THREW__ = 0;
            $2052 = $2051&1;
            do {
             if ($2052) {
              $2060 = ___cxa_find_matching_catch_2()|0;
              $2061 = tempRet0;
              $$1$i246 = $2061;$$12$i245 = $2060;
             } else {
              ;HEAP32[$56>>2]=HEAP32[$2050>>2]|0;HEAP32[$56+4>>2]=HEAP32[$2050+4>>2]|0;HEAP32[$56+8>>2]=HEAP32[$2050+8>>2]|0;
              $__i$0$i$i$i$i238 = 0;
              while(1) {
               $exitcond$i$i$i$i239 = ($__i$0$i$i$i$i238|0)==(3);
               if ($exitcond$i$i$i$i239) {
                break;
               }
               $2053 = (($2050) + ($__i$0$i$i$i$i238<<2)|0);
               HEAP32[$2053>>2] = 0;
               $2054 = (($__i$0$i$i$i$i238) + 1)|0;
               $__i$0$i$i$i$i238 = $2054;
              }
              __THREW__ = 0;
              $2055 = (invoke_iii(93,($56|0),(5061|0))|0);
              $2056 = __THREW__; __THREW__ = 0;
              $2057 = $2056&1;
              if ($2057) {
               $2062 = ___cxa_find_matching_catch_2()|0;
               $2063 = tempRet0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($56);
               $$1$i246 = $2063;$$12$i245 = $2062;
               break;
              }
              ;HEAP32[$55>>2]=HEAP32[$2055>>2]|0;HEAP32[$55+4>>2]=HEAP32[$2055+4>>2]|0;HEAP32[$55+8>>2]=HEAP32[$2055+8>>2]|0;
              $__i$0$i$i$i8$i242 = 0;
              while(1) {
               $exitcond$i$i$i9$i243 = ($__i$0$i$i$i8$i242|0)==(3);
               if ($exitcond$i$i$i9$i243) {
                break;
               }
               $2058 = (($2055) + ($__i$0$i$i$i8$i242<<2)|0);
               HEAP32[$2058>>2] = 0;
               $2059 = (($__i$0$i$i$i8$i242) + 1)|0;
               $__i$0$i$i$i8$i242 = $2059;
              }
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($54,$55);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2049,$54);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($54);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($55);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($56);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($57);
              $$15$i250 = $2043;
              break L1201;
             }
            } while(0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($57);
            ___resumeException($$12$i245|0);
            // unreachable;
           }
          }
         } else {
          $$15$i250 = $first;
         }
        } else {
         $$15$i250 = $first;
        }
       } else {
        $$15$i250 = $first;
       }
      } while(0);
      $$14 = $$15$i250;
      break L1;
      break;
     }
     case 90:  {
      $2064 = $t$0;
      $2065 = (($142) - ($2064))|0;
      $2066 = ($2065|0)>(2);
      if (!($2066)) {
       $$14 = $first;
       break L1;
      }
      $2067 = ((($t$0)) + 2|0);
      $2068 = HEAP8[$2067>>0]|0;
      $2069 = $2068 << 24 >> 24;
      switch ($2069|0) {
      case 84:  {
       break;
      }
      case 102:  {
       $2182 = ($144|0)>(2);
       L1227: do {
        if ($2182) {
         $2183 = HEAP8[$first>>0]|0;
         $2184 = ($2183<<24>>24)==(115);
         if ($2184) {
          $2185 = ((($first)) + 1|0);
          $2186 = HEAP8[$2185>>0]|0;
          $2187 = ($2186<<24>>24)==(90);
          if ($2187) {
           $2188 = ((($first)) + 2|0);
           $2189 = HEAP8[$2188>>0]|0;
           $2190 = ($2189<<24>>24)==(102);
           if ($2190) {
            $2191 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($2188,$last,$db)|0);
            $2192 = ($2191|0)==($2188|0);
            if ($2192) {
             $$15$i = $first;
            } else {
             $2193 = HEAP32[$db>>2]|0;
             $2194 = ((($db)) + 4|0);
             $2195 = HEAP32[$2194>>2]|0;
             $2196 = ($2193|0)==($2195|0);
             if ($2196) {
              $$15$i = $first;
             } else {
              $2197 = ((($2195)) + -24|0);
              __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($68,$2197);
              __THREW__ = 0;
              $2198 = (invoke_iiii(92,($68|0),0,(6259|0))|0);
              $2199 = __THREW__; __THREW__ = 0;
              $2200 = $2199&1;
              do {
               if ($2200) {
                $2208 = ___cxa_find_matching_catch_2()|0;
                $2209 = tempRet0;
                $$1$i218 = $2209;$$12$i217 = $2208;
               } else {
                ;HEAP32[$67>>2]=HEAP32[$2198>>2]|0;HEAP32[$67+4>>2]=HEAP32[$2198+4>>2]|0;HEAP32[$67+8>>2]=HEAP32[$2198+8>>2]|0;
                $__i$0$i$i$i$i214 = 0;
                while(1) {
                 $exitcond$i$i$i$i215 = ($__i$0$i$i$i$i214|0)==(3);
                 if ($exitcond$i$i$i$i215) {
                  break;
                 }
                 $2201 = (($2198) + ($__i$0$i$i$i$i214<<2)|0);
                 HEAP32[$2201>>2] = 0;
                 $2202 = (($__i$0$i$i$i$i214) + 1)|0;
                 $__i$0$i$i$i$i214 = $2202;
                }
                __THREW__ = 0;
                $2203 = (invoke_iii(93,($67|0),(5061|0))|0);
                $2204 = __THREW__; __THREW__ = 0;
                $2205 = $2204&1;
                if ($2205) {
                 $2210 = ___cxa_find_matching_catch_2()|0;
                 $2211 = tempRet0;
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($67);
                 $$1$i218 = $2211;$$12$i217 = $2210;
                 break;
                }
                ;HEAP32[$66>>2]=HEAP32[$2203>>2]|0;HEAP32[$66+4>>2]=HEAP32[$2203+4>>2]|0;HEAP32[$66+8>>2]=HEAP32[$2203+8>>2]|0;
                $__i$0$i$i$i8$i = 0;
                while(1) {
                 $exitcond$i$i$i9$i = ($__i$0$i$i$i8$i|0)==(3);
                 if ($exitcond$i$i$i9$i) {
                  break;
                 }
                 $2206 = (($2203) + ($__i$0$i$i$i8$i<<2)|0);
                 HEAP32[$2206>>2] = 0;
                 $2207 = (($__i$0$i$i$i8$i) + 1)|0;
                 $__i$0$i$i$i8$i = $2207;
                }
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($65,$66);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2197,$65);
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($65);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($66);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($67);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($68);
                $$15$i = $2191;
                break L1227;
               }
              } while(0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($68);
              ___resumeException($$12$i217|0);
              // unreachable;
             }
            }
           } else {
            $$15$i = $first;
           }
          } else {
           $$15$i = $first;
          }
         } else {
          $$15$i = $first;
         }
        } else {
         $$15$i = $first;
        }
       } while(0);
       $$14 = $$15$i;
       break L1;
       break;
      }
      default: {
       $$14 = $first;
       break L1;
      }
      }
      $2070 = ($144|0)>(2);
      L1251: do {
       if ($2070) {
        $2071 = HEAP8[$first>>0]|0;
        $2072 = ($2071<<24>>24)==(115);
        if ($2072) {
         $2073 = ((($first)) + 1|0);
         $2074 = HEAP8[$2073>>0]|0;
         $2075 = ($2074<<24>>24)==(90);
         if ($2075) {
          $2076 = ((($first)) + 2|0);
          $2077 = HEAP8[$2076>>0]|0;
          $2078 = ($2077<<24>>24)==(84);
          if ($2078) {
           $2079 = ((($db)) + 4|0);
           $2080 = HEAP32[$2079>>2]|0;
           $2081 = HEAP32[$db>>2]|0;
           $2082 = (($2080) - ($2081))|0;
           $2083 = (($2082|0) / 24)&-1;
           $2084 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($2076,$last,$db)|0);
           $2085 = HEAP32[$2079>>2]|0;
           $2086 = HEAP32[$db>>2]|0;
           $2087 = (($2085) - ($2086))|0;
           $2088 = (($2087|0) / 24)&-1;
           $2089 = ($2084|0)==($2076|0);
           $2090 = $2086;
           if ($2089) {
            $$14$i = $first;
           } else {
            HEAP8[$tmp$i>>0] = 20;
            $2091 = ((($tmp$i)) + 1|0);
            dest=$2091; src=6259; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
            $2092 = ((($tmp$i)) + 11|0);
            HEAP8[$2092>>0] = 0;
            $2093 = ($2083|0)==($2088|0);
            L1257: do {
             if ($2093) {
              label = 950;
             } else {
              $2094 = (($2090) + (($2083*24)|0)|0);
              __THREW__ = 0;
              invoke_vii(96,($69|0),($2094|0));
              $2095 = __THREW__; __THREW__ = 0;
              $2096 = $2095&1;
              if ($2096) {
               label = 944;
              } else {
               $2097 = HEAP8[$69>>0]|0;
               $2098 = $2097 & 1;
               $2099 = ($2098<<24>>24)==(0);
               $2100 = ((($69)) + 8|0);
               $2101 = HEAP32[$2100>>2]|0;
               $2102 = ((($69)) + 1|0);
               $2103 = $2099 ? $2102 : $2101;
               $2104 = ((($69)) + 4|0);
               $2105 = HEAP32[$2104>>2]|0;
               $2106 = $2097&255;
               $2107 = $2106 >>> 1;
               $2108 = $2099 ? $2107 : $2105;
               __THREW__ = 0;
               (invoke_iiii(91,($tmp$i|0),($2103|0),($2108|0))|0);
               $2109 = __THREW__; __THREW__ = 0;
               $2110 = $2109&1;
               if ($2110) {
                $2139 = ___cxa_find_matching_catch_2()|0;
                $2140 = tempRet0;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($69);
                $$1$i = $2140;$$12$i = $2139;
                break;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($69);
               $2111 = ((($70)) + 8|0);
               $2112 = ((($70)) + 1|0);
               $2113 = ((($70)) + 4|0);
               $k$0$in$i = $2083;
               while(1) {
                $k$0$i = (($k$0$in$i) + 1)|0;
                $2114 = ($k$0$i|0)==($2088|0);
                if ($2114) {
                 label = 950;
                 break L1257;
                }
                $2115 = HEAP32[$db>>2]|0;
                $2116 = (($2115) + (($k$0$i*24)|0)|0);
                __THREW__ = 0;
                invoke_vii(96,($71|0),($2116|0));
                $2117 = __THREW__; __THREW__ = 0;
                $2118 = $2117&1;
                if ($2118) {
                 label = 943;
                 break;
                }
                __THREW__ = 0;
                $2119 = (invoke_iiii(92,($71|0),0,(5693|0))|0);
                $2120 = __THREW__; __THREW__ = 0;
                $2121 = $2120&1;
                if ($2121) {
                 label = 947;
                 break;
                }
                ;HEAP32[$70>>2]=HEAP32[$2119>>2]|0;HEAP32[$70+4>>2]=HEAP32[$2119+4>>2]|0;HEAP32[$70+8>>2]=HEAP32[$2119+8>>2]|0;
                $__i$0$i$i$i$i209 = 0;
                while(1) {
                 $exitcond$i$i$i$i210 = ($__i$0$i$i$i$i209|0)==(3);
                 if ($exitcond$i$i$i$i210) {
                  break;
                 }
                 $2122 = (($2119) + ($__i$0$i$i$i$i209<<2)|0);
                 HEAP32[$2122>>2] = 0;
                 $2123 = (($__i$0$i$i$i$i209) + 1)|0;
                 $__i$0$i$i$i$i209 = $2123;
                }
                $2124 = HEAP8[$70>>0]|0;
                $2125 = $2124 & 1;
                $2126 = ($2125<<24>>24)==(0);
                $2127 = HEAP32[$2111>>2]|0;
                $2128 = $2126 ? $2112 : $2127;
                $2129 = HEAP32[$2113>>2]|0;
                $2130 = $2124&255;
                $2131 = $2130 >>> 1;
                $2132 = $2126 ? $2131 : $2129;
                __THREW__ = 0;
                (invoke_iiii(91,($tmp$i|0),($2128|0),($2132|0))|0);
                $2133 = __THREW__; __THREW__ = 0;
                $2134 = $2133&1;
                if ($2134) {
                 label = 948;
                 break;
                }
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($70);
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($71);
                $k$0$in$i = $k$0$i;
               }
               if ((label|0) == 943) {
                $2135 = ___cxa_find_matching_catch_2()|0;
                $2136 = tempRet0;
                $lpad$phi$i$index = $2135;$lpad$phi$i$index2 = $2136;
                label = 945;
                break;
               }
               else if ((label|0) == 947) {
                $2141 = ___cxa_find_matching_catch_2()|0;
                $2142 = tempRet0;
                $$0$i = $2142;$$01$i = $2141;
               }
               else if ((label|0) == 948) {
                $2143 = ___cxa_find_matching_catch_2()|0;
                $2144 = tempRet0;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($70);
                $$0$i = $2144;$$01$i = $2143;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($71);
               $$1$i = $$0$i;$$12$i = $$01$i;
              }
             }
            } while(0);
            do {
             if ((label|0) == 950) {
              __THREW__ = 0;
              (invoke_iii(93,($tmp$i|0),(5061|0))|0);
              $2145 = __THREW__; __THREW__ = 0;
              $2146 = $2145&1;
              if ($2146) {
               label = 944;
              } else {
               $k1$0$i = $2088;
               while(1) {
                $2147 = ($k1$0$i|0)==($2083|0);
                if ($2147) {
                 break;
                }
                $2148 = HEAP32[$2079>>2]|0;
                $2149 = ((($2148)) + -24|0);
                $2150 = $2148;
                while(1) {
                 $2151 = ($2150|0)==($2149|0);
                 if ($2151) {
                  break;
                 }
                 $2152 = ((($2150)) + -24|0);
                 HEAP32[$2079>>2] = $2152;
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2152);
                 $$pre$i$i = HEAP32[$2079>>2]|0;
                 $2150 = $$pre$i$i;
                }
                $2153 = (($k1$0$i) + -1)|0;
                $k1$0$i = $2153;
               }
               ;HEAP32[$73>>2]=HEAP32[$tmp$i>>2]|0;HEAP32[$73+4>>2]=HEAP32[$tmp$i+4>>2]|0;HEAP32[$73+8>>2]=HEAP32[$tmp$i+8>>2]|0;
               $__i$0$i$i$i211 = 0;
               while(1) {
                $exitcond$i$i$i212 = ($__i$0$i$i$i211|0)==(3);
                if ($exitcond$i$i$i212) {
                 break;
                }
                $2154 = (($tmp$i) + ($__i$0$i$i$i211<<2)|0);
                HEAP32[$2154>>2] = 0;
                $2155 = (($__i$0$i$i$i211) + 1)|0;
                $__i$0$i$i$i211 = $2155;
               }
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($72,$73);
               $2156 = HEAP32[$2079>>2]|0;
               $2157 = ((($db)) + 8|0);
               $2158 = HEAP32[$2157>>2]|0;
               $2159 = ($2156>>>0)<($2158>>>0);
               $2160 = $2158;
               if ($2159) {
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2156,$72);
                $2161 = HEAP32[$2079>>2]|0;
                $2162 = ((($2161)) + 24|0);
                HEAP32[$2079>>2] = $2162;
               } else {
                $2163 = $2156;
                $2164 = ((($db)) + 12|0);
                $2165 = HEAP32[$db>>2]|0;
                $2166 = (($2163) - ($2165))|0;
                $2167 = (($2166|0) / 24)&-1;
                $2168 = (($2167) + 1)|0;
                $2169 = ($2166|0)<(-24);
                if ($2169) {
                 __THREW__ = 0;
                 invoke_vi(102,($db|0));
                 $2170 = __THREW__; __THREW__ = 0;
                 $2171 = ___cxa_find_matching_catch_2()|0;
                 $2172 = tempRet0;
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($72);
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($73);
                 $$1$i = $2172;$$12$i = $2171;
                 break;
                }
                $2173 = (($2160) - ($2165))|0;
                $2174 = (($2173|0) / 24)&-1;
                $2175 = ($2174>>>0)<(1073741823);
                if ($2175) {
                 $2176 = $2174 << 1;
                 $2177 = ($2176>>>0)<($2168>>>0);
                 $2178 = $2177 ? $2168 : $2176;
                 $$0$i$i$i$i = $2178;
                } else {
                 $$0$i$i$i$i = 2147483647;
                }
                __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i$i,$2167,$2164);
                $2179 = ((($__v$i$i$i)) + 8|0);
                $2180 = HEAP32[$2179>>2]|0;
                __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2180,$72);
                $2181 = ((($2180)) + 24|0);
                HEAP32[$2179>>2] = $2181;
                __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i);
                __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
               }
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($72);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($73);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i);
               $$14$i = $2084;
               break L1251;
              }
             }
            } while(0);
            if ((label|0) == 944) {
             $2137 = ___cxa_find_matching_catch_2()|0;
             $2138 = tempRet0;
             $lpad$phi$i$index = $2137;$lpad$phi$i$index2 = $2138;
             label = 945;
            }
            if ((label|0) == 945) {
             $$1$i = $lpad$phi$i$index2;$$12$i = $lpad$phi$i$index;
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i);
            ___resumeException($$12$i|0);
            // unreachable;
           }
          } else {
           $$14$i = $first;
          }
         } else {
          $$14$i = $first;
         }
        } else {
         $$14$i = $first;
        }
       } else {
        $$14$i = $first;
       }
      } while(0);
      $$14 = $$14$i;
      break L1;
      break;
     }
     default: {
      $$14 = $first;
      break L1;
     }
     }
     break;
    }
    case 116:  {
     $2212 = ((($t$0)) + 1|0);
     $2213 = HEAP8[$2212>>0]|0;
     $2214 = $2213 << 24 >> 24;
     switch ($2214|0) {
     case 105: case 101:  {
      $2215 = ($144|0)>(2);
      L1311: do {
       if ($2215) {
        $2216 = HEAP8[$first>>0]|0;
        $2217 = ($2216<<24>>24)==(116);
        if ($2217) {
         $2218 = ((($first)) + 1|0);
         $2219 = HEAP8[$2218>>0]|0;
         switch ($2219<<24>>24) {
         case 105: case 101:  {
          break;
         }
         default: {
          $$15$i236 = $first;
          break L1311;
         }
         }
         $2220 = ($2219<<24>>24)==(101);
         $2221 = ((($first)) + 2|0);
         if ($2220) {
          $2222 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2221,$last,$db)|0);
          $t$0$i = $2222;
         } else {
          $2223 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($2221,$last,$db)|0);
          $t$0$i = $2223;
         }
         $2224 = ($t$0$i|0)==($2221|0);
         if ($2224) {
          $$15$i236 = $first;
         } else {
          $2225 = HEAP32[$db>>2]|0;
          $2226 = ((($db)) + 4|0);
          $2227 = HEAP32[$2226>>2]|0;
          $2228 = ($2225|0)==($2227|0);
          if ($2228) {
           $$15$i236 = $first;
          } else {
           $2229 = ((($2227)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($61,$2229);
           __THREW__ = 0;
           $2230 = (invoke_iiii(92,($61|0),0,(6270|0))|0);
           $2231 = __THREW__; __THREW__ = 0;
           $2232 = $2231&1;
           do {
            if ($2232) {
             $2240 = ___cxa_find_matching_catch_2()|0;
             $2241 = tempRet0;
             $$1$i234 = $2241;$$12$i233 = $2240;
            } else {
             ;HEAP32[$60>>2]=HEAP32[$2230>>2]|0;HEAP32[$60+4>>2]=HEAP32[$2230+4>>2]|0;HEAP32[$60+8>>2]=HEAP32[$2230+8>>2]|0;
             $__i$0$i$i$i$i227 = 0;
             while(1) {
              $exitcond$i$i$i$i228 = ($__i$0$i$i$i$i227|0)==(3);
              if ($exitcond$i$i$i$i228) {
               break;
              }
              $2233 = (($2230) + ($__i$0$i$i$i$i227<<2)|0);
              HEAP32[$2233>>2] = 0;
              $2234 = (($__i$0$i$i$i$i227) + 1)|0;
              $__i$0$i$i$i$i227 = $2234;
             }
             __THREW__ = 0;
             $2235 = (invoke_iii(93,($60|0),(5061|0))|0);
             $2236 = __THREW__; __THREW__ = 0;
             $2237 = $2236&1;
             if ($2237) {
              $2242 = ___cxa_find_matching_catch_2()|0;
              $2243 = tempRet0;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($60);
              $$1$i234 = $2243;$$12$i233 = $2242;
              break;
             }
             ;HEAP32[$59>>2]=HEAP32[$2235>>2]|0;HEAP32[$59+4>>2]=HEAP32[$2235+4>>2]|0;HEAP32[$59+8>>2]=HEAP32[$2235+8>>2]|0;
             $__i$0$i$i$i8$i231 = 0;
             while(1) {
              $exitcond$i$i$i9$i232 = ($__i$0$i$i$i8$i231|0)==(3);
              if ($exitcond$i$i$i9$i232) {
               break;
              }
              $2238 = (($2235) + ($__i$0$i$i$i8$i231<<2)|0);
              HEAP32[$2238>>2] = 0;
              $2239 = (($__i$0$i$i$i8$i231) + 1)|0;
              $__i$0$i$i$i8$i231 = $2239;
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($58,$59);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2229,$58);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($58);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($59);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($60);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($61);
             $$15$i236 = $t$0$i;
             break L1311;
            }
           } while(0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($61);
           ___resumeException($$12$i233|0);
           // unreachable;
          }
         }
        } else {
         $$15$i236 = $first;
        }
       } else {
        $$15$i236 = $first;
       }
      } while(0);
      $$14 = $$15$i236;
      break L1;
      break;
     }
     case 114:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($141,6278);
      $2244 = ((($db)) + 4|0);
      $2245 = HEAP32[$2244>>2]|0;
      $2246 = ((($db)) + 8|0);
      $2247 = HEAP32[$2246>>2]|0;
      $2248 = ($2245>>>0)<($2247>>>0);
      $2249 = $2247;
      if ($2248) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2245,$141);
       $2250 = HEAP32[$2244>>2]|0;
       $2251 = ((($2250)) + 24|0);
       HEAP32[$2244>>2] = $2251;
      } else {
       $2252 = $2245;
       $2253 = ((($db)) + 12|0);
       $2254 = HEAP32[$db>>2]|0;
       $2255 = (($2252) - ($2254))|0;
       $2256 = (($2255|0) / 24)&-1;
       $2257 = (($2256) + 1)|0;
       $2258 = ($2255|0)<(-24);
       if ($2258) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $2259 = __THREW__; __THREW__ = 0;
        $2260 = ___cxa_find_matching_catch_2()|0;
        $2261 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($141);
        $$23 = $2260;$$2368 = $2261;
        break L7;
       }
       $2262 = (($2249) - ($2254))|0;
       $2263 = (($2262|0) / 24)&-1;
       $2264 = ($2263>>>0)<(1073741823);
       if ($2264) {
        $2265 = $2263 << 1;
        $2266 = ($2265>>>0)<($2257>>>0);
        $2267 = $2266 ? $2257 : $2265;
        $$0$i$i$i = $2267;
       } else {
        $$0$i$i$i = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$2256,$2253);
       $2268 = ((($__v$i$i)) + 8|0);
       $2269 = HEAP32[$2268>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2269,$141);
       $2270 = ((($2269)) + 24|0);
       HEAP32[$2268>>2] = $2270;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($141);
      $2271 = ((($first)) + 2|0);
      $$14 = $2271;
      break L1;
      break;
     }
     case 119:  {
      $2272 = ($144|0)>(2);
      if ($2272) {
       $2273 = HEAP8[$first>>0]|0;
       $2274 = ($2273<<24>>24)==(116);
       if ($2274) {
        $2275 = ((($first)) + 1|0);
        $2276 = HEAP8[$2275>>0]|0;
        $2277 = ($2276<<24>>24)==(119);
        if ($2277) {
         $2278 = ((($first)) + 2|0);
         $2279 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($2278,$last,$db)|0);
         $2280 = ($2279|0)==($2278|0);
         if ($2280) {
          $$1$i225 = $first;
         } else {
          $2281 = HEAP32[$db>>2]|0;
          $2282 = ((($db)) + 4|0);
          $2283 = HEAP32[$2282>>2]|0;
          $2284 = ($2281|0)==($2283|0);
          if ($2284) {
           $$1$i225 = $first;
          } else {
           $2285 = ((($2283)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($64,$2285);
           __THREW__ = 0;
           $2286 = (invoke_iiii(92,($64|0),0,(6284|0))|0);
           $2287 = __THREW__; __THREW__ = 0;
           $2288 = $2287&1;
           if ($2288) {
            $2291 = ___cxa_find_matching_catch_2()|0;
            $2292 = tempRet0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($64);
            ___resumeException($2291|0);
            // unreachable;
           }
           ;HEAP32[$63>>2]=HEAP32[$2286>>2]|0;HEAP32[$63+4>>2]=HEAP32[$2286+4>>2]|0;HEAP32[$63+8>>2]=HEAP32[$2286+8>>2]|0;
           $__i$0$i$i$i$i221 = 0;
           while(1) {
            $exitcond$i$i$i$i222 = ($__i$0$i$i$i$i221|0)==(3);
            if ($exitcond$i$i$i$i222) {
             break;
            }
            $2289 = (($2286) + ($__i$0$i$i$i$i221<<2)|0);
            HEAP32[$2289>>2] = 0;
            $2290 = (($__i$0$i$i$i$i221) + 1)|0;
            $__i$0$i$i$i$i221 = $2290;
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($62,$63);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($2285,$62);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($62);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($63);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($64);
           $$1$i225 = $2279;
          }
         }
        } else {
         $$1$i225 = $first;
        }
       } else {
        $$1$i225 = $first;
       }
      } else {
       $$1$i225 = $first;
      }
      $$14 = $$1$i225;
      break L1;
      break;
     }
     default: {
      $$14 = $first;
      break L1;
     }
     }
     break;
    }
    case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
     $2293 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $$14 = $2293;
     break L1;
     break;
    }
    default: {
     $$14 = $first;
     break L1;
    }
    }
   } while(0);
   ___resumeException($$23|0);
   // unreachable;
  } else {
   $$14 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$14|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i57 = 0, $$0$i$i$i$i79 = 0, $$0$i$i$i37 = 0, $$0$i$i$i41 = 0, $$0$i$i$i53 = 0, $$0$i$i$i75 = 0, $$01$i$i$i = 0, $$01$i$i$i52 = 0, $$01$i$i$i74 = 0, $$110 = 0, $$115 = 0, $$211 = 0, $$216 = 0, $$24$ph$i = 0, $$24$ph$i60 = 0, $$24$ph$i82 = 0, $$3 = 0;
 var $$3$i = 0, $$3$i63 = 0, $$3$i85 = 0, $$312 = 0, $$317 = 0, $$413 = 0, $$418 = 0, $$first = 0, $$lcssa = 0, $$lcssa153 = 0, $$lcssa156 = 0, $$lcssa159 = 0, $$v$i = 0, $$v$i48 = 0, $$v$i70 = 0, $$v10$i = 0, $$v10$i51 = 0, $$v10$i73 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i87 = 0, $__i$0$i$i$i91 = 0, $__p$0$i$i = 0, $__p$0$ph$i$i = 0, $__v$i$i = 0, $__v$i$i$i = 0, $__v$i$i$i42 = 0, $__v$i$i$i64 = 0, $__v$i$i36 = 0, $e$0$i = 0, $e$0$i$lcssa = 0, $e$0$i44 = 0;
 var $e$0$i44$lcssa = 0, $e$0$i66 = 0, $e$0$i66$lcssa = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i88 = 0, $exitcond$i$i$i92 = 0, $first$ = 0, $first$19 = 0, $first$20 = 0, $first$21 = 0, $first$22 = 0, $first$23 = 0, $first$24 = 0, $first$25 = 0, $first$26 = 0, $first$27 = 0, $first$28 = 0, $first$29 = 0, $first$30 = 0, $first$31 = 0;
 var $first$32 = 0, $first$33 = 0, $first$34 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i47 = 0, $isdigit$i69 = 0, $isdigit9$i = 0, $isdigit9$i50 = 0, $isdigit9$i72 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i46 = 0, $isdigittmp$i68 = 0, $isdigittmp8$i = 0, $isdigittmp8$i49 = 0, $isdigittmp8$i71 = 0, $n$0 = 0, $n$0$lcssa151 = 0, $num$i = 0;
 var $num$i43 = 0, $num$i65 = 0, $or$cond = 0, $or$cond130 = 0, $or$cond35 = 0, $scevgep2$i$i = 0, $t$0$i = 0, $t$0$i45 = 0, $t$0$i67 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $__v$i$i$i64 = sp + 544|0;
 $0 = sp + 8|0;
 $num$i65 = sp + 624|0;
 $1 = sp + 520|0;
 $2 = sp + 508|0;
 $__v$i$i$i42 = sp + 488|0;
 $3 = sp;
 $num$i43 = sp + 592|0;
 $4 = sp + 464|0;
 $5 = sp + 448|0;
 $__v$i$i$i = sp + 428|0;
 $6 = sp + 424|0;
 $num$i = sp + 568|0;
 $7 = sp + 400|0;
 $8 = sp + 388|0;
 $__v$i$i36 = sp + 368|0;
 $__v$i$i = sp + 348|0;
 $9 = sp + 336|0;
 $10 = sp + 312|0;
 $11 = sp + 288|0;
 $12 = sp + 272|0;
 $13 = sp + 260|0;
 $14 = sp + 248|0;
 $15 = sp + 236|0;
 $16 = sp + 224|0;
 $17 = sp + 212|0;
 $18 = sp + 200|0;
 $19 = sp + 188|0;
 $20 = sp + 176|0;
 $21 = sp + 164|0;
 $22 = sp + 152|0;
 $23 = sp + 140|0;
 $24 = sp + 128|0;
 $25 = sp + 104|0;
 $26 = sp + 88|0;
 $27 = sp + 76|0;
 $28 = sp + 64|0;
 $29 = sp + 52|0;
 $30 = sp + 40|0;
 $31 = $last;
 $32 = $first;
 $33 = (($31) - ($32))|0;
 $34 = ($33|0)>(3);
 L1: do {
  if ($34) {
   $35 = HEAP8[$first>>0]|0;
   $36 = ($35<<24>>24)==(76);
   if ($36) {
    $37 = ((($first)) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38 << 24 >> 24;
    L4: do {
     switch ($39|0) {
     case 84:  {
      $$3 = $first;
      break L1;
      break;
     }
     case 119:  {
      $40 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($9,4741,7);
      __THREW__ = 0;
      $41 = (invoke_iiiii(111,($40|0),($last|0),($9|0),($db|0))|0);
      $42 = __THREW__; __THREW__ = 0;
      $43 = $42&1;
      if ($43) {
       $45 = ___cxa_find_matching_catch_2()|0;
       $46 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       $$413 = $45;$$418 = $46;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       $44 = ($41|0)==($40|0);
       $first$ = $44 ? $first : $41;
       $$3 = $first$;
       break L1;
      }
      break;
     }
     case 98:  {
      $47 = ((($first)) + 3|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = ($48<<24>>24)==(69);
      if (!($49)) {
       $$3 = $first;
       break L1;
      }
      $50 = ((($first)) + 2|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = $51 << 24 >> 24;
      switch ($52|0) {
      case 48:  {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($10,5063);
       $53 = ((($db)) + 4|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ((($db)) + 8|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($54>>>0)<($56>>>0);
       $58 = $56;
       if ($57) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($54,$10);
        $59 = HEAP32[$53>>2]|0;
        $60 = ((($59)) + 24|0);
        HEAP32[$53>>2] = $60;
       } else {
        $61 = $54;
        $62 = ((($db)) + 12|0);
        $63 = HEAP32[$db>>2]|0;
        $64 = (($61) - ($63))|0;
        $65 = (($64|0) / 24)&-1;
        $66 = (($65) + 1)|0;
        $67 = ($64|0)<(-24);
        if ($67) {
         __THREW__ = 0;
         invoke_vi(102,($db|0));
         $68 = __THREW__; __THREW__ = 0;
         $69 = ___cxa_find_matching_catch_2()|0;
         $70 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
         $$413 = $69;$$418 = $70;
         break L4;
        }
        $71 = (($58) - ($63))|0;
        $72 = (($71|0) / 24)&-1;
        $73 = ($72>>>0)<(1073741823);
        if ($73) {
         $74 = $72 << 1;
         $75 = ($74>>>0)<($66>>>0);
         $76 = $75 ? $66 : $74;
         $$0$i$i$i = $76;
        } else {
         $$0$i$i$i = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$65,$62);
        $77 = ((($__v$i$i)) + 8|0);
        $78 = HEAP32[$77>>2]|0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($78,$10);
        $79 = ((($78)) + 24|0);
        HEAP32[$77>>2] = $79;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
       $80 = ((($first)) + 4|0);
       $$3 = $80;
       break L1;
       break;
      }
      case 49:  {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($11,5069);
       $81 = ((($db)) + 4|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ((($db)) + 8|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($82>>>0)<($84>>>0);
       $86 = $84;
       if ($85) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($82,$11);
        $87 = HEAP32[$81>>2]|0;
        $88 = ((($87)) + 24|0);
        HEAP32[$81>>2] = $88;
       } else {
        $89 = $82;
        $90 = ((($db)) + 12|0);
        $91 = HEAP32[$db>>2]|0;
        $92 = (($89) - ($91))|0;
        $93 = (($92|0) / 24)&-1;
        $94 = (($93) + 1)|0;
        $95 = ($92|0)<(-24);
        if ($95) {
         __THREW__ = 0;
         invoke_vi(102,($db|0));
         $96 = __THREW__; __THREW__ = 0;
         $97 = ___cxa_find_matching_catch_2()|0;
         $98 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
         $$413 = $97;$$418 = $98;
         break L4;
        }
        $99 = (($86) - ($91))|0;
        $100 = (($99|0) / 24)&-1;
        $101 = ($100>>>0)<(1073741823);
        if ($101) {
         $102 = $100 << 1;
         $103 = ($102>>>0)<($94>>>0);
         $104 = $103 ? $94 : $102;
         $$0$i$i$i37 = $104;
        } else {
         $$0$i$i$i37 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i36,$$0$i$i$i37,$93,$90);
        $105 = ((($__v$i$i36)) + 8|0);
        $106 = HEAP32[$105>>2]|0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($106,$11);
        $107 = ((($106)) + 24|0);
        HEAP32[$105>>2] = $107;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i36);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i36);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
       $108 = ((($first)) + 4|0);
       $$3 = $108;
       break L1;
       break;
      }
      default: {
       $$3 = $first;
       break L1;
      }
      }
      break;
     }
     case 99:  {
      $109 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($12,4754,4);
      __THREW__ = 0;
      $110 = (invoke_iiiii(111,($109|0),($last|0),($12|0),($db|0))|0);
      $111 = __THREW__; __THREW__ = 0;
      $112 = $111&1;
      if ($112) {
       $114 = ___cxa_find_matching_catch_2()|0;
       $115 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
       $$413 = $114;$$418 = $115;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
       $113 = ($110|0)==($109|0);
       $first$19 = $113 ? $first : $110;
       $$3 = $first$19;
       break L1;
      }
      break;
     }
     case 97:  {
      $116 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($13,4759,11);
      __THREW__ = 0;
      $117 = (invoke_iiiii(111,($116|0),($last|0),($13|0),($db|0))|0);
      $118 = __THREW__; __THREW__ = 0;
      $119 = $118&1;
      if ($119) {
       $121 = ___cxa_find_matching_catch_2()|0;
       $122 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
       $$413 = $121;$$418 = $122;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
       $120 = ($117|0)==($116|0);
       $first$20 = $120 ? $first : $117;
       $$3 = $first$20;
       break L1;
      }
      break;
     }
     case 104:  {
      $123 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($14,4771,13);
      __THREW__ = 0;
      $124 = (invoke_iiiii(111,($123|0),($last|0),($14|0),($db|0))|0);
      $125 = __THREW__; __THREW__ = 0;
      $126 = $125&1;
      if ($126) {
       $128 = ___cxa_find_matching_catch_2()|0;
       $129 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
       $$413 = $128;$$418 = $129;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
       $127 = ($124|0)==($123|0);
       $first$21 = $127 ? $first : $124;
       $$3 = $first$21;
       break L1;
      }
      break;
     }
     case 115:  {
      $130 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($15,4785,5);
      __THREW__ = 0;
      $131 = (invoke_iiiii(111,($130|0),($last|0),($15|0),($db|0))|0);
      $132 = __THREW__; __THREW__ = 0;
      $133 = $132&1;
      if ($133) {
       $135 = ___cxa_find_matching_catch_2()|0;
       $136 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
       $$413 = $135;$$418 = $136;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
       $134 = ($131|0)==($130|0);
       $first$22 = $134 ? $first : $131;
       $$3 = $first$22;
       break L1;
      }
      break;
     }
     case 116:  {
      $137 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($16,4791,14);
      __THREW__ = 0;
      $138 = (invoke_iiiii(111,($137|0),($last|0),($16|0),($db|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       $142 = ___cxa_find_matching_catch_2()|0;
       $143 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
       $$413 = $142;$$418 = $143;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
       $141 = ($138|0)==($137|0);
       $first$23 = $141 ? $first : $138;
       $$3 = $first$23;
       break L1;
      }
      break;
     }
     case 105:  {
      $144 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($17,8398,0);
      __THREW__ = 0;
      $145 = (invoke_iiiii(111,($144|0),($last|0),($17|0),($db|0))|0);
      $146 = __THREW__; __THREW__ = 0;
      $147 = $146&1;
      if ($147) {
       $149 = ___cxa_find_matching_catch_2()|0;
       $150 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
       $$413 = $149;$$418 = $150;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
       $148 = ($145|0)==($144|0);
       $first$24 = $148 ? $first : $145;
       $$3 = $first$24;
       break L1;
      }
      break;
     }
     case 106:  {
      $151 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($18,5074,1);
      __THREW__ = 0;
      $152 = (invoke_iiiii(111,($151|0),($last|0),($18|0),($db|0))|0);
      $153 = __THREW__; __THREW__ = 0;
      $154 = $153&1;
      if ($154) {
       $156 = ___cxa_find_matching_catch_2()|0;
       $157 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
       $$413 = $156;$$418 = $157;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
       $155 = ($152|0)==($151|0);
       $first$25 = $155 ? $first : $152;
       $$3 = $first$25;
       break L1;
      }
      break;
     }
     case 108:  {
      $158 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($19,5076,1);
      __THREW__ = 0;
      $159 = (invoke_iiiii(111,($158|0),($last|0),($19|0),($db|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if ($161) {
       $163 = ___cxa_find_matching_catch_2()|0;
       $164 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
       $$413 = $163;$$418 = $164;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
       $162 = ($159|0)==($158|0);
       $first$26 = $162 ? $first : $159;
       $$3 = $first$26;
       break L1;
      }
      break;
     }
     case 109:  {
      $165 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($20,5078,2);
      __THREW__ = 0;
      $166 = (invoke_iiiii(111,($165|0),($last|0),($20|0),($db|0))|0);
      $167 = __THREW__; __THREW__ = 0;
      $168 = $167&1;
      if ($168) {
       $170 = ___cxa_find_matching_catch_2()|0;
       $171 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
       $$413 = $170;$$418 = $171;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
       $169 = ($166|0)==($165|0);
       $first$27 = $169 ? $first : $166;
       $$3 = $first$27;
       break L1;
      }
      break;
     }
     case 120:  {
      $172 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($21,5081,2);
      __THREW__ = 0;
      $173 = (invoke_iiiii(111,($172|0),($last|0),($21|0),($db|0))|0);
      $174 = __THREW__; __THREW__ = 0;
      $175 = $174&1;
      if ($175) {
       $177 = ___cxa_find_matching_catch_2()|0;
       $178 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
       $$413 = $177;$$418 = $178;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
       $176 = ($173|0)==($172|0);
       $first$28 = $176 ? $first : $173;
       $$3 = $first$28;
       break L1;
      }
      break;
     }
     case 121:  {
      $179 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($22,5084,3);
      __THREW__ = 0;
      $180 = (invoke_iiiii(111,($179|0),($last|0),($22|0),($db|0))|0);
      $181 = __THREW__; __THREW__ = 0;
      $182 = $181&1;
      if ($182) {
       $184 = ___cxa_find_matching_catch_2()|0;
       $185 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
       $$413 = $184;$$418 = $185;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
       $183 = ($180|0)==($179|0);
       $first$29 = $183 ? $first : $180;
       $$3 = $first$29;
       break L1;
      }
      break;
     }
     case 110:  {
      $186 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($23,4871,8);
      __THREW__ = 0;
      $187 = (invoke_iiiii(111,($186|0),($last|0),($23|0),($db|0))|0);
      $188 = __THREW__; __THREW__ = 0;
      $189 = $188&1;
      if ($189) {
       $191 = ___cxa_find_matching_catch_2()|0;
       $192 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
       $$413 = $191;$$418 = $192;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
       $190 = ($187|0)==($186|0);
       $first$30 = $190 ? $first : $187;
       $$3 = $first$30;
       break L1;
      }
      break;
     }
     case 111:  {
      $193 = ((($first)) + 2|0);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($24,4880,17);
      __THREW__ = 0;
      $194 = (invoke_iiiii(111,($193|0),($last|0),($24|0),($db|0))|0);
      $195 = __THREW__; __THREW__ = 0;
      $196 = $195&1;
      if ($196) {
       $198 = ___cxa_find_matching_catch_2()|0;
       $199 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
       $$413 = $198;$$418 = $199;
       break L4;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
       $197 = ($194|0)==($193|0);
       $first$31 = $197 ? $first : $194;
       $$3 = $first$31;
       break L1;
      }
      break;
     }
     case 102:  {
      $200 = ((($first)) + 2|0);
      $201 = $200;
      $202 = (($31) - ($201))|0;
      $203 = ($202>>>0)>(8);
      L133: do {
       if ($203) {
        $204 = ((($first)) + 10|0);
        $e$0$i = $6;$t$0$i = $200;
        while(1) {
         $205 = ($t$0$i|0)==($204|0);
         $206 = HEAP8[$t$0$i>>0]|0;
         if ($205) {
          $$lcssa153 = $206;$e$0$i$lcssa = $e$0$i;
          label = 69;
          break;
         }
         $207 = $206 << 24 >> 24;
         $208 = (_isxdigit($207)|0);
         $209 = ($208|0)==(0);
         if ($209) {
          break;
         }
         $210 = HEAP8[$t$0$i>>0]|0;
         $211 = $210 << 24 >> 24;
         $isdigittmp$i = (($211) + -48)|0;
         $isdigit$i = ($isdigittmp$i>>>0)<(10);
         $$v$i = $isdigit$i ? 0 : 9;
         $212 = (($$v$i) + ($211))|0;
         $213 = ((($t$0$i)) + 1|0);
         $214 = HEAP8[$213>>0]|0;
         $215 = $214 << 24 >> 24;
         $isdigittmp8$i = (($215) + -48)|0;
         $isdigit9$i = ($isdigittmp8$i>>>0)<(10);
         $216 = $214&255;
         $$v10$i = $isdigit9$i ? 208 : 169;
         $217 = (($$v10$i) + ($216))|0;
         $218 = $212 << 4;
         $219 = (($217) + ($218))|0;
         $220 = $219&255;
         HEAP8[$e$0$i>>0] = $220;
         $221 = ((($t$0$i)) + 2|0);
         $222 = ((($e$0$i)) + 1|0);
         $e$0$i = $222;$t$0$i = $221;
        }
        do {
         if ((label|0) == 69) {
          $223 = ($$lcssa153<<24>>24)==(69);
          if ($223) {
           $224 = ($6|0)==($e$0$i$lcssa|0);
           L143: do {
            if (!($224)) {
             $$0$i$i$i41 = $e$0$i$lcssa;$$01$i$i$i = $6;
             while(1) {
              $225 = ((($$0$i$i$i41)) + -1|0);
              $226 = ($$01$i$i$i>>>0)<($225>>>0);
              if (!($226)) {
               break L143;
              }
              $227 = HEAP8[$$01$i$i$i>>0]|0;
              $228 = HEAP8[$225>>0]|0;
              HEAP8[$$01$i$i$i>>0] = $228;
              HEAP8[$225>>0] = $227;
              $229 = ((($$01$i$i$i)) + 1|0);
              $$0$i$i$i41 = $225;$$01$i$i$i = $229;
             }
            }
           } while(0);
           dest=$num$i; stop=dest+24|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
           $230 = +HEAPF32[$6>>2];
           $231 = $230;
           HEAPF64[$vararg_buffer>>3] = $231;
           $232 = (_snprintf($num$i,24,5088,$vararg_buffer)|0);
           $233 = ($232>>>0)>(23);
           if ($233) {
            break;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($8,$num$i,$232);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($7,$8);
           $234 = ((($db)) + 4|0);
           $235 = HEAP32[$234>>2]|0;
           $236 = ((($db)) + 8|0);
           $237 = HEAP32[$236>>2]|0;
           $238 = ($235>>>0)<($237>>>0);
           $239 = $237;
           if ($238) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($235,$7);
            $240 = HEAP32[$234>>2]|0;
            $241 = ((($240)) + 24|0);
            HEAP32[$234>>2] = $241;
           } else {
            $242 = $235;
            $243 = ((($db)) + 12|0);
            $244 = HEAP32[$db>>2]|0;
            $245 = (($242) - ($244))|0;
            $246 = (($245|0) / 24)&-1;
            $247 = (($246) + 1)|0;
            $248 = ($245|0)<(-24);
            if ($248) {
             __THREW__ = 0;
             invoke_vi(102,($db|0));
             $249 = __THREW__; __THREW__ = 0;
             $250 = ___cxa_find_matching_catch_2()|0;
             $251 = tempRet0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
             ___resumeException($250|0);
             // unreachable;
            }
            $252 = (($239) - ($244))|0;
            $253 = (($252|0) / 24)&-1;
            $254 = ($253>>>0)<(1073741823);
            if ($254) {
             $255 = $253 << 1;
             $256 = ($255>>>0)<($247>>>0);
             $257 = $256 ? $247 : $255;
             $$0$i$i$i$i = $257;
            } else {
             $$0$i$i$i$i = 2147483647;
            }
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i$i,$246,$243);
            $258 = ((($__v$i$i$i)) + 8|0);
            $259 = HEAP32[$258>>2]|0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($259,$7);
            $260 = ((($259)) + 24|0);
            HEAP32[$258>>2] = $260;
            __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i);
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
           $261 = ((($first)) + 11|0);
           $$24$ph$i = $261;
          } else {
           $$24$ph$i = $200;
          }
          $$3$i = $$24$ph$i;
          break L133;
         }
        } while(0);
        $$3$i = $200;
       } else {
        $$3$i = $200;
       }
      } while(0);
      $262 = ($$3$i|0)==($200|0);
      $first$32 = $262 ? $first : $$3$i;
      $$3 = $first$32;
      break L1;
      break;
     }
     case 100:  {
      $263 = ((($first)) + 2|0);
      $264 = $263;
      $265 = (($31) - ($264))|0;
      $266 = ($265>>>0)>(16);
      L165: do {
       if ($266) {
        $267 = ((($first)) + 18|0);
        $e$0$i44 = $3;$t$0$i45 = $263;
        while(1) {
         $268 = ($t$0$i45|0)==($267|0);
         $269 = HEAP8[$t$0$i45>>0]|0;
         if ($268) {
          $$lcssa156 = $269;$e$0$i44$lcssa = $e$0$i44;
          label = 91;
          break;
         }
         $270 = $269 << 24 >> 24;
         $271 = (_isxdigit($270)|0);
         $272 = ($271|0)==(0);
         if ($272) {
          break;
         }
         $273 = HEAP8[$t$0$i45>>0]|0;
         $274 = $273 << 24 >> 24;
         $isdigittmp$i46 = (($274) + -48)|0;
         $isdigit$i47 = ($isdigittmp$i46>>>0)<(10);
         $$v$i48 = $isdigit$i47 ? 0 : 9;
         $275 = (($$v$i48) + ($274))|0;
         $276 = ((($t$0$i45)) + 1|0);
         $277 = HEAP8[$276>>0]|0;
         $278 = $277 << 24 >> 24;
         $isdigittmp8$i49 = (($278) + -48)|0;
         $isdigit9$i50 = ($isdigittmp8$i49>>>0)<(10);
         $279 = $277&255;
         $$v10$i51 = $isdigit9$i50 ? 208 : 169;
         $280 = (($$v10$i51) + ($279))|0;
         $281 = $275 << 4;
         $282 = (($280) + ($281))|0;
         $283 = $282&255;
         HEAP8[$e$0$i44>>0] = $283;
         $284 = ((($t$0$i45)) + 2|0);
         $285 = ((($e$0$i44)) + 1|0);
         $e$0$i44 = $285;$t$0$i45 = $284;
        }
        do {
         if ((label|0) == 91) {
          $286 = ($$lcssa156<<24>>24)==(69);
          if ($286) {
           $287 = ($3|0)==($e$0$i44$lcssa|0);
           L175: do {
            if (!($287)) {
             $$0$i$i$i53 = $e$0$i44$lcssa;$$01$i$i$i52 = $3;
             while(1) {
              $288 = ((($$0$i$i$i53)) + -1|0);
              $289 = ($$01$i$i$i52>>>0)<($288>>>0);
              if (!($289)) {
               break L175;
              }
              $290 = HEAP8[$$01$i$i$i52>>0]|0;
              $291 = HEAP8[$288>>0]|0;
              HEAP8[$$01$i$i$i52>>0] = $291;
              HEAP8[$288>>0] = $290;
              $292 = ((($$01$i$i$i52)) + 1|0);
              $$0$i$i$i53 = $288;$$01$i$i$i52 = $292;
             }
            }
           } while(0);
           dest=$num$i43; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
           $293 = +HEAPF64[$3>>3];
           HEAPF64[$vararg_buffer1>>3] = $293;
           $294 = (_snprintf($num$i43,32,5092,$vararg_buffer1)|0);
           $295 = ($294>>>0)>(31);
           if ($295) {
            break;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($5,$num$i43,$294);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
           $296 = ((($db)) + 4|0);
           $297 = HEAP32[$296>>2]|0;
           $298 = ((($db)) + 8|0);
           $299 = HEAP32[$298>>2]|0;
           $300 = ($297>>>0)<($299>>>0);
           $301 = $299;
           if ($300) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($297,$4);
            $302 = HEAP32[$296>>2]|0;
            $303 = ((($302)) + 24|0);
            HEAP32[$296>>2] = $303;
           } else {
            $304 = $297;
            $305 = ((($db)) + 12|0);
            $306 = HEAP32[$db>>2]|0;
            $307 = (($304) - ($306))|0;
            $308 = (($307|0) / 24)&-1;
            $309 = (($308) + 1)|0;
            $310 = ($307|0)<(-24);
            if ($310) {
             __THREW__ = 0;
             invoke_vi(102,($db|0));
             $311 = __THREW__; __THREW__ = 0;
             $312 = ___cxa_find_matching_catch_2()|0;
             $313 = tempRet0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
             ___resumeException($312|0);
             // unreachable;
            }
            $314 = (($301) - ($306))|0;
            $315 = (($314|0) / 24)&-1;
            $316 = ($315>>>0)<(1073741823);
            if ($316) {
             $317 = $315 << 1;
             $318 = ($317>>>0)<($309>>>0);
             $319 = $318 ? $309 : $317;
             $$0$i$i$i$i57 = $319;
            } else {
             $$0$i$i$i$i57 = 2147483647;
            }
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i42,$$0$i$i$i$i57,$308,$305);
            $320 = ((($__v$i$i$i42)) + 8|0);
            $321 = HEAP32[$320>>2]|0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($321,$4);
            $322 = ((($321)) + 24|0);
            HEAP32[$320>>2] = $322;
            __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i42);
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i42);
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
           $323 = ((($first)) + 19|0);
           $$24$ph$i60 = $323;
          } else {
           $$24$ph$i60 = $263;
          }
          $$3$i63 = $$24$ph$i60;
          break L165;
         }
        } while(0);
        $$3$i63 = $263;
       } else {
        $$3$i63 = $263;
       }
      } while(0);
      $324 = ($$3$i63|0)==($263|0);
      $first$33 = $324 ? $first : $$3$i63;
      $$3 = $first$33;
      break L1;
      break;
     }
     case 101:  {
      $325 = ((($first)) + 2|0);
      $326 = $325;
      $327 = (($31) - ($326))|0;
      $328 = ($327>>>0)>(20);
      L197: do {
       if ($328) {
        $329 = ((($first)) + 22|0);
        $e$0$i66 = $0;$t$0$i67 = $325;
        while(1) {
         $330 = ($t$0$i67|0)==($329|0);
         $331 = HEAP8[$t$0$i67>>0]|0;
         if ($330) {
          $$lcssa159 = $331;$e$0$i66$lcssa = $e$0$i66;
          label = 113;
          break;
         }
         $332 = $331 << 24 >> 24;
         $333 = (_isxdigit($332)|0);
         $334 = ($333|0)==(0);
         if ($334) {
          break;
         }
         $335 = HEAP8[$t$0$i67>>0]|0;
         $336 = $335 << 24 >> 24;
         $isdigittmp$i68 = (($336) + -48)|0;
         $isdigit$i69 = ($isdigittmp$i68>>>0)<(10);
         $$v$i70 = $isdigit$i69 ? 0 : 9;
         $337 = (($$v$i70) + ($336))|0;
         $338 = ((($t$0$i67)) + 1|0);
         $339 = HEAP8[$338>>0]|0;
         $340 = $339 << 24 >> 24;
         $isdigittmp8$i71 = (($340) + -48)|0;
         $isdigit9$i72 = ($isdigittmp8$i71>>>0)<(10);
         $341 = $339&255;
         $$v10$i73 = $isdigit9$i72 ? 208 : 169;
         $342 = (($$v10$i73) + ($341))|0;
         $343 = $337 << 4;
         $344 = (($342) + ($343))|0;
         $345 = $344&255;
         HEAP8[$e$0$i66>>0] = $345;
         $346 = ((($t$0$i67)) + 2|0);
         $347 = ((($e$0$i66)) + 1|0);
         $e$0$i66 = $347;$t$0$i67 = $346;
        }
        do {
         if ((label|0) == 113) {
          $348 = ($$lcssa159<<24>>24)==(69);
          if ($348) {
           $349 = ($0|0)==($e$0$i66$lcssa|0);
           L207: do {
            if (!($349)) {
             $$0$i$i$i75 = $e$0$i66$lcssa;$$01$i$i$i74 = $0;
             while(1) {
              $350 = ((($$0$i$i$i75)) + -1|0);
              $351 = ($$01$i$i$i74>>>0)<($350>>>0);
              if (!($351)) {
               break L207;
              }
              $352 = HEAP8[$$01$i$i$i74>>0]|0;
              $353 = HEAP8[$350>>0]|0;
              HEAP8[$$01$i$i$i74>>0] = $353;
              HEAP8[$350>>0] = $352;
              $354 = ((($$01$i$i$i74)) + 1|0);
              $$0$i$i$i75 = $350;$$01$i$i$i74 = $354;
             }
            }
           } while(0);
           dest=$num$i65; stop=dest+40|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
           $355 = +HEAPF64[$0>>3];
           HEAPF64[$vararg_buffer4>>3] = $355;
           $356 = (_snprintf($num$i65,40,5095,$vararg_buffer4)|0);
           $357 = ($356>>>0)>(39);
           if ($357) {
            break;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($2,$num$i65,$356);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1,$2);
           $358 = ((($db)) + 4|0);
           $359 = HEAP32[$358>>2]|0;
           $360 = ((($db)) + 8|0);
           $361 = HEAP32[$360>>2]|0;
           $362 = ($359>>>0)<($361>>>0);
           $363 = $361;
           if ($362) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($359,$1);
            $364 = HEAP32[$358>>2]|0;
            $365 = ((($364)) + 24|0);
            HEAP32[$358>>2] = $365;
           } else {
            $366 = $359;
            $367 = ((($db)) + 12|0);
            $368 = HEAP32[$db>>2]|0;
            $369 = (($366) - ($368))|0;
            $370 = (($369|0) / 24)&-1;
            $371 = (($370) + 1)|0;
            $372 = ($369|0)<(-24);
            if ($372) {
             __THREW__ = 0;
             invoke_vi(102,($db|0));
             $373 = __THREW__; __THREW__ = 0;
             $374 = ___cxa_find_matching_catch_2()|0;
             $375 = tempRet0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
             ___resumeException($374|0);
             // unreachable;
            }
            $376 = (($363) - ($368))|0;
            $377 = (($376|0) / 24)&-1;
            $378 = ($377>>>0)<(1073741823);
            if ($378) {
             $379 = $377 << 1;
             $380 = ($379>>>0)<($371>>>0);
             $381 = $380 ? $371 : $379;
             $$0$i$i$i$i79 = $381;
            } else {
             $$0$i$i$i$i79 = 2147483647;
            }
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i64,$$0$i$i$i$i79,$370,$367);
            $382 = ((($__v$i$i$i64)) + 8|0);
            $383 = HEAP32[$382>>2]|0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($383,$1);
            $384 = ((($383)) + 24|0);
            HEAP32[$382>>2] = $384;
            __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i64);
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i64);
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           $385 = ((($first)) + 23|0);
           $$24$ph$i82 = $385;
          } else {
           $$24$ph$i82 = $325;
          }
          $$3$i85 = $$24$ph$i82;
          break L197;
         }
        } while(0);
        $$3$i85 = $325;
       } else {
        $$3$i85 = $325;
       }
      } while(0);
      $386 = ($$3$i85|0)==($325|0);
      $first$34 = $386 ? $first : $$3$i85;
      $$3 = $first$34;
      break L1;
      break;
     }
     case 95:  {
      $387 = ((($first)) + 2|0);
      $388 = HEAP8[$387>>0]|0;
      $389 = ($388<<24>>24)==(90);
      if (!($389)) {
       $$3 = $first;
       break L1;
      }
      $390 = ((($first)) + 3|0);
      $391 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($390,$last,$db)|0);
      $392 = ($391|0)==($390|0);
      $393 = ($391|0)==($last|0);
      $or$cond = $392 | $393;
      if ($or$cond) {
       $$3 = $first;
       break L1;
      }
      $394 = HEAP8[$391>>0]|0;
      $395 = ($394<<24>>24)==(69);
      $396 = ((($391)) + 1|0);
      $$first = $395 ? $396 : $first;
      $$3 = $$first;
      break L1;
      break;
     }
     default: {
      $397 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($37,$last,$db)|0);
      $398 = ($397|0)==($37|0);
      $399 = ($397|0)==($last|0);
      $or$cond35 = $398 | $399;
      if ($or$cond35) {
       $$3 = $first;
       break L1;
      }
      $400 = HEAP8[$397>>0]|0;
      $401 = ($400<<24>>24)==(69);
      if ($401) {
       $468 = ((($397)) + 1|0);
       $$3 = $468;
       break L1;
      } else {
       $n$0 = $397;
      }
      while(1) {
       $402 = ($n$0|0)==($last|0);
       if ($402) {
        $$3 = $first;
        break L1;
       }
       $403 = HEAP8[$n$0>>0]|0;
       $404 = $403 << 24 >> 24;
       $isdigittmp = (($404) + -48)|0;
       $isdigit = ($isdigittmp>>>0)<(10);
       if (!($isdigit)) {
        $$lcssa = $403;$n$0$lcssa151 = $n$0;
        break;
       }
       $405 = ((($n$0)) + 1|0);
       $n$0 = $405;
      }
      $406 = ($n$0$lcssa151|0)!=($397|0);
      $407 = ($$lcssa<<24>>24)==(69);
      $or$cond130 = $406 & $407;
      if (!($or$cond130)) {
       $$3 = $first;
       break L1;
      }
      $408 = HEAP32[$db>>2]|0;
      $409 = ((($db)) + 4|0);
      $410 = HEAP32[$409>>2]|0;
      $411 = ($408|0)==($410|0);
      if ($411) {
       $$3 = $first;
       break L1;
      }
      $412 = ((($410)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($29,$412);
      __THREW__ = 0;
      $413 = (invoke_iiii(92,($29|0),0,(5059|0))|0);
      $414 = __THREW__; __THREW__ = 0;
      $415 = $414&1;
      if ($415) {
       $462 = ___cxa_find_matching_catch_2()|0;
       $463 = tempRet0;
       $$312 = $462;$$317 = $463;
      } else {
       ;HEAP32[$28>>2]=HEAP32[$413>>2]|0;HEAP32[$28+4>>2]=HEAP32[$413+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$413+8>>2]|0;
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $416 = (($413) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$416>>2] = 0;
        $417 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $417;
       }
       __THREW__ = 0;
       $418 = (invoke_iii(93,($28|0),(5061|0))|0);
       $419 = __THREW__; __THREW__ = 0;
       $420 = $419&1;
       if ($420) {
        $464 = ___cxa_find_matching_catch_2()|0;
        $465 = tempRet0;
        $$211 = $464;$$216 = $465;
       } else {
        ;HEAP32[$27>>2]=HEAP32[$418>>2]|0;HEAP32[$27+4>>2]=HEAP32[$418+4>>2]|0;HEAP32[$27+8>>2]=HEAP32[$418+8>>2]|0;
        $__i$0$i$i$i87 = 0;
        while(1) {
         $exitcond$i$i$i88 = ($__i$0$i$i$i87|0)==(3);
         if ($exitcond$i$i$i88) {
          break;
         }
         $421 = (($418) + ($__i$0$i$i$i87<<2)|0);
         HEAP32[$421>>2] = 0;
         $422 = (($__i$0$i$i$i87) + 1)|0;
         $__i$0$i$i$i87 = $422;
        }
        $423 = $397;
        $424 = $n$0$lcssa151;
        $425 = (($424) - ($423))|0;
        $426 = ($425>>>0)>(4294967279);
        do {
         if ($426) {
          __THREW__ = 0;
          invoke_vi(112,($30|0));
          $427 = __THREW__; __THREW__ = 0;
          $428 = ___cxa_find_matching_catch_2()|0;
          $429 = tempRet0;
          $$110 = $428;$$115 = $429;
         } else {
          $430 = ($425>>>0)<(11);
          if ($430) {
           $431 = $425 << 1;
           $432 = $431&255;
           HEAP8[$30>>0] = $432;
           $433 = ((($30)) + 1|0);
           $__p$0$ph$i$i = $433;
          } else {
           $434 = (($425) + 16)|0;
           $435 = $434 & -16;
           $436 = (_malloc($435)|0);
           $437 = ((($30)) + 8|0);
           HEAP32[$437>>2] = $436;
           $438 = $435 | 1;
           HEAP32[$30>>2] = $438;
           $439 = ((($30)) + 4|0);
           HEAP32[$439>>2] = $425;
           $__p$0$ph$i$i = $436;
          }
          $$0$i$i = $397;$__p$0$i$i = $__p$0$ph$i$i;
          while(1) {
           $440 = ($$0$i$i|0)==($n$0$lcssa151|0);
           if ($440) {
            break;
           }
           $441 = HEAP8[$$0$i$i>>0]|0;
           HEAP8[$__p$0$i$i>>0] = $441;
           $442 = ((($$0$i$i)) + 1|0);
           $443 = ((($__p$0$i$i)) + 1|0);
           $$0$i$i = $442;$__p$0$i$i = $443;
          }
          $scevgep2$i$i = (($__p$0$ph$i$i) + ($425)|0);
          HEAP8[$scevgep2$i$i>>0] = 0;
          $444 = HEAP8[$30>>0]|0;
          $445 = $444 & 1;
          $446 = ($445<<24>>24)==(0);
          $447 = ((($30)) + 8|0);
          $448 = HEAP32[$447>>2]|0;
          $449 = ((($30)) + 1|0);
          $450 = $446 ? $449 : $448;
          $451 = ((($30)) + 4|0);
          $452 = HEAP32[$451>>2]|0;
          $453 = $444&255;
          $454 = $453 >>> 1;
          $455 = $446 ? $454 : $452;
          __THREW__ = 0;
          $456 = (invoke_iiii(91,($27|0),($450|0),($455|0))|0);
          $457 = __THREW__; __THREW__ = 0;
          $458 = $457&1;
          if ($458) {
           $466 = ___cxa_find_matching_catch_2()|0;
           $467 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
           $$110 = $466;$$115 = $467;
           break;
          }
          ;HEAP32[$26>>2]=HEAP32[$456>>2]|0;HEAP32[$26+4>>2]=HEAP32[$456+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$456+8>>2]|0;
          $__i$0$i$i$i91 = 0;
          while(1) {
           $exitcond$i$i$i92 = ($__i$0$i$i$i91|0)==(3);
           if ($exitcond$i$i$i92) {
            break;
           }
           $459 = (($456) + ($__i$0$i$i$i91<<2)|0);
           HEAP32[$459>>2] = 0;
           $460 = (($__i$0$i$i$i91) + 1)|0;
           $__i$0$i$i$i91 = $460;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($25,$26);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($412,$25);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
          $461 = ((($n$0$lcssa151)) + 1|0);
          $$3 = $461;
          break L1;
         }
        } while(0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
        $$211 = $$110;$$216 = $$115;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
       $$312 = $$211;$$317 = $$216;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
      $$413 = $$312;$$418 = $$317;
     }
     }
    } while(0);
    ___resumeException($$413|0);
    // unreachable;
   } else {
    $$3 = $first;
   }
  } else {
   $$3 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first,$last,$lit,$db) {
 $first = $first|0;
 $last = $last|0;
 $lit = $lit|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i5 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i$i$i = 0, $__i$0$i$i$i$i$i$i$i = 0, $__i$0$i$i1$i$i$i$i = 0, $__i$0$i$i1$i$i$i$i$i = 0, $__v$i$i = 0;
 var $__v$i$i4 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i$i$i = 0, $exitcond$i$i$i$i$i$i$i = 0, $exitcond$i$i2$i$i$i$i = 0, $exitcond$i$i2$i$i$i$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i4 = sp + 68|0;
 $__v$i$i = sp + 48|0;
 $0 = sp + 24|0;
 $1 = sp + 12|0;
 $2 = sp;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first,$last)|0);
 $4 = ($3|0)==($first|0);
 $5 = ($3|0)==($last|0);
 $or$cond = $4 | $5;
 if ($or$cond) {
  $$1 = $first;
 } else {
  $6 = HEAP8[$3>>0]|0;
  $7 = ($6<<24>>24)==(69);
  if ($7) {
   $8 = HEAP8[$lit>>0]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   $11 = ((($lit)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $8&255;
   $14 = $13 >>> 1;
   $15 = $10 ? $14 : $12;
   $16 = ($15>>>0)>(3);
   L4: do {
    if ($16) {
     __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($2,5059,$lit);
     __THREW__ = 0;
     $17 = (invoke_iii(93,($2|0),(5061|0))|0);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     do {
      if ($19) {
       $49 = ___cxa_find_matching_catch_2()|0;
       $50 = tempRet0;
       $$0 = $50;$$01 = $49;
      } else {
       ;HEAP32[$1>>2]=HEAP32[$17>>2]|0;HEAP32[$1+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$17+8>>2]|0;
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $20 = (($17) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$20>>2] = 0;
        $21 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $21;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
       $22 = ((($db)) + 4|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ((($db)) + 8|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($23>>>0)<($25>>>0);
       $27 = $25;
       if ($26) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($23,$0);
        $28 = HEAP32[$22>>2]|0;
        $29 = ((($28)) + 24|0);
        HEAP32[$22>>2] = $29;
       } else {
        $30 = $23;
        $31 = ((($db)) + 12|0);
        $32 = HEAP32[$db>>2]|0;
        $33 = (($30) - ($32))|0;
        $34 = (($33|0) / 24)&-1;
        $35 = (($34) + 1)|0;
        $36 = ($33|0)<(-24);
        if ($36) {
         __THREW__ = 0;
         invoke_vi(102,($db|0));
         $37 = __THREW__; __THREW__ = 0;
         $38 = ___cxa_find_matching_catch_2()|0;
         $39 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
         $$0 = $39;$$01 = $38;
         break;
        }
        $40 = (($27) - ($32))|0;
        $41 = (($40|0) / 24)&-1;
        $42 = ($41>>>0)<(1073741823);
        if ($42) {
         $43 = $41 << 1;
         $44 = ($43>>>0)<($35>>>0);
         $45 = $44 ? $35 : $43;
         $$0$i$i$i = $45;
        } else {
         $$0$i$i$i = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$34,$31);
        $46 = ((($__v$i$i)) + 8|0);
        $47 = HEAP32[$46>>2]|0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($47,$0);
        $48 = ((($47)) + 24|0);
        HEAP32[$46>>2] = $48;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
       break L4;
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
     ___resumeException($$01|0);
     // unreachable;
    } else {
     $51 = ((($db)) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ((($db)) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($52>>>0)<($54>>>0);
     $56 = $54;
     if ($55) {
      ;HEAP32[$52>>2]=0|0;HEAP32[$52+4>>2]=0|0;HEAP32[$52+8>>2]=0|0;HEAP32[$52+12>>2]=0|0;HEAP32[$52+16>>2]=0|0;HEAP32[$52+20>>2]=0|0;
      $__i$0$i$i$i$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i$i$i$i = ($__i$0$i$i$i$i$i$i|0)==(3);
       if ($exitcond$i$i$i$i$i$i) {
        break;
       }
       $57 = (($52) + ($__i$0$i$i$i$i$i$i<<2)|0);
       HEAP32[$57>>2] = 0;
       $58 = (($__i$0$i$i$i$i$i$i) + 1)|0;
       $__i$0$i$i$i$i$i$i = $58;
      }
      $59 = ((($52)) + 12|0);
      $__i$0$i$i1$i$i$i$i = 0;
      while(1) {
       $exitcond$i$i2$i$i$i$i = ($__i$0$i$i1$i$i$i$i|0)==(3);
       if ($exitcond$i$i2$i$i$i$i) {
        break;
       }
       $60 = (($59) + ($__i$0$i$i1$i$i$i$i<<2)|0);
       HEAP32[$60>>2] = 0;
       $61 = (($__i$0$i$i1$i$i$i$i) + 1)|0;
       $__i$0$i$i1$i$i$i$i = $61;
      }
      $62 = HEAP32[$51>>2]|0;
      $63 = ((($62)) + 24|0);
      HEAP32[$51>>2] = $63;
      break;
     }
     $64 = $52;
     $65 = ((($db)) + 12|0);
     $66 = HEAP32[$db>>2]|0;
     $67 = (($64) - ($66))|0;
     $68 = (($67|0) / 24)&-1;
     $69 = (($68) + 1)|0;
     $70 = ($67|0)<(-24);
     if ($70) {
      __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
      // unreachable;
     }
     $71 = (($56) - ($66))|0;
     $72 = (($71|0) / 24)&-1;
     $73 = ($72>>>0)<(1073741823);
     if ($73) {
      $74 = $72 << 1;
      $75 = ($74>>>0)<($69>>>0);
      $76 = $75 ? $69 : $74;
      $$0$i$i$i5 = $76;
     } else {
      $$0$i$i$i5 = 2147483647;
     }
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i4,$$0$i$i$i5,$68,$65);
     $77 = ((($__v$i$i4)) + 8|0);
     $78 = HEAP32[$77>>2]|0;
     ;HEAP32[$78>>2]=0|0;HEAP32[$78+4>>2]=0|0;HEAP32[$78+8>>2]=0|0;HEAP32[$78+12>>2]=0|0;HEAP32[$78+16>>2]=0|0;HEAP32[$78+20>>2]=0|0;
     $__i$0$i$i$i$i$i$i$i = 0;
     while(1) {
      $exitcond$i$i$i$i$i$i$i = ($__i$0$i$i$i$i$i$i$i|0)==(3);
      if ($exitcond$i$i$i$i$i$i$i) {
       break;
      }
      $79 = (($78) + ($__i$0$i$i$i$i$i$i$i<<2)|0);
      HEAP32[$79>>2] = 0;
      $80 = (($__i$0$i$i$i$i$i$i$i) + 1)|0;
      $__i$0$i$i$i$i$i$i$i = $80;
     }
     $81 = ((($78)) + 12|0);
     $__i$0$i$i1$i$i$i$i$i = 0;
     while(1) {
      $exitcond$i$i2$i$i$i$i$i = ($__i$0$i$i1$i$i$i$i$i|0)==(3);
      if ($exitcond$i$i2$i$i$i$i$i) {
       break;
      }
      $82 = (($81) + ($__i$0$i$i1$i$i$i$i$i<<2)|0);
      HEAP32[$82>>2] = 0;
      $83 = (($__i$0$i$i1$i$i$i$i$i) + 1)|0;
      $__i$0$i$i1$i$i$i$i$i = $83;
     }
     $84 = ((($78)) + 24|0);
     HEAP32[$77>>2] = $84;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i4);
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i4);
    }
   } while(0);
   $85 = HEAP8[$first>>0]|0;
   $86 = ($85<<24>>24)==(110);
   $87 = ((($db)) + 4|0);
   if ($86) {
    $88 = HEAP32[$87>>2]|0;
    $89 = ((($88)) + -24|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($89,45);
    $90 = ((($first)) + 1|0);
    $$02 = $90;
   } else {
    $$02 = $first;
   }
   $91 = HEAP32[$87>>2]|0;
   $92 = ((($91)) + -24|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_($92,$$02,$3);
   $93 = HEAP8[$lit>>0]|0;
   $94 = $93 & 1;
   $95 = ($94<<24>>24)==(0);
   $96 = HEAP32[$11>>2]|0;
   $97 = $93&255;
   $98 = $97 >>> 1;
   $99 = $95 ? $98 : $96;
   $100 = ($99>>>0)<(4);
   if ($100) {
    $101 = HEAP32[$87>>2]|0;
    $102 = ((($101)) + -24|0);
    $103 = ((($lit)) + 8|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($lit)) + 1|0);
    $106 = $95 ? $105 : $104;
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($102,$106,$99)|0);
   }
   $107 = ((($3)) + 1|0);
   $$1 = $107;
  } else {
   $$1 = $first;
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = (_strlen($__lhs)|0);
 $3 = HEAP8[$__rhs>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 $6 = ((($__rhs)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3&255;
 $9 = $8 >>> 1;
 $10 = $5 ? $9 : $7;
 $11 = (($10) + ($2))|0;
 __THREW__ = 0;
 invoke_viiii(113,($agg$result|0),($__lhs|0),($2|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $14 = HEAP8[$__rhs>>0]|0;
  $15 = $14 & 1;
  $16 = ($15<<24>>24)==(0);
  $17 = ((($__rhs)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($__rhs)) + 1|0);
  $20 = $16 ? $19 : $18;
  __THREW__ = 0;
  (invoke_iiii(91,($agg$result|0),($20|0),($10|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   return;
  }
 }
 $23 = ___cxa_find_matching_catch_2()|0;
 $24 = tempRet0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$result);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($this,$__s,$__sz,$__reserve) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 $__reserve = $__reserve|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__reserve>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__reserve>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__reserve) + 16)|0;
  $6 = $5 & -16;
  $7 = (_malloc($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = ((($this)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($this)) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $$pn = $14;
 }
 else if ((label|0) == 8) {
  $18 = ((($this)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = ((($this)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $__p$0 = (($$pn) + ($__sz$0)|0);
 HEAP8[$__p$0>>0] = $__c;
 $22 = ((($__p$0)) + 1|0);
 HEAP8[$22>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_add = $__n_add|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (_malloc($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__old_sz|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($__old_sz) - ($__n_copy))|0;
  $23 = (($18) + ($__n_copy)|0);
  $24 = (($23) + ($__n_add)|0);
  $25 = (($20) + ($__n_copy)|0);
  _memcpy(($24|0),($25|0),($22|0))|0;
 }
 $26 = ($__old_cap|0)==(10);
 if (!($26)) {
  _free($20);
 }
 $27 = ((($this)) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep1 = 0, $scevgep2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = $5;$16 = 10;$40 = $1;
 } else {
  $6 = ((($this)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $7;$16 = $phitmp$i;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 do {
  if (!($13)) {
   $14 = (($16) - ($15))|0;
   $17 = ($14>>>0)<($12>>>0);
   if ($17) {
    $18 = (($15) + ($12))|0;
    $19 = (($18) - ($16))|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this,$16,$19,$15,$15,0);
    $$pre = HEAP8[$this>>0]|0;
    $21 = $$pre;
   } else {
    $21 = $40;
   }
   $20 = $21 & 1;
   $22 = ($20<<24>>24)==(0);
   if ($22) {
    $25 = ((($this)) + 1|0);
    $27 = $25;
   } else {
    $23 = ((($this)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $27 = $24;
   }
   $26 = (($27) + ($15)|0);
   $28 = (($15) - ($0))|0;
   $scevgep = (($__last) + ($28)|0);
   $scevgep1 = $scevgep;
   $$0 = $__first;$__p$0 = $26;
   while(1) {
    $29 = ($$0|0)==($__last|0);
    if ($29) {
     break;
    }
    $30 = HEAP8[$$0>>0]|0;
    HEAP8[$__p$0>>0] = $30;
    $31 = ((($__p$0)) + 1|0);
    $32 = ((($$0)) + 1|0);
    $$0 = $32;$__p$0 = $31;
   }
   $scevgep2 = (($27) + ($scevgep1)|0);
   HEAP8[$scevgep2>>0] = 0;
   $33 = (($15) + ($12))|0;
   $34 = HEAP8[$this>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $33 << 1;
    $39 = $38&255;
    HEAP8[$this>>0] = $39;
    break;
   } else {
    $37 = ((($this)) + 4|0);
    HEAP32[$37>>2] = $33;
    break;
   }
  }
 } while(0);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 $4 = ((($this)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 1|0);
 $7 = $3 ? $6 : $5;
 $8 = ((($this)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1&255;
 $11 = $10 >>> 1;
 $12 = $3 ? $11 : $9;
 $13 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this,$7,$12)|0);
 ;HEAP32[$agg$result>>2]=HEAP32[$13>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$13+8>>2]|0;
 $__i$0$i$i$i = 0;
 while(1) {
  $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
  if ($exitcond$i$i$i) {
   break;
  }
  $14 = (($13) + ($__i$0$i$i$i<<2)|0);
  HEAP32[$14>>2] = 0;
  $15 = (($__i$0$i$i$i) + 1)|0;
  $__i$0$i$i$i = $15;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i17 = 0;
 var $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i18 = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i$i$i$i$i9 = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i4 = 0, $phitmp$i2$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $4 = ((($this)) + 1|0);
   HEAP8[$4>>0] = 0;
   HEAP8[$this>>0] = 0;
  } else {
   $5 = ((($this)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   HEAP8[$6>>0] = 0;
   $7 = ((($this)) + 4|0);
   HEAP32[$7>>2] = 0;
   $$pre$i$i$i = HEAP8[$this>>0]|0;
   $8 = $$pre$i$i$i & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $14 = $$pre$i$i$i;$23 = 10;
   } else {
    $10 = HEAP32[$this>>2]|0;
    $11 = $10 & -2;
    $phitmp$i$i$i$i$i$i = (($11) + -1)|0;
    $12 = $10&255;
    $14 = $12;$23 = $phitmp$i$i$i$i$i$i;
   }
   $13 = $14 & 1;
   $15 = ($13<<24>>24)==(0);
   if ($15) {
    $16 = $14&255;
    $17 = $16 >>> 1;
    $18 = ($14&255)<(22);
    if ($18) {
     $21 = 10;$42 = $17;$95 = 1;
    } else {
     $19 = (($17) + 16)|0;
     $20 = $19 & 240;
     $phitmp$i2$i$i$i$i$i = (($20) + -1)|0;
     $21 = $phitmp$i2$i$i$i$i$i;$42 = $17;$95 = 1;
    }
   } else {
    $21 = 10;$42 = 0;$95 = 0;
   }
   $22 = ($21|0)==($23|0);
   if (!($22)) {
    $24 = ($21|0)==(10);
    if ($24) {
     $29 = ((($this)) + 1|0);
     $30 = HEAP32[$5>>2]|0;
     if ($95) {
      $31 = $14&255;
      $32 = $31 >>> 1;
      $33 = (($32) + 1)|0;
      _memcpy(($29|0),($30|0),($33|0))|0;
      _free($30);
     } else {
      $38 = HEAP8[$30>>0]|0;
      HEAP8[$29>>0] = $38;
      _free($30);
     }
     $43 = $42 << 1;
     $44 = $43&255;
     HEAP8[$this>>0] = $44;
     break;
    }
    $25 = ($21>>>0)<=($23>>>0);
    $26 = (($21) + 1)|0;
    $27 = (_malloc($26)|0);
    $28 = ($27|0)==(0|0);
    $or$cond$i$i$i$i$i = $25 & $28;
    if (!($or$cond$i$i$i$i$i)) {
     if ($95) {
      $34 = ((($this)) + 1|0);
      $35 = $14&255;
      $36 = $35 >>> 1;
      $37 = (($36) + 1)|0;
      _memcpy(($27|0),($34|0),($37|0))|0;
     } else {
      $39 = HEAP32[$5>>2]|0;
      $40 = HEAP8[$39>>0]|0;
      HEAP8[$27>>0] = $40;
      _free($39);
     }
     $41 = $26 | 1;
     HEAP32[$this>>2] = $41;
     HEAP32[$7>>2] = $42;
     HEAP32[$5>>2] = $27;
    }
   }
  }
 } while(0);
 ;HEAP32[$this>>2]=HEAP32[$0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$0+8>>2]|0;
 $__i$0$i$i$i$i = 0;
 while(1) {
  $exitcond$i$i$i$i = ($__i$0$i$i$i$i|0)==(3);
  if ($exitcond$i$i$i$i) {
   break;
  }
  $45 = (($0) + ($__i$0$i$i$i$i<<2)|0);
  HEAP32[$45>>2] = 0;
  $46 = (($__i$0$i$i$i$i) + 1)|0;
  $__i$0$i$i$i$i = $46;
 }
 $47 = ((($this)) + 12|0);
 $48 = ((($0)) + 12|0);
 $49 = HEAP8[$47>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 do {
  if ($51) {
   $52 = ((($47)) + 1|0);
   HEAP8[$52>>0] = 0;
   HEAP8[$47>>0] = 0;
  } else {
   $53 = ((($this)) + 20|0);
   $54 = HEAP32[$53>>2]|0;
   HEAP8[$54>>0] = 0;
   $55 = ((($this)) + 16|0);
   HEAP32[$55>>2] = 0;
   $$pre$i$i$i2 = HEAP8[$47>>0]|0;
   $56 = $$pre$i$i$i2 & 1;
   $57 = ($56<<24>>24)==(0);
   if ($57) {
    $62 = $$pre$i$i$i2;$71 = 10;
   } else {
    $58 = HEAP32[$47>>2]|0;
    $59 = $58 & -2;
    $phitmp$i$i$i$i$i$i4 = (($59) + -1)|0;
    $60 = $58&255;
    $62 = $60;$71 = $phitmp$i$i$i$i$i$i4;
   }
   $61 = $62 & 1;
   $63 = ($61<<24>>24)==(0);
   if ($63) {
    $64 = $62&255;
    $65 = $64 >>> 1;
    $66 = ($62&255)<(22);
    if ($66) {
     $69 = 10;$90 = $65;$96 = 1;
    } else {
     $67 = (($65) + 16)|0;
     $68 = $67 & 240;
     $phitmp$i2$i$i$i$i$i7 = (($68) + -1)|0;
     $69 = $phitmp$i2$i$i$i$i$i7;$90 = $65;$96 = 1;
    }
   } else {
    $69 = 10;$90 = 0;$96 = 0;
   }
   $70 = ($69|0)==($71|0);
   if (!($70)) {
    $72 = ($69|0)==(10);
    if ($72) {
     $77 = ((($47)) + 1|0);
     $78 = HEAP32[$53>>2]|0;
     if ($96) {
      $79 = $62&255;
      $80 = $79 >>> 1;
      $81 = (($80) + 1)|0;
      _memcpy(($77|0),($78|0),($81|0))|0;
      _free($78);
     } else {
      $86 = HEAP8[$78>>0]|0;
      HEAP8[$77>>0] = $86;
      _free($78);
     }
     $91 = $90 << 1;
     $92 = $91&255;
     HEAP8[$47>>0] = $92;
     break;
    }
    $73 = ($69>>>0)<=($71>>>0);
    $74 = (($69) + 1)|0;
    $75 = (_malloc($74)|0);
    $76 = ($75|0)==(0|0);
    $or$cond$i$i$i$i$i9 = $73 & $76;
    if (!($or$cond$i$i$i$i$i9)) {
     if ($96) {
      $82 = ((($47)) + 1|0);
      $83 = $62&255;
      $84 = $83 >>> 1;
      $85 = (($84) + 1)|0;
      _memcpy(($75|0),($82|0),($85|0))|0;
     } else {
      $87 = HEAP32[$53>>2]|0;
      $88 = HEAP8[$87>>0]|0;
      HEAP8[$75>>0] = $88;
      _free($87);
     }
     $89 = $74 | 1;
     HEAP32[$47>>2] = $89;
     HEAP32[$55>>2] = $90;
     HEAP32[$53>>2] = $75;
    }
   }
  }
 } while(0);
 ;HEAP32[$47>>2]=HEAP32[$48>>2]|0;HEAP32[$47+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$48+8>>2]|0;
 $__i$0$i$i$i$i17 = 0;
 while(1) {
  $exitcond$i$i$i$i18 = ($__i$0$i$i$i$i17|0)==(3);
  if ($exitcond$i$i$i$i18) {
   break;
  }
  $93 = (($48) + ($__i$0$i$i$i$i17<<2)|0);
  HEAP32[$93>>2] = 0;
  $94 = (($__i$0$i$i$i$i17) + 1)|0;
  $__i$0$i$i$i$i17 = $94;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i11 = 0, $$0$i$i$i17 = 0, $$0$i$i$i9 = 0, $$04 = 0, $$05 = 0, $$1 = 0, $$lcssa = 0, $$lcssa64 = 0, $$lcssa65 = 0, $$lcssa67 = 0, $$lcssa70 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__begin$sroa$0$0 = 0, $__begin3$sroa$0$0 = 0, $__i$0$i$i$i = 0, $__p$0$i$i = 0, $__p$0$ph$i$i = 0, $__v$i$i = 0, $__v$i$i10 = 0, $__v$i$i15 = 0, $__v$i$i8 = 0;
 var $eh$lpad$body$i$i$index2Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$i$i20$index7Z2D = 0, $eh$lpad$body$i$i20$indexZ2D = 0, $exitcond$i$i$i = 0, $isdigit = 0, $isdigit7 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $scevgep2$i$i = 0, $sub$0 = 0, $sub$0$lcssa69 = 0, $t1$0 = 0, $t1$0$lcssa68 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i15 = sp + 124|0;
 $__v$i$i10 = sp + 104|0;
 $__v$i$i8 = sp + 84|0;
 $__v$i$i = sp + 64|0;
 $0 = sp + 40|0;
 $1 = sp + 16|0;
 $2 = sp;
 $3 = $last;
 $4 = $first;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(1);
 L1: do {
  if ($6) {
   $7 = HEAP8[$first>>0]|0;
   $8 = ($7<<24>>24)==(84);
   if ($8) {
    $9 = ((($first)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(95);
    do {
     if ($11) {
      $12 = ((($db)) + 32|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ((($db)) + 36|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = ($13|0)==($15|0);
      if ($16) {
       $$1 = $first;
       break L1;
      }
      $17 = ((($15)) + -16|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = ((($15)) + -12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($18|0)==($20|0);
      if ($21) {
       HEAP8[$0>>0] = 4;
       $68 = ((($0)) + 1|0);
       HEAP8[$68>>0]=24404&255;HEAP8[$68+1>>0]=24404>>8;
       $69 = ((($0)) + 3|0);
       HEAP8[$69>>0] = 0;
       $70 = ((($0)) + 12|0);
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $71 = (($70) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$71>>2] = 0;
        $72 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $72;
       }
       $73 = ((($db)) + 4|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ((($db)) + 8|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ($74>>>0)<($76>>>0);
       $78 = $76;
       if ($77) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($74,$0);
        $79 = HEAP32[$73>>2]|0;
        $80 = ((($79)) + 24|0);
        HEAP32[$73>>2] = $80;
       } else {
        $81 = $74;
        $82 = ((($db)) + 12|0);
        $83 = HEAP32[$db>>2]|0;
        $84 = (($81) - ($83))|0;
        $85 = (($84|0) / 24)&-1;
        $86 = (($85) + 1)|0;
        $87 = ($84|0)<(-24);
        if ($87) {
         __THREW__ = 0;
         invoke_vi(102,($db|0));
         $88 = __THREW__; __THREW__ = 0;
         $89 = ___cxa_find_matching_catch_2()|0;
         $90 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
         $$04 = $90;$$05 = $89;
         break;
        }
        $91 = (($78) - ($83))|0;
        $92 = (($91|0) / 24)&-1;
        $93 = ($92>>>0)<(1073741823);
        if ($93) {
         $94 = $92 << 1;
         $95 = ($94>>>0)<($86>>>0);
         $96 = $95 ? $86 : $94;
         $$0$i$i$i11 = $96;
        } else {
         $$0$i$i$i11 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i10,$$0$i$i$i11,$85,$82);
        $97 = ((($__v$i$i10)) + 8|0);
        $98 = HEAP32[$97>>2]|0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($98,$0);
        $99 = ((($98)) + 24|0);
        HEAP32[$97>>2] = $99;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i10);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i10);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
       $100 = ((($first)) + 2|0);
       $101 = ((($db)) + 62|0);
       HEAP8[$101>>0] = 1;
       $$1 = $100;
       break L1;
      }
      $22 = HEAP32[$18>>2]|0;
      $23 = ((($18)) + 4|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ((($db)) + 4|0);
      $26 = ((($db)) + 8|0);
      $27 = ((($db)) + 12|0);
      $28 = ((($__v$i$i8)) + 8|0);
      $__begin$sroa$0$0 = $22;
      while(1) {
       $29 = ($__begin$sroa$0$0|0)==($24|0);
       if ($29) {
        label = 8;
        break;
       }
       $31 = HEAP32[$25>>2]|0;
       $32 = HEAP32[$26>>2]|0;
       $33 = ($31|0)==($32|0);
       $34 = $32;
       if ($33) {
        $43 = $31;
        $44 = HEAP32[$db>>2]|0;
        $45 = (($43) - ($44))|0;
        $46 = (($45|0) / 24)&-1;
        $47 = (($46) + 1)|0;
        $48 = ($45|0)<(-24);
        if ($48) {
         label = 14;
         break;
        }
        $49 = (($34) - ($44))|0;
        $50 = (($49|0) / 24)&-1;
        $51 = ($50>>>0)<(1073741823);
        if ($51) {
         $52 = $50 << 1;
         $53 = ($52>>>0)<($47>>>0);
         $54 = $53 ? $47 : $52;
         $$0$i$i$i9 = $54;
        } else {
         $$0$i$i$i9 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i8,$$0$i$i$i9,$46,$27);
        $55 = HEAP32[$28>>2]|0;
        __THREW__ = 0;
        invoke_vii(100,($55|0),($__begin$sroa$0$0|0));
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if ($57) {
         label = 20;
         break;
        }
        $58 = ((($55)) + 12|0);
        $59 = ((($__begin$sroa$0$0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($58|0),($59|0));
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         $$lcssa64 = $55;
         label = 19;
         break;
        }
        $66 = ((($55)) + 24|0);
        HEAP32[$28>>2] = $66;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i8);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i8);
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($31,$__begin$sroa$0$0);
        $35 = ((($31)) + 12|0);
        $36 = ((($__begin$sroa$0$0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($35|0),($36|0));
        $37 = __THREW__; __THREW__ = 0;
        $38 = $37&1;
        if ($38) {
         $$lcssa = $31;
         label = 11;
         break;
        }
        $41 = HEAP32[$25>>2]|0;
        $42 = ((($41)) + 24|0);
        HEAP32[$25>>2] = $42;
       }
       $67 = ((($__begin$sroa$0$0)) + 24|0);
       $__begin$sroa$0$0 = $67;
      }
      if ((label|0) == 8) {
       $30 = ((($first)) + 2|0);
       $$1 = $30;
       break L1;
      }
      else if ((label|0) == 11) {
       $39 = ___cxa_find_matching_catch_2()|0;
       $40 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa);
       ___resumeException($39|0);
       // unreachable;
      }
      else if ((label|0) == 14) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      else if ((label|0) == 19) {
       $62 = ___cxa_find_matching_catch_2()|0;
       $63 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa64);
       $eh$lpad$body$i$i$index2Z2D = $63;$eh$lpad$body$i$i$indexZ2D = $62;
      }
      else if ((label|0) == 20) {
       $64 = ___cxa_find_matching_catch_2()|0;
       $65 = tempRet0;
       $eh$lpad$body$i$i$index2Z2D = $65;$eh$lpad$body$i$i$indexZ2D = $64;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i8);
      ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
      // unreachable;
     } else {
      $102 = $10 << 24 >> 24;
      $isdigittmp = (($102) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if (!($isdigit)) {
       $$1 = $first;
       break L1;
      }
      $103 = ((($first)) + 2|0);
      $sub$0 = $isdigittmp;$t1$0 = $103;
      while(1) {
       $104 = ($t1$0|0)==($last|0);
       if ($104) {
        $$1 = $first;
        break L1;
       }
       $105 = HEAP8[$t1$0>>0]|0;
       $106 = $105 << 24 >> 24;
       $isdigittmp6 = (($106) + -48)|0;
       $isdigit7 = ($isdigittmp6>>>0)<(10);
       if (!($isdigit7)) {
        $$lcssa70 = $105;$sub$0$lcssa69 = $sub$0;$t1$0$lcssa68 = $t1$0;
        break;
       }
       $107 = ($sub$0*10)|0;
       $108 = (($isdigittmp6) + ($107))|0;
       $109 = ((($t1$0)) + 1|0);
       $sub$0 = $108;$t1$0 = $109;
      }
      $110 = ($$lcssa70<<24>>24)==(95);
      if (!($110)) {
       $$1 = $first;
       break L1;
      }
      $111 = ((($db)) + 32|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ((($db)) + 36|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = ($112|0)==($114|0);
      if ($115) {
       $$1 = $first;
       break L1;
      }
      $116 = (($sub$0$lcssa69) + 1)|0;
      $117 = ((($114)) + -16|0);
      $118 = ((($114)) + -12|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = HEAP32[$117>>2]|0;
      $121 = (($119) - ($120))|0;
      $122 = $121 >> 4;
      $123 = ($116>>>0)<($122>>>0);
      $124 = $120;
      if (!($123)) {
       $172 = ((($t1$0$lcssa68)) + 1|0);
       $173 = $172;
       $174 = (($173) - ($4))|0;
       $175 = ($174>>>0)>(4294967279);
       if ($175) {
        __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($2);
        // unreachable;
       }
       $176 = ($174>>>0)<(11);
       if ($176) {
        $177 = $174 << 1;
        $178 = $177&255;
        HEAP8[$2>>0] = $178;
        $179 = ((($2)) + 1|0);
        $__p$0$ph$i$i = $179;
       } else {
        $180 = (($174) + 16)|0;
        $181 = $180 & -16;
        $182 = (_malloc($181)|0);
        $183 = ((($2)) + 8|0);
        HEAP32[$183>>2] = $182;
        $184 = $181 | 1;
        HEAP32[$2>>2] = $184;
        $185 = ((($2)) + 4|0);
        HEAP32[$185>>2] = $174;
        $__p$0$ph$i$i = $182;
       }
       $$0$i$i = $first;$__p$0$i$i = $__p$0$ph$i$i;
       while(1) {
        $186 = ($$0$i$i|0)==($172|0);
        if ($186) {
         break;
        }
        $187 = HEAP8[$$0$i$i>>0]|0;
        HEAP8[$__p$0$i$i>>0] = $187;
        $188 = ((($$0$i$i)) + 1|0);
        $189 = ((($__p$0$i$i)) + 1|0);
        $$0$i$i = $188;$__p$0$i$i = $189;
       }
       $scevgep2$i$i = (($__p$0$ph$i$i) + ($174)|0);
       HEAP8[$scevgep2$i$i>>0] = 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1,$2);
       $190 = ((($db)) + 4|0);
       $191 = HEAP32[$190>>2]|0;
       $192 = ((($db)) + 8|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = ($191>>>0)<($193>>>0);
       $195 = $193;
       if ($194) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($191,$1);
        $196 = HEAP32[$190>>2]|0;
        $197 = ((($196)) + 24|0);
        HEAP32[$190>>2] = $197;
       } else {
        $198 = $191;
        $199 = ((($db)) + 12|0);
        $200 = HEAP32[$db>>2]|0;
        $201 = (($198) - ($200))|0;
        $202 = (($201|0) / 24)&-1;
        $203 = (($202) + 1)|0;
        $204 = ($201|0)<(-24);
        if ($204) {
         __THREW__ = 0;
         invoke_vi(102,($db|0));
         $205 = __THREW__; __THREW__ = 0;
         $206 = ___cxa_find_matching_catch_2()|0;
         $207 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         $$04 = $207;$$05 = $206;
         break;
        }
        $208 = (($195) - ($200))|0;
        $209 = (($208|0) / 24)&-1;
        $210 = ($209>>>0)<(1073741823);
        if ($210) {
         $211 = $209 << 1;
         $212 = ($211>>>0)<($203>>>0);
         $213 = $212 ? $203 : $211;
         $$0$i$i$i = $213;
        } else {
         $$0$i$i$i = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$202,$199);
        $214 = ((($__v$i$i)) + 8|0);
        $215 = HEAP32[$214>>2]|0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($215,$1);
        $216 = ((($215)) + 24|0);
        HEAP32[$214>>2] = $216;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
       $217 = ((($db)) + 62|0);
       HEAP8[$217>>0] = 1;
       $$1 = $172;
       break L1;
      }
      $125 = (($124) + ($116<<4)|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = (((($124) + ($116<<4)|0)) + 4|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = ((($db)) + 4|0);
      $130 = ((($db)) + 8|0);
      $131 = ((($db)) + 12|0);
      $132 = ((($__v$i$i15)) + 8|0);
      $__begin3$sroa$0$0 = $126;
      while(1) {
       $133 = ($__begin3$sroa$0$0|0)==($128|0);
       if ($133) {
        label = 45;
        break;
       }
       $135 = HEAP32[$129>>2]|0;
       $136 = HEAP32[$130>>2]|0;
       $137 = ($135|0)==($136|0);
       $138 = $136;
       if ($137) {
        $147 = $135;
        $148 = HEAP32[$db>>2]|0;
        $149 = (($147) - ($148))|0;
        $150 = (($149|0) / 24)&-1;
        $151 = (($150) + 1)|0;
        $152 = ($149|0)<(-24);
        if ($152) {
         label = 51;
         break;
        }
        $153 = (($138) - ($148))|0;
        $154 = (($153|0) / 24)&-1;
        $155 = ($154>>>0)<(1073741823);
        if ($155) {
         $156 = $154 << 1;
         $157 = ($156>>>0)<($151>>>0);
         $158 = $157 ? $151 : $156;
         $$0$i$i$i17 = $158;
        } else {
         $$0$i$i$i17 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i15,$$0$i$i$i17,$150,$131);
        $159 = HEAP32[$132>>2]|0;
        __THREW__ = 0;
        invoke_vii(100,($159|0),($__begin3$sroa$0$0|0));
        $160 = __THREW__; __THREW__ = 0;
        $161 = $160&1;
        if ($161) {
         label = 57;
         break;
        }
        $162 = ((($159)) + 12|0);
        $163 = ((($__begin3$sroa$0$0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($162|0),($163|0));
        $164 = __THREW__; __THREW__ = 0;
        $165 = $164&1;
        if ($165) {
         $$lcssa67 = $159;
         label = 56;
         break;
        }
        $170 = ((($159)) + 24|0);
        HEAP32[$132>>2] = $170;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i15);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i15);
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($135,$__begin3$sroa$0$0);
        $139 = ((($135)) + 12|0);
        $140 = ((($__begin3$sroa$0$0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($139|0),($140|0));
        $141 = __THREW__; __THREW__ = 0;
        $142 = $141&1;
        if ($142) {
         $$lcssa65 = $135;
         label = 48;
         break;
        }
        $145 = HEAP32[$129>>2]|0;
        $146 = ((($145)) + 24|0);
        HEAP32[$129>>2] = $146;
       }
       $171 = ((($__begin3$sroa$0$0)) + 24|0);
       $__begin3$sroa$0$0 = $171;
      }
      if ((label|0) == 45) {
       $134 = ((($t1$0$lcssa68)) + 1|0);
       $$1 = $134;
       break L1;
      }
      else if ((label|0) == 48) {
       $143 = ___cxa_find_matching_catch_2()|0;
       $144 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa65);
       ___resumeException($143|0);
       // unreachable;
      }
      else if ((label|0) == 51) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      else if ((label|0) == 56) {
       $166 = ___cxa_find_matching_catch_2()|0;
       $167 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa67);
       $eh$lpad$body$i$i20$index7Z2D = $167;$eh$lpad$body$i$i20$indexZ2D = $166;
      }
      else if ((label|0) == 57) {
       $168 = ___cxa_find_matching_catch_2()|0;
       $169 = tempRet0;
       $eh$lpad$body$i$i20$index7Z2D = $169;$eh$lpad$body$i$i20$indexZ2D = $168;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i15);
      ___resumeException($eh$lpad$body$i$i20$indexZ2D|0);
      // unreachable;
     }
    } while(0);
    ___resumeException($$05|0);
    // unreachable;
   } else {
    $$1 = $first;
   }
  } else {
   $$1 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i21 = 0, $$0$i$i12 = 0, $$01 = 0, $$04 = 0, $$12 = 0, $$15 = 0, $$2 = 0, $$23 = 0, $$26 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i16 = 0, $__p$0$i$i = 0, $__p$0$i$i11 = 0, $__p$0$ph$i$i = 0, $__p$0$ph$i$i9 = 0, $__v$i$i = 0, $__v$i$i20 = 0, $cv = 0, $cv1 = 0;
 var $exitcond$i$i$i = 0, $exitcond$i$i$i17 = 0, $scevgep2$i$i = 0, $scevgep2$i$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i20 = sp + 128|0;
 $__v$i$i = sp + 108|0;
 $cv = sp + 104|0;
 $0 = sp + 80|0;
 $1 = sp + 64|0;
 $2 = sp + 52|0;
 $cv1 = sp + 48|0;
 $3 = sp + 24|0;
 $4 = sp + 12|0;
 $5 = sp;
 $6 = $last;
 $7 = $first;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(2);
 L1: do {
  if ($9) {
   $10 = HEAP8[$first>>0]|0;
   $11 = ($10<<24>>24)==(102);
   if ($11) {
    $12 = ((($first)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    L4: do {
     switch ($13<<24>>24) {
     case 112:  {
      $14 = ((($first)) + 2|0);
      $15 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($14,$last,$cv)|0);
      $16 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($15,$last)|0);
      $17 = ($16|0)==($last|0);
      L6: do {
       if ($17) {
        $$0 = $first;
       } else {
        $18 = HEAP8[$16>>0]|0;
        $19 = ($18<<24>>24)==(95);
        if ($19) {
         $20 = $15;
         $21 = $16;
         $22 = (($21) - ($20))|0;
         $23 = ($22>>>0)>(4294967279);
         if ($23) {
          __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($2);
          // unreachable;
         }
         $24 = ($22>>>0)<(11);
         if ($24) {
          $25 = $22 << 1;
          $26 = $25&255;
          HEAP8[$2>>0] = $26;
          $27 = ((($2)) + 1|0);
          $__p$0$ph$i$i = $27;
         } else {
          $28 = (($22) + 16)|0;
          $29 = $28 & -16;
          $30 = (_malloc($29)|0);
          $31 = ((($2)) + 8|0);
          HEAP32[$31>>2] = $30;
          $32 = $29 | 1;
          HEAP32[$2>>2] = $32;
          $33 = ((($2)) + 4|0);
          HEAP32[$33>>2] = $22;
          $__p$0$ph$i$i = $30;
         }
         $$0$i$i = $15;$__p$0$i$i = $__p$0$ph$i$i;
         while(1) {
          $34 = ($$0$i$i|0)==($16|0);
          if ($34) {
           break;
          }
          $35 = HEAP8[$$0$i$i>>0]|0;
          HEAP8[$__p$0$i$i>>0] = $35;
          $36 = ((($$0$i$i)) + 1|0);
          $37 = ((($__p$0$i$i)) + 1|0);
          $$0$i$i = $36;$__p$0$i$i = $37;
         }
         $scevgep2$i$i = (($__p$0$ph$i$i) + ($22)|0);
         HEAP8[$scevgep2$i$i>>0] = 0;
         __THREW__ = 0;
         $38 = (invoke_iiii(92,($2|0),0,(5100|0))|0);
         $39 = __THREW__; __THREW__ = 0;
         $40 = $39&1;
         do {
          if ($40) {
           $71 = ___cxa_find_matching_catch_2()|0;
           $72 = tempRet0;
           $$01 = $71;$$04 = $72;
          } else {
           ;HEAP32[$1>>2]=HEAP32[$38>>2]|0;HEAP32[$1+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$38+8>>2]|0;
           $__i$0$i$i$i = 0;
           while(1) {
            $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
            if ($exitcond$i$i$i) {
             break;
            }
            $41 = (($38) + ($__i$0$i$i$i<<2)|0);
            HEAP32[$41>>2] = 0;
            $42 = (($__i$0$i$i$i) + 1)|0;
            $__i$0$i$i$i = $42;
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
           $43 = ((($db)) + 4|0);
           $44 = HEAP32[$43>>2]|0;
           $45 = ((($db)) + 8|0);
           $46 = HEAP32[$45>>2]|0;
           $47 = ($44>>>0)<($46>>>0);
           $48 = $46;
           if ($47) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($44,$0);
            $49 = HEAP32[$43>>2]|0;
            $50 = ((($49)) + 24|0);
            HEAP32[$43>>2] = $50;
           } else {
            $51 = $44;
            $52 = ((($db)) + 12|0);
            $53 = HEAP32[$db>>2]|0;
            $54 = (($51) - ($53))|0;
            $55 = (($54|0) / 24)&-1;
            $56 = (($55) + 1)|0;
            $57 = ($54|0)<(-24);
            if ($57) {
             __THREW__ = 0;
             invoke_vi(102,($db|0));
             $58 = __THREW__; __THREW__ = 0;
             $59 = ___cxa_find_matching_catch_2()|0;
             $60 = tempRet0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
             $$01 = $59;$$04 = $60;
             break;
            }
            $61 = (($48) - ($53))|0;
            $62 = (($61|0) / 24)&-1;
            $63 = ($62>>>0)<(1073741823);
            if ($63) {
             $64 = $62 << 1;
             $65 = ($64>>>0)<($56>>>0);
             $66 = $65 ? $56 : $64;
             $$0$i$i$i = $66;
            } else {
             $$0$i$i$i = 2147483647;
            }
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$55,$52);
            $67 = ((($__v$i$i)) + 8|0);
            $68 = HEAP32[$67>>2]|0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($68,$0);
            $69 = ((($68)) + 24|0);
            HEAP32[$67>>2] = $69;
            __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           $70 = ((($16)) + 1|0);
           $$0 = $70;
           break L6;
          }
         } while(0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         $$23 = $$01;$$26 = $$04;
         break L4;
        } else {
         $$0 = $first;
        }
       }
      } while(0);
      $$3 = $$0;
      break L1;
      break;
     }
     case 76:  {
      $73 = ((($first)) + 2|0);
      $74 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($73,$last)|0);
      $75 = ($74|0)==($last|0);
      L40: do {
       if ($75) {
        $$2 = $first;
       } else {
        $76 = HEAP8[$74>>0]|0;
        $77 = ($76<<24>>24)==(112);
        if ($77) {
         $78 = ((($74)) + 1|0);
         $79 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($78,$last,$cv1)|0);
         $80 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($79,$last)|0);
         $81 = ($80|0)==($last|0);
         if ($81) {
          $$2 = $first;
         } else {
          $82 = HEAP8[$80>>0]|0;
          $83 = ($82<<24>>24)==(95);
          if ($83) {
           $84 = $79;
           $85 = $80;
           $86 = (($85) - ($84))|0;
           $87 = ($86>>>0)>(4294967279);
           if ($87) {
            __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($5);
            // unreachable;
           }
           $88 = ($86>>>0)<(11);
           if ($88) {
            $89 = $86 << 1;
            $90 = $89&255;
            HEAP8[$5>>0] = $90;
            $91 = ((($5)) + 1|0);
            $__p$0$ph$i$i9 = $91;
           } else {
            $92 = (($86) + 16)|0;
            $93 = $92 & -16;
            $94 = (_malloc($93)|0);
            $95 = ((($5)) + 8|0);
            HEAP32[$95>>2] = $94;
            $96 = $93 | 1;
            HEAP32[$5>>2] = $96;
            $97 = ((($5)) + 4|0);
            HEAP32[$97>>2] = $86;
            $__p$0$ph$i$i9 = $94;
           }
           $$0$i$i12 = $79;$__p$0$i$i11 = $__p$0$ph$i$i9;
           while(1) {
            $98 = ($$0$i$i12|0)==($80|0);
            if ($98) {
             break;
            }
            $99 = HEAP8[$$0$i$i12>>0]|0;
            HEAP8[$__p$0$i$i11>>0] = $99;
            $100 = ((($$0$i$i12)) + 1|0);
            $101 = ((($__p$0$i$i11)) + 1|0);
            $$0$i$i12 = $100;$__p$0$i$i11 = $101;
           }
           $scevgep2$i$i14 = (($__p$0$ph$i$i9) + ($86)|0);
           HEAP8[$scevgep2$i$i14>>0] = 0;
           __THREW__ = 0;
           $102 = (invoke_iiii(92,($5|0),0,(5100|0))|0);
           $103 = __THREW__; __THREW__ = 0;
           $104 = $103&1;
           do {
            if ($104) {
             $135 = ___cxa_find_matching_catch_2()|0;
             $136 = tempRet0;
             $$12 = $135;$$15 = $136;
            } else {
             ;HEAP32[$4>>2]=HEAP32[$102>>2]|0;HEAP32[$4+4>>2]=HEAP32[$102+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$102+8>>2]|0;
             $__i$0$i$i$i16 = 0;
             while(1) {
              $exitcond$i$i$i17 = ($__i$0$i$i$i16|0)==(3);
              if ($exitcond$i$i$i17) {
               break;
              }
              $105 = (($102) + ($__i$0$i$i$i16<<2)|0);
              HEAP32[$105>>2] = 0;
              $106 = (($__i$0$i$i$i16) + 1)|0;
              $__i$0$i$i$i16 = $106;
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
             $107 = ((($db)) + 4|0);
             $108 = HEAP32[$107>>2]|0;
             $109 = ((($db)) + 8|0);
             $110 = HEAP32[$109>>2]|0;
             $111 = ($108>>>0)<($110>>>0);
             $112 = $110;
             if ($111) {
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($108,$3);
              $113 = HEAP32[$107>>2]|0;
              $114 = ((($113)) + 24|0);
              HEAP32[$107>>2] = $114;
             } else {
              $115 = $108;
              $116 = ((($db)) + 12|0);
              $117 = HEAP32[$db>>2]|0;
              $118 = (($115) - ($117))|0;
              $119 = (($118|0) / 24)&-1;
              $120 = (($119) + 1)|0;
              $121 = ($118|0)<(-24);
              if ($121) {
               __THREW__ = 0;
               invoke_vi(102,($db|0));
               $122 = __THREW__; __THREW__ = 0;
               $123 = ___cxa_find_matching_catch_2()|0;
               $124 = tempRet0;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
               $$12 = $123;$$15 = $124;
               break;
              }
              $125 = (($112) - ($117))|0;
              $126 = (($125|0) / 24)&-1;
              $127 = ($126>>>0)<(1073741823);
              if ($127) {
               $128 = $126 << 1;
               $129 = ($128>>>0)<($120>>>0);
               $130 = $129 ? $120 : $128;
               $$0$i$i$i21 = $130;
              } else {
               $$0$i$i$i21 = 2147483647;
              }
              __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i20,$$0$i$i$i21,$119,$116);
              $131 = ((($__v$i$i20)) + 8|0);
              $132 = HEAP32[$131>>2]|0;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($132,$3);
              $133 = ((($132)) + 24|0);
              HEAP32[$131>>2] = $133;
              __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i20);
              __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i20);
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
             $134 = ((($80)) + 1|0);
             $$2 = $134;
             break L40;
            }
           } while(0);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
           $$23 = $$12;$$26 = $$15;
           break L4;
          } else {
           $$2 = $first;
          }
         }
        } else {
         $$2 = $first;
        }
       }
      } while(0);
      $$3 = $$2;
      break L1;
      break;
     }
     default: {
      $$3 = $first;
      break L1;
     }
     }
    } while(0);
    ___resumeException($$23|0);
    // unreachable;
   } else {
    $$3 = $first;
   }
  } else {
   $$3 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first,$last,$op,$db) {
 $first = $first|0;
 $last = $last|0;
 $op = $op|0;
 $db = $db|0;
 var $$$$i$i$i = 0, $$$$i$i$i32 = 0, $$$i$i$i = 0, $$$i$i$i31 = 0, $$01 = 0, $$03 = 0, $$1 = 0, $$12 = 0, $$14 = 0, $$2 = 0, $$25 = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$47 = 0, $$5 = 0, $$58 = 0, $$6 = 0, $$69 = 0, $$pre$i = 0;
 var $$pre$i36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i14 = 0;
 var $__i$0$i$i$i17 = 0, $__i$0$i$i$i21 = 0, $__i$0$i$i$i25 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i15 = 0, $exitcond$i$i$i18 = 0, $exitcond$i$i$i22 = 0, $exitcond$i$i$i26 = 0, $op1 = 0, $op2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $op2 = sp + 84|0;
 $op1 = sp + 72|0;
 $0 = sp + 60|0;
 $1 = sp + 48|0;
 $2 = sp + 36|0;
 $3 = sp + 24|0;
 $4 = sp + 12|0;
 $5 = sp;
 $6 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
 $7 = ($6|0)==($first|0);
 L1: do {
  if ($7) {
   $$1 = $first;
  } else {
   $8 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($6,$last,$db)|0);
   $9 = ($8|0)==($6|0);
   $10 = ((($db)) + 4|0);
   if ($9) {
    $152 = HEAP32[$10>>2]|0;
    $153 = ((($152)) + -24|0);
    $154 = $152;
    while(1) {
     $155 = ($154|0)==($153|0);
     if ($155) {
      $$1 = $first;
      break L1;
     }
     $156 = ((($154)) + -24|0);
     HEAP32[$10>>2] = $156;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($156);
     $$pre$i36 = HEAP32[$10>>2]|0;
     $154 = $$pre$i36;
    }
   }
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$db>>2]|0;
   $13 = (($11) - ($12))|0;
   $14 = (($13|0) / 24)&-1;
   $15 = ($14>>>0)<(2);
   if ($15) {
    $$1 = $first;
   } else {
    $16 = $11;
    $17 = ((($16)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op2,$17);
    $18 = HEAP32[$10>>2]|0;
    $19 = ((($18)) + -24|0);
    $20 = $18;
    while(1) {
     $21 = ($20|0)==($19|0);
     if ($21) {
      break;
     }
     $22 = ((($20)) + -24|0);
     HEAP32[$10>>2] = $22;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
     $$pre$i = HEAP32[$10>>2]|0;
     $20 = $$pre$i;
    }
    $23 = ((($18)) + -48|0);
    __THREW__ = 0;
    invoke_vii(96,($op1|0),($23|0));
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if ($25) {
     $56 = ___cxa_find_matching_catch_2()|0;
     $57 = tempRet0;
     $$6 = $57;$$69 = $56;
    } else {
     $26 = HEAP32[$10>>2]|0;
     $27 = ((($26)) + -24|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $34 = ((($27)) + 1|0);
      HEAP8[$34>>0] = 0;
      HEAP8[$27>>0] = 0;
     } else {
      $31 = ((($26)) + -16|0);
      $32 = HEAP32[$31>>2]|0;
      HEAP8[$32>>0] = 0;
      $33 = ((($26)) + -20|0);
      HEAP32[$33>>2] = 0;
     }
     $35 = HEAP8[$op>>0]|0;
     $36 = $35 & 1;
     $37 = ($36<<24>>24)==(0);
     $38 = ((($op)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $35&255;
     $41 = $40 >>> 1;
     $42 = $37 ? $41 : $39;
     $43 = ((($op)) + 8|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ((($op)) + 1|0);
     $46 = $37 ? $45 : $44;
     $47 = ($42>>>0)>(1);
     $48 = $47 ? 1 : $42;
     $49 = (_memcmp($46,5106,$48)|0);
     $50 = ($49|0)==(0);
     $51 = ($42|0)==(0);
     $$$i$i$i = $47&1;
     $$$$i$i$i = $51 ? -1 : $$$i$i$i;
     $52 = $50 ? $$$$i$i$i : $49;
     $53 = ($52|0)==(0);
     if ($53) {
      __THREW__ = 0;
      invoke_vii(98,($27|0),40);
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       label = 14;
      } else {
       label = 15;
      }
     } else {
      label = 15;
     }
     L23: do {
      if ((label|0) == 15) {
       __THREW__ = 0;
       invoke_viii(107,($5|0),(5059|0),($op1|0));
       $60 = __THREW__; __THREW__ = 0;
       $61 = $60&1;
       if ($61) {
        label = 14;
       } else {
        __THREW__ = 0;
        $62 = (invoke_iii(93,($5|0),(5108|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         $140 = ___cxa_find_matching_catch_2()|0;
         $141 = tempRet0;
         $$4 = $141;$$47 = $140;
        } else {
         ;HEAP32[$4>>2]=HEAP32[$62>>2]|0;HEAP32[$4+4>>2]=HEAP32[$62+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$62+8>>2]|0;
         $__i$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $65 = (($62) + ($__i$0$i$i$i<<2)|0);
          HEAP32[$65>>2] = 0;
          $66 = (($__i$0$i$i$i) + 1)|0;
          $__i$0$i$i$i = $66;
         }
         $67 = HEAP8[$op>>0]|0;
         $68 = $67 & 1;
         $69 = ($68<<24>>24)==(0);
         $70 = HEAP32[$43>>2]|0;
         $71 = $69 ? $45 : $70;
         $72 = HEAP32[$38>>2]|0;
         $73 = $67&255;
         $74 = $73 >>> 1;
         $75 = $69 ? $74 : $72;
         __THREW__ = 0;
         $76 = (invoke_iiii(91,($4|0),($71|0),($75|0))|0);
         $77 = __THREW__; __THREW__ = 0;
         $78 = $77&1;
         if ($78) {
          $142 = ___cxa_find_matching_catch_2()|0;
          $143 = tempRet0;
          $$3 = $143;$$36 = $142;
         } else {
          ;HEAP32[$3>>2]=HEAP32[$76>>2]|0;HEAP32[$3+4>>2]=HEAP32[$76+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$76+8>>2]|0;
          $__i$0$i$i$i14 = 0;
          while(1) {
           $exitcond$i$i$i15 = ($__i$0$i$i$i14|0)==(3);
           if ($exitcond$i$i$i15) {
            break;
           }
           $79 = (($76) + ($__i$0$i$i$i14<<2)|0);
           HEAP32[$79>>2] = 0;
           $80 = (($__i$0$i$i$i14) + 1)|0;
           $__i$0$i$i$i14 = $80;
          }
          __THREW__ = 0;
          $81 = (invoke_iii(93,($3|0),(5111|0))|0);
          $82 = __THREW__; __THREW__ = 0;
          $83 = $82&1;
          if ($83) {
           $144 = ___cxa_find_matching_catch_2()|0;
           $145 = tempRet0;
           $$2 = $145;$$25 = $144;
          } else {
           ;HEAP32[$2>>2]=HEAP32[$81>>2]|0;HEAP32[$2+4>>2]=HEAP32[$81+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$81+8>>2]|0;
           $__i$0$i$i$i17 = 0;
           while(1) {
            $exitcond$i$i$i18 = ($__i$0$i$i$i17|0)==(3);
            if ($exitcond$i$i$i18) {
             break;
            }
            $84 = (($81) + ($__i$0$i$i$i17<<2)|0);
            HEAP32[$84>>2] = 0;
            $85 = (($__i$0$i$i$i17) + 1)|0;
            $__i$0$i$i$i17 = $85;
           }
           $86 = HEAP8[$op2>>0]|0;
           $87 = $86 & 1;
           $88 = ($87<<24>>24)==(0);
           $89 = ((($op2)) + 8|0);
           $90 = HEAP32[$89>>2]|0;
           $91 = ((($op2)) + 1|0);
           $92 = $88 ? $91 : $90;
           $93 = ((($op2)) + 4|0);
           $94 = HEAP32[$93>>2]|0;
           $95 = $86&255;
           $96 = $95 >>> 1;
           $97 = $88 ? $96 : $94;
           __THREW__ = 0;
           $98 = (invoke_iiii(91,($2|0),($92|0),($97|0))|0);
           $99 = __THREW__; __THREW__ = 0;
           $100 = $99&1;
           if ($100) {
            $146 = ___cxa_find_matching_catch_2()|0;
            $147 = tempRet0;
            $$12 = $147;$$14 = $146;
           } else {
            ;HEAP32[$1>>2]=HEAP32[$98>>2]|0;HEAP32[$1+4>>2]=HEAP32[$98+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$98+8>>2]|0;
            $__i$0$i$i$i21 = 0;
            while(1) {
             $exitcond$i$i$i22 = ($__i$0$i$i$i21|0)==(3);
             if ($exitcond$i$i$i22) {
              break;
             }
             $101 = (($98) + ($__i$0$i$i$i21<<2)|0);
             HEAP32[$101>>2] = 0;
             $102 = (($__i$0$i$i$i21) + 1)|0;
             $__i$0$i$i$i21 = $102;
            }
            __THREW__ = 0;
            $103 = (invoke_iii(93,($1|0),(5061|0))|0);
            $104 = __THREW__; __THREW__ = 0;
            $105 = $104&1;
            do {
             if ($105) {
              $148 = ___cxa_find_matching_catch_2()|0;
              $149 = tempRet0;
              $$01 = $149;$$03 = $148;
             } else {
              ;HEAP32[$0>>2]=HEAP32[$103>>2]|0;HEAP32[$0+4>>2]=HEAP32[$103+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$103+8>>2]|0;
              $__i$0$i$i$i25 = 0;
              while(1) {
               $exitcond$i$i$i26 = ($__i$0$i$i$i25|0)==(3);
               if ($exitcond$i$i$i26) {
                break;
               }
               $106 = (($103) + ($__i$0$i$i$i25<<2)|0);
               HEAP32[$106>>2] = 0;
               $107 = (($__i$0$i$i$i25) + 1)|0;
               $__i$0$i$i$i25 = $107;
              }
              $108 = HEAP8[$0>>0]|0;
              $109 = $108 & 1;
              $110 = ($109<<24>>24)==(0);
              $111 = ((($0)) + 8|0);
              $112 = HEAP32[$111>>2]|0;
              $113 = ((($0)) + 1|0);
              $114 = $110 ? $113 : $112;
              $115 = ((($0)) + 4|0);
              $116 = HEAP32[$115>>2]|0;
              $117 = $108&255;
              $118 = $117 >>> 1;
              $119 = $110 ? $118 : $116;
              __THREW__ = 0;
              (invoke_iiii(91,($27|0),($114|0),($119|0))|0);
              $120 = __THREW__; __THREW__ = 0;
              $121 = $120&1;
              if ($121) {
               $150 = ___cxa_find_matching_catch_2()|0;
               $151 = tempRet0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
               $$01 = $151;$$03 = $150;
               break;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
              $122 = HEAP8[$op>>0]|0;
              $123 = $122 & 1;
              $124 = ($123<<24>>24)==(0);
              $125 = HEAP32[$38>>2]|0;
              $126 = $122&255;
              $127 = $126 >>> 1;
              $128 = $124 ? $127 : $125;
              $129 = HEAP32[$43>>2]|0;
              $130 = $124 ? $45 : $129;
              $131 = ($128>>>0)>(1);
              $132 = $131 ? 1 : $128;
              $133 = (_memcmp($130,5106,$132)|0);
              $134 = ($133|0)==(0);
              $135 = ($128|0)==(0);
              $$$i$i$i31 = $131&1;
              $$$$i$i$i32 = $135 ? -1 : $$$i$i$i31;
              $136 = $134 ? $$$$i$i$i32 : $133;
              $137 = ($136|0)==(0);
              if ($137) {
               __THREW__ = 0;
               invoke_vii(98,($27|0),41);
               $138 = __THREW__; __THREW__ = 0;
               $139 = $138&1;
               if ($139) {
                label = 14;
                break L23;
               }
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op1);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op2);
              $$1 = $8;
              break L1;
             }
            } while(0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
            $$12 = $$01;$$14 = $$03;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
           $$2 = $$12;$$25 = $$14;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          $$3 = $$2;$$36 = $$25;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         $$4 = $$3;$$47 = $$36;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
        $$5 = $$4;$$58 = $$47;
       }
      }
     } while(0);
     if ((label|0) == 14) {
      $58 = ___cxa_find_matching_catch_2()|0;
      $59 = tempRet0;
      $$5 = $59;$$58 = $58;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op1);
     $$6 = $$5;$$69 = $$58;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op2);
    ___resumeException($$69|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first,$last,$op,$db) {
 $first = $first|0;
 $last = $last|0;
 $op = $op|0;
 $db = $db|0;
 var $$04 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i6 = 0, $exitcond$i$i$i = 0;
 var $exitcond$i$i$i$i = 0, $exitcond$i$i$i7 = 0, $or$cond$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 36|0;
 $1 = sp + 24|0;
 $2 = sp + 12|0;
 $3 = sp;
 $4 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
 $5 = ($4|0)==($first|0);
 L1: do {
  if ($5) {
   $$04 = $first;
  } else {
   $6 = HEAP32[$db>>2]|0;
   $7 = ((($db)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6|0)==($8|0);
   if ($9) {
    $$04 = $first;
   } else {
    $10 = ((($8)) + -24|0);
    __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($2,$op,5059);
    $11 = HEAP32[$7>>2]|0;
    $12 = ((($11)) + -24|0);
    __THREW__ = 0;
    invoke_vii(96,($3|0),($12|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     $83 = ___cxa_find_matching_catch_2()|0;
     $84 = tempRet0;
     $$2 = $84;$$23 = $83;
    } else {
     $15 = HEAP8[$3>>0]|0;
     $16 = $15 & 1;
     $17 = ($16<<24>>24)==(0);
     $18 = ((($3)) + 8|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($3)) + 1|0);
     $21 = $17 ? $20 : $19;
     $22 = ((($3)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $15&255;
     $25 = $24 >>> 1;
     $26 = $17 ? $25 : $23;
     __THREW__ = 0;
     $27 = (invoke_iiii(91,($2|0),($21|0),($26|0))|0);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     do {
      if ($29) {
       $85 = ___cxa_find_matching_catch_2()|0;
       $86 = tempRet0;
       $$1 = $86;$$12 = $85;
      } else {
       ;HEAP32[$1>>2]=HEAP32[$27>>2]|0;HEAP32[$1+4>>2]=HEAP32[$27+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$27+8>>2]|0;
       $__i$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $30 = (($27) + ($__i$0$i$i$i<<2)|0);
        HEAP32[$30>>2] = 0;
        $31 = (($__i$0$i$i$i) + 1)|0;
        $__i$0$i$i$i = $31;
       }
       __THREW__ = 0;
       $32 = (invoke_iii(93,($1|0),(5061|0))|0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        $87 = ___cxa_find_matching_catch_2()|0;
        $88 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
        $$1 = $88;$$12 = $87;
        break;
       }
       ;HEAP32[$0>>2]=HEAP32[$32>>2]|0;HEAP32[$0+4>>2]=HEAP32[$32+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$32+8>>2]|0;
       $__i$0$i$i$i6 = 0;
       while(1) {
        $exitcond$i$i$i7 = ($__i$0$i$i$i6|0)==(3);
        if ($exitcond$i$i$i7) {
         break;
        }
        $35 = (($32) + ($__i$0$i$i$i6<<2)|0);
        HEAP32[$35>>2] = 0;
        $36 = (($__i$0$i$i$i6) + 1)|0;
        $__i$0$i$i$i6 = $36;
       }
       $37 = HEAP8[$10>>0]|0;
       $38 = $37 & 1;
       $39 = ($38<<24>>24)==(0);
       do {
        if ($39) {
         $40 = ((($10)) + 1|0);
         HEAP8[$40>>0] = 0;
         HEAP8[$10>>0] = 0;
        } else {
         $41 = ((($8)) + -16|0);
         $42 = HEAP32[$41>>2]|0;
         HEAP8[$42>>0] = 0;
         $43 = ((($8)) + -20|0);
         HEAP32[$43>>2] = 0;
         $$pre$i$i$i = HEAP8[$10>>0]|0;
         $44 = $$pre$i$i$i & 1;
         $45 = ($44<<24>>24)==(0);
         if ($45) {
          $50 = $$pre$i$i$i;$59 = 10;
         } else {
          $46 = HEAP32[$10>>2]|0;
          $47 = $46 & -2;
          $phitmp$i$i$i$i$i$i = (($47) + -1)|0;
          $48 = $46&255;
          $50 = $48;$59 = $phitmp$i$i$i$i$i$i;
         }
         $49 = $50 & 1;
         $51 = ($49<<24>>24)==(0);
         if ($51) {
          $52 = $50&255;
          $53 = $52 >>> 1;
          $54 = ($50&255)<(22);
          if ($54) {
           $57 = 10;$78 = $53;$89 = 1;
          } else {
           $55 = (($53) + 16)|0;
           $56 = $55 & 240;
           $phitmp$i2$i$i$i$i$i = (($56) + -1)|0;
           $57 = $phitmp$i2$i$i$i$i$i;$78 = $53;$89 = 1;
          }
         } else {
          $57 = 10;$78 = 0;$89 = 0;
         }
         $58 = ($57|0)==($59|0);
         if (!($58)) {
          $60 = ($57|0)==(10);
          if ($60) {
           $65 = ((($10)) + 1|0);
           $66 = HEAP32[$41>>2]|0;
           if ($89) {
            $67 = $50&255;
            $68 = $67 >>> 1;
            $69 = (($68) + 1)|0;
            _memcpy(($65|0),($66|0),($69|0))|0;
            _free($66);
           } else {
            $74 = HEAP8[$66>>0]|0;
            HEAP8[$65>>0] = $74;
            _free($66);
           }
           $79 = $78 << 1;
           $80 = $79&255;
           HEAP8[$10>>0] = $80;
           break;
          }
          $61 = ($57>>>0)<=($59>>>0);
          $62 = (($57) + 1)|0;
          $63 = (_malloc($62)|0);
          $64 = ($63|0)==(0|0);
          $or$cond$i$i$i$i$i = $61 & $64;
          if (!($or$cond$i$i$i$i$i)) {
           if ($89) {
            $70 = ((($10)) + 1|0);
            $71 = $50&255;
            $72 = $71 >>> 1;
            $73 = (($72) + 1)|0;
            _memcpy(($63|0),($70|0),($73|0))|0;
           } else {
            $75 = HEAP32[$41>>2]|0;
            $76 = HEAP8[$75>>0]|0;
            HEAP8[$63>>0] = $76;
            _free($75);
           }
           $77 = $62 | 1;
           HEAP32[$10>>2] = $77;
           HEAP32[$43>>2] = $78;
           HEAP32[$41>>2] = $63;
          }
         }
        }
       } while(0);
       ;HEAP32[$10>>2]=HEAP32[$0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$0+8>>2]|0;
       $__i$0$i$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i$i = ($__i$0$i$i$i$i|0)==(3);
        if ($exitcond$i$i$i$i) {
         break;
        }
        $81 = (($0) + ($__i$0$i$i$i$i<<2)|0);
        HEAP32[$81>>2] = 0;
        $82 = (($__i$0$i$i$i$i) + 1)|0;
        $__i$0$i$i$i$i = $82;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
       $$04 = $4;
       break L1;
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
     $$2 = $$1;$$23 = $$12;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
    ___resumeException($$23|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$04|0);
}
function __ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__i$0$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $0 = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$0>>2] = 0;
  $1 = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $1;
 }
 $2 = HEAP8[$__lhs>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 $5 = ((($__lhs)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2&255;
 $8 = $7 >>> 1;
 $9 = $4 ? $8 : $6;
 $10 = (_strlen($__rhs)|0);
 $11 = ((($__lhs)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($__lhs)) + 1|0);
 $14 = $4 ? $13 : $12;
 $15 = (($9) + ($10))|0;
 __THREW__ = 0;
 invoke_viiii(113,($agg$result|0),($14|0),($9|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if (!($17)) {
  __THREW__ = 0;
  (invoke_iiii(91,($agg$result|0),($__rhs|0),($10|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   return;
  }
 }
 $20 = ___cxa_find_matching_catch_2()|0;
 $21 = tempRet0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$result);
 ___resumeException($20|0);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0 = 0, $$03 = 0, $$1 = 0, $$14 = 0, $$2 = 0, $$25 = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$47 = 0, $$5 = 0, $$58 = 0, $$6 = 0, $$first = 0, $$pre = 0, $$pre$i = 0, $$pre$i28 = 0, $$pre$i30 = 0, $$pre$i34 = 0, $$pre$i36 = 0;
 var $$pre$i44 = 0, $$pre$i48 = 0, $$pre$i50 = 0, $$pre$i58 = 0, $$pre$i66 = 0, $$pre$i68 = 0, $$pre$phi105Z2D = 0, $$pre$phi107Z2D = 0, $$pre106 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i38 = 0, $__i$0$i$i$i52 = 0, $__i$0$i$i$i60 = 0, $__i$0$i$i$i70 = 0, $args = 0, $args4 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i39 = 0, $exitcond$i$i$i53 = 0, $exitcond$i$i$i61 = 0, $exitcond$i$i$i71 = 0, $global$0$off0 = 0, $or$cond = 0;
 var $or$cond25 = 0, $or$cond26 = 0, $or$cond27 = 0, $s = 0, $s1 = 0, $s5 = 0, $s6 = 0, $s7 = 0, $t$0 = 0, $t$1 = 0, $t$1$lcssa = 0, $t$1$ph = 0, $t$2 = 0, $t$3 = 0, $t$3$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 132|0;
 $s = sp + 120|0;
 $0 = sp + 108|0;
 $s1 = sp + 96|0;
 $1 = sp + 84|0;
 $args4 = sp + 72|0;
 $s5 = sp + 60|0;
 $2 = sp + 48|0;
 $s6 = sp + 36|0;
 $3 = sp + 24|0;
 $s7 = sp + 12|0;
 $4 = sp;
 $5 = $last;
 $6 = $first;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(2);
 L1: do {
  if ($8) {
   $9 = HEAP8[$first>>0]|0;
   $10 = ($9<<24>>24)==(103);
   if ($10) {
    $11 = ((($first)) + 1|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(115);
    $14 = ((($first)) + 2|0);
    $$first = $13 ? $14 : $first;
    $global$0$off0 = $13;$t$0 = $$first;
   } else {
    $global$0$off0 = 0;$t$0 = $first;
   }
   $15 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$0,$last,$db)|0);
   $16 = ($15|0)==($t$0|0);
   if (!($16)) {
    if (!($global$0$off0)) {
     $$6 = $15;
     break;
    }
    $17 = HEAP32[$db>>2]|0;
    $18 = ((($db)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($17|0)==($19|0);
    if ($20) {
     $$6 = $first;
     break;
    }
    $21 = ((($19)) + -24|0);
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($21,0,5153)|0);
    $$6 = $15;
    break;
   }
   $22 = $t$0;
   $23 = (($5) - ($22))|0;
   $24 = ($23|0)>(2);
   if ($24) {
    $25 = HEAP8[$t$0>>0]|0;
    $26 = ($25<<24>>24)==(115);
    if ($26) {
     $27 = ((($t$0)) + 1|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = ($28<<24>>24)==(114);
     if ($29) {
      $30 = ((($t$0)) + 2|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = ($31<<24>>24)==(78);
      L14: do {
       if ($32) {
        $33 = ((($t$0)) + 3|0);
        $34 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($33,$last,$db)|0);
        $35 = ($34|0)==($33|0);
        $36 = ($34|0)==($last|0);
        $or$cond = $35 | $36;
        if ($or$cond) {
         $$6 = $first;
         break L1;
        }
        $37 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($34,$last,$db)|0);
        $38 = ($37|0)==($34|0);
        $$pre = ((($db)) + 4|0);
        do {
         if ($38) {
          $$pre$phi105Z2D = $db;$t$1$ph = $34;
         } else {
          $39 = HEAP32[$$pre>>2]|0;
          $40 = HEAP32[$db>>2]|0;
          $41 = (($39) - ($40))|0;
          $42 = (($41|0) / 24)&-1;
          $43 = ($42>>>0)<(2);
          if ($43) {
           $$6 = $first;
           break L1;
          }
          $44 = $39;
          $45 = ((($44)) + -24|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args,$45);
          $46 = HEAP32[$$pre>>2]|0;
          $47 = ((($46)) + -24|0);
          $48 = $46;
          while(1) {
           $49 = ($48|0)==($47|0);
           if ($49) {
            break;
           }
           $50 = ((($48)) + -24|0);
           HEAP32[$$pre>>2] = $50;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($50);
           $$pre$i = HEAP32[$$pre>>2]|0;
           $48 = $$pre$i;
          }
          $51 = ((($46)) + -48|0);
          $52 = HEAP8[$args>>0]|0;
          $53 = $52 & 1;
          $54 = ($53<<24>>24)==(0);
          $55 = ((($args)) + 8|0);
          $56 = HEAP32[$55>>2]|0;
          $57 = ((($args)) + 1|0);
          $58 = $54 ? $57 : $56;
          $59 = ((($args)) + 4|0);
          $60 = HEAP32[$59>>2]|0;
          $61 = $52&255;
          $62 = $61 >>> 1;
          $63 = $54 ? $62 : $60;
          __THREW__ = 0;
          (invoke_iiii(91,($51|0),($58|0),($63|0))|0);
          $64 = __THREW__; __THREW__ = 0;
          $65 = $64&1;
          if ($65) {
           $72 = ___cxa_find_matching_catch_2()|0;
           $73 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
           $$5 = $73;$$58 = $72;
           break L14;
          }
          $66 = ($37|0)==($last|0);
          if (!($66)) {
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
           $$pre$phi105Z2D = $db;$t$1$ph = $37;
           break;
          }
          $67 = HEAP32[$$pre>>2]|0;
          $68 = ((($67)) + -24|0);
          $69 = $67;
          while(1) {
           $70 = ($69|0)==($68|0);
           if ($70) {
            break;
           }
           $71 = ((($69)) + -24|0);
           HEAP32[$$pre>>2] = $71;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($71);
           $$pre$i28 = HEAP32[$$pre>>2]|0;
           $69 = $$pre$i28;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
          $$6 = $first;
          break L1;
         }
        } while(0);
        $74 = ((($0)) + 8|0);
        $75 = ((($0)) + 1|0);
        $76 = ((($0)) + 4|0);
        $t$1 = $t$1$ph;
        while(1) {
         $77 = HEAP8[$t$1>>0]|0;
         $78 = ($77<<24>>24)==(69);
         if ($78) {
          $t$1$lcssa = $t$1;
          label = 43;
          break;
         }
         $79 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($t$1,$last,$db)|0);
         $80 = ($79|0)==($t$1|0);
         $81 = ($79|0)==($last|0);
         $or$cond25 = $80 | $81;
         if ($or$cond25) {
          $$6 = $first;
          break L1;
         }
         $82 = HEAP32[$$pre>>2]|0;
         $83 = HEAP32[$$pre$phi105Z2D>>2]|0;
         $84 = (($82) - ($83))|0;
         $85 = (($84|0) / 24)&-1;
         $86 = ($85>>>0)<(2);
         if ($86) {
          $$6 = $first;
          break L1;
         }
         $87 = $82;
         $88 = ((($87)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s,$88);
         $89 = HEAP32[$$pre>>2]|0;
         $90 = ((($89)) + -24|0);
         $91 = $89;
         while(1) {
          $92 = ($91|0)==($90|0);
          if ($92) {
           break;
          }
          $93 = ((($91)) + -24|0);
          HEAP32[$$pre>>2] = $93;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($93);
          $$pre$i30 = HEAP32[$$pre>>2]|0;
          $91 = $$pre$i30;
         }
         __THREW__ = 0;
         $94 = (invoke_iiii(92,($s|0),0,(5153|0))|0);
         $95 = __THREW__; __THREW__ = 0;
         $96 = $95&1;
         if ($96) {
          label = 40;
          break;
         }
         ;HEAP32[$0>>2]=HEAP32[$94>>2]|0;HEAP32[$0+4>>2]=HEAP32[$94+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$94+8>>2]|0;
         $__i$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $97 = (($94) + ($__i$0$i$i$i<<2)|0);
          HEAP32[$97>>2] = 0;
          $98 = (($__i$0$i$i$i) + 1)|0;
          $__i$0$i$i$i = $98;
         }
         $99 = ((($89)) + -48|0);
         $100 = HEAP8[$0>>0]|0;
         $101 = $100 & 1;
         $102 = ($101<<24>>24)==(0);
         $103 = HEAP32[$74>>2]|0;
         $104 = $102 ? $75 : $103;
         $105 = HEAP32[$76>>2]|0;
         $106 = $100&255;
         $107 = $106 >>> 1;
         $108 = $102 ? $107 : $105;
         __THREW__ = 0;
         (invoke_iiii(91,($99|0),($104|0),($108|0))|0);
         $109 = __THREW__; __THREW__ = 0;
         $110 = $109&1;
         if ($110) {
          label = 41;
          break;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s);
         $t$1 = $79;
        }
        if ((label|0) == 40) {
         $111 = ___cxa_find_matching_catch_2()|0;
         $112 = tempRet0;
         $$0 = $112;$$03 = $111;
        }
        else if ((label|0) == 41) {
         $113 = ___cxa_find_matching_catch_2()|0;
         $114 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
         $$0 = $114;$$03 = $113;
        }
        else if ((label|0) == 43) {
         $115 = ((($t$1$lcssa)) + 1|0);
         $116 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($115,$last,$db)|0);
         $117 = ($116|0)==($115|0);
         if ($117) {
          $118 = HEAP32[$db>>2]|0;
          $119 = HEAP32[$$pre>>2]|0;
          $120 = ($118|0)==($119|0);
          if ($120) {
           $$6 = $first;
           break L1;
          }
          $121 = ((($119)) + -24|0);
          $122 = $119;
          while(1) {
           $123 = ($122|0)==($121|0);
           if ($123) {
            $$6 = $first;
            break L1;
           }
           $124 = ((($122)) + -24|0);
           HEAP32[$$pre>>2] = $124;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($124);
           $$pre$i34 = HEAP32[$$pre>>2]|0;
           $122 = $$pre$i34;
          }
         }
         $125 = HEAP32[$$pre>>2]|0;
         $126 = HEAP32[$$pre$phi105Z2D>>2]|0;
         $127 = (($125) - ($126))|0;
         $128 = (($127|0) / 24)&-1;
         $129 = ($128>>>0)<(2);
         if ($129) {
          $$6 = $first;
          break L1;
         }
         $130 = $125;
         $131 = ((($130)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s1,$131);
         $132 = HEAP32[$$pre>>2]|0;
         $133 = ((($132)) + -24|0);
         $134 = $132;
         while(1) {
          $135 = ($134|0)==($133|0);
          if ($135) {
           break;
          }
          $136 = ((($134)) + -24|0);
          HEAP32[$$pre>>2] = $136;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($136);
          $$pre$i36 = HEAP32[$$pre>>2]|0;
          $134 = $$pre$i36;
         }
         __THREW__ = 0;
         $137 = (invoke_iiii(92,($s1|0),0,(5153|0))|0);
         $138 = __THREW__; __THREW__ = 0;
         $139 = $138&1;
         do {
          if ($139) {
           $157 = ___cxa_find_matching_catch_2()|0;
           $158 = tempRet0;
           $$1 = $158;$$14 = $157;
          } else {
           ;HEAP32[$1>>2]=HEAP32[$137>>2]|0;HEAP32[$1+4>>2]=HEAP32[$137+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$137+8>>2]|0;
           $__i$0$i$i$i38 = 0;
           while(1) {
            $exitcond$i$i$i39 = ($__i$0$i$i$i38|0)==(3);
            if ($exitcond$i$i$i39) {
             break;
            }
            $140 = (($137) + ($__i$0$i$i$i38<<2)|0);
            HEAP32[$140>>2] = 0;
            $141 = (($__i$0$i$i$i38) + 1)|0;
            $__i$0$i$i$i38 = $141;
           }
           $142 = ((($132)) + -48|0);
           $143 = HEAP8[$1>>0]|0;
           $144 = $143 & 1;
           $145 = ($144<<24>>24)==(0);
           $146 = ((($1)) + 8|0);
           $147 = HEAP32[$146>>2]|0;
           $148 = ((($1)) + 1|0);
           $149 = $145 ? $148 : $147;
           $150 = ((($1)) + 4|0);
           $151 = HEAP32[$150>>2]|0;
           $152 = $143&255;
           $153 = $152 >>> 1;
           $154 = $145 ? $153 : $151;
           __THREW__ = 0;
           (invoke_iiii(91,($142|0),($149|0),($154|0))|0);
           $155 = __THREW__; __THREW__ = 0;
           $156 = $155&1;
           if ($156) {
            $159 = ___cxa_find_matching_catch_2()|0;
            $160 = tempRet0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
            $$1 = $160;$$14 = $159;
            break;
           } else {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s1);
            $$6 = $116;
            break L1;
           }
          }
         } while(0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s1);
         $$5 = $$1;$$58 = $$14;
         break;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s);
        $$5 = $$0;$$58 = $$03;
       } else {
        $161 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($30,$last,$db)|0);
        $162 = ($161|0)==($30|0);
        if (!($162)) {
         $163 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($161,$last,$db)|0);
         $164 = ($163|0)==($161|0);
         do {
          if ($164) {
           $t$2 = $161;
          } else {
           $165 = ((($db)) + 4|0);
           $166 = HEAP32[$165>>2]|0;
           $167 = HEAP32[$db>>2]|0;
           $168 = (($166) - ($167))|0;
           $169 = (($168|0) / 24)&-1;
           $170 = ($169>>>0)<(2);
           if ($170) {
            $$6 = $first;
            break L1;
           }
           $171 = $166;
           $172 = ((($171)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args4,$172);
           $173 = HEAP32[$165>>2]|0;
           $174 = ((($173)) + -24|0);
           $175 = $173;
           while(1) {
            $176 = ($175|0)==($174|0);
            if ($176) {
             break;
            }
            $177 = ((($175)) + -24|0);
            HEAP32[$165>>2] = $177;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($177);
            $$pre$i44 = HEAP32[$165>>2]|0;
            $175 = $$pre$i44;
           }
           $178 = ((($173)) + -48|0);
           $179 = HEAP8[$args4>>0]|0;
           $180 = $179 & 1;
           $181 = ($180<<24>>24)==(0);
           $182 = ((($args4)) + 8|0);
           $183 = HEAP32[$182>>2]|0;
           $184 = ((($args4)) + 1|0);
           $185 = $181 ? $184 : $183;
           $186 = ((($args4)) + 4|0);
           $187 = HEAP32[$186>>2]|0;
           $188 = $179&255;
           $189 = $188 >>> 1;
           $190 = $181 ? $189 : $187;
           __THREW__ = 0;
           (invoke_iiii(91,($178|0),($185|0),($190|0))|0);
           $191 = __THREW__; __THREW__ = 0;
           $192 = $191&1;
           if ($192) {
            $193 = ___cxa_find_matching_catch_2()|0;
            $194 = tempRet0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args4);
            $$5 = $194;$$58 = $193;
            break L14;
           } else {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args4);
            $t$2 = $163;
            break;
           }
          }
         } while(0);
         $195 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$2,$last,$db)|0);
         $196 = ($195|0)==($t$2|0);
         if ($196) {
          $197 = HEAP32[$db>>2]|0;
          $198 = ((($db)) + 4|0);
          $199 = HEAP32[$198>>2]|0;
          $200 = ($197|0)==($199|0);
          if ($200) {
           $$6 = $first;
           break L1;
          }
          $201 = ((($199)) + -24|0);
          $202 = $199;
          while(1) {
           $203 = ($202|0)==($201|0);
           if ($203) {
            $$6 = $first;
            break L1;
           }
           $204 = ((($202)) + -24|0);
           HEAP32[$198>>2] = $204;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($204);
           $$pre$i48 = HEAP32[$198>>2]|0;
           $202 = $$pre$i48;
          }
         }
         $205 = ((($db)) + 4|0);
         $206 = HEAP32[$205>>2]|0;
         $207 = HEAP32[$db>>2]|0;
         $208 = (($206) - ($207))|0;
         $209 = (($208|0) / 24)&-1;
         $210 = ($209>>>0)<(2);
         if ($210) {
          $$6 = $first;
          break L1;
         }
         $211 = $206;
         $212 = ((($211)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s5,$212);
         $213 = HEAP32[$205>>2]|0;
         $214 = ((($213)) + -24|0);
         $215 = $213;
         while(1) {
          $216 = ($215|0)==($214|0);
          if ($216) {
           break;
          }
          $217 = ((($215)) + -24|0);
          HEAP32[$205>>2] = $217;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($217);
          $$pre$i50 = HEAP32[$205>>2]|0;
          $215 = $$pre$i50;
         }
         __THREW__ = 0;
         $218 = (invoke_iiii(92,($s5|0),0,(5153|0))|0);
         $219 = __THREW__; __THREW__ = 0;
         $220 = $219&1;
         do {
          if ($220) {
           $238 = ___cxa_find_matching_catch_2()|0;
           $239 = tempRet0;
           $$2 = $239;$$25 = $238;
          } else {
           ;HEAP32[$2>>2]=HEAP32[$218>>2]|0;HEAP32[$2+4>>2]=HEAP32[$218+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$218+8>>2]|0;
           $__i$0$i$i$i52 = 0;
           while(1) {
            $exitcond$i$i$i53 = ($__i$0$i$i$i52|0)==(3);
            if ($exitcond$i$i$i53) {
             break;
            }
            $221 = (($218) + ($__i$0$i$i$i52<<2)|0);
            HEAP32[$221>>2] = 0;
            $222 = (($__i$0$i$i$i52) + 1)|0;
            $__i$0$i$i$i52 = $222;
           }
           $223 = ((($213)) + -48|0);
           $224 = HEAP8[$2>>0]|0;
           $225 = $224 & 1;
           $226 = ($225<<24>>24)==(0);
           $227 = ((($2)) + 8|0);
           $228 = HEAP32[$227>>2]|0;
           $229 = ((($2)) + 1|0);
           $230 = $226 ? $229 : $228;
           $231 = ((($2)) + 4|0);
           $232 = HEAP32[$231>>2]|0;
           $233 = $224&255;
           $234 = $233 >>> 1;
           $235 = $226 ? $234 : $232;
           __THREW__ = 0;
           (invoke_iiii(91,($223|0),($230|0),($235|0))|0);
           $236 = __THREW__; __THREW__ = 0;
           $237 = $236&1;
           if ($237) {
            $240 = ___cxa_find_matching_catch_2()|0;
            $241 = tempRet0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            $$2 = $241;$$25 = $240;
            break;
           } else {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s5);
            $$6 = $195;
            break L1;
           }
          }
         } while(0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s5);
         $$5 = $$2;$$58 = $$25;
         break;
        }
        $242 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($30,$last,$db)|0);
        $243 = ($242|0)==($30|0);
        $244 = ($242|0)==($last|0);
        $or$cond26 = $243 | $244;
        if ($or$cond26) {
         $$6 = $first;
         break L1;
        }
        if ($global$0$off0) {
         $245 = HEAP32[$db>>2]|0;
         $246 = ((($db)) + 4|0);
         $247 = HEAP32[$246>>2]|0;
         $248 = ($245|0)==($247|0);
         if ($248) {
          $$6 = $first;
          break L1;
         }
         $249 = ((($247)) + -24|0);
         (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($249,0,5153)|0);
         $$pre$phi107Z2D = $246;
        } else {
         $$pre106 = ((($db)) + 4|0);
         $$pre$phi107Z2D = $$pre106;
        }
        $250 = ((($3)) + 8|0);
        $251 = ((($3)) + 1|0);
        $252 = ((($3)) + 4|0);
        $t$3 = $242;
        while(1) {
         $253 = HEAP8[$t$3>>0]|0;
         $254 = ($253<<24>>24)==(69);
         if ($254) {
          $t$3$lcssa = $t$3;
          label = 109;
          break;
         }
         $255 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($t$3,$last,$db)|0);
         $256 = ($255|0)==($t$3|0);
         $257 = ($255|0)==($last|0);
         $or$cond27 = $256 | $257;
         if ($or$cond27) {
          $$6 = $first;
          break L1;
         }
         $258 = HEAP32[$$pre$phi107Z2D>>2]|0;
         $259 = HEAP32[$db>>2]|0;
         $260 = (($258) - ($259))|0;
         $261 = (($260|0) / 24)&-1;
         $262 = ($261>>>0)<(2);
         if ($262) {
          $$6 = $first;
          break L1;
         }
         $263 = $258;
         $264 = ((($263)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s6,$264);
         $265 = HEAP32[$$pre$phi107Z2D>>2]|0;
         $266 = ((($265)) + -24|0);
         $267 = $265;
         while(1) {
          $268 = ($267|0)==($266|0);
          if ($268) {
           break;
          }
          $269 = ((($267)) + -24|0);
          HEAP32[$$pre$phi107Z2D>>2] = $269;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($269);
          $$pre$i58 = HEAP32[$$pre$phi107Z2D>>2]|0;
          $267 = $$pre$i58;
         }
         __THREW__ = 0;
         $270 = (invoke_iiii(92,($s6|0),0,(5153|0))|0);
         $271 = __THREW__; __THREW__ = 0;
         $272 = $271&1;
         if ($272) {
          label = 106;
          break;
         }
         ;HEAP32[$3>>2]=HEAP32[$270>>2]|0;HEAP32[$3+4>>2]=HEAP32[$270+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$270+8>>2]|0;
         $__i$0$i$i$i60 = 0;
         while(1) {
          $exitcond$i$i$i61 = ($__i$0$i$i$i60|0)==(3);
          if ($exitcond$i$i$i61) {
           break;
          }
          $273 = (($270) + ($__i$0$i$i$i60<<2)|0);
          HEAP32[$273>>2] = 0;
          $274 = (($__i$0$i$i$i60) + 1)|0;
          $__i$0$i$i$i60 = $274;
         }
         $275 = ((($265)) + -48|0);
         $276 = HEAP8[$3>>0]|0;
         $277 = $276 & 1;
         $278 = ($277<<24>>24)==(0);
         $279 = HEAP32[$250>>2]|0;
         $280 = $278 ? $251 : $279;
         $281 = HEAP32[$252>>2]|0;
         $282 = $276&255;
         $283 = $282 >>> 1;
         $284 = $278 ? $283 : $281;
         __THREW__ = 0;
         (invoke_iiii(91,($275|0),($280|0),($284|0))|0);
         $285 = __THREW__; __THREW__ = 0;
         $286 = $285&1;
         if ($286) {
          label = 107;
          break;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s6);
         $t$3 = $255;
        }
        if ((label|0) == 106) {
         $287 = ___cxa_find_matching_catch_2()|0;
         $288 = tempRet0;
         $$3 = $288;$$36 = $287;
        }
        else if ((label|0) == 107) {
         $289 = ___cxa_find_matching_catch_2()|0;
         $290 = tempRet0;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$3 = $290;$$36 = $289;
        }
        else if ((label|0) == 109) {
         $291 = ((($t$3$lcssa)) + 1|0);
         $292 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($291,$last,$db)|0);
         $293 = ($292|0)==($291|0);
         if ($293) {
          $294 = HEAP32[$db>>2]|0;
          $295 = HEAP32[$$pre$phi107Z2D>>2]|0;
          $296 = ($294|0)==($295|0);
          if ($296) {
           $$6 = $first;
           break L1;
          }
          $297 = ((($295)) + -24|0);
          $298 = $295;
          while(1) {
           $299 = ($298|0)==($297|0);
           if ($299) {
            $$6 = $first;
            break L1;
           }
           $300 = ((($298)) + -24|0);
           HEAP32[$$pre$phi107Z2D>>2] = $300;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($300);
           $$pre$i66 = HEAP32[$$pre$phi107Z2D>>2]|0;
           $298 = $$pre$i66;
          }
         }
         $301 = HEAP32[$$pre$phi107Z2D>>2]|0;
         $302 = HEAP32[$db>>2]|0;
         $303 = (($301) - ($302))|0;
         $304 = (($303|0) / 24)&-1;
         $305 = ($304>>>0)<(2);
         if ($305) {
          $$6 = $first;
          break L1;
         }
         $306 = $301;
         $307 = ((($306)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($s7,$307);
         $308 = HEAP32[$$pre$phi107Z2D>>2]|0;
         $309 = ((($308)) + -24|0);
         $310 = $308;
         while(1) {
          $311 = ($310|0)==($309|0);
          if ($311) {
           break;
          }
          $312 = ((($310)) + -24|0);
          HEAP32[$$pre$phi107Z2D>>2] = $312;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($312);
          $$pre$i68 = HEAP32[$$pre$phi107Z2D>>2]|0;
          $310 = $$pre$i68;
         }
         __THREW__ = 0;
         $313 = (invoke_iiii(92,($s7|0),0,(5153|0))|0);
         $314 = __THREW__; __THREW__ = 0;
         $315 = $314&1;
         do {
          if ($315) {
           $333 = ___cxa_find_matching_catch_2()|0;
           $334 = tempRet0;
           $$4 = $334;$$47 = $333;
          } else {
           ;HEAP32[$4>>2]=HEAP32[$313>>2]|0;HEAP32[$4+4>>2]=HEAP32[$313+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$313+8>>2]|0;
           $__i$0$i$i$i70 = 0;
           while(1) {
            $exitcond$i$i$i71 = ($__i$0$i$i$i70|0)==(3);
            if ($exitcond$i$i$i71) {
             break;
            }
            $316 = (($313) + ($__i$0$i$i$i70<<2)|0);
            HEAP32[$316>>2] = 0;
            $317 = (($__i$0$i$i$i70) + 1)|0;
            $__i$0$i$i$i70 = $317;
           }
           $318 = ((($308)) + -48|0);
           $319 = HEAP8[$4>>0]|0;
           $320 = $319 & 1;
           $321 = ($320<<24>>24)==(0);
           $322 = ((($4)) + 8|0);
           $323 = HEAP32[$322>>2]|0;
           $324 = ((($4)) + 1|0);
           $325 = $321 ? $324 : $323;
           $326 = ((($4)) + 4|0);
           $327 = HEAP32[$326>>2]|0;
           $328 = $319&255;
           $329 = $328 >>> 1;
           $330 = $321 ? $329 : $327;
           __THREW__ = 0;
           (invoke_iiii(91,($318|0),($325|0),($330|0))|0);
           $331 = __THREW__; __THREW__ = 0;
           $332 = $331&1;
           if ($332) {
            $335 = ___cxa_find_matching_catch_2()|0;
            $336 = tempRet0;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
            $$4 = $336;$$47 = $335;
            break;
           } else {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s7);
            $$6 = $292;
            break L1;
           }
          }
         } while(0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s7);
         $$5 = $$4;$$58 = $$47;
         break;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($s6);
        $$5 = $$3;$$58 = $$36;
       }
      } while(0);
      ___resumeException($$58|0);
      // unreachable;
     } else {
      $$6 = $first;
     }
    } else {
     $$6 = $first;
    }
   } else {
    $$6 = $first;
   }
  } else {
   $$6 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$6|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$02 = 0, $$03 = 0, $$1$i = 0, $$2 = 0, $$pre$i = 0, $$pre$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $args = 0, $args3 = 0, $first$ = 0;
 var $t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $args3 = sp;
 $0 = $last;
 $1 = $first;
 $2 = (($0) - ($1))|0;
 $3 = ($2|0)>(1);
 L1: do {
  if ($3) {
   $4 = HEAP8[$first>>0]|0;
   L3: do {
    switch ($4<<24>>24) {
    case 100: case 111:  {
     $5 = ((($first)) + 1|0);
     $6 = HEAP8[$5>>0]|0;
     $7 = ($6<<24>>24)==(110);
     if ($7) {
      $8 = ($4<<24>>24)==(111);
      $9 = ((($first)) + 2|0);
      if (!($8)) {
       $44 = ($9|0)==($last|0);
       if ($44) {
        $$1$i = $last;
       } else {
        $45 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($9,$last,$db)|0);
        $46 = ($45|0)==($9|0);
        if ($46) {
         $47 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($9,$last,$db)|0);
         $t$0$i = $47;
        } else {
         $t$0$i = $45;
        }
        $48 = ($t$0$i|0)==($9|0);
        if ($48) {
         $$1$i = $9;
        } else {
         $49 = HEAP32[$db>>2]|0;
         $50 = ((($db)) + 4|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ($49|0)==($51|0);
         if ($52) {
          $$1$i = $9;
         } else {
          $53 = ((($51)) + -24|0);
          (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($53,0,5148)|0);
          $$1$i = $t$0$i;
         }
        }
       }
       $54 = ($$1$i|0)==($9|0);
       $first$ = $54 ? $first : $$1$i;
       $$2 = $first$;
       break L1;
      }
      $10 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($9,$last,$db)|0);
      $11 = ($10|0)==($9|0);
      if ($11) {
       $$2 = $first;
       break L1;
      }
      $12 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($10,$last,$db)|0);
      $13 = ($12|0)==($10|0);
      if ($13) {
       $$2 = $10;
       break L1;
      }
      $14 = ((($db)) + 4|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = HEAP32[$db>>2]|0;
      $17 = (($15) - ($16))|0;
      $18 = (($17|0) / 24)&-1;
      $19 = ($18>>>0)<(2);
      if ($19) {
       $$2 = $12;
       break L1;
      }
      $20 = $15;
      $21 = ((($20)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args,$21);
      $22 = HEAP32[$14>>2]|0;
      $23 = ((($22)) + -24|0);
      $24 = $22;
      while(1) {
       $25 = ($24|0)==($23|0);
       if ($25) {
        break;
       }
       $26 = ((($24)) + -24|0);
       HEAP32[$14>>2] = $26;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
       $$pre$i = HEAP32[$14>>2]|0;
       $24 = $$pre$i;
      }
      $27 = ((($22)) + -48|0);
      $28 = HEAP8[$args>>0]|0;
      $29 = $28 & 1;
      $30 = ($29<<24>>24)==(0);
      $31 = ((($args)) + 8|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ((($args)) + 1|0);
      $34 = $30 ? $33 : $32;
      $35 = ((($args)) + 4|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = $28&255;
      $38 = $37 >>> 1;
      $39 = $30 ? $38 : $36;
      __THREW__ = 0;
      (invoke_iiii(91,($27|0),($34|0),($39|0))|0);
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       $42 = ___cxa_find_matching_catch_2()|0;
       $43 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
       $$02 = $43;$$03 = $42;
       break L3;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
       $$2 = $12;
       break L1;
      }
     } else {
      label = 21;
     }
     break;
    }
    default: {
     label = 21;
    }
    }
   } while(0);
   do {
    if ((label|0) == 21) {
     $55 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $56 = ($55|0)==($first|0);
     if (!($56)) {
      $$2 = $55;
      break L1;
     }
     $57 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $58 = ($57|0)==($first|0);
     if ($58) {
      $$2 = $first;
      break L1;
     }
     $59 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($57,$last,$db)|0);
     $60 = ($59|0)==($57|0);
     if ($60) {
      $$2 = $57;
      break L1;
     }
     $61 = ((($db)) + 4|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = HEAP32[$db>>2]|0;
     $64 = (($62) - ($63))|0;
     $65 = (($64|0) / 24)&-1;
     $66 = ($65>>>0)<(2);
     if ($66) {
      $$2 = $59;
      break L1;
     }
     $67 = $62;
     $68 = ((($67)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args3,$68);
     $69 = HEAP32[$61>>2]|0;
     $70 = ((($69)) + -24|0);
     $71 = $69;
     while(1) {
      $72 = ($71|0)==($70|0);
      if ($72) {
       break;
      }
      $73 = ((($71)) + -24|0);
      HEAP32[$61>>2] = $73;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($73);
      $$pre$i9 = HEAP32[$61>>2]|0;
      $71 = $$pre$i9;
     }
     $74 = ((($69)) + -48|0);
     $75 = HEAP8[$args3>>0]|0;
     $76 = $75 & 1;
     $77 = ($76<<24>>24)==(0);
     $78 = ((($args3)) + 8|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ((($args3)) + 1|0);
     $81 = $77 ? $80 : $79;
     $82 = ((($args3)) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $75&255;
     $85 = $84 >>> 1;
     $86 = $77 ? $85 : $83;
     __THREW__ = 0;
     (invoke_iiii(91,($74|0),($81|0),($86|0))|0);
     $87 = __THREW__; __THREW__ = 0;
     $88 = $87&1;
     if ($88) {
      $89 = ___cxa_find_matching_catch_2()|0;
      $90 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args3);
      $$02 = $90;$$03 = $89;
      break;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args3);
      $$2 = $59;
      break L1;
     }
    }
   } while(0);
   ___resumeException($$03|0);
   // unreachable;
  } else {
   $$2 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0$i$i$i = 0, $$0$i$i$i103 = 0, $$0$i$i$i108 = 0, $$0$i$i$i113 = 0, $$0$i$i$i118 = 0, $$0$i$i$i123 = 0, $$0$i$i$i128 = 0, $$0$i$i$i13 = 0, $$0$i$i$i133 = 0, $$0$i$i$i138 = 0, $$0$i$i$i143 = 0, $$0$i$i$i148 = 0, $$0$i$i$i153 = 0, $$0$i$i$i158 = 0, $$0$i$i$i163 = 0, $$0$i$i$i168 = 0, $$0$i$i$i173 = 0, $$0$i$i$i178 = 0, $$0$i$i$i18 = 0, $$0$i$i$i183 = 0;
 var $$0$i$i$i188 = 0, $$0$i$i$i193 = 0, $$0$i$i$i198 = 0, $$0$i$i$i203 = 0, $$0$i$i$i208 = 0, $$0$i$i$i213 = 0, $$0$i$i$i218 = 0, $$0$i$i$i223 = 0, $$0$i$i$i228 = 0, $$0$i$i$i23 = 0, $$0$i$i$i233 = 0, $$0$i$i$i28 = 0, $$0$i$i$i33 = 0, $$0$i$i$i38 = 0, $$0$i$i$i43 = 0, $$0$i$i$i48 = 0, $$0$i$i$i53 = 0, $$0$i$i$i58 = 0, $$0$i$i$i63 = 0, $$0$i$i$i68 = 0;
 var $$0$i$i$i73 = 0, $$0$i$i$i78 = 0, $$0$i$i$i83 = 0, $$0$i$i$i88 = 0, $$0$i$i$i93 = 0, $$0$i$i$i98 = 0, $$010 = 0, $$011 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0;
 var $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0;
 var $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0;
 var $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0;
 var $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0;
 var $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0;
 var $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0;
 var $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0;
 var $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0;
 var $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0;
 var $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0;
 var $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0;
 var $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0;
 var $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0;
 var $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0;
 var $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0;
 var $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0;
 var $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0;
 var $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0;
 var $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__i$0$i$i$i = 0, $__v$i$i = 0, $__v$i$i102 = 0, $__v$i$i107 = 0, $__v$i$i112 = 0, $__v$i$i117 = 0, $__v$i$i12 = 0, $__v$i$i122 = 0, $__v$i$i127 = 0, $__v$i$i132 = 0, $__v$i$i137 = 0, $__v$i$i142 = 0, $__v$i$i147 = 0, $__v$i$i152 = 0, $__v$i$i157 = 0;
 var $__v$i$i162 = 0, $__v$i$i167 = 0, $__v$i$i17 = 0, $__v$i$i172 = 0, $__v$i$i177 = 0, $__v$i$i182 = 0, $__v$i$i187 = 0, $__v$i$i192 = 0, $__v$i$i197 = 0, $__v$i$i202 = 0, $__v$i$i207 = 0, $__v$i$i212 = 0, $__v$i$i217 = 0, $__v$i$i22 = 0, $__v$i$i222 = 0, $__v$i$i227 = 0, $__v$i$i232 = 0, $__v$i$i27 = 0, $__v$i$i32 = 0, $__v$i$i37 = 0;
 var $__v$i$i42 = 0, $__v$i$i47 = 0, $__v$i$i52 = 0, $__v$i$i57 = 0, $__v$i$i62 = 0, $__v$i$i67 = 0, $__v$i$i72 = 0, $__v$i$i77 = 0, $__v$i$i82 = 0, $__v$i$i87 = 0, $__v$i$i92 = 0, $__v$i$i97 = 0, $exitcond$i$i$i = 0, $isdigit = 0, $isdigittmp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2032|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i232 = sp + 2004|0;
 $__v$i$i227 = sp + 1984|0;
 $__v$i$i222 = sp + 1964|0;
 $__v$i$i217 = sp + 1944|0;
 $__v$i$i212 = sp + 1924|0;
 $__v$i$i207 = sp + 1904|0;
 $__v$i$i202 = sp + 1884|0;
 $__v$i$i197 = sp + 1864|0;
 $__v$i$i192 = sp + 1844|0;
 $__v$i$i187 = sp + 1824|0;
 $__v$i$i182 = sp + 1804|0;
 $__v$i$i177 = sp + 1784|0;
 $__v$i$i172 = sp + 1764|0;
 $__v$i$i167 = sp + 1744|0;
 $__v$i$i162 = sp + 1724|0;
 $__v$i$i157 = sp + 1704|0;
 $__v$i$i152 = sp + 1684|0;
 $__v$i$i147 = sp + 1664|0;
 $__v$i$i142 = sp + 1644|0;
 $__v$i$i137 = sp + 1624|0;
 $__v$i$i132 = sp + 1604|0;
 $__v$i$i127 = sp + 1584|0;
 $__v$i$i122 = sp + 1564|0;
 $__v$i$i117 = sp + 1544|0;
 $__v$i$i112 = sp + 1524|0;
 $__v$i$i107 = sp + 1504|0;
 $__v$i$i102 = sp + 1484|0;
 $__v$i$i97 = sp + 1464|0;
 $__v$i$i92 = sp + 1444|0;
 $__v$i$i87 = sp + 1424|0;
 $__v$i$i82 = sp + 1404|0;
 $__v$i$i77 = sp + 1384|0;
 $__v$i$i72 = sp + 1364|0;
 $__v$i$i67 = sp + 1344|0;
 $__v$i$i62 = sp + 1324|0;
 $__v$i$i57 = sp + 1304|0;
 $__v$i$i52 = sp + 1284|0;
 $__v$i$i47 = sp + 1264|0;
 $__v$i$i42 = sp + 1244|0;
 $__v$i$i37 = sp + 1224|0;
 $__v$i$i32 = sp + 1204|0;
 $__v$i$i27 = sp + 1184|0;
 $__v$i$i22 = sp + 1164|0;
 $__v$i$i17 = sp + 1144|0;
 $__v$i$i12 = sp + 1124|0;
 $__v$i$i = sp + 1104|0;
 $0 = sp + 1080|0;
 $1 = sp + 1056|0;
 $2 = sp + 1032|0;
 $3 = sp + 1008|0;
 $4 = sp + 984|0;
 $5 = sp + 960|0;
 $6 = sp + 936|0;
 $7 = sp + 912|0;
 $8 = sp + 888|0;
 $9 = sp + 864|0;
 $10 = sp + 840|0;
 $11 = sp + 816|0;
 $12 = sp + 792|0;
 $13 = sp + 768|0;
 $14 = sp + 744|0;
 $15 = sp + 720|0;
 $16 = sp + 696|0;
 $17 = sp + 672|0;
 $18 = sp + 648|0;
 $19 = sp + 624|0;
 $20 = sp + 600|0;
 $21 = sp + 576|0;
 $22 = sp + 552|0;
 $23 = sp + 528|0;
 $24 = sp + 504|0;
 $25 = sp + 480|0;
 $26 = sp + 456|0;
 $27 = sp + 432|0;
 $28 = sp + 408|0;
 $29 = sp + 384|0;
 $30 = sp + 360|0;
 $31 = sp + 336|0;
 $32 = sp + 312|0;
 $33 = sp + 288|0;
 $34 = sp + 264|0;
 $35 = sp + 240|0;
 $36 = sp + 216|0;
 $37 = sp + 192|0;
 $38 = sp + 168|0;
 $39 = sp + 144|0;
 $40 = sp + 120|0;
 $41 = sp + 96|0;
 $42 = sp + 72|0;
 $43 = sp + 48|0;
 $44 = sp + 24|0;
 $45 = sp;
 $46 = $last;
 $47 = $first;
 $48 = (($46) - ($47))|0;
 $49 = ($48|0)>(1);
 L1: do {
  if ($49) {
   $50 = HEAP8[$first>>0]|0;
   $51 = $50 << 24 >> 24;
   L3: do {
    switch ($51|0) {
    case 97:  {
     $52 = ((($first)) + 1|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53 << 24 >> 24;
     switch ($54|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($0,5190);
      $55 = ((($db)) + 4|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ((($db)) + 8|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ($56>>>0)<($58>>>0);
      $60 = $58;
      if ($59) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($56,$0);
       $61 = HEAP32[$55>>2]|0;
       $62 = ((($61)) + 24|0);
       HEAP32[$55>>2] = $62;
      } else {
       $63 = $56;
       $64 = ((($db)) + 12|0);
       $65 = HEAP32[$db>>2]|0;
       $66 = (($63) - ($65))|0;
       $67 = (($66|0) / 24)&-1;
       $68 = (($67) + 1)|0;
       $69 = ($66|0)<(-24);
       if ($69) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $70 = __THREW__; __THREW__ = 0;
        $71 = ___cxa_find_matching_catch_2()|0;
        $72 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
        $$010 = $71;$$011 = $72;
        break L3;
       }
       $73 = (($60) - ($65))|0;
       $74 = (($73|0) / 24)&-1;
       $75 = ($74>>>0)<(1073741823);
       if ($75) {
        $76 = $74 << 1;
        $77 = ($76>>>0)<($68>>>0);
        $78 = $77 ? $68 : $76;
        $$0$i$i$i = $78;
       } else {
        $$0$i$i$i = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$67,$64);
       $79 = ((($__v$i$i)) + 8|0);
       $80 = HEAP32[$79>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($80,$0);
       $81 = ((($80)) + 24|0);
       HEAP32[$79>>2] = $81;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
      $82 = ((($first)) + 2|0);
      $$3 = $82;
      break L1;
      break;
     }
     case 110: case 100:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($1,5201);
      $83 = ((($db)) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($db)) + 8|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($84>>>0)<($86>>>0);
      $88 = $86;
      if ($87) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($84,$1);
       $89 = HEAP32[$83>>2]|0;
       $90 = ((($89)) + 24|0);
       HEAP32[$83>>2] = $90;
      } else {
       $91 = $84;
       $92 = ((($db)) + 12|0);
       $93 = HEAP32[$db>>2]|0;
       $94 = (($91) - ($93))|0;
       $95 = (($94|0) / 24)&-1;
       $96 = (($95) + 1)|0;
       $97 = ($94|0)<(-24);
       if ($97) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $98 = __THREW__; __THREW__ = 0;
        $99 = ___cxa_find_matching_catch_2()|0;
        $100 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
        $$010 = $99;$$011 = $100;
        break L3;
       }
       $101 = (($88) - ($93))|0;
       $102 = (($101|0) / 24)&-1;
       $103 = ($102>>>0)<(1073741823);
       if ($103) {
        $104 = $102 << 1;
        $105 = ($104>>>0)<($96>>>0);
        $106 = $105 ? $96 : $104;
        $$0$i$i$i13 = $106;
       } else {
        $$0$i$i$i13 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i12,$$0$i$i$i13,$95,$92);
       $107 = ((($__v$i$i12)) + 8|0);
       $108 = HEAP32[$107>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($108,$1);
       $109 = ((($108)) + 24|0);
       HEAP32[$107>>2] = $109;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i12);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i12);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      $110 = ((($first)) + 2|0);
      $$3 = $110;
      break L1;
      break;
     }
     case 78:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($2,5211);
      $111 = ((($db)) + 4|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ((($db)) + 8|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = ($112>>>0)<($114>>>0);
      $116 = $114;
      if ($115) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($112,$2);
       $117 = HEAP32[$111>>2]|0;
       $118 = ((($117)) + 24|0);
       HEAP32[$111>>2] = $118;
      } else {
       $119 = $112;
       $120 = ((($db)) + 12|0);
       $121 = HEAP32[$db>>2]|0;
       $122 = (($119) - ($121))|0;
       $123 = (($122|0) / 24)&-1;
       $124 = (($123) + 1)|0;
       $125 = ($122|0)<(-24);
       if ($125) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $126 = __THREW__; __THREW__ = 0;
        $127 = ___cxa_find_matching_catch_2()|0;
        $128 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
        $$010 = $127;$$011 = $128;
        break L3;
       }
       $129 = (($116) - ($121))|0;
       $130 = (($129|0) / 24)&-1;
       $131 = ($130>>>0)<(1073741823);
       if ($131) {
        $132 = $130 << 1;
        $133 = ($132>>>0)<($124>>>0);
        $134 = $133 ? $124 : $132;
        $$0$i$i$i18 = $134;
       } else {
        $$0$i$i$i18 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i17,$$0$i$i$i18,$123,$120);
       $135 = ((($__v$i$i17)) + 8|0);
       $136 = HEAP32[$135>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($136,$2);
       $137 = ((($136)) + 24|0);
       HEAP32[$135>>2] = $137;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i17);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i17);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
      $138 = ((($first)) + 2|0);
      $$3 = $138;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($3,5222);
      $139 = ((($db)) + 4|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($db)) + 8|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140>>>0)<($142>>>0);
      $144 = $142;
      if ($143) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($140,$3);
       $145 = HEAP32[$139>>2]|0;
       $146 = ((($145)) + 24|0);
       HEAP32[$139>>2] = $146;
      } else {
       $147 = $140;
       $148 = ((($db)) + 12|0);
       $149 = HEAP32[$db>>2]|0;
       $150 = (($147) - ($149))|0;
       $151 = (($150|0) / 24)&-1;
       $152 = (($151) + 1)|0;
       $153 = ($150|0)<(-24);
       if ($153) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $154 = __THREW__; __THREW__ = 0;
        $155 = ___cxa_find_matching_catch_2()|0;
        $156 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
        $$010 = $155;$$011 = $156;
        break L3;
       }
       $157 = (($144) - ($149))|0;
       $158 = (($157|0) / 24)&-1;
       $159 = ($158>>>0)<(1073741823);
       if ($159) {
        $160 = $158 << 1;
        $161 = ($160>>>0)<($152>>>0);
        $162 = $161 ? $152 : $160;
        $$0$i$i$i23 = $162;
       } else {
        $$0$i$i$i23 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i22,$$0$i$i$i23,$151,$148);
       $163 = ((($__v$i$i22)) + 8|0);
       $164 = HEAP32[$163>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($164,$3);
       $165 = ((($164)) + 24|0);
       HEAP32[$163>>2] = $165;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i22);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i22);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $166 = ((($first)) + 2|0);
      $$3 = $166;
      break L1;
      break;
     }
     default: {
      $$3 = $first;
      break L1;
     }
     }
     break;
    }
    case 99:  {
     $167 = ((($first)) + 1|0);
     $168 = HEAP8[$167>>0]|0;
     $169 = $168 << 24 >> 24;
     switch ($169|0) {
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($4,5232);
      $170 = ((($db)) + 4|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ((($db)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($171>>>0)<($173>>>0);
      $175 = $173;
      if ($174) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($171,$4);
       $176 = HEAP32[$170>>2]|0;
       $177 = ((($176)) + 24|0);
       HEAP32[$170>>2] = $177;
      } else {
       $178 = $171;
       $179 = ((($db)) + 12|0);
       $180 = HEAP32[$db>>2]|0;
       $181 = (($178) - ($180))|0;
       $182 = (($181|0) / 24)&-1;
       $183 = (($182) + 1)|0;
       $184 = ($181|0)<(-24);
       if ($184) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $185 = __THREW__; __THREW__ = 0;
        $186 = ___cxa_find_matching_catch_2()|0;
        $187 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
        $$010 = $186;$$011 = $187;
        break L3;
       }
       $188 = (($175) - ($180))|0;
       $189 = (($188|0) / 24)&-1;
       $190 = ($189>>>0)<(1073741823);
       if ($190) {
        $191 = $189 << 1;
        $192 = ($191>>>0)<($183>>>0);
        $193 = $192 ? $183 : $191;
        $$0$i$i$i28 = $193;
       } else {
        $$0$i$i$i28 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i27,$$0$i$i$i28,$182,$179);
       $194 = ((($__v$i$i27)) + 8|0);
       $195 = HEAP32[$194>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($195,$4);
       $196 = ((($195)) + 24|0);
       HEAP32[$194>>2] = $196;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i27);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i27);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      $197 = ((($first)) + 2|0);
      $$3 = $197;
      break L1;
      break;
     }
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($5,5243);
      $198 = ((($db)) + 4|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = ((($db)) + 8|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = ($199>>>0)<($201>>>0);
      $203 = $201;
      if ($202) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($199,$5);
       $204 = HEAP32[$198>>2]|0;
       $205 = ((($204)) + 24|0);
       HEAP32[$198>>2] = $205;
      } else {
       $206 = $199;
       $207 = ((($db)) + 12|0);
       $208 = HEAP32[$db>>2]|0;
       $209 = (($206) - ($208))|0;
       $210 = (($209|0) / 24)&-1;
       $211 = (($210) + 1)|0;
       $212 = ($209|0)<(-24);
       if ($212) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $213 = __THREW__; __THREW__ = 0;
        $214 = ___cxa_find_matching_catch_2()|0;
        $215 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        $$010 = $214;$$011 = $215;
        break L3;
       }
       $216 = (($203) - ($208))|0;
       $217 = (($216|0) / 24)&-1;
       $218 = ($217>>>0)<(1073741823);
       if ($218) {
        $219 = $217 << 1;
        $220 = ($219>>>0)<($211>>>0);
        $221 = $220 ? $211 : $219;
        $$0$i$i$i33 = $221;
       } else {
        $$0$i$i$i33 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i32,$$0$i$i$i33,$210,$207);
       $222 = ((($__v$i$i32)) + 8|0);
       $223 = HEAP32[$222>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($223,$5);
       $224 = ((($223)) + 24|0);
       HEAP32[$222>>2] = $224;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i32);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i32);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      $225 = ((($first)) + 2|0);
      $$3 = $225;
      break L1;
      break;
     }
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($6,5253);
      $226 = ((($db)) + 4|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = ((($db)) + 8|0);
      $229 = HEAP32[$228>>2]|0;
      $230 = ($227>>>0)<($229>>>0);
      $231 = $229;
      if ($230) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($227,$6);
       $232 = HEAP32[$226>>2]|0;
       $233 = ((($232)) + 24|0);
       HEAP32[$226>>2] = $233;
      } else {
       $234 = $227;
       $235 = ((($db)) + 12|0);
       $236 = HEAP32[$db>>2]|0;
       $237 = (($234) - ($236))|0;
       $238 = (($237|0) / 24)&-1;
       $239 = (($238) + 1)|0;
       $240 = ($237|0)<(-24);
       if ($240) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $241 = __THREW__; __THREW__ = 0;
        $242 = ___cxa_find_matching_catch_2()|0;
        $243 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
        $$010 = $242;$$011 = $243;
        break L3;
       }
       $244 = (($231) - ($236))|0;
       $245 = (($244|0) / 24)&-1;
       $246 = ($245>>>0)<(1073741823);
       if ($246) {
        $247 = $245 << 1;
        $248 = ($247>>>0)<($239>>>0);
        $249 = $248 ? $239 : $247;
        $$0$i$i$i38 = $249;
       } else {
        $$0$i$i$i38 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i37,$$0$i$i$i38,$238,$235);
       $250 = ((($__v$i$i37)) + 8|0);
       $251 = HEAP32[$250>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($251,$6);
       $252 = ((($251)) + 24|0);
       HEAP32[$250>>2] = $252;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i37);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i37);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
      $253 = ((($first)) + 2|0);
      $$3 = $253;
      break L1;
      break;
     }
     case 118:  {
      $254 = ((($db)) + 63|0);
      $255 = HEAP8[$254>>0]|0;
      HEAP8[$254>>0] = 0;
      $256 = ((($first)) + 2|0);
      $257 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($256,$last,$db)|0);
      HEAP8[$254>>0] = $255;
      $258 = ($257|0)==($256|0);
      if ($258) {
       $$3 = $first;
       break L1;
      }
      $259 = HEAP32[$db>>2]|0;
      $260 = ((($db)) + 4|0);
      $261 = HEAP32[$260>>2]|0;
      $262 = ($259|0)==($261|0);
      if ($262) {
       $$3 = $first;
       break L1;
      }
      $263 = ((($261)) + -24|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($263,0,5263)|0);
      $264 = ((($db)) + 60|0);
      HEAP8[$264>>0] = 1;
      $$3 = $257;
      break L1;
      break;
     }
     default: {
      $$3 = $first;
      break L1;
     }
     }
     break;
    }
    case 100:  {
     $265 = ((($first)) + 1|0);
     $266 = HEAP8[$265>>0]|0;
     $267 = $266 << 24 >> 24;
     switch ($267|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($7,5273);
      $268 = ((($db)) + 4|0);
      $269 = HEAP32[$268>>2]|0;
      $270 = ((($db)) + 8|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = ($269>>>0)<($271>>>0);
      $273 = $271;
      if ($272) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($269,$7);
       $274 = HEAP32[$268>>2]|0;
       $275 = ((($274)) + 24|0);
       HEAP32[$268>>2] = $275;
      } else {
       $276 = $269;
       $277 = ((($db)) + 12|0);
       $278 = HEAP32[$db>>2]|0;
       $279 = (($276) - ($278))|0;
       $280 = (($279|0) / 24)&-1;
       $281 = (($280) + 1)|0;
       $282 = ($279|0)<(-24);
       if ($282) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $283 = __THREW__; __THREW__ = 0;
        $284 = ___cxa_find_matching_catch_2()|0;
        $285 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
        $$010 = $284;$$011 = $285;
        break L3;
       }
       $286 = (($273) - ($278))|0;
       $287 = (($286|0) / 24)&-1;
       $288 = ($287>>>0)<(1073741823);
       if ($288) {
        $289 = $287 << 1;
        $290 = ($289>>>0)<($281>>>0);
        $291 = $290 ? $281 : $289;
        $$0$i$i$i43 = $291;
       } else {
        $$0$i$i$i43 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i42,$$0$i$i$i43,$280,$277);
       $292 = ((($__v$i$i42)) + 8|0);
       $293 = HEAP32[$292>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($293,$7);
       $294 = ((($293)) + 24|0);
       HEAP32[$292>>2] = $294;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i42);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i42);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
      $295 = ((($first)) + 2|0);
      $$3 = $295;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($8,5291);
      $296 = ((($db)) + 4|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = ((($db)) + 8|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = ($297>>>0)<($299>>>0);
      $301 = $299;
      if ($300) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($297,$8);
       $302 = HEAP32[$296>>2]|0;
       $303 = ((($302)) + 24|0);
       HEAP32[$296>>2] = $303;
      } else {
       $304 = $297;
       $305 = ((($db)) + 12|0);
       $306 = HEAP32[$db>>2]|0;
       $307 = (($304) - ($306))|0;
       $308 = (($307|0) / 24)&-1;
       $309 = (($308) + 1)|0;
       $310 = ($307|0)<(-24);
       if ($310) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $311 = __THREW__; __THREW__ = 0;
        $312 = ___cxa_find_matching_catch_2()|0;
        $313 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
        $$010 = $312;$$011 = $313;
        break L3;
       }
       $314 = (($301) - ($306))|0;
       $315 = (($314|0) / 24)&-1;
       $316 = ($315>>>0)<(1073741823);
       if ($316) {
        $317 = $315 << 1;
        $318 = ($317>>>0)<($309>>>0);
        $319 = $318 ? $309 : $317;
        $$0$i$i$i48 = $319;
       } else {
        $$0$i$i$i48 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i47,$$0$i$i$i48,$308,$305);
       $320 = ((($__v$i$i47)) + 8|0);
       $321 = HEAP32[$320>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($321,$8);
       $322 = ((($321)) + 24|0);
       HEAP32[$320>>2] = $322;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i47);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i47);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
      $323 = ((($first)) + 2|0);
      $$3 = $323;
      break L1;
      break;
     }
     case 108:  {
      $324 = (_malloc(16)|0);
      $325 = ((($9)) + 8|0);
      HEAP32[$325>>2] = $324;
      HEAP32[$9>>2] = 17;
      $326 = ((($9)) + 4|0);
      HEAP32[$326>>2] = 15;
      dest=$324; src=5301; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      $327 = ((($324)) + 15|0);
      HEAP8[$327>>0] = 0;
      $328 = ((($9)) + 12|0);
      $__i$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $329 = (($328) + ($__i$0$i$i$i<<2)|0);
       HEAP32[$329>>2] = 0;
       $330 = (($__i$0$i$i$i) + 1)|0;
       $__i$0$i$i$i = $330;
      }
      $331 = ((($db)) + 4|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = ((($db)) + 8|0);
      $334 = HEAP32[$333>>2]|0;
      $335 = ($332>>>0)<($334>>>0);
      $336 = $334;
      if ($335) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($332,$9);
       $337 = HEAP32[$331>>2]|0;
       $338 = ((($337)) + 24|0);
       HEAP32[$331>>2] = $338;
      } else {
       $339 = $332;
       $340 = ((($db)) + 12|0);
       $341 = HEAP32[$db>>2]|0;
       $342 = (($339) - ($341))|0;
       $343 = (($342|0) / 24)&-1;
       $344 = (($343) + 1)|0;
       $345 = ($342|0)<(-24);
       if ($345) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $346 = __THREW__; __THREW__ = 0;
        $347 = ___cxa_find_matching_catch_2()|0;
        $348 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
        $$010 = $347;$$011 = $348;
        break L3;
       }
       $349 = (($336) - ($341))|0;
       $350 = (($349|0) / 24)&-1;
       $351 = ($350>>>0)<(1073741823);
       if ($351) {
        $352 = $350 << 1;
        $353 = ($352>>>0)<($344>>>0);
        $354 = $353 ? $344 : $352;
        $$0$i$i$i53 = $354;
       } else {
        $$0$i$i$i53 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i52,$$0$i$i$i53,$343,$340);
       $355 = ((($__v$i$i52)) + 8|0);
       $356 = HEAP32[$355>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($356,$9);
       $357 = ((($356)) + 24|0);
       HEAP32[$355>>2] = $357;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i52);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i52);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
      $358 = ((($first)) + 2|0);
      $$3 = $358;
      break L1;
      break;
     }
     case 118:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($10,5317);
      $359 = ((($db)) + 4|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = ((($db)) + 8|0);
      $362 = HEAP32[$361>>2]|0;
      $363 = ($360>>>0)<($362>>>0);
      $364 = $362;
      if ($363) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($360,$10);
       $365 = HEAP32[$359>>2]|0;
       $366 = ((($365)) + 24|0);
       HEAP32[$359>>2] = $366;
      } else {
       $367 = $360;
       $368 = ((($db)) + 12|0);
       $369 = HEAP32[$db>>2]|0;
       $370 = (($367) - ($369))|0;
       $371 = (($370|0) / 24)&-1;
       $372 = (($371) + 1)|0;
       $373 = ($370|0)<(-24);
       if ($373) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $374 = __THREW__; __THREW__ = 0;
        $375 = ___cxa_find_matching_catch_2()|0;
        $376 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
        $$010 = $375;$$011 = $376;
        break L3;
       }
       $377 = (($364) - ($369))|0;
       $378 = (($377|0) / 24)&-1;
       $379 = ($378>>>0)<(1073741823);
       if ($379) {
        $380 = $378 << 1;
        $381 = ($380>>>0)<($372>>>0);
        $382 = $381 ? $372 : $380;
        $$0$i$i$i58 = $382;
       } else {
        $$0$i$i$i58 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i57,$$0$i$i$i58,$371,$368);
       $383 = ((($__v$i$i57)) + 8|0);
       $384 = HEAP32[$383>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($384,$10);
       $385 = ((($384)) + 24|0);
       HEAP32[$383>>2] = $385;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i57);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i57);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
      $386 = ((($first)) + 2|0);
      $$3 = $386;
      break L1;
      break;
     }
     case 86:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($11,5327);
      $387 = ((($db)) + 4|0);
      $388 = HEAP32[$387>>2]|0;
      $389 = ((($db)) + 8|0);
      $390 = HEAP32[$389>>2]|0;
      $391 = ($388>>>0)<($390>>>0);
      $392 = $390;
      if ($391) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($388,$11);
       $393 = HEAP32[$387>>2]|0;
       $394 = ((($393)) + 24|0);
       HEAP32[$387>>2] = $394;
      } else {
       $395 = $388;
       $396 = ((($db)) + 12|0);
       $397 = HEAP32[$db>>2]|0;
       $398 = (($395) - ($397))|0;
       $399 = (($398|0) / 24)&-1;
       $400 = (($399) + 1)|0;
       $401 = ($398|0)<(-24);
       if ($401) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $402 = __THREW__; __THREW__ = 0;
        $403 = ___cxa_find_matching_catch_2()|0;
        $404 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
        $$010 = $403;$$011 = $404;
        break L3;
       }
       $405 = (($392) - ($397))|0;
       $406 = (($405|0) / 24)&-1;
       $407 = ($406>>>0)<(1073741823);
       if ($407) {
        $408 = $406 << 1;
        $409 = ($408>>>0)<($400>>>0);
        $410 = $409 ? $400 : $408;
        $$0$i$i$i63 = $410;
       } else {
        $$0$i$i$i63 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i62,$$0$i$i$i63,$399,$396);
       $411 = ((($__v$i$i62)) + 8|0);
       $412 = HEAP32[$411>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($412,$11);
       $413 = ((($412)) + 24|0);
       HEAP32[$411>>2] = $413;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i62);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i62);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
      $414 = ((($first)) + 2|0);
      $$3 = $414;
      break L1;
      break;
     }
     default: {
      $$3 = $first;
      break L1;
     }
     }
     break;
    }
    case 101:  {
     $415 = ((($first)) + 1|0);
     $416 = HEAP8[$415>>0]|0;
     $417 = $416 << 24 >> 24;
     switch ($417|0) {
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($12,5338);
      $418 = ((($db)) + 4|0);
      $419 = HEAP32[$418>>2]|0;
      $420 = ((($db)) + 8|0);
      $421 = HEAP32[$420>>2]|0;
      $422 = ($419>>>0)<($421>>>0);
      $423 = $421;
      if ($422) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($419,$12);
       $424 = HEAP32[$418>>2]|0;
       $425 = ((($424)) + 24|0);
       HEAP32[$418>>2] = $425;
      } else {
       $426 = $419;
       $427 = ((($db)) + 12|0);
       $428 = HEAP32[$db>>2]|0;
       $429 = (($426) - ($428))|0;
       $430 = (($429|0) / 24)&-1;
       $431 = (($430) + 1)|0;
       $432 = ($429|0)<(-24);
       if ($432) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $433 = __THREW__; __THREW__ = 0;
        $434 = ___cxa_find_matching_catch_2()|0;
        $435 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
        $$010 = $434;$$011 = $435;
        break L3;
       }
       $436 = (($423) - ($428))|0;
       $437 = (($436|0) / 24)&-1;
       $438 = ($437>>>0)<(1073741823);
       if ($438) {
        $439 = $437 << 1;
        $440 = ($439>>>0)<($431>>>0);
        $441 = $440 ? $431 : $439;
        $$0$i$i$i68 = $441;
       } else {
        $$0$i$i$i68 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i67,$$0$i$i$i68,$430,$427);
       $442 = ((($__v$i$i67)) + 8|0);
       $443 = HEAP32[$442>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($443,$12);
       $444 = ((($443)) + 24|0);
       HEAP32[$442>>2] = $444;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i67);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i67);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
      $445 = ((($first)) + 2|0);
      $$3 = $445;
      break L1;
      break;
     }
     case 79:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($13,5348);
      $446 = ((($db)) + 4|0);
      $447 = HEAP32[$446>>2]|0;
      $448 = ((($db)) + 8|0);
      $449 = HEAP32[$448>>2]|0;
      $450 = ($447>>>0)<($449>>>0);
      $451 = $449;
      if ($450) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($447,$13);
       $452 = HEAP32[$446>>2]|0;
       $453 = ((($452)) + 24|0);
       HEAP32[$446>>2] = $453;
      } else {
       $454 = $447;
       $455 = ((($db)) + 12|0);
       $456 = HEAP32[$db>>2]|0;
       $457 = (($454) - ($456))|0;
       $458 = (($457|0) / 24)&-1;
       $459 = (($458) + 1)|0;
       $460 = ($457|0)<(-24);
       if ($460) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $461 = __THREW__; __THREW__ = 0;
        $462 = ___cxa_find_matching_catch_2()|0;
        $463 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
        $$010 = $462;$$011 = $463;
        break L3;
       }
       $464 = (($451) - ($456))|0;
       $465 = (($464|0) / 24)&-1;
       $466 = ($465>>>0)<(1073741823);
       if ($466) {
        $467 = $465 << 1;
        $468 = ($467>>>0)<($459>>>0);
        $469 = $468 ? $459 : $467;
        $$0$i$i$i73 = $469;
       } else {
        $$0$i$i$i73 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i72,$$0$i$i$i73,$458,$455);
       $470 = ((($__v$i$i72)) + 8|0);
       $471 = HEAP32[$470>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($471,$13);
       $472 = ((($471)) + 24|0);
       HEAP32[$470>>2] = $472;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i72);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i72);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
      $473 = ((($first)) + 2|0);
      $$3 = $473;
      break L1;
      break;
     }
     case 113:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($14,5359);
      $474 = ((($db)) + 4|0);
      $475 = HEAP32[$474>>2]|0;
      $476 = ((($db)) + 8|0);
      $477 = HEAP32[$476>>2]|0;
      $478 = ($475>>>0)<($477>>>0);
      $479 = $477;
      if ($478) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($475,$14);
       $480 = HEAP32[$474>>2]|0;
       $481 = ((($480)) + 24|0);
       HEAP32[$474>>2] = $481;
      } else {
       $482 = $475;
       $483 = ((($db)) + 12|0);
       $484 = HEAP32[$db>>2]|0;
       $485 = (($482) - ($484))|0;
       $486 = (($485|0) / 24)&-1;
       $487 = (($486) + 1)|0;
       $488 = ($485|0)<(-24);
       if ($488) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $489 = __THREW__; __THREW__ = 0;
        $490 = ___cxa_find_matching_catch_2()|0;
        $491 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
        $$010 = $490;$$011 = $491;
        break L3;
       }
       $492 = (($479) - ($484))|0;
       $493 = (($492|0) / 24)&-1;
       $494 = ($493>>>0)<(1073741823);
       if ($494) {
        $495 = $493 << 1;
        $496 = ($495>>>0)<($487>>>0);
        $497 = $496 ? $487 : $495;
        $$0$i$i$i78 = $497;
       } else {
        $$0$i$i$i78 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i77,$$0$i$i$i78,$486,$483);
       $498 = ((($__v$i$i77)) + 8|0);
       $499 = HEAP32[$498>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($499,$14);
       $500 = ((($499)) + 24|0);
       HEAP32[$498>>2] = $500;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i77);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i77);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
      $501 = ((($first)) + 2|0);
      $$3 = $501;
      break L1;
      break;
     }
     default: {
      $$3 = $first;
      break L1;
     }
     }
     break;
    }
    case 103:  {
     $502 = ((($first)) + 1|0);
     $503 = HEAP8[$502>>0]|0;
     $504 = $503 << 24 >> 24;
     switch ($504|0) {
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($15,5370);
      $505 = ((($db)) + 4|0);
      $506 = HEAP32[$505>>2]|0;
      $507 = ((($db)) + 8|0);
      $508 = HEAP32[$507>>2]|0;
      $509 = ($506>>>0)<($508>>>0);
      $510 = $508;
      if ($509) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($506,$15);
       $511 = HEAP32[$505>>2]|0;
       $512 = ((($511)) + 24|0);
       HEAP32[$505>>2] = $512;
      } else {
       $513 = $506;
       $514 = ((($db)) + 12|0);
       $515 = HEAP32[$db>>2]|0;
       $516 = (($513) - ($515))|0;
       $517 = (($516|0) / 24)&-1;
       $518 = (($517) + 1)|0;
       $519 = ($516|0)<(-24);
       if ($519) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $520 = __THREW__; __THREW__ = 0;
        $521 = ___cxa_find_matching_catch_2()|0;
        $522 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
        $$010 = $521;$$011 = $522;
        break L3;
       }
       $523 = (($510) - ($515))|0;
       $524 = (($523|0) / 24)&-1;
       $525 = ($524>>>0)<(1073741823);
       if ($525) {
        $526 = $524 << 1;
        $527 = ($526>>>0)<($518>>>0);
        $528 = $527 ? $518 : $526;
        $$0$i$i$i83 = $528;
       } else {
        $$0$i$i$i83 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i82,$$0$i$i$i83,$517,$514);
       $529 = ((($__v$i$i82)) + 8|0);
       $530 = HEAP32[$529>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($530,$15);
       $531 = ((($530)) + 24|0);
       HEAP32[$529>>2] = $531;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i82);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i82);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
      $532 = ((($first)) + 2|0);
      $$3 = $532;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($16,5381);
      $533 = ((($db)) + 4|0);
      $534 = HEAP32[$533>>2]|0;
      $535 = ((($db)) + 8|0);
      $536 = HEAP32[$535>>2]|0;
      $537 = ($534>>>0)<($536>>>0);
      $538 = $536;
      if ($537) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($534,$16);
       $539 = HEAP32[$533>>2]|0;
       $540 = ((($539)) + 24|0);
       HEAP32[$533>>2] = $540;
      } else {
       $541 = $534;
       $542 = ((($db)) + 12|0);
       $543 = HEAP32[$db>>2]|0;
       $544 = (($541) - ($543))|0;
       $545 = (($544|0) / 24)&-1;
       $546 = (($545) + 1)|0;
       $547 = ($544|0)<(-24);
       if ($547) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $548 = __THREW__; __THREW__ = 0;
        $549 = ___cxa_find_matching_catch_2()|0;
        $550 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
        $$010 = $549;$$011 = $550;
        break L3;
       }
       $551 = (($538) - ($543))|0;
       $552 = (($551|0) / 24)&-1;
       $553 = ($552>>>0)<(1073741823);
       if ($553) {
        $554 = $552 << 1;
        $555 = ($554>>>0)<($546>>>0);
        $556 = $555 ? $546 : $554;
        $$0$i$i$i88 = $556;
       } else {
        $$0$i$i$i88 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i87,$$0$i$i$i88,$545,$542);
       $557 = ((($__v$i$i87)) + 8|0);
       $558 = HEAP32[$557>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($558,$16);
       $559 = ((($558)) + 24|0);
       HEAP32[$557>>2] = $559;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i87);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i87);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
      $560 = ((($first)) + 2|0);
      $$3 = $560;
      break L1;
      break;
     }
     default: {
      $$3 = $first;
      break L1;
     }
     }
     break;
    }
    case 105:  {
     $561 = ((($first)) + 1|0);
     $562 = HEAP8[$561>>0]|0;
     $563 = ($562<<24>>24)==(120);
     if (!($563)) {
      $$3 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($17,5391);
     $564 = ((($db)) + 4|0);
     $565 = HEAP32[$564>>2]|0;
     $566 = ((($db)) + 8|0);
     $567 = HEAP32[$566>>2]|0;
     $568 = ($565>>>0)<($567>>>0);
     $569 = $567;
     if ($568) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($565,$17);
      $570 = HEAP32[$564>>2]|0;
      $571 = ((($570)) + 24|0);
      HEAP32[$564>>2] = $571;
     } else {
      $572 = $565;
      $573 = ((($db)) + 12|0);
      $574 = HEAP32[$db>>2]|0;
      $575 = (($572) - ($574))|0;
      $576 = (($575|0) / 24)&-1;
      $577 = (($576) + 1)|0;
      $578 = ($575|0)<(-24);
      if ($578) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $579 = __THREW__; __THREW__ = 0;
       $580 = ___cxa_find_matching_catch_2()|0;
       $581 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
       $$010 = $580;$$011 = $581;
       break L3;
      }
      $582 = (($569) - ($574))|0;
      $583 = (($582|0) / 24)&-1;
      $584 = ($583>>>0)<(1073741823);
      if ($584) {
       $585 = $583 << 1;
       $586 = ($585>>>0)<($577>>>0);
       $587 = $586 ? $577 : $585;
       $$0$i$i$i93 = $587;
      } else {
       $$0$i$i$i93 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i92,$$0$i$i$i93,$576,$573);
      $588 = ((($__v$i$i92)) + 8|0);
      $589 = HEAP32[$588>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($589,$17);
      $590 = ((($589)) + 24|0);
      HEAP32[$588>>2] = $590;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i92);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i92);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
     $591 = ((($first)) + 2|0);
     $$3 = $591;
     break L1;
     break;
    }
    case 108:  {
     $592 = ((($first)) + 1|0);
     $593 = HEAP8[$592>>0]|0;
     $594 = $593 << 24 >> 24;
     switch ($594|0) {
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($18,5402);
      $595 = ((($db)) + 4|0);
      $596 = HEAP32[$595>>2]|0;
      $597 = ((($db)) + 8|0);
      $598 = HEAP32[$597>>2]|0;
      $599 = ($596>>>0)<($598>>>0);
      $600 = $598;
      if ($599) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($596,$18);
       $601 = HEAP32[$595>>2]|0;
       $602 = ((($601)) + 24|0);
       HEAP32[$595>>2] = $602;
      } else {
       $603 = $596;
       $604 = ((($db)) + 12|0);
       $605 = HEAP32[$db>>2]|0;
       $606 = (($603) - ($605))|0;
       $607 = (($606|0) / 24)&-1;
       $608 = (($607) + 1)|0;
       $609 = ($606|0)<(-24);
       if ($609) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $610 = __THREW__; __THREW__ = 0;
        $611 = ___cxa_find_matching_catch_2()|0;
        $612 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
        $$010 = $611;$$011 = $612;
        break L3;
       }
       $613 = (($600) - ($605))|0;
       $614 = (($613|0) / 24)&-1;
       $615 = ($614>>>0)<(1073741823);
       if ($615) {
        $616 = $614 << 1;
        $617 = ($616>>>0)<($608>>>0);
        $618 = $617 ? $608 : $616;
        $$0$i$i$i98 = $618;
       } else {
        $$0$i$i$i98 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i97,$$0$i$i$i98,$607,$604);
       $619 = ((($__v$i$i97)) + 8|0);
       $620 = HEAP32[$619>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($620,$18);
       $621 = ((($620)) + 24|0);
       HEAP32[$619>>2] = $621;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i97);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i97);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
      $622 = ((($first)) + 2|0);
      $$3 = $622;
      break L1;
      break;
     }
     case 105:  {
      $623 = ((($first)) + 2|0);
      $624 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($623,$last,$db)|0);
      $625 = ($624|0)==($623|0);
      if ($625) {
       $$3 = $first;
       break L1;
      }
      $626 = HEAP32[$db>>2]|0;
      $627 = ((($db)) + 4|0);
      $628 = HEAP32[$627>>2]|0;
      $629 = ($626|0)==($628|0);
      if ($629) {
       $$3 = $first;
       break L1;
      }
      $630 = ((($628)) + -24|0);
      (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($630,0,5413)|0);
      $$3 = $624;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($19,5425);
      $631 = ((($db)) + 4|0);
      $632 = HEAP32[$631>>2]|0;
      $633 = ((($db)) + 8|0);
      $634 = HEAP32[$633>>2]|0;
      $635 = ($632>>>0)<($634>>>0);
      $636 = $634;
      if ($635) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($632,$19);
       $637 = HEAP32[$631>>2]|0;
       $638 = ((($637)) + 24|0);
       HEAP32[$631>>2] = $638;
      } else {
       $639 = $632;
       $640 = ((($db)) + 12|0);
       $641 = HEAP32[$db>>2]|0;
       $642 = (($639) - ($641))|0;
       $643 = (($642|0) / 24)&-1;
       $644 = (($643) + 1)|0;
       $645 = ($642|0)<(-24);
       if ($645) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $646 = __THREW__; __THREW__ = 0;
        $647 = ___cxa_find_matching_catch_2()|0;
        $648 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
        $$010 = $647;$$011 = $648;
        break L3;
       }
       $649 = (($636) - ($641))|0;
       $650 = (($649|0) / 24)&-1;
       $651 = ($650>>>0)<(1073741823);
       if ($651) {
        $652 = $650 << 1;
        $653 = ($652>>>0)<($644>>>0);
        $654 = $653 ? $644 : $652;
        $$0$i$i$i103 = $654;
       } else {
        $$0$i$i$i103 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i102,$$0$i$i$i103,$643,$640);
       $655 = ((($__v$i$i102)) + 8|0);
       $656 = HEAP32[$655>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($656,$19);
       $657 = ((($656)) + 24|0);
       HEAP32[$655>>2] = $657;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i102);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i102);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
      $658 = ((($first)) + 2|0);
      $$3 = $658;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($20,5436);
      $659 = ((($db)) + 4|0);
      $660 = HEAP32[$659>>2]|0;
      $661 = ((($db)) + 8|0);
      $662 = HEAP32[$661>>2]|0;
      $663 = ($660>>>0)<($662>>>0);
      $664 = $662;
      if ($663) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($660,$20);
       $665 = HEAP32[$659>>2]|0;
       $666 = ((($665)) + 24|0);
       HEAP32[$659>>2] = $666;
      } else {
       $667 = $660;
       $668 = ((($db)) + 12|0);
       $669 = HEAP32[$db>>2]|0;
       $670 = (($667) - ($669))|0;
       $671 = (($670|0) / 24)&-1;
       $672 = (($671) + 1)|0;
       $673 = ($670|0)<(-24);
       if ($673) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $674 = __THREW__; __THREW__ = 0;
        $675 = ___cxa_find_matching_catch_2()|0;
        $676 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
        $$010 = $675;$$011 = $676;
        break L3;
       }
       $677 = (($664) - ($669))|0;
       $678 = (($677|0) / 24)&-1;
       $679 = ($678>>>0)<(1073741823);
       if ($679) {
        $680 = $678 << 1;
        $681 = ($680>>>0)<($672>>>0);
        $682 = $681 ? $672 : $680;
        $$0$i$i$i108 = $682;
       } else {
        $$0$i$i$i108 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i107,$$0$i$i$i108,$671,$668);
       $683 = ((($__v$i$i107)) + 8|0);
       $684 = HEAP32[$683>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($684,$20);
       $685 = ((($684)) + 24|0);
       HEAP32[$683>>2] = $685;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i107);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i107);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
      $686 = ((($first)) + 2|0);
      $$3 = $686;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($21,5448);
      $687 = ((($db)) + 4|0);
      $688 = HEAP32[$687>>2]|0;
      $689 = ((($db)) + 8|0);
      $690 = HEAP32[$689>>2]|0;
      $691 = ($688>>>0)<($690>>>0);
      $692 = $690;
      if ($691) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($688,$21);
       $693 = HEAP32[$687>>2]|0;
       $694 = ((($693)) + 24|0);
       HEAP32[$687>>2] = $694;
      } else {
       $695 = $688;
       $696 = ((($db)) + 12|0);
       $697 = HEAP32[$db>>2]|0;
       $698 = (($695) - ($697))|0;
       $699 = (($698|0) / 24)&-1;
       $700 = (($699) + 1)|0;
       $701 = ($698|0)<(-24);
       if ($701) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $702 = __THREW__; __THREW__ = 0;
        $703 = ___cxa_find_matching_catch_2()|0;
        $704 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
        $$010 = $703;$$011 = $704;
        break L3;
       }
       $705 = (($692) - ($697))|0;
       $706 = (($705|0) / 24)&-1;
       $707 = ($706>>>0)<(1073741823);
       if ($707) {
        $708 = $706 << 1;
        $709 = ($708>>>0)<($700>>>0);
        $710 = $709 ? $700 : $708;
        $$0$i$i$i113 = $710;
       } else {
        $$0$i$i$i113 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i112,$$0$i$i$i113,$699,$696);
       $711 = ((($__v$i$i112)) + 8|0);
       $712 = HEAP32[$711>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($712,$21);
       $713 = ((($712)) + 24|0);
       HEAP32[$711>>2] = $713;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i112);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i112);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
      $714 = ((($first)) + 2|0);
      $$3 = $714;
      break L1;
      break;
     }
     default: {
      $$3 = $first;
      break L1;
     }
     }
     break;
    }
    case 109:  {
     $715 = ((($first)) + 1|0);
     $716 = HEAP8[$715>>0]|0;
     $717 = $716 << 24 >> 24;
     switch ($717|0) {
     case 105:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($22,5458);
      $718 = ((($db)) + 4|0);
      $719 = HEAP32[$718>>2]|0;
      $720 = ((($db)) + 8|0);
      $721 = HEAP32[$720>>2]|0;
      $722 = ($719>>>0)<($721>>>0);
      $723 = $721;
      if ($722) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($719,$22);
       $724 = HEAP32[$718>>2]|0;
       $725 = ((($724)) + 24|0);
       HEAP32[$718>>2] = $725;
      } else {
       $726 = $719;
       $727 = ((($db)) + 12|0);
       $728 = HEAP32[$db>>2]|0;
       $729 = (($726) - ($728))|0;
       $730 = (($729|0) / 24)&-1;
       $731 = (($730) + 1)|0;
       $732 = ($729|0)<(-24);
       if ($732) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $733 = __THREW__; __THREW__ = 0;
        $734 = ___cxa_find_matching_catch_2()|0;
        $735 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
        $$010 = $734;$$011 = $735;
        break L3;
       }
       $736 = (($723) - ($728))|0;
       $737 = (($736|0) / 24)&-1;
       $738 = ($737>>>0)<(1073741823);
       if ($738) {
        $739 = $737 << 1;
        $740 = ($739>>>0)<($731>>>0);
        $741 = $740 ? $731 : $739;
        $$0$i$i$i118 = $741;
       } else {
        $$0$i$i$i118 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i117,$$0$i$i$i118,$730,$727);
       $742 = ((($__v$i$i117)) + 8|0);
       $743 = HEAP32[$742>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($743,$22);
       $744 = ((($743)) + 24|0);
       HEAP32[$742>>2] = $744;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i117);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i117);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
      $745 = ((($first)) + 2|0);
      $$3 = $745;
      break L1;
      break;
     }
     case 73:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($23,5468);
      $746 = ((($db)) + 4|0);
      $747 = HEAP32[$746>>2]|0;
      $748 = ((($db)) + 8|0);
      $749 = HEAP32[$748>>2]|0;
      $750 = ($747>>>0)<($749>>>0);
      $751 = $749;
      if ($750) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($747,$23);
       $752 = HEAP32[$746>>2]|0;
       $753 = ((($752)) + 24|0);
       HEAP32[$746>>2] = $753;
      } else {
       $754 = $747;
       $755 = ((($db)) + 12|0);
       $756 = HEAP32[$db>>2]|0;
       $757 = (($754) - ($756))|0;
       $758 = (($757|0) / 24)&-1;
       $759 = (($758) + 1)|0;
       $760 = ($757|0)<(-24);
       if ($760) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $761 = __THREW__; __THREW__ = 0;
        $762 = ___cxa_find_matching_catch_2()|0;
        $763 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
        $$010 = $762;$$011 = $763;
        break L3;
       }
       $764 = (($751) - ($756))|0;
       $765 = (($764|0) / 24)&-1;
       $766 = ($765>>>0)<(1073741823);
       if ($766) {
        $767 = $765 << 1;
        $768 = ($767>>>0)<($759>>>0);
        $769 = $768 ? $759 : $767;
        $$0$i$i$i123 = $769;
       } else {
        $$0$i$i$i123 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i122,$$0$i$i$i123,$758,$755);
       $770 = ((($__v$i$i122)) + 8|0);
       $771 = HEAP32[$770>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($771,$23);
       $772 = ((($771)) + 24|0);
       HEAP32[$770>>2] = $772;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i122);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i122);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
      $773 = ((($first)) + 2|0);
      $$3 = $773;
      break L1;
      break;
     }
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($24,5291);
      $774 = ((($db)) + 4|0);
      $775 = HEAP32[$774>>2]|0;
      $776 = ((($db)) + 8|0);
      $777 = HEAP32[$776>>2]|0;
      $778 = ($775>>>0)<($777>>>0);
      $779 = $777;
      if ($778) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($775,$24);
       $780 = HEAP32[$774>>2]|0;
       $781 = ((($780)) + 24|0);
       HEAP32[$774>>2] = $781;
      } else {
       $782 = $775;
       $783 = ((($db)) + 12|0);
       $784 = HEAP32[$db>>2]|0;
       $785 = (($782) - ($784))|0;
       $786 = (($785|0) / 24)&-1;
       $787 = (($786) + 1)|0;
       $788 = ($785|0)<(-24);
       if ($788) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $789 = __THREW__; __THREW__ = 0;
        $790 = ___cxa_find_matching_catch_2()|0;
        $791 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
        $$010 = $790;$$011 = $791;
        break L3;
       }
       $792 = (($779) - ($784))|0;
       $793 = (($792|0) / 24)&-1;
       $794 = ($793>>>0)<(1073741823);
       if ($794) {
        $795 = $793 << 1;
        $796 = ($795>>>0)<($787>>>0);
        $797 = $796 ? $787 : $795;
        $$0$i$i$i128 = $797;
       } else {
        $$0$i$i$i128 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i127,$$0$i$i$i128,$786,$783);
       $798 = ((($__v$i$i127)) + 8|0);
       $799 = HEAP32[$798>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($799,$24);
       $800 = ((($799)) + 24|0);
       HEAP32[$798>>2] = $800;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i127);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i127);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
      $801 = ((($first)) + 2|0);
      $$3 = $801;
      break L1;
      break;
     }
     case 76:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($25,5479);
      $802 = ((($db)) + 4|0);
      $803 = HEAP32[$802>>2]|0;
      $804 = ((($db)) + 8|0);
      $805 = HEAP32[$804>>2]|0;
      $806 = ($803>>>0)<($805>>>0);
      $807 = $805;
      if ($806) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($803,$25);
       $808 = HEAP32[$802>>2]|0;
       $809 = ((($808)) + 24|0);
       HEAP32[$802>>2] = $809;
      } else {
       $810 = $803;
       $811 = ((($db)) + 12|0);
       $812 = HEAP32[$db>>2]|0;
       $813 = (($810) - ($812))|0;
       $814 = (($813|0) / 24)&-1;
       $815 = (($814) + 1)|0;
       $816 = ($813|0)<(-24);
       if ($816) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $817 = __THREW__; __THREW__ = 0;
        $818 = ___cxa_find_matching_catch_2()|0;
        $819 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
        $$010 = $818;$$011 = $819;
        break L3;
       }
       $820 = (($807) - ($812))|0;
       $821 = (($820|0) / 24)&-1;
       $822 = ($821>>>0)<(1073741823);
       if ($822) {
        $823 = $821 << 1;
        $824 = ($823>>>0)<($815>>>0);
        $825 = $824 ? $815 : $823;
        $$0$i$i$i133 = $825;
       } else {
        $$0$i$i$i133 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i132,$$0$i$i$i133,$814,$811);
       $826 = ((($__v$i$i132)) + 8|0);
       $827 = HEAP32[$826>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($827,$25);
       $828 = ((($827)) + 24|0);
       HEAP32[$826>>2] = $828;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i132);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i132);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
      $829 = ((($first)) + 2|0);
      $$3 = $829;
      break L1;
      break;
     }
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($26,5490);
      $830 = ((($db)) + 4|0);
      $831 = HEAP32[$830>>2]|0;
      $832 = ((($db)) + 8|0);
      $833 = HEAP32[$832>>2]|0;
      $834 = ($831>>>0)<($833>>>0);
      $835 = $833;
      if ($834) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($831,$26);
       $836 = HEAP32[$830>>2]|0;
       $837 = ((($836)) + 24|0);
       HEAP32[$830>>2] = $837;
      } else {
       $838 = $831;
       $839 = ((($db)) + 12|0);
       $840 = HEAP32[$db>>2]|0;
       $841 = (($838) - ($840))|0;
       $842 = (($841|0) / 24)&-1;
       $843 = (($842) + 1)|0;
       $844 = ($841|0)<(-24);
       if ($844) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $845 = __THREW__; __THREW__ = 0;
        $846 = ___cxa_find_matching_catch_2()|0;
        $847 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
        $$010 = $846;$$011 = $847;
        break L3;
       }
       $848 = (($835) - ($840))|0;
       $849 = (($848|0) / 24)&-1;
       $850 = ($849>>>0)<(1073741823);
       if ($850) {
        $851 = $849 << 1;
        $852 = ($851>>>0)<($843>>>0);
        $853 = $852 ? $843 : $851;
        $$0$i$i$i138 = $853;
       } else {
        $$0$i$i$i138 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i137,$$0$i$i$i138,$842,$839);
       $854 = ((($__v$i$i137)) + 8|0);
       $855 = HEAP32[$854>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($855,$26);
       $856 = ((($855)) + 24|0);
       HEAP32[$854>>2] = $856;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i137);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i137);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
      $857 = ((($first)) + 2|0);
      $$3 = $857;
      break L1;
      break;
     }
     default: {
      $$3 = $first;
      break L1;
     }
     }
     break;
    }
    case 110:  {
     $858 = ((($first)) + 1|0);
     $859 = HEAP8[$858>>0]|0;
     $860 = $859 << 24 >> 24;
     switch ($860|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($27,5501);
      $861 = ((($db)) + 4|0);
      $862 = HEAP32[$861>>2]|0;
      $863 = ((($db)) + 8|0);
      $864 = HEAP32[$863>>2]|0;
      $865 = ($862>>>0)<($864>>>0);
      $866 = $864;
      if ($865) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($862,$27);
       $867 = HEAP32[$861>>2]|0;
       $868 = ((($867)) + 24|0);
       HEAP32[$861>>2] = $868;
      } else {
       $869 = $862;
       $870 = ((($db)) + 12|0);
       $871 = HEAP32[$db>>2]|0;
       $872 = (($869) - ($871))|0;
       $873 = (($872|0) / 24)&-1;
       $874 = (($873) + 1)|0;
       $875 = ($872|0)<(-24);
       if ($875) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $876 = __THREW__; __THREW__ = 0;
        $877 = ___cxa_find_matching_catch_2()|0;
        $878 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
        $$010 = $877;$$011 = $878;
        break L3;
       }
       $879 = (($866) - ($871))|0;
       $880 = (($879|0) / 24)&-1;
       $881 = ($880>>>0)<(1073741823);
       if ($881) {
        $882 = $880 << 1;
        $883 = ($882>>>0)<($874>>>0);
        $884 = $883 ? $874 : $882;
        $$0$i$i$i143 = $884;
       } else {
        $$0$i$i$i143 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i142,$$0$i$i$i143,$873,$870);
       $885 = ((($__v$i$i142)) + 8|0);
       $886 = HEAP32[$885>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($886,$27);
       $887 = ((($886)) + 24|0);
       HEAP32[$885>>2] = $887;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i142);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i142);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
      $888 = ((($first)) + 2|0);
      $$3 = $888;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($28,5516);
      $889 = ((($db)) + 4|0);
      $890 = HEAP32[$889>>2]|0;
      $891 = ((($db)) + 8|0);
      $892 = HEAP32[$891>>2]|0;
      $893 = ($890>>>0)<($892>>>0);
      $894 = $892;
      if ($893) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($890,$28);
       $895 = HEAP32[$889>>2]|0;
       $896 = ((($895)) + 24|0);
       HEAP32[$889>>2] = $896;
      } else {
       $897 = $890;
       $898 = ((($db)) + 12|0);
       $899 = HEAP32[$db>>2]|0;
       $900 = (($897) - ($899))|0;
       $901 = (($900|0) / 24)&-1;
       $902 = (($901) + 1)|0;
       $903 = ($900|0)<(-24);
       if ($903) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $904 = __THREW__; __THREW__ = 0;
        $905 = ___cxa_find_matching_catch_2()|0;
        $906 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
        $$010 = $905;$$011 = $906;
        break L3;
       }
       $907 = (($894) - ($899))|0;
       $908 = (($907|0) / 24)&-1;
       $909 = ($908>>>0)<(1073741823);
       if ($909) {
        $910 = $908 << 1;
        $911 = ($910>>>0)<($902>>>0);
        $912 = $911 ? $902 : $910;
        $$0$i$i$i148 = $912;
       } else {
        $$0$i$i$i148 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i147,$$0$i$i$i148,$901,$898);
       $913 = ((($__v$i$i147)) + 8|0);
       $914 = HEAP32[$913>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($914,$28);
       $915 = ((($914)) + 24|0);
       HEAP32[$913>>2] = $915;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i147);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i147);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
      $916 = ((($first)) + 2|0);
      $$3 = $916;
      break L1;
      break;
     }
     case 103:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($29,5458);
      $917 = ((($db)) + 4|0);
      $918 = HEAP32[$917>>2]|0;
      $919 = ((($db)) + 8|0);
      $920 = HEAP32[$919>>2]|0;
      $921 = ($918>>>0)<($920>>>0);
      $922 = $920;
      if ($921) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($918,$29);
       $923 = HEAP32[$917>>2]|0;
       $924 = ((($923)) + 24|0);
       HEAP32[$917>>2] = $924;
      } else {
       $925 = $918;
       $926 = ((($db)) + 12|0);
       $927 = HEAP32[$db>>2]|0;
       $928 = (($925) - ($927))|0;
       $929 = (($928|0) / 24)&-1;
       $930 = (($929) + 1)|0;
       $931 = ($928|0)<(-24);
       if ($931) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $932 = __THREW__; __THREW__ = 0;
        $933 = ___cxa_find_matching_catch_2()|0;
        $934 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
        $$010 = $933;$$011 = $934;
        break L3;
       }
       $935 = (($922) - ($927))|0;
       $936 = (($935|0) / 24)&-1;
       $937 = ($936>>>0)<(1073741823);
       if ($937) {
        $938 = $936 << 1;
        $939 = ($938>>>0)<($930>>>0);
        $940 = $939 ? $930 : $938;
        $$0$i$i$i153 = $940;
       } else {
        $$0$i$i$i153 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i152,$$0$i$i$i153,$929,$926);
       $941 = ((($__v$i$i152)) + 8|0);
       $942 = HEAP32[$941>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($942,$29);
       $943 = ((($942)) + 24|0);
       HEAP32[$941>>2] = $943;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i152);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i152);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
      $944 = ((($first)) + 2|0);
      $$3 = $944;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($30,5527);
      $945 = ((($db)) + 4|0);
      $946 = HEAP32[$945>>2]|0;
      $947 = ((($db)) + 8|0);
      $948 = HEAP32[$947>>2]|0;
      $949 = ($946>>>0)<($948>>>0);
      $950 = $948;
      if ($949) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($946,$30);
       $951 = HEAP32[$945>>2]|0;
       $952 = ((($951)) + 24|0);
       HEAP32[$945>>2] = $952;
      } else {
       $953 = $946;
       $954 = ((($db)) + 12|0);
       $955 = HEAP32[$db>>2]|0;
       $956 = (($953) - ($955))|0;
       $957 = (($956|0) / 24)&-1;
       $958 = (($957) + 1)|0;
       $959 = ($956|0)<(-24);
       if ($959) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $960 = __THREW__; __THREW__ = 0;
        $961 = ___cxa_find_matching_catch_2()|0;
        $962 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
        $$010 = $961;$$011 = $962;
        break L3;
       }
       $963 = (($950) - ($955))|0;
       $964 = (($963|0) / 24)&-1;
       $965 = ($964>>>0)<(1073741823);
       if ($965) {
        $966 = $964 << 1;
        $967 = ($966>>>0)<($958>>>0);
        $968 = $967 ? $958 : $966;
        $$0$i$i$i158 = $968;
       } else {
        $$0$i$i$i158 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i157,$$0$i$i$i158,$957,$954);
       $969 = ((($__v$i$i157)) + 8|0);
       $970 = HEAP32[$969>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($970,$30);
       $971 = ((($970)) + 24|0);
       HEAP32[$969>>2] = $971;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i157);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i157);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
      $972 = ((($first)) + 2|0);
      $$3 = $972;
      break L1;
      break;
     }
     case 119:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($31,5537);
      $973 = ((($db)) + 4|0);
      $974 = HEAP32[$973>>2]|0;
      $975 = ((($db)) + 8|0);
      $976 = HEAP32[$975>>2]|0;
      $977 = ($974>>>0)<($976>>>0);
      $978 = $976;
      if ($977) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($974,$31);
       $979 = HEAP32[$973>>2]|0;
       $980 = ((($979)) + 24|0);
       HEAP32[$973>>2] = $980;
      } else {
       $981 = $974;
       $982 = ((($db)) + 12|0);
       $983 = HEAP32[$db>>2]|0;
       $984 = (($981) - ($983))|0;
       $985 = (($984|0) / 24)&-1;
       $986 = (($985) + 1)|0;
       $987 = ($984|0)<(-24);
       if ($987) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $988 = __THREW__; __THREW__ = 0;
        $989 = ___cxa_find_matching_catch_2()|0;
        $990 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
        $$010 = $989;$$011 = $990;
        break L3;
       }
       $991 = (($978) - ($983))|0;
       $992 = (($991|0) / 24)&-1;
       $993 = ($992>>>0)<(1073741823);
       if ($993) {
        $994 = $992 << 1;
        $995 = ($994>>>0)<($986>>>0);
        $996 = $995 ? $986 : $994;
        $$0$i$i$i163 = $996;
       } else {
        $$0$i$i$i163 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i162,$$0$i$i$i163,$985,$982);
       $997 = ((($__v$i$i162)) + 8|0);
       $998 = HEAP32[$997>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($998,$31);
       $999 = ((($998)) + 24|0);
       HEAP32[$997>>2] = $999;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i162);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i162);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
      $1000 = ((($first)) + 2|0);
      $$3 = $1000;
      break L1;
      break;
     }
     default: {
      $$3 = $first;
      break L1;
     }
     }
     break;
    }
    case 111:  {
     $1001 = ((($first)) + 1|0);
     $1002 = HEAP8[$1001>>0]|0;
     $1003 = $1002 << 24 >> 24;
     switch ($1003|0) {
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($32,5550);
      $1004 = ((($db)) + 4|0);
      $1005 = HEAP32[$1004>>2]|0;
      $1006 = ((($db)) + 8|0);
      $1007 = HEAP32[$1006>>2]|0;
      $1008 = ($1005>>>0)<($1007>>>0);
      $1009 = $1007;
      if ($1008) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1005,$32);
       $1010 = HEAP32[$1004>>2]|0;
       $1011 = ((($1010)) + 24|0);
       HEAP32[$1004>>2] = $1011;
      } else {
       $1012 = $1005;
       $1013 = ((($db)) + 12|0);
       $1014 = HEAP32[$db>>2]|0;
       $1015 = (($1012) - ($1014))|0;
       $1016 = (($1015|0) / 24)&-1;
       $1017 = (($1016) + 1)|0;
       $1018 = ($1015|0)<(-24);
       if ($1018) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $1019 = __THREW__; __THREW__ = 0;
        $1020 = ___cxa_find_matching_catch_2()|0;
        $1021 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
        $$010 = $1020;$$011 = $1021;
        break L3;
       }
       $1022 = (($1009) - ($1014))|0;
       $1023 = (($1022|0) / 24)&-1;
       $1024 = ($1023>>>0)<(1073741823);
       if ($1024) {
        $1025 = $1023 << 1;
        $1026 = ($1025>>>0)<($1017>>>0);
        $1027 = $1026 ? $1017 : $1025;
        $$0$i$i$i168 = $1027;
       } else {
        $$0$i$i$i168 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i167,$$0$i$i$i168,$1016,$1013);
       $1028 = ((($__v$i$i167)) + 8|0);
       $1029 = HEAP32[$1028>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1029,$32);
       $1030 = ((($1029)) + 24|0);
       HEAP32[$1028>>2] = $1030;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i167);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i167);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
      $1031 = ((($first)) + 2|0);
      $$3 = $1031;
      break L1;
      break;
     }
     case 114:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($33,5561);
      $1032 = ((($db)) + 4|0);
      $1033 = HEAP32[$1032>>2]|0;
      $1034 = ((($db)) + 8|0);
      $1035 = HEAP32[$1034>>2]|0;
      $1036 = ($1033>>>0)<($1035>>>0);
      $1037 = $1035;
      if ($1036) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1033,$33);
       $1038 = HEAP32[$1032>>2]|0;
       $1039 = ((($1038)) + 24|0);
       HEAP32[$1032>>2] = $1039;
      } else {
       $1040 = $1033;
       $1041 = ((($db)) + 12|0);
       $1042 = HEAP32[$db>>2]|0;
       $1043 = (($1040) - ($1042))|0;
       $1044 = (($1043|0) / 24)&-1;
       $1045 = (($1044) + 1)|0;
       $1046 = ($1043|0)<(-24);
       if ($1046) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $1047 = __THREW__; __THREW__ = 0;
        $1048 = ___cxa_find_matching_catch_2()|0;
        $1049 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
        $$010 = $1048;$$011 = $1049;
        break L3;
       }
       $1050 = (($1037) - ($1042))|0;
       $1051 = (($1050|0) / 24)&-1;
       $1052 = ($1051>>>0)<(1073741823);
       if ($1052) {
        $1053 = $1051 << 1;
        $1054 = ($1053>>>0)<($1045>>>0);
        $1055 = $1054 ? $1045 : $1053;
        $$0$i$i$i173 = $1055;
       } else {
        $$0$i$i$i173 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i172,$$0$i$i$i173,$1044,$1041);
       $1056 = ((($__v$i$i172)) + 8|0);
       $1057 = HEAP32[$1056>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1057,$33);
       $1058 = ((($1057)) + 24|0);
       HEAP32[$1056>>2] = $1058;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i172);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i172);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
      $1059 = ((($first)) + 2|0);
      $$3 = $1059;
      break L1;
      break;
     }
     case 82:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($34,5571);
      $1060 = ((($db)) + 4|0);
      $1061 = HEAP32[$1060>>2]|0;
      $1062 = ((($db)) + 8|0);
      $1063 = HEAP32[$1062>>2]|0;
      $1064 = ($1061>>>0)<($1063>>>0);
      $1065 = $1063;
      if ($1064) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1061,$34);
       $1066 = HEAP32[$1060>>2]|0;
       $1067 = ((($1066)) + 24|0);
       HEAP32[$1060>>2] = $1067;
      } else {
       $1068 = $1061;
       $1069 = ((($db)) + 12|0);
       $1070 = HEAP32[$db>>2]|0;
       $1071 = (($1068) - ($1070))|0;
       $1072 = (($1071|0) / 24)&-1;
       $1073 = (($1072) + 1)|0;
       $1074 = ($1071|0)<(-24);
       if ($1074) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $1075 = __THREW__; __THREW__ = 0;
        $1076 = ___cxa_find_matching_catch_2()|0;
        $1077 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($34);
        $$010 = $1076;$$011 = $1077;
        break L3;
       }
       $1078 = (($1065) - ($1070))|0;
       $1079 = (($1078|0) / 24)&-1;
       $1080 = ($1079>>>0)<(1073741823);
       if ($1080) {
        $1081 = $1079 << 1;
        $1082 = ($1081>>>0)<($1073>>>0);
        $1083 = $1082 ? $1073 : $1081;
        $$0$i$i$i178 = $1083;
       } else {
        $$0$i$i$i178 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i177,$$0$i$i$i178,$1072,$1069);
       $1084 = ((($__v$i$i177)) + 8|0);
       $1085 = HEAP32[$1084>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1085,$34);
       $1086 = ((($1085)) + 24|0);
       HEAP32[$1084>>2] = $1086;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i177);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i177);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($34);
      $1087 = ((($first)) + 2|0);
      $$3 = $1087;
      break L1;
      break;
     }
     default: {
      $$3 = $first;
      break L1;
     }
     }
     break;
    }
    case 112:  {
     $1088 = ((($first)) + 1|0);
     $1089 = HEAP8[$1088>>0]|0;
     $1090 = $1089 << 24 >> 24;
     switch ($1090|0) {
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($35,5582);
      $1091 = ((($db)) + 4|0);
      $1092 = HEAP32[$1091>>2]|0;
      $1093 = ((($db)) + 8|0);
      $1094 = HEAP32[$1093>>2]|0;
      $1095 = ($1092>>>0)<($1094>>>0);
      $1096 = $1094;
      if ($1095) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1092,$35);
       $1097 = HEAP32[$1091>>2]|0;
       $1098 = ((($1097)) + 24|0);
       HEAP32[$1091>>2] = $1098;
      } else {
       $1099 = $1092;
       $1100 = ((($db)) + 12|0);
       $1101 = HEAP32[$db>>2]|0;
       $1102 = (($1099) - ($1101))|0;
       $1103 = (($1102|0) / 24)&-1;
       $1104 = (($1103) + 1)|0;
       $1105 = ($1102|0)<(-24);
       if ($1105) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $1106 = __THREW__; __THREW__ = 0;
        $1107 = ___cxa_find_matching_catch_2()|0;
        $1108 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($35);
        $$010 = $1107;$$011 = $1108;
        break L3;
       }
       $1109 = (($1096) - ($1101))|0;
       $1110 = (($1109|0) / 24)&-1;
       $1111 = ($1110>>>0)<(1073741823);
       if ($1111) {
        $1112 = $1110 << 1;
        $1113 = ($1112>>>0)<($1104>>>0);
        $1114 = $1113 ? $1104 : $1112;
        $$0$i$i$i183 = $1114;
       } else {
        $$0$i$i$i183 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i182,$$0$i$i$i183,$1103,$1100);
       $1115 = ((($__v$i$i182)) + 8|0);
       $1116 = HEAP32[$1115>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1116,$35);
       $1117 = ((($1116)) + 24|0);
       HEAP32[$1115>>2] = $1117;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i182);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i182);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($35);
      $1118 = ((($first)) + 2|0);
      $$3 = $1118;
      break L1;
      break;
     }
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($36,5594);
      $1119 = ((($db)) + 4|0);
      $1120 = HEAP32[$1119>>2]|0;
      $1121 = ((($db)) + 8|0);
      $1122 = HEAP32[$1121>>2]|0;
      $1123 = ($1120>>>0)<($1122>>>0);
      $1124 = $1122;
      if ($1123) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1120,$36);
       $1125 = HEAP32[$1119>>2]|0;
       $1126 = ((($1125)) + 24|0);
       HEAP32[$1119>>2] = $1126;
      } else {
       $1127 = $1120;
       $1128 = ((($db)) + 12|0);
       $1129 = HEAP32[$db>>2]|0;
       $1130 = (($1127) - ($1129))|0;
       $1131 = (($1130|0) / 24)&-1;
       $1132 = (($1131) + 1)|0;
       $1133 = ($1130|0)<(-24);
       if ($1133) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $1134 = __THREW__; __THREW__ = 0;
        $1135 = ___cxa_find_matching_catch_2()|0;
        $1136 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
        $$010 = $1135;$$011 = $1136;
        break L3;
       }
       $1137 = (($1124) - ($1129))|0;
       $1138 = (($1137|0) / 24)&-1;
       $1139 = ($1138>>>0)<(1073741823);
       if ($1139) {
        $1140 = $1138 << 1;
        $1141 = ($1140>>>0)<($1132>>>0);
        $1142 = $1141 ? $1132 : $1140;
        $$0$i$i$i188 = $1142;
       } else {
        $$0$i$i$i188 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i187,$$0$i$i$i188,$1131,$1128);
       $1143 = ((($__v$i$i187)) + 8|0);
       $1144 = HEAP32[$1143>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1144,$36);
       $1145 = ((($1144)) + 24|0);
       HEAP32[$1143>>2] = $1145;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i187);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i187);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
      $1146 = ((($first)) + 2|0);
      $$3 = $1146;
      break L1;
      break;
     }
     case 76:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($37,5604);
      $1147 = ((($db)) + 4|0);
      $1148 = HEAP32[$1147>>2]|0;
      $1149 = ((($db)) + 8|0);
      $1150 = HEAP32[$1149>>2]|0;
      $1151 = ($1148>>>0)<($1150>>>0);
      $1152 = $1150;
      if ($1151) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1148,$37);
       $1153 = HEAP32[$1147>>2]|0;
       $1154 = ((($1153)) + 24|0);
       HEAP32[$1147>>2] = $1154;
      } else {
       $1155 = $1148;
       $1156 = ((($db)) + 12|0);
       $1157 = HEAP32[$db>>2]|0;
       $1158 = (($1155) - ($1157))|0;
       $1159 = (($1158|0) / 24)&-1;
       $1160 = (($1159) + 1)|0;
       $1161 = ($1158|0)<(-24);
       if ($1161) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $1162 = __THREW__; __THREW__ = 0;
        $1163 = ___cxa_find_matching_catch_2()|0;
        $1164 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
        $$010 = $1163;$$011 = $1164;
        break L3;
       }
       $1165 = (($1152) - ($1157))|0;
       $1166 = (($1165|0) / 24)&-1;
       $1167 = ($1166>>>0)<(1073741823);
       if ($1167) {
        $1168 = $1166 << 1;
        $1169 = ($1168>>>0)<($1160>>>0);
        $1170 = $1169 ? $1160 : $1168;
        $$0$i$i$i193 = $1170;
       } else {
        $$0$i$i$i193 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i192,$$0$i$i$i193,$1159,$1156);
       $1171 = ((($__v$i$i192)) + 8|0);
       $1172 = HEAP32[$1171>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1172,$37);
       $1173 = ((($1172)) + 24|0);
       HEAP32[$1171>>2] = $1173;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i192);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i192);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
      $1174 = ((($first)) + 2|0);
      $$3 = $1174;
      break L1;
      break;
     }
     case 112:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($38,5615);
      $1175 = ((($db)) + 4|0);
      $1176 = HEAP32[$1175>>2]|0;
      $1177 = ((($db)) + 8|0);
      $1178 = HEAP32[$1177>>2]|0;
      $1179 = ($1176>>>0)<($1178>>>0);
      $1180 = $1178;
      if ($1179) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1176,$38);
       $1181 = HEAP32[$1175>>2]|0;
       $1182 = ((($1181)) + 24|0);
       HEAP32[$1175>>2] = $1182;
      } else {
       $1183 = $1176;
       $1184 = ((($db)) + 12|0);
       $1185 = HEAP32[$db>>2]|0;
       $1186 = (($1183) - ($1185))|0;
       $1187 = (($1186|0) / 24)&-1;
       $1188 = (($1187) + 1)|0;
       $1189 = ($1186|0)<(-24);
       if ($1189) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $1190 = __THREW__; __THREW__ = 0;
        $1191 = ___cxa_find_matching_catch_2()|0;
        $1192 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
        $$010 = $1191;$$011 = $1192;
        break L3;
       }
       $1193 = (($1180) - ($1185))|0;
       $1194 = (($1193|0) / 24)&-1;
       $1195 = ($1194>>>0)<(1073741823);
       if ($1195) {
        $1196 = $1194 << 1;
        $1197 = ($1196>>>0)<($1188>>>0);
        $1198 = $1197 ? $1188 : $1196;
        $$0$i$i$i198 = $1198;
       } else {
        $$0$i$i$i198 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i197,$$0$i$i$i198,$1187,$1184);
       $1199 = ((($__v$i$i197)) + 8|0);
       $1200 = HEAP32[$1199>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1200,$38);
       $1201 = ((($1200)) + 24|0);
       HEAP32[$1199>>2] = $1201;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i197);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i197);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
      $1202 = ((($first)) + 2|0);
      $$3 = $1202;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($39,5594);
      $1203 = ((($db)) + 4|0);
      $1204 = HEAP32[$1203>>2]|0;
      $1205 = ((($db)) + 8|0);
      $1206 = HEAP32[$1205>>2]|0;
      $1207 = ($1204>>>0)<($1206>>>0);
      $1208 = $1206;
      if ($1207) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1204,$39);
       $1209 = HEAP32[$1203>>2]|0;
       $1210 = ((($1209)) + 24|0);
       HEAP32[$1203>>2] = $1210;
      } else {
       $1211 = $1204;
       $1212 = ((($db)) + 12|0);
       $1213 = HEAP32[$db>>2]|0;
       $1214 = (($1211) - ($1213))|0;
       $1215 = (($1214|0) / 24)&-1;
       $1216 = (($1215) + 1)|0;
       $1217 = ($1214|0)<(-24);
       if ($1217) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $1218 = __THREW__; __THREW__ = 0;
        $1219 = ___cxa_find_matching_catch_2()|0;
        $1220 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($39);
        $$010 = $1219;$$011 = $1220;
        break L3;
       }
       $1221 = (($1208) - ($1213))|0;
       $1222 = (($1221|0) / 24)&-1;
       $1223 = ($1222>>>0)<(1073741823);
       if ($1223) {
        $1224 = $1222 << 1;
        $1225 = ($1224>>>0)<($1216>>>0);
        $1226 = $1225 ? $1216 : $1224;
        $$0$i$i$i203 = $1226;
       } else {
        $$0$i$i$i203 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i202,$$0$i$i$i203,$1215,$1212);
       $1227 = ((($__v$i$i202)) + 8|0);
       $1228 = HEAP32[$1227>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1228,$39);
       $1229 = ((($1228)) + 24|0);
       HEAP32[$1227>>2] = $1229;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i202);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i202);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($39);
      $1230 = ((($first)) + 2|0);
      $$3 = $1230;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($40,5626);
      $1231 = ((($db)) + 4|0);
      $1232 = HEAP32[$1231>>2]|0;
      $1233 = ((($db)) + 8|0);
      $1234 = HEAP32[$1233>>2]|0;
      $1235 = ($1232>>>0)<($1234>>>0);
      $1236 = $1234;
      if ($1235) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1232,$40);
       $1237 = HEAP32[$1231>>2]|0;
       $1238 = ((($1237)) + 24|0);
       HEAP32[$1231>>2] = $1238;
      } else {
       $1239 = $1232;
       $1240 = ((($db)) + 12|0);
       $1241 = HEAP32[$db>>2]|0;
       $1242 = (($1239) - ($1241))|0;
       $1243 = (($1242|0) / 24)&-1;
       $1244 = (($1243) + 1)|0;
       $1245 = ($1242|0)<(-24);
       if ($1245) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $1246 = __THREW__; __THREW__ = 0;
        $1247 = ___cxa_find_matching_catch_2()|0;
        $1248 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($40);
        $$010 = $1247;$$011 = $1248;
        break L3;
       }
       $1249 = (($1236) - ($1241))|0;
       $1250 = (($1249|0) / 24)&-1;
       $1251 = ($1250>>>0)<(1073741823);
       if ($1251) {
        $1252 = $1250 << 1;
        $1253 = ($1252>>>0)<($1244>>>0);
        $1254 = $1253 ? $1244 : $1252;
        $$0$i$i$i208 = $1254;
       } else {
        $$0$i$i$i208 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i207,$$0$i$i$i208,$1243,$1240);
       $1255 = ((($__v$i$i207)) + 8|0);
       $1256 = HEAP32[$1255>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1256,$40);
       $1257 = ((($1256)) + 24|0);
       HEAP32[$1255>>2] = $1257;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i207);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i207);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($40);
      $1258 = ((($first)) + 2|0);
      $$3 = $1258;
      break L1;
      break;
     }
     default: {
      $$3 = $first;
      break L1;
     }
     }
     break;
    }
    case 113:  {
     $1259 = ((($first)) + 1|0);
     $1260 = HEAP8[$1259>>0]|0;
     $1261 = ($1260<<24>>24)==(117);
     if (!($1261)) {
      $$3 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($41,5637);
     $1262 = ((($db)) + 4|0);
     $1263 = HEAP32[$1262>>2]|0;
     $1264 = ((($db)) + 8|0);
     $1265 = HEAP32[$1264>>2]|0;
     $1266 = ($1263>>>0)<($1265>>>0);
     $1267 = $1265;
     if ($1266) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1263,$41);
      $1268 = HEAP32[$1262>>2]|0;
      $1269 = ((($1268)) + 24|0);
      HEAP32[$1262>>2] = $1269;
     } else {
      $1270 = $1263;
      $1271 = ((($db)) + 12|0);
      $1272 = HEAP32[$db>>2]|0;
      $1273 = (($1270) - ($1272))|0;
      $1274 = (($1273|0) / 24)&-1;
      $1275 = (($1274) + 1)|0;
      $1276 = ($1273|0)<(-24);
      if ($1276) {
       __THREW__ = 0;
       invoke_vi(102,($db|0));
       $1277 = __THREW__; __THREW__ = 0;
       $1278 = ___cxa_find_matching_catch_2()|0;
       $1279 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41);
       $$010 = $1278;$$011 = $1279;
       break L3;
      }
      $1280 = (($1267) - ($1272))|0;
      $1281 = (($1280|0) / 24)&-1;
      $1282 = ($1281>>>0)<(1073741823);
      if ($1282) {
       $1283 = $1281 << 1;
       $1284 = ($1283>>>0)<($1275>>>0);
       $1285 = $1284 ? $1275 : $1283;
       $$0$i$i$i213 = $1285;
      } else {
       $$0$i$i$i213 = 2147483647;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i212,$$0$i$i$i213,$1274,$1271);
      $1286 = ((($__v$i$i212)) + 8|0);
      $1287 = HEAP32[$1286>>2]|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1287,$41);
      $1288 = ((($1287)) + 24|0);
      HEAP32[$1286>>2] = $1288;
      __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i212);
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i212);
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41);
     $1289 = ((($first)) + 2|0);
     $$3 = $1289;
     break L1;
     break;
    }
    case 114:  {
     $1290 = ((($first)) + 1|0);
     $1291 = HEAP8[$1290>>0]|0;
     $1292 = $1291 << 24 >> 24;
     switch ($1292|0) {
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($42,5647);
      $1293 = ((($db)) + 4|0);
      $1294 = HEAP32[$1293>>2]|0;
      $1295 = ((($db)) + 8|0);
      $1296 = HEAP32[$1295>>2]|0;
      $1297 = ($1294>>>0)<($1296>>>0);
      $1298 = $1296;
      if ($1297) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1294,$42);
       $1299 = HEAP32[$1293>>2]|0;
       $1300 = ((($1299)) + 24|0);
       HEAP32[$1293>>2] = $1300;
      } else {
       $1301 = $1294;
       $1302 = ((($db)) + 12|0);
       $1303 = HEAP32[$db>>2]|0;
       $1304 = (($1301) - ($1303))|0;
       $1305 = (($1304|0) / 24)&-1;
       $1306 = (($1305) + 1)|0;
       $1307 = ($1304|0)<(-24);
       if ($1307) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $1308 = __THREW__; __THREW__ = 0;
        $1309 = ___cxa_find_matching_catch_2()|0;
        $1310 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
        $$010 = $1309;$$011 = $1310;
        break L3;
       }
       $1311 = (($1298) - ($1303))|0;
       $1312 = (($1311|0) / 24)&-1;
       $1313 = ($1312>>>0)<(1073741823);
       if ($1313) {
        $1314 = $1312 << 1;
        $1315 = ($1314>>>0)<($1306>>>0);
        $1316 = $1315 ? $1306 : $1314;
        $$0$i$i$i218 = $1316;
       } else {
        $$0$i$i$i218 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i217,$$0$i$i$i218,$1305,$1302);
       $1317 = ((($__v$i$i217)) + 8|0);
       $1318 = HEAP32[$1317>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1318,$42);
       $1319 = ((($1318)) + 24|0);
       HEAP32[$1317>>2] = $1319;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i217);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i217);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
      $1320 = ((($first)) + 2|0);
      $$3 = $1320;
      break L1;
      break;
     }
     case 77:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($43,5657);
      $1321 = ((($db)) + 4|0);
      $1322 = HEAP32[$1321>>2]|0;
      $1323 = ((($db)) + 8|0);
      $1324 = HEAP32[$1323>>2]|0;
      $1325 = ($1322>>>0)<($1324>>>0);
      $1326 = $1324;
      if ($1325) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1322,$43);
       $1327 = HEAP32[$1321>>2]|0;
       $1328 = ((($1327)) + 24|0);
       HEAP32[$1321>>2] = $1328;
      } else {
       $1329 = $1322;
       $1330 = ((($db)) + 12|0);
       $1331 = HEAP32[$db>>2]|0;
       $1332 = (($1329) - ($1331))|0;
       $1333 = (($1332|0) / 24)&-1;
       $1334 = (($1333) + 1)|0;
       $1335 = ($1332|0)<(-24);
       if ($1335) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $1336 = __THREW__; __THREW__ = 0;
        $1337 = ___cxa_find_matching_catch_2()|0;
        $1338 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43);
        $$010 = $1337;$$011 = $1338;
        break L3;
       }
       $1339 = (($1326) - ($1331))|0;
       $1340 = (($1339|0) / 24)&-1;
       $1341 = ($1340>>>0)<(1073741823);
       if ($1341) {
        $1342 = $1340 << 1;
        $1343 = ($1342>>>0)<($1334>>>0);
        $1344 = $1343 ? $1334 : $1342;
        $$0$i$i$i223 = $1344;
       } else {
        $$0$i$i$i223 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i222,$$0$i$i$i223,$1333,$1330);
       $1345 = ((($__v$i$i222)) + 8|0);
       $1346 = HEAP32[$1345>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1346,$43);
       $1347 = ((($1346)) + 24|0);
       HEAP32[$1345>>2] = $1347;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i222);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i222);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43);
      $1348 = ((($first)) + 2|0);
      $$3 = $1348;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($44,5668);
      $1349 = ((($db)) + 4|0);
      $1350 = HEAP32[$1349>>2]|0;
      $1351 = ((($db)) + 8|0);
      $1352 = HEAP32[$1351>>2]|0;
      $1353 = ($1350>>>0)<($1352>>>0);
      $1354 = $1352;
      if ($1353) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1350,$44);
       $1355 = HEAP32[$1349>>2]|0;
       $1356 = ((($1355)) + 24|0);
       HEAP32[$1349>>2] = $1356;
      } else {
       $1357 = $1350;
       $1358 = ((($db)) + 12|0);
       $1359 = HEAP32[$db>>2]|0;
       $1360 = (($1357) - ($1359))|0;
       $1361 = (($1360|0) / 24)&-1;
       $1362 = (($1361) + 1)|0;
       $1363 = ($1360|0)<(-24);
       if ($1363) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $1364 = __THREW__; __THREW__ = 0;
        $1365 = ___cxa_find_matching_catch_2()|0;
        $1366 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
        $$010 = $1365;$$011 = $1366;
        break L3;
       }
       $1367 = (($1354) - ($1359))|0;
       $1368 = (($1367|0) / 24)&-1;
       $1369 = ($1368>>>0)<(1073741823);
       if ($1369) {
        $1370 = $1368 << 1;
        $1371 = ($1370>>>0)<($1362>>>0);
        $1372 = $1371 ? $1362 : $1370;
        $$0$i$i$i228 = $1372;
       } else {
        $$0$i$i$i228 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i227,$$0$i$i$i228,$1361,$1358);
       $1373 = ((($__v$i$i227)) + 8|0);
       $1374 = HEAP32[$1373>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1374,$44);
       $1375 = ((($1374)) + 24|0);
       HEAP32[$1373>>2] = $1375;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i227);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i227);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
      $1376 = ((($first)) + 2|0);
      $$3 = $1376;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($45,5679);
      $1377 = ((($db)) + 4|0);
      $1378 = HEAP32[$1377>>2]|0;
      $1379 = ((($db)) + 8|0);
      $1380 = HEAP32[$1379>>2]|0;
      $1381 = ($1378>>>0)<($1380>>>0);
      $1382 = $1380;
      if ($1381) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1378,$45);
       $1383 = HEAP32[$1377>>2]|0;
       $1384 = ((($1383)) + 24|0);
       HEAP32[$1377>>2] = $1384;
      } else {
       $1385 = $1378;
       $1386 = ((($db)) + 12|0);
       $1387 = HEAP32[$db>>2]|0;
       $1388 = (($1385) - ($1387))|0;
       $1389 = (($1388|0) / 24)&-1;
       $1390 = (($1389) + 1)|0;
       $1391 = ($1388|0)<(-24);
       if ($1391) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $1392 = __THREW__; __THREW__ = 0;
        $1393 = ___cxa_find_matching_catch_2()|0;
        $1394 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
        $$010 = $1393;$$011 = $1394;
        break L3;
       }
       $1395 = (($1382) - ($1387))|0;
       $1396 = (($1395|0) / 24)&-1;
       $1397 = ($1396>>>0)<(1073741823);
       if ($1397) {
        $1398 = $1396 << 1;
        $1399 = ($1398>>>0)<($1390>>>0);
        $1400 = $1399 ? $1390 : $1398;
        $$0$i$i$i233 = $1400;
       } else {
        $$0$i$i$i233 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i232,$$0$i$i$i233,$1389,$1386);
       $1401 = ((($__v$i$i232)) + 8|0);
       $1402 = HEAP32[$1401>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1402,$45);
       $1403 = ((($1402)) + 24|0);
       HEAP32[$1401>>2] = $1403;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i232);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i232);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
      $1404 = ((($first)) + 2|0);
      $$3 = $1404;
      break L1;
      break;
     }
     default: {
      $$3 = $first;
      break L1;
     }
     }
     break;
    }
    case 118:  {
     $1405 = ((($first)) + 1|0);
     $1406 = HEAP8[$1405>>0]|0;
     $1407 = $1406 << 24 >> 24;
     $isdigittmp = (($1407) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if (!($isdigit)) {
      $$3 = $first;
      break L1;
     }
     $1408 = ((($first)) + 2|0);
     $1409 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($1408,$last,$db)|0);
     $1410 = ($1409|0)==($1408|0);
     if ($1410) {
      $$3 = $first;
      break L1;
     }
     $1411 = HEAP32[$db>>2]|0;
     $1412 = ((($db)) + 4|0);
     $1413 = HEAP32[$1412>>2]|0;
     $1414 = ($1411|0)==($1413|0);
     if ($1414) {
      $$3 = $first;
      break L1;
     }
     $1415 = ((($1413)) + -24|0);
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1415,0,5263)|0);
     $$3 = $1409;
     break L1;
     break;
    }
    default: {
     $$3 = $first;
     break L1;
    }
    }
   } while(0);
   ___resumeException($$010|0);
   // unreachable;
  } else {
   $$3 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0$i$i$i = 0, $$0$i$i$i11 = 0, $$0$i$i$i22 = 0, $$0$i$i$i8 = 0, $$05 = 0, $$06 = 0, $$3 = 0, $$lcssa = 0, $$lcssa145 = 0, $$lcssa148 = 0, $$lcssa149 = 0, $$pre = 0, $$pre$i = 0, $$pre$i16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i = 0, $__v$i$i = 0, $__v$i$i10 = 0, $__v$i$i21 = 0, $__v$i$i7 = 0;
 var $args = 0, $eh$lpad$body$i$i$index15Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$index6Z2D = 0, $eh$lpad$body$indexZ2D = 0, $exitcond$i$i = 0, $k$0 = 0, $k1$0 = 0, $k2$0 = 0, $or$cond = 0, $t$0 = 0, $t$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i21 = sp + 124|0;
 $__v$i$i10 = sp + 104|0;
 $__v$i$i7 = sp + 84|0;
 $__v$i$i = sp + 64|0;
 $args = sp + 52|0;
 $0 = sp + 40|0;
 $1 = sp + 16|0;
 $2 = sp;
 $3 = $last;
 $4 = $first;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(1);
 L1: do {
  if ($6) {
   $7 = HEAP8[$first>>0]|0;
   $8 = ($7<<24>>24)==(73);
   if ($8) {
    $9 = ((($db)) + 61|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    $$pre = ((($db)) + 36|0);
    L4: do {
     if (!($11)) {
      $12 = HEAP32[$$pre>>2]|0;
      $13 = ((($12)) + -16|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = ((($12)) + -12|0);
      while(1) {
       $16 = HEAP32[$15>>2]|0;
       $17 = ($16|0)==($14|0);
       if ($17) {
        break L4;
       }
       $18 = ((($16)) + -16|0);
       HEAP32[$15>>2] = $18;
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($18);
      }
     }
    } while(0);
    $19 = ((($first)) + 1|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($args,5691,1);
    $20 = ((($db)) + 4|0);
    $21 = ((($db)) + 12|0);
    $22 = ((($__v$i$i7)) + 8|0);
    $23 = ((($__v$i$i10)) + 8|0);
    $24 = ((($args)) + 4|0);
    $25 = ((($0)) + 8|0);
    $26 = ((($0)) + 1|0);
    $27 = ((($0)) + 4|0);
    $28 = ((($db)) + 32|0);
    $29 = ((($db)) + 40|0);
    $30 = ((($db)) + 44|0);
    $31 = ((($__v$i$i)) + 8|0);
    $t$0 = $19;
    L10: while(1) {
     $32 = HEAP8[$t$0>>0]|0;
     $33 = ($32<<24>>24)==(69);
     if ($33) {
      $t$0$lcssa = $t$0;
      label = 65;
      break;
     }
     $34 = HEAP8[$9>>0]|0;
     $35 = ($34<<24>>24)==(0);
     do {
      if (!($35)) {
       $36 = HEAP32[$21>>2]|0;
       $37 = HEAP32[$$pre>>2]|0;
       $38 = HEAP32[$29>>2]|0;
       $39 = ($37>>>0)<($38>>>0);
       $40 = $38;
       if ($39) {
        HEAP32[$37>>2] = 0;
        $41 = ((($37)) + 4|0);
        HEAP32[$41>>2] = 0;
        $42 = ((($37)) + 8|0);
        HEAP32[$42>>2] = 0;
        $43 = ((($37)) + 12|0);
        HEAP32[$43>>2] = $36;
        $44 = HEAP32[$$pre>>2]|0;
        $45 = ((($44)) + 16|0);
        HEAP32[$$pre>>2] = $45;
        break;
       }
       $46 = $37;
       $47 = HEAP32[$28>>2]|0;
       $48 = (($46) - ($47))|0;
       $49 = $48 >> 4;
       $50 = (($49) + 1)|0;
       $51 = ($48|0)<(-16);
       if ($51) {
        label = 13;
        break L10;
       }
       $53 = (($40) - ($47))|0;
       $54 = $53 >> 4;
       $55 = ($54>>>0)<(1073741823);
       if ($55) {
        $56 = $53 >> 3;
        $57 = ($56>>>0)<($50>>>0);
        $58 = $57 ? $50 : $56;
        $$0$i$i$i = $58;
       } else {
        $$0$i$i$i = 2147483647;
       }
       __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($__v$i$i,$$0$i$i$i,$49,$30);
       $59 = HEAP32[$31>>2]|0;
       HEAP32[$59>>2] = 0;
       $60 = ((($59)) + 4|0);
       HEAP32[$60>>2] = 0;
       $61 = ((($59)) + 8|0);
       HEAP32[$61>>2] = 0;
       $62 = ((($59)) + 12|0);
       HEAP32[$62>>2] = $36;
       $63 = ((($59)) + 16|0);
       HEAP32[$31>>2] = $63;
       __ZNSt3__16vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($28,$__v$i$i);
       __ZNSt3__114__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v$i$i);
      }
     } while(0);
     $72 = HEAP32[$20>>2]|0;
     $73 = HEAP32[$db>>2]|0;
     $74 = (($72) - ($73))|0;
     $75 = (($74|0) / 24)&-1;
     __THREW__ = 0;
     $76 = (invoke_iiii(114,($t$0|0),($last|0),($db|0))|0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     if ($78) {
      label = 19;
      break;
     }
     $79 = HEAP32[$20>>2]|0;
     $80 = HEAP32[$db>>2]|0;
     $81 = (($79) - ($80))|0;
     $82 = (($81|0) / 24)&-1;
     $83 = HEAP8[$9>>0]|0;
     $84 = ($83<<24>>24)==(0);
     L24: do {
      if (!($84)) {
       $85 = HEAP32[$$pre>>2]|0;
       $86 = ((($85)) + -16|0);
       $87 = $85;
       while(1) {
        $88 = ($87|0)==($86|0);
        if ($88) {
         break L24;
        }
        $89 = ((($87)) + -16|0);
        HEAP32[$$pre>>2] = $89;
        __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($89);
        $$pre$i = HEAP32[$$pre>>2]|0;
        $87 = $$pre$i;
       }
      }
     } while(0);
     $90 = ($76|0)==($t$0|0);
     $91 = ($76|0)==($last|0);
     $or$cond = $90 | $91;
     if ($or$cond) {
      label = 79;
      break;
     }
     $92 = HEAP8[$9>>0]|0;
     $93 = ($92<<24>>24)==(0);
     L31: do {
      if ($93) {
       $k2$0 = $75;
      } else {
       $94 = HEAP32[$$pre>>2]|0;
       $95 = ((($94)) + -16|0);
       $96 = HEAP32[$21>>2]|0;
       $97 = ((($94)) + -12|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = ((($94)) + -8|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = ($98>>>0)<($100>>>0);
       $102 = $100;
       if ($101) {
        HEAP32[$98>>2] = 0;
        $103 = ((($98)) + 4|0);
        HEAP32[$103>>2] = 0;
        $104 = ((($98)) + 8|0);
        HEAP32[$104>>2] = 0;
        $105 = ((($98)) + 12|0);
        HEAP32[$105>>2] = $96;
        $106 = HEAP32[$97>>2]|0;
        $107 = ((($106)) + 16|0);
        HEAP32[$97>>2] = $107;
        $k$0 = $75;
       } else {
        $108 = $98;
        $109 = ((($94)) + -4|0);
        $110 = HEAP32[$95>>2]|0;
        $111 = (($108) - ($110))|0;
        $112 = $111 >> 4;
        $113 = (($112) + 1)|0;
        $114 = ($111|0)<(-16);
        if ($114) {
         $$lcssa = $95;
         label = 32;
         break L10;
        }
        $116 = (($102) - ($110))|0;
        $117 = $116 >> 4;
        $118 = ($117>>>0)<(1073741823);
        if ($118) {
         $119 = $116 >> 3;
         $120 = ($119>>>0)<($113>>>0);
         $121 = $120 ? $113 : $119;
         $$0$i$i$i8 = $121;
        } else {
         $$0$i$i$i8 = 2147483647;
        }
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i7,$$0$i$i$i8,$112,$109);
        $122 = HEAP32[$22>>2]|0;
        HEAP32[$122>>2] = 0;
        $123 = ((($122)) + 4|0);
        HEAP32[$123>>2] = 0;
        $124 = ((($122)) + 8|0);
        HEAP32[$124>>2] = 0;
        $125 = ((($122)) + 12|0);
        HEAP32[$125>>2] = $96;
        $126 = ((($122)) + 16|0);
        HEAP32[$22>>2] = $126;
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($95,$__v$i$i7);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i7);
        $k$0 = $75;
       }
       while(1) {
        $127 = ($k$0>>>0)<($82>>>0);
        if (!($127)) {
         $k2$0 = $75;
         break L31;
        }
        $128 = HEAP32[$$pre>>2]|0;
        $129 = ((($128)) + -12|0);
        $130 = HEAP32[$129>>2]|0;
        $131 = ((($130)) + -16|0);
        $132 = HEAP32[$db>>2]|0;
        $133 = (($132) + (($k$0*24)|0)|0);
        $134 = ((($130)) + -12|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ((($130)) + -8|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = ($135|0)==($137|0);
        $139 = $137;
        if ($138) {
         $150 = $135;
         $151 = ((($130)) + -4|0);
         $152 = HEAP32[$131>>2]|0;
         $153 = (($150) - ($152))|0;
         $154 = (($153|0) / 24)&-1;
         $155 = (($154) + 1)|0;
         $156 = ($153|0)<(-24);
         if ($156) {
          $$lcssa145 = $131;
          label = 43;
          break L10;
         }
         $158 = (($139) - ($152))|0;
         $159 = (($158|0) / 24)&-1;
         $160 = ($159>>>0)<(1073741823);
         if ($160) {
          $161 = $159 << 1;
          $162 = ($161>>>0)<($155>>>0);
          $163 = $162 ? $155 : $161;
          $$0$i$i$i11 = $163;
         } else {
          $$0$i$i$i11 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i10,$$0$i$i$i11,$154,$151);
         $164 = HEAP32[$23>>2]|0;
         __THREW__ = 0;
         invoke_vii(100,($164|0),($133|0));
         $165 = __THREW__; __THREW__ = 0;
         $166 = $165&1;
         if ($166) {
          label = 49;
          break L10;
         }
         $167 = ((($164)) + 12|0);
         $168 = (((($132) + (($k$0*24)|0)|0)) + 12|0);
         __THREW__ = 0;
         invoke_vii(100,($167|0),($168|0));
         $169 = __THREW__; __THREW__ = 0;
         $170 = $169&1;
         if ($170) {
          $$lcssa149 = $164;
          label = 48;
          break L10;
         }
         $175 = ((($164)) + 24|0);
         HEAP32[$23>>2] = $175;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($131,$__v$i$i10);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i10);
        } else {
         __THREW__ = 0;
         invoke_vii(100,($135|0),($133|0));
         $140 = __THREW__; __THREW__ = 0;
         $141 = $140&1;
         if ($141) {
          label = 18;
          break L10;
         }
         $142 = ((($135)) + 12|0);
         $143 = (((($132) + (($k$0*24)|0)|0)) + 12|0);
         __THREW__ = 0;
         invoke_vii(100,($142|0),($143|0));
         $144 = __THREW__; __THREW__ = 0;
         $145 = $144&1;
         if ($145) {
          $$lcssa148 = $135;
          label = 40;
          break L10;
         }
         $148 = HEAP32[$134>>2]|0;
         $149 = ((($148)) + 24|0);
         HEAP32[$134>>2] = $149;
        }
        $176 = (($k$0) + 1)|0;
        $k$0 = $176;
       }
      }
     } while(0);
     while(1) {
      $177 = ($k2$0>>>0)<($82>>>0);
      if (!($177)) {
       $k1$0 = $82;
       break;
      }
      $178 = HEAP8[$args>>0]|0;
      $179 = $178 & 1;
      $180 = ($179<<24>>24)==(0);
      $181 = HEAP32[$24>>2]|0;
      $182 = $178&255;
      $183 = $182 >>> 1;
      $184 = $180 ? $183 : $181;
      $185 = ($184>>>0)>(1);
      if ($185) {
       __THREW__ = 0;
       (invoke_iii(93,($args|0),(5693|0))|0);
       $186 = __THREW__; __THREW__ = 0;
       $187 = $186&1;
       if ($187) {
        label = 17;
        break L10;
       }
      }
      $188 = HEAP32[$db>>2]|0;
      $189 = (($188) + (($k2$0*24)|0)|0);
      __THREW__ = 0;
      invoke_vii(96,($0|0),($189|0));
      $190 = __THREW__; __THREW__ = 0;
      $191 = $190&1;
      if ($191) {
       label = 17;
       break L10;
      }
      $192 = HEAP8[$0>>0]|0;
      $193 = $192 & 1;
      $194 = ($193<<24>>24)==(0);
      $195 = HEAP32[$25>>2]|0;
      $196 = $194 ? $26 : $195;
      $197 = HEAP32[$27>>2]|0;
      $198 = $192&255;
      $199 = $198 >>> 1;
      $200 = $194 ? $199 : $197;
      __THREW__ = 0;
      (invoke_iiii(91,($args|0),($196|0),($200|0))|0);
      $201 = __THREW__; __THREW__ = 0;
      $202 = $201&1;
      if ($202) {
       label = 59;
       break L10;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
      $203 = (($k2$0) + 1)|0;
      $k2$0 = $203;
     }
     while(1) {
      $206 = ($k1$0|0)==($75|0);
      if ($206) {
       $t$0 = $76;
       continue L10;
      }
      $207 = HEAP32[$20>>2]|0;
      $208 = ((($207)) + -24|0);
      $209 = $207;
      while(1) {
       $210 = ($209|0)==($208|0);
       if ($210) {
        break;
       }
       $211 = ((($209)) + -24|0);
       HEAP32[$20>>2] = $211;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($211);
       $$pre$i16 = HEAP32[$20>>2]|0;
       $209 = $$pre$i16;
      }
      $212 = (($k1$0) + -1)|0;
      $k1$0 = $212;
     }
    }
    switch (label|0) {
     case 13: {
      __THREW__ = 0;
      invoke_vi(102,($28|0));
      $52 = __THREW__; __THREW__ = 0;
      label = 20;
      break;
     }
     case 17: {
      $64 = ___cxa_find_matching_catch_2()|0;
      $65 = tempRet0;
      $eh$lpad$body$index6Z2D = $65;$eh$lpad$body$indexZ2D = $64;
      label = 21;
      break;
     }
     case 18: {
      $66 = ___cxa_find_matching_catch_2()|0;
      $67 = tempRet0;
      $eh$lpad$body$index6Z2D = $67;$eh$lpad$body$indexZ2D = $66;
      label = 21;
      break;
     }
     case 19: {
      $68 = ___cxa_find_matching_catch_2()|0;
      $69 = tempRet0;
      $eh$lpad$body$index6Z2D = $69;$eh$lpad$body$indexZ2D = $68;
      label = 21;
      break;
     }
     case 32: {
      __THREW__ = 0;
      invoke_vi(102,($$lcssa|0));
      $115 = __THREW__; __THREW__ = 0;
      label = 20;
      break;
     }
     case 40: {
      $146 = ___cxa_find_matching_catch_2()|0;
      $147 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa148);
      $eh$lpad$body$index6Z2D = $147;$eh$lpad$body$indexZ2D = $146;
      label = 21;
      break;
     }
     case 43: {
      __THREW__ = 0;
      invoke_vi(102,($$lcssa145|0));
      $157 = __THREW__; __THREW__ = 0;
      label = 20;
      break;
     }
     case 48: {
      $171 = ___cxa_find_matching_catch_2()|0;
      $172 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa149);
      $eh$lpad$body$i$i$index15Z2D = $172;$eh$lpad$body$i$i$indexZ2D = $171;
      label = 50;
      break;
     }
     case 49: {
      $173 = ___cxa_find_matching_catch_2()|0;
      $174 = tempRet0;
      $eh$lpad$body$i$i$index15Z2D = $174;$eh$lpad$body$i$i$indexZ2D = $173;
      label = 50;
      break;
     }
     case 59: {
      $204 = ___cxa_find_matching_catch_2()|0;
      $205 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
      $$05 = $205;$$06 = $204;
      break;
     }
     case 65: {
      $213 = ((($t$0$lcssa)) + 1|0);
      $214 = HEAP8[$args>>0]|0;
      $215 = $214 & 1;
      $216 = ($215<<24>>24)==(0);
      $217 = ((($args)) + 8|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = HEAP32[$24>>2]|0;
      $220 = ((($args)) + 1|0);
      $221 = $214&255;
      $222 = $221 >>> 1;
      $223 = $216 ? $220 : $218;
      $224 = $216 ? $222 : $219;
      $225 = (($223) + ($224)|0);
      $226 = ((($225)) + -1|0);
      $227 = HEAP8[$226>>0]|0;
      $228 = ($227<<24>>24)==(62);
      if ($228) {
       __THREW__ = 0;
       (invoke_iii(93,($args|0),(5696|0))|0);
       $231 = __THREW__; __THREW__ = 0;
       $232 = $231&1;
       if ($232) {
        label = 20;
        break;
       }
      } else {
       __THREW__ = 0;
       (invoke_iii(93,($args|0),(5106|0))|0);
       $229 = __THREW__; __THREW__ = 0;
       $230 = $229&1;
       if ($230) {
        label = 20;
        break;
       }
      }
      ;HEAP32[$2>>2]=HEAP32[$args>>2]|0;HEAP32[$2+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$args+8>>2]|0;
      $__i$0$i$i = 0;
      while(1) {
       $exitcond$i$i = ($__i$0$i$i|0)==(3);
       if ($exitcond$i$i) {
        break;
       }
       $233 = (($args) + ($__i$0$i$i<<2)|0);
       HEAP32[$233>>2] = 0;
       $234 = (($__i$0$i$i) + 1)|0;
       $__i$0$i$i = $234;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($1,$2);
      $235 = HEAP32[$20>>2]|0;
      $236 = ((($db)) + 8|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = ($235>>>0)<($237>>>0);
      $239 = $237;
      if ($238) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($235,$1);
       $240 = HEAP32[$20>>2]|0;
       $241 = ((($240)) + 24|0);
       HEAP32[$20>>2] = $241;
      } else {
       $242 = $235;
       $243 = ((($db)) + 12|0);
       $244 = HEAP32[$db>>2]|0;
       $245 = (($242) - ($244))|0;
       $246 = (($245|0) / 24)&-1;
       $247 = (($246) + 1)|0;
       $248 = ($245|0)<(-24);
       if ($248) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $249 = __THREW__; __THREW__ = 0;
        $250 = ___cxa_find_matching_catch_2()|0;
        $251 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
        $$05 = $251;$$06 = $250;
        break;
       }
       $252 = (($239) - ($244))|0;
       $253 = (($252|0) / 24)&-1;
       $254 = ($253>>>0)<(1073741823);
       if ($254) {
        $255 = $253 << 1;
        $256 = ($255>>>0)<($247>>>0);
        $257 = $256 ? $247 : $255;
        $$0$i$i$i22 = $257;
       } else {
        $$0$i$i$i22 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i21,$$0$i$i$i22,$246,$243);
       $258 = ((($__v$i$i21)) + 8|0);
       $259 = HEAP32[$258>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($259,$1);
       $260 = ((($259)) + 24|0);
       HEAP32[$258>>2] = $260;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i21);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i21);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
      $$3 = $213;
      break L1;
      break;
     }
     case 79: {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
      $$3 = $first;
      break L1;
      break;
     }
    }
    if ((label|0) == 20) {
     $70 = ___cxa_find_matching_catch_2()|0;
     $71 = tempRet0;
     $eh$lpad$body$index6Z2D = $71;$eh$lpad$body$indexZ2D = $70;
     label = 21;
    }
    else if ((label|0) == 50) {
     __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i10);
     $eh$lpad$body$index6Z2D = $eh$lpad$body$i$i$index15Z2D;$eh$lpad$body$indexZ2D = $eh$lpad$body$i$i$indexZ2D;
     label = 21;
    }
    if ((label|0) == 21) {
     $$05 = $eh$lpad$body$index6Z2D;$$06 = $eh$lpad$body$indexZ2D;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
    ___resumeException($$06|0);
    // unreachable;
   } else {
    $$3 = $first;
   }
  } else {
   $$3 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$4 = 0, $$first = 0, $$first7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond6 = 0, $t$0 = 0, $t$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($first|0)==($last|0);
 L1: do {
  if ($0) {
   $$4 = $first;
  } else {
   $1 = HEAP8[$first>>0]|0;
   $2 = $1 << 24 >> 24;
   switch ($2|0) {
   case 88:  {
    $3 = ((($first)) + 1|0);
    $4 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($3,$last,$db)|0);
    $5 = ($4|0)==($3|0);
    $6 = ($4|0)==($last|0);
    $or$cond = $5 | $6;
    if ($or$cond) {
     $$4 = $first;
     break L1;
    }
    $7 = HEAP8[$4>>0]|0;
    $8 = ($7<<24>>24)==(69);
    $9 = ((($4)) + 1|0);
    $$first = $8 ? $9 : $first;
    $$4 = $$first;
    break L1;
    break;
   }
   case 74:  {
    $10 = ((($first)) + 1|0);
    $11 = ($10|0)==($last|0);
    if ($11) {
     $$4 = $first;
     break L1;
    } else {
     $t$0 = $10;
    }
    while(1) {
     $12 = HEAP8[$t$0>>0]|0;
     $13 = ($12<<24>>24)==(69);
     if ($13) {
      $t$0$lcssa = $t$0;
      break;
     }
     $14 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($t$0,$last,$db)|0);
     $15 = ($14|0)==($t$0|0);
     if ($15) {
      $$4 = $first;
      break L1;
     } else {
      $t$0 = $14;
     }
    }
    $16 = ((($t$0$lcssa)) + 1|0);
    $$4 = $16;
    break L1;
    break;
   }
   case 76:  {
    $17 = ((($first)) + 1|0);
    $18 = ($17|0)==($last|0);
    if (!($18)) {
     $19 = HEAP8[$17>>0]|0;
     $20 = ($19<<24>>24)==(90);
     if ($20) {
      $21 = ((($first)) + 2|0);
      $22 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($21,$last,$db)|0);
      $23 = ($22|0)==($21|0);
      $24 = ($22|0)==($last|0);
      $or$cond6 = $23 | $24;
      if ($or$cond6) {
       $$4 = $first;
       break L1;
      }
      $25 = HEAP8[$22>>0]|0;
      $26 = ($25<<24>>24)==(69);
      $27 = ((($22)) + 1|0);
      $$first7 = $26 ? $27 : $first;
      $$4 = $$first7;
      break L1;
     }
    }
    $28 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    $$4 = $28;
    break L1;
    break;
   }
   default: {
    $29 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    $$4 = $29;
    break L1;
   }
   }
  }
 } while(0);
 return ($$4|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0$i$i$i = 0, $$0$i$i$i13 = 0, $$0$i$i$i8 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$i$i = 0, $__v$i$i12 = 0, $__v$i$i7 = 0, $k1$0 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i12 = sp + 112|0;
 $__v$i$i7 = sp + 92|0;
 $__v$i$i = sp + 72|0;
 $0 = sp + 56|0;
 $1 = sp + 48|0;
 $2 = sp + 32|0;
 $3 = sp + 24|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = ($first|0)==($last|0);
 L1: do {
  if ($6) {
   $$1 = $first;
  } else {
   $7 = HEAP8[$first>>0]|0;
   $8 = $7 << 24 >> 24;
   L3: do {
    switch ($8|0) {
    case 84:  {
     $9 = ((($db)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = HEAP32[$db>>2]|0;
     $12 = (($10) - ($11))|0;
     $13 = (($12|0) / 24)&-1;
     $14 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $15 = HEAP32[$9>>2]|0;
     $16 = HEAP32[$db>>2]|0;
     $17 = (($15) - ($16))|0;
     $18 = (($17|0) / 24)&-1;
     $19 = ($14|0)!=($first|0);
     $20 = (($13) + 1)|0;
     $21 = ($18|0)==($20|0);
     $or$cond = $19 & $21;
     $22 = $15;
     if (!($or$cond)) {
      $76 = $22;$k1$0 = $18;
      while(1) {
       $74 = ($k1$0|0)==($13|0);
       if ($74) {
        $$1 = $first;
        break L1;
       }
       $75 = ((($76)) + -24|0);
       $77 = $76;
       while(1) {
        $78 = ($77|0)==($75|0);
        if ($78) {
         break;
        }
        $79 = ((($77)) + -24|0);
        HEAP32[$9>>2] = $79;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($79);
        $$pre$i = HEAP32[$9>>2]|0;
        $77 = $$pre$i;
       }
       $80 = (($k1$0) + -1)|0;
       $76 = $75;$k1$0 = $80;
      }
     }
     $23 = ((($db)) + 16|0);
     $24 = ((($22)) + -24|0);
     $25 = ((($db)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     HEAP32[$1>>2] = $26;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($0,$24,$1);
     $27 = ((($db)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($db)) + 24|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($28>>>0)<($30>>>0);
     $32 = $30;
     if ($31) {
      $33 = ((($0)) + 12|0);
      $34 = ((($28)) + 4|0);
      $35 = HEAP32[$33>>2]|0;
      $36 = ((($28)) + 12|0);
      HEAP32[$36>>2] = $35;
      $37 = HEAP32[$0>>2]|0;
      HEAP32[$28>>2] = $37;
      $38 = ((($0)) + 4|0);
      $39 = HEAP32[$38>>2]|0;
      HEAP32[$34>>2] = $39;
      $40 = ((($0)) + 8|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ((($28)) + 8|0);
      HEAP32[$42>>2] = $41;
      HEAP32[$40>>2] = 0;
      HEAP32[$38>>2] = 0;
      HEAP32[$0>>2] = 0;
      $43 = HEAP32[$27>>2]|0;
      $44 = ((($43)) + 16|0);
      HEAP32[$27>>2] = $44;
     } else {
      $45 = $28;
      $46 = ((($db)) + 28|0);
      $47 = HEAP32[$23>>2]|0;
      $48 = (($45) - ($47))|0;
      $49 = $48 >> 4;
      $50 = (($49) + 1)|0;
      $51 = ($48|0)<(-16);
      if ($51) {
       __THREW__ = 0;
       invoke_vi(102,($23|0));
       $52 = __THREW__; __THREW__ = 0;
       $53 = ___cxa_find_matching_catch_2()|0;
       $54 = tempRet0;
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
       $$01 = $54;$$02 = $53;
       break L3;
      }
      $55 = (($32) - ($47))|0;
      $56 = $55 >> 4;
      $57 = ($56>>>0)<(1073741823);
      if ($57) {
       $58 = $55 >> 3;
       $59 = ($58>>>0)<($50>>>0);
       $60 = $59 ? $50 : $58;
       $$0$i$i$i = $60;
      } else {
       $$0$i$i$i = 2147483647;
      }
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i,$$0$i$i$i,$49,$46);
      $61 = ((($__v$i$i)) + 8|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ((($0)) + 12|0);
      $64 = ((($62)) + 4|0);
      $65 = HEAP32[$63>>2]|0;
      $66 = ((($62)) + 12|0);
      HEAP32[$66>>2] = $65;
      $67 = HEAP32[$0>>2]|0;
      HEAP32[$62>>2] = $67;
      $68 = ((($0)) + 4|0);
      $69 = HEAP32[$68>>2]|0;
      HEAP32[$64>>2] = $69;
      $70 = ((($0)) + 8|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ((($62)) + 8|0);
      HEAP32[$72>>2] = $71;
      HEAP32[$70>>2] = 0;
      HEAP32[$68>>2] = 0;
      HEAP32[$0>>2] = 0;
      $73 = ((($62)) + 16|0);
      HEAP32[$61>>2] = $73;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($23,$__v$i$i);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
     $$1 = $14;
     break L1;
     break;
    }
    case 68:  {
     $81 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $82 = ($81|0)==($first|0);
     if ($82) {
      $$1 = $first;
      break L1;
     }
     $83 = HEAP32[$db>>2]|0;
     $84 = ((($db)) + 4|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($83|0)==($85|0);
     if ($86) {
      $$1 = $first;
      break L1;
     }
     $87 = ((($db)) + 16|0);
     $88 = ((($85)) + -24|0);
     $89 = ((($db)) + 12|0);
     $90 = HEAP32[$89>>2]|0;
     HEAP32[$3>>2] = $90;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($2,$88,$3);
     $91 = ((($db)) + 20|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ((($db)) + 24|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($92>>>0)<($94>>>0);
     $96 = $94;
     if ($95) {
      $97 = ((($2)) + 12|0);
      $98 = ((($92)) + 4|0);
      $99 = HEAP32[$97>>2]|0;
      $100 = ((($92)) + 12|0);
      HEAP32[$100>>2] = $99;
      $101 = HEAP32[$2>>2]|0;
      HEAP32[$92>>2] = $101;
      $102 = ((($2)) + 4|0);
      $103 = HEAP32[$102>>2]|0;
      HEAP32[$98>>2] = $103;
      $104 = ((($2)) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $105;
      HEAP32[$104>>2] = 0;
      HEAP32[$102>>2] = 0;
      HEAP32[$2>>2] = 0;
      $107 = HEAP32[$91>>2]|0;
      $108 = ((($107)) + 16|0);
      HEAP32[$91>>2] = $108;
     } else {
      $109 = $92;
      $110 = ((($db)) + 28|0);
      $111 = HEAP32[$87>>2]|0;
      $112 = (($109) - ($111))|0;
      $113 = $112 >> 4;
      $114 = (($113) + 1)|0;
      $115 = ($112|0)<(-16);
      if ($115) {
       __THREW__ = 0;
       invoke_vi(102,($87|0));
       $116 = __THREW__; __THREW__ = 0;
       $117 = ___cxa_find_matching_catch_2()|0;
       $118 = tempRet0;
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($2);
       $$01 = $118;$$02 = $117;
       break L3;
      }
      $119 = (($96) - ($111))|0;
      $120 = $119 >> 4;
      $121 = ($120>>>0)<(1073741823);
      if ($121) {
       $122 = $119 >> 3;
       $123 = ($122>>>0)<($114>>>0);
       $124 = $123 ? $114 : $122;
       $$0$i$i$i8 = $124;
      } else {
       $$0$i$i$i8 = 2147483647;
      }
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i7,$$0$i$i$i8,$113,$110);
      $125 = ((($__v$i$i7)) + 8|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($2)) + 12|0);
      $128 = ((($126)) + 4|0);
      $129 = HEAP32[$127>>2]|0;
      $130 = ((($126)) + 12|0);
      HEAP32[$130>>2] = $129;
      $131 = HEAP32[$2>>2]|0;
      HEAP32[$126>>2] = $131;
      $132 = ((($2)) + 4|0);
      $133 = HEAP32[$132>>2]|0;
      HEAP32[$128>>2] = $133;
      $134 = ((($2)) + 8|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = ((($126)) + 8|0);
      HEAP32[$136>>2] = $135;
      HEAP32[$134>>2] = 0;
      HEAP32[$132>>2] = 0;
      HEAP32[$2>>2] = 0;
      $137 = ((($126)) + 16|0);
      HEAP32[$125>>2] = $137;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($87,$__v$i$i7);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i7);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($2);
     $$1 = $81;
     break L1;
     break;
    }
    case 83:  {
     $138 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
     $139 = ($138|0)==($first|0);
     if (!($139)) {
      $$1 = $138;
      break L1;
     }
     $140 = $last;
     $141 = $first;
     $142 = (($140) - ($141))|0;
     $143 = ($142|0)>(2);
     if (!($143)) {
      $$1 = $first;
      break L1;
     }
     $144 = ((($first)) + 1|0);
     $145 = HEAP8[$144>>0]|0;
     $146 = ($145<<24>>24)==(116);
     if (!($146)) {
      $$1 = $first;
      break L1;
     }
     $147 = ((($first)) + 2|0);
     $148 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($147,$last,$db)|0);
     $149 = ($148|0)==($147|0);
     if ($149) {
      $$1 = $first;
      break L1;
     }
     $150 = HEAP32[$db>>2]|0;
     $151 = ((($db)) + 4|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($150|0)==($152|0);
     if ($153) {
      $$1 = $first;
      break L1;
     }
     $154 = ((($152)) + -24|0);
     (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($154,0,6091)|0);
     $155 = ((($db)) + 16|0);
     $156 = HEAP32[$151>>2]|0;
     $157 = ((($156)) + -24|0);
     $158 = ((($db)) + 12|0);
     $159 = HEAP32[$158>>2]|0;
     HEAP32[$5>>2] = $159;
     __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($4,$157,$5);
     $160 = ((($db)) + 20|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ((($db)) + 24|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($161>>>0)<($163>>>0);
     $165 = $163;
     if ($164) {
      $166 = ((($4)) + 12|0);
      $167 = ((($161)) + 4|0);
      $168 = HEAP32[$166>>2]|0;
      $169 = ((($161)) + 12|0);
      HEAP32[$169>>2] = $168;
      $170 = HEAP32[$4>>2]|0;
      HEAP32[$161>>2] = $170;
      $171 = ((($4)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      HEAP32[$167>>2] = $172;
      $173 = ((($4)) + 8|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ((($161)) + 8|0);
      HEAP32[$175>>2] = $174;
      HEAP32[$173>>2] = 0;
      HEAP32[$171>>2] = 0;
      HEAP32[$4>>2] = 0;
      $176 = HEAP32[$160>>2]|0;
      $177 = ((($176)) + 16|0);
      HEAP32[$160>>2] = $177;
     } else {
      $178 = $161;
      $179 = ((($db)) + 28|0);
      $180 = HEAP32[$155>>2]|0;
      $181 = (($178) - ($180))|0;
      $182 = $181 >> 4;
      $183 = (($182) + 1)|0;
      $184 = ($181|0)<(-16);
      if ($184) {
       __THREW__ = 0;
       invoke_vi(102,($155|0));
       $185 = __THREW__; __THREW__ = 0;
       $186 = ___cxa_find_matching_catch_2()|0;
       $187 = tempRet0;
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
       $$01 = $187;$$02 = $186;
       break L3;
      }
      $188 = (($165) - ($180))|0;
      $189 = $188 >> 4;
      $190 = ($189>>>0)<(1073741823);
      if ($190) {
       $191 = $188 >> 3;
       $192 = ($191>>>0)<($183>>>0);
       $193 = $192 ? $183 : $191;
       $$0$i$i$i13 = $193;
      } else {
       $$0$i$i$i13 = 2147483647;
      }
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i12,$$0$i$i$i13,$182,$179);
      $194 = ((($__v$i$i12)) + 8|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ((($4)) + 12|0);
      $197 = ((($195)) + 4|0);
      $198 = HEAP32[$196>>2]|0;
      $199 = ((($195)) + 12|0);
      HEAP32[$199>>2] = $198;
      $200 = HEAP32[$4>>2]|0;
      HEAP32[$195>>2] = $200;
      $201 = ((($4)) + 4|0);
      $202 = HEAP32[$201>>2]|0;
      HEAP32[$197>>2] = $202;
      $203 = ((($4)) + 8|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ((($195)) + 8|0);
      HEAP32[$205>>2] = $204;
      HEAP32[$203>>2] = 0;
      HEAP32[$201>>2] = 0;
      HEAP32[$4>>2] = 0;
      $206 = ((($195)) + 16|0);
      HEAP32[$194>>2] = $206;
      __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($155,$__v$i$i12);
      __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i12);
     }
     __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
     $$1 = $148;
     break L1;
     break;
    }
    default: {
     $$1 = $first;
     break L1;
    }
    }
   } while(0);
   ___resumeException($$02|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($this,$__x,$__a) {
 $this = $this|0;
 $__x = $__x|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$__a>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = ((($this)) + 12|0);
 HEAP32[$3>>2] = $2;
 $4 = $2;
 $5 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($4,24)|0);
 HEAP32[$0>>2] = $5;
 HEAP32[$this>>2] = $5;
 $6 = ((($5)) + 24|0);
 $7 = ((($this)) + 8|0);
 HEAP32[$7>>2] = $6;
 __THREW__ = 0;
 invoke_vii(100,($5|0),($__x|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $16 = ___cxa_find_matching_catch_2()|0;
   $17 = tempRet0;
   $eh$lpad$body$index2Z2D = $17;$eh$lpad$body$indexZ2D = $16;
  } else {
   $10 = ((($5)) + 12|0);
   $11 = ((($__x)) + 12|0);
   __THREW__ = 0;
   invoke_vii(100,($10|0),($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch_2()|0;
    $15 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    $eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
    break;
   } else {
    $18 = HEAP32[$0>>2]|0;
    $19 = ((($18)) + 24|0);
    HEAP32[$0>>2] = $19;
    return;
   }
  }
 } while(0);
 __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$1 = 0, $$12 = 0, $$15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i8 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 40|0;
 $1 = sp + 24|0;
 $2 = sp + 12|0;
 $3 = sp;
 $4 = $last;
 $5 = $first;
 $6 = (($4) - ($5))|0;
 $7 = ($6|0)>(3);
 L1: do {
  if ($7) {
   $8 = HEAP8[$first>>0]|0;
   $9 = ($8<<24>>24)==(68);
   if ($9) {
    $10 = ((($first)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = $11 << 24 >> 24;
    switch ($12|0) {
    case 84: case 116:  {
     break;
    }
    default: {
     $$15 = $first;
     break L1;
    }
    }
    $13 = ((($first)) + 2|0);
    $14 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13,$last,$db)|0);
    $15 = ($14|0)==($13|0);
    $16 = ($14|0)==($last|0);
    $or$cond = $15 | $16;
    if ($or$cond) {
     $$15 = $first;
    } else {
     $17 = HEAP8[$14>>0]|0;
     $18 = ($17<<24>>24)==(69);
     if ($18) {
      $19 = HEAP32[$db>>2]|0;
      $20 = ((($db)) + 4|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ($19|0)==($21|0);
      if ($22) {
       $$15 = $first;
      } else {
       $23 = ((($21)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$23);
       __THREW__ = 0;
       $24 = (invoke_iiii(92,($3|0),0,(5699|0))|0);
       $25 = __THREW__; __THREW__ = 0;
       $26 = $25&1;
       do {
        if ($26) {
         $35 = ___cxa_find_matching_catch_2()|0;
         $36 = tempRet0;
         $$1 = $36;$$12 = $35;
        } else {
         ;HEAP32[$2>>2]=HEAP32[$24>>2]|0;HEAP32[$2+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$24+8>>2]|0;
         $__i$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($__i$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $27 = (($24) + ($__i$0$i$i$i<<2)|0);
          HEAP32[$27>>2] = 0;
          $28 = (($__i$0$i$i$i) + 1)|0;
          $__i$0$i$i$i = $28;
         }
         __THREW__ = 0;
         $29 = (invoke_iii(93,($2|0),(5061|0))|0);
         $30 = __THREW__; __THREW__ = 0;
         $31 = $30&1;
         if ($31) {
          $37 = ___cxa_find_matching_catch_2()|0;
          $38 = tempRet0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
          $$1 = $38;$$12 = $37;
          break;
         }
         ;HEAP32[$1>>2]=HEAP32[$29>>2]|0;HEAP32[$1+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$29+8>>2]|0;
         $__i$0$i$i$i8 = 0;
         while(1) {
          $exitcond$i$i$i9 = ($__i$0$i$i$i8|0)==(3);
          if ($exitcond$i$i$i9) {
           break;
          }
          $32 = (($29) + ($__i$0$i$i$i8<<2)|0);
          HEAP32[$32>>2] = 0;
          $33 = (($__i$0$i$i$i8) + 1)|0;
          $__i$0$i$i$i8 = $33;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($23,$0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($2);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $34 = ((($14)) + 1|0);
         $$15 = $34;
         break L1;
        }
       } while(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       ___resumeException($$12|0);
       // unreachable;
      }
     } else {
      $$15 = $first;
     }
    }
   } else {
    $$15 = $first;
   }
  } else {
   $$15 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$15|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0$i$i$i = 0, $$0$i$i$i14 = 0, $$0$i$i$i19 = 0, $$0$i$i$i24 = 0, $$0$i$i$i29 = 0, $$0$i$i$i34 = 0, $$0$i$i$i39 = 0, $$0$i$i$i42 = 0, $$05 = 0, $$06 = 0, $$1 = 0, $$lcssa = 0, $$lcssa88 = 0, $$lcssa91 = 0, $$lcssa92 = 0, $$lcssa94 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__begin$sroa$0$0 = 0, $__begin2$sroa$0$0 = 0, $__v$i$i = 0, $__v$i$i13 = 0, $__v$i$i18 = 0, $__v$i$i23 = 0, $__v$i$i28 = 0, $__v$i$i33 = 0, $__v$i$i38 = 0, $__v$i$i40 = 0, $eh$lpad$body$i$i$index2Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$i$i45$index7Z2D = 0, $eh$lpad$body$i$i45$indexZ2D = 0;
 var $isdigit = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit8 = 0, $isdigittmp = 0, $isdigittmp11 = 0, $isdigittmp7 = 0, $isdigittmp9 = 0, $sub$0 = 0, $sub$1 = 0, $sub$1$lcssa89 = 0, $sub$2 = 0, $t$0 = 0, $t$0$lcssa90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i40 = sp + 284|0;
 $__v$i$i38 = sp + 264|0;
 $__v$i$i33 = sp + 244|0;
 $__v$i$i28 = sp + 224|0;
 $__v$i$i23 = sp + 204|0;
 $__v$i$i18 = sp + 184|0;
 $__v$i$i13 = sp + 164|0;
 $__v$i$i = sp + 144|0;
 $0 = sp + 120|0;
 $1 = sp + 96|0;
 $2 = sp + 72|0;
 $3 = sp + 48|0;
 $4 = sp + 24|0;
 $5 = sp;
 $6 = $last;
 $7 = $first;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(1);
 L1: do {
  if ($9) {
   $10 = HEAP8[$first>>0]|0;
   $11 = ($10<<24>>24)==(83);
   if ($11) {
    $12 = ((($first)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    L4: do {
     switch ($14|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($0,5709);
      $15 = ((($db)) + 4|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ((($db)) + 8|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = ($16>>>0)<($18>>>0);
      $20 = $18;
      if ($19) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($16,$0);
       $21 = HEAP32[$15>>2]|0;
       $22 = ((($21)) + 24|0);
       HEAP32[$15>>2] = $22;
      } else {
       $23 = $16;
       $24 = ((($db)) + 12|0);
       $25 = HEAP32[$db>>2]|0;
       $26 = (($23) - ($25))|0;
       $27 = (($26|0) / 24)&-1;
       $28 = (($27) + 1)|0;
       $29 = ($26|0)<(-24);
       if ($29) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $30 = __THREW__; __THREW__ = 0;
        $31 = ___cxa_find_matching_catch_2()|0;
        $32 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
        $$05 = $31;$$06 = $32;
        break L4;
       }
       $33 = (($20) - ($25))|0;
       $34 = (($33|0) / 24)&-1;
       $35 = ($34>>>0)<(1073741823);
       if ($35) {
        $36 = $34 << 1;
        $37 = ($36>>>0)<($28>>>0);
        $38 = $37 ? $28 : $36;
        $$0$i$i$i = $38;
       } else {
        $$0$i$i$i = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i,$$0$i$i$i,$27,$24);
       $39 = ((($__v$i$i)) + 8|0);
       $40 = HEAP32[$39>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($40,$0);
       $41 = ((($40)) + 24|0);
       HEAP32[$39>>2] = $41;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
      $42 = ((($first)) + 2|0);
      $$1 = $42;
      break L1;
      break;
     }
     case 98:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($1,5724);
      $43 = ((($db)) + 4|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ((($db)) + 8|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($44>>>0)<($46>>>0);
      $48 = $46;
      if ($47) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($44,$1);
       $49 = HEAP32[$43>>2]|0;
       $50 = ((($49)) + 24|0);
       HEAP32[$43>>2] = $50;
      } else {
       $51 = $44;
       $52 = ((($db)) + 12|0);
       $53 = HEAP32[$db>>2]|0;
       $54 = (($51) - ($53))|0;
       $55 = (($54|0) / 24)&-1;
       $56 = (($55) + 1)|0;
       $57 = ($54|0)<(-24);
       if ($57) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $58 = __THREW__; __THREW__ = 0;
        $59 = ___cxa_find_matching_catch_2()|0;
        $60 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
        $$05 = $59;$$06 = $60;
        break L4;
       }
       $61 = (($48) - ($53))|0;
       $62 = (($61|0) / 24)&-1;
       $63 = ($62>>>0)<(1073741823);
       if ($63) {
        $64 = $62 << 1;
        $65 = ($64>>>0)<($56>>>0);
        $66 = $65 ? $56 : $64;
        $$0$i$i$i14 = $66;
       } else {
        $$0$i$i$i14 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i13,$$0$i$i$i14,$55,$52);
       $67 = ((($__v$i$i13)) + 8|0);
       $68 = HEAP32[$67>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($68,$1);
       $69 = ((($68)) + 24|0);
       HEAP32[$67>>2] = $69;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i13);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i13);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($1);
      $70 = ((($first)) + 2|0);
      $$1 = $70;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($2,5742);
      $71 = ((($db)) + 4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ((($db)) + 8|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ($72>>>0)<($74>>>0);
      $76 = $74;
      if ($75) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($72,$2);
       $77 = HEAP32[$71>>2]|0;
       $78 = ((($77)) + 24|0);
       HEAP32[$71>>2] = $78;
      } else {
       $79 = $72;
       $80 = ((($db)) + 12|0);
       $81 = HEAP32[$db>>2]|0;
       $82 = (($79) - ($81))|0;
       $83 = (($82|0) / 24)&-1;
       $84 = (($83) + 1)|0;
       $85 = ($82|0)<(-24);
       if ($85) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $86 = __THREW__; __THREW__ = 0;
        $87 = ___cxa_find_matching_catch_2()|0;
        $88 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
        $$05 = $87;$$06 = $88;
        break L4;
       }
       $89 = (($76) - ($81))|0;
       $90 = (($89|0) / 24)&-1;
       $91 = ($90>>>0)<(1073741823);
       if ($91) {
        $92 = $90 << 1;
        $93 = ($92>>>0)<($84>>>0);
        $94 = $93 ? $84 : $92;
        $$0$i$i$i19 = $94;
       } else {
        $$0$i$i$i19 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i18,$$0$i$i$i19,$83,$80);
       $95 = ((($__v$i$i18)) + 8|0);
       $96 = HEAP32[$95>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($96,$2);
       $97 = ((($96)) + 24|0);
       HEAP32[$95>>2] = $97;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i18);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i18);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
      $98 = ((($first)) + 2|0);
      $$1 = $98;
      break L1;
      break;
     }
     case 105:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($3,5754);
      $99 = ((($db)) + 4|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ((($db)) + 8|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ($100>>>0)<($102>>>0);
      $104 = $102;
      if ($103) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($100,$3);
       $105 = HEAP32[$99>>2]|0;
       $106 = ((($105)) + 24|0);
       HEAP32[$99>>2] = $106;
      } else {
       $107 = $100;
       $108 = ((($db)) + 12|0);
       $109 = HEAP32[$db>>2]|0;
       $110 = (($107) - ($109))|0;
       $111 = (($110|0) / 24)&-1;
       $112 = (($111) + 1)|0;
       $113 = ($110|0)<(-24);
       if ($113) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $114 = __THREW__; __THREW__ = 0;
        $115 = ___cxa_find_matching_catch_2()|0;
        $116 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
        $$05 = $115;$$06 = $116;
        break L4;
       }
       $117 = (($104) - ($109))|0;
       $118 = (($117|0) / 24)&-1;
       $119 = ($118>>>0)<(1073741823);
       if ($119) {
        $120 = $118 << 1;
        $121 = ($120>>>0)<($112>>>0);
        $122 = $121 ? $112 : $120;
        $$0$i$i$i24 = $122;
       } else {
        $$0$i$i$i24 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i23,$$0$i$i$i24,$111,$108);
       $123 = ((($__v$i$i23)) + 8|0);
       $124 = HEAP32[$123>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($124,$3);
       $125 = ((($124)) + 24|0);
       HEAP32[$123>>2] = $125;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i23);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i23);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $126 = ((($first)) + 2|0);
      $$1 = $126;
      break L1;
      break;
     }
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($4,5767);
      $127 = ((($db)) + 4|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = ((($db)) + 8|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($128>>>0)<($130>>>0);
      $132 = $130;
      if ($131) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($128,$4);
       $133 = HEAP32[$127>>2]|0;
       $134 = ((($133)) + 24|0);
       HEAP32[$127>>2] = $134;
      } else {
       $135 = $128;
       $136 = ((($db)) + 12|0);
       $137 = HEAP32[$db>>2]|0;
       $138 = (($135) - ($137))|0;
       $139 = (($138|0) / 24)&-1;
       $140 = (($139) + 1)|0;
       $141 = ($138|0)<(-24);
       if ($141) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $142 = __THREW__; __THREW__ = 0;
        $143 = ___cxa_find_matching_catch_2()|0;
        $144 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
        $$05 = $143;$$06 = $144;
        break L4;
       }
       $145 = (($132) - ($137))|0;
       $146 = (($145|0) / 24)&-1;
       $147 = ($146>>>0)<(1073741823);
       if ($147) {
        $148 = $146 << 1;
        $149 = ($148>>>0)<($140>>>0);
        $150 = $149 ? $140 : $148;
        $$0$i$i$i29 = $150;
       } else {
        $$0$i$i$i29 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i28,$$0$i$i$i29,$139,$136);
       $151 = ((($__v$i$i28)) + 8|0);
       $152 = HEAP32[$151>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($152,$4);
       $153 = ((($152)) + 24|0);
       HEAP32[$151>>2] = $153;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i28);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i28);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      $154 = ((($first)) + 2|0);
      $$1 = $154;
      break L1;
      break;
     }
     case 100:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($5,5780);
      $155 = ((($db)) + 4|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = ((($db)) + 8|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = ($156>>>0)<($158>>>0);
      $160 = $158;
      if ($159) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($156,$5);
       $161 = HEAP32[$155>>2]|0;
       $162 = ((($161)) + 24|0);
       HEAP32[$155>>2] = $162;
      } else {
       $163 = $156;
       $164 = ((($db)) + 12|0);
       $165 = HEAP32[$db>>2]|0;
       $166 = (($163) - ($165))|0;
       $167 = (($166|0) / 24)&-1;
       $168 = (($167) + 1)|0;
       $169 = ($166|0)<(-24);
       if ($169) {
        __THREW__ = 0;
        invoke_vi(102,($db|0));
        $170 = __THREW__; __THREW__ = 0;
        $171 = ___cxa_find_matching_catch_2()|0;
        $172 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        $$05 = $171;$$06 = $172;
        break L4;
       }
       $173 = (($160) - ($165))|0;
       $174 = (($173|0) / 24)&-1;
       $175 = ($174>>>0)<(1073741823);
       if ($175) {
        $176 = $174 << 1;
        $177 = ($176>>>0)<($168>>>0);
        $178 = $177 ? $168 : $176;
        $$0$i$i$i34 = $178;
       } else {
        $$0$i$i$i34 = 2147483647;
       }
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i33,$$0$i$i$i34,$167,$164);
       $179 = ((($__v$i$i33)) + 8|0);
       $180 = HEAP32[$179>>2]|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($180,$5);
       $181 = ((($180)) + 24|0);
       HEAP32[$179>>2] = $181;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i33);
       __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i33);
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      $182 = ((($first)) + 2|0);
      $$1 = $182;
      break L1;
      break;
     }
     case 95:  {
      $183 = ((($db)) + 16|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = ((($db)) + 20|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = ($184|0)==($186|0);
      if ($187) {
       $$1 = $first;
       break L1;
      }
      $188 = HEAP32[$184>>2]|0;
      $189 = ((($184)) + 4|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = ((($db)) + 4|0);
      $192 = ((($db)) + 8|0);
      $193 = ((($db)) + 12|0);
      $194 = ((($__v$i$i38)) + 8|0);
      $__begin$sroa$0$0 = $188;
      while(1) {
       $195 = ($__begin$sroa$0$0|0)==($190|0);
       if ($195) {
        label = 55;
        break;
       }
       $197 = HEAP32[$191>>2]|0;
       $198 = HEAP32[$192>>2]|0;
       $199 = ($197|0)==($198|0);
       $200 = $198;
       if ($199) {
        $209 = $197;
        $210 = HEAP32[$db>>2]|0;
        $211 = (($209) - ($210))|0;
        $212 = (($211|0) / 24)&-1;
        $213 = (($212) + 1)|0;
        $214 = ($211|0)<(-24);
        if ($214) {
         label = 61;
         break;
        }
        $215 = (($200) - ($210))|0;
        $216 = (($215|0) / 24)&-1;
        $217 = ($216>>>0)<(1073741823);
        if ($217) {
         $218 = $216 << 1;
         $219 = ($218>>>0)<($213>>>0);
         $220 = $219 ? $213 : $218;
         $$0$i$i$i39 = $220;
        } else {
         $$0$i$i$i39 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i38,$$0$i$i$i39,$212,$193);
        $221 = HEAP32[$194>>2]|0;
        __THREW__ = 0;
        invoke_vii(100,($221|0),($__begin$sroa$0$0|0));
        $222 = __THREW__; __THREW__ = 0;
        $223 = $222&1;
        if ($223) {
         label = 67;
         break;
        }
        $224 = ((($221)) + 12|0);
        $225 = ((($__begin$sroa$0$0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($224|0),($225|0));
        $226 = __THREW__; __THREW__ = 0;
        $227 = $226&1;
        if ($227) {
         $$lcssa94 = $221;
         label = 66;
         break;
        }
        $232 = ((($221)) + 24|0);
        HEAP32[$194>>2] = $232;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i38);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($197,$__begin$sroa$0$0);
        $201 = ((($197)) + 12|0);
        $202 = ((($__begin$sroa$0$0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($201|0),($202|0));
        $203 = __THREW__; __THREW__ = 0;
        $204 = $203&1;
        if ($204) {
         $$lcssa92 = $197;
         label = 58;
         break;
        }
        $207 = HEAP32[$191>>2]|0;
        $208 = ((($207)) + 24|0);
        HEAP32[$191>>2] = $208;
       }
       $233 = ((($__begin$sroa$0$0)) + 24|0);
       $__begin$sroa$0$0 = $233;
      }
      if ((label|0) == 55) {
       $196 = ((($first)) + 2|0);
       $$1 = $196;
       break L1;
      }
      else if ((label|0) == 58) {
       $205 = ___cxa_find_matching_catch_2()|0;
       $206 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa92);
       ___resumeException($205|0);
       // unreachable;
      }
      else if ((label|0) == 61) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      else if ((label|0) == 66) {
       $228 = ___cxa_find_matching_catch_2()|0;
       $229 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa94);
       $eh$lpad$body$i$i$index2Z2D = $229;$eh$lpad$body$i$i$indexZ2D = $228;
      }
      else if ((label|0) == 67) {
       $230 = ___cxa_find_matching_catch_2()|0;
       $231 = tempRet0;
       $eh$lpad$body$i$i$index2Z2D = $231;$eh$lpad$body$i$i$indexZ2D = $230;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i38);
      ___resumeException($eh$lpad$body$i$i$indexZ2D|0);
      // unreachable;
      break;
     }
     default: {
      $isdigittmp = (($14) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if ($isdigit) {
       $237 = $13;
      } else {
       $234 = (_isupper($14)|0);
       $235 = ($234|0)==(0);
       if ($235) {
        $$1 = $first;
        break L1;
       }
       $$pre = HEAP8[$12>>0]|0;
       $237 = $$pre;
      }
      $236 = $237 << 24 >> 24;
      $isdigittmp7 = (($236) + -48)|0;
      $isdigit8 = ($isdigittmp7>>>0)<(10);
      $238 = (($236) + -55)|0;
      $sub$0 = $isdigit8 ? $isdigittmp7 : $238;
      $239 = ((($first)) + 2|0);
      $sub$1 = $sub$0;$t$0 = $239;
      while(1) {
       $240 = ($t$0|0)==($last|0);
       if ($240) {
        $$1 = $first;
        break L1;
       }
       $241 = HEAP8[$t$0>>0]|0;
       $242 = $241 << 24 >> 24;
       $isdigittmp9 = (($242) + -48)|0;
       $isdigit10 = ($isdigittmp9>>>0)<(10);
       if ($isdigit10) {
        $248 = $241;
       } else {
        $243 = (_isupper($242)|0);
        $244 = ($243|0)==(0);
        $245 = HEAP8[$t$0>>0]|0;
        if ($244) {
         $$lcssa91 = $245;$sub$1$lcssa89 = $sub$1;$t$0$lcssa90 = $t$0;
         break;
        } else {
         $248 = $245;
        }
       }
       $246 = ($sub$1*36)|0;
       $247 = $248 << 24 >> 24;
       $isdigittmp11 = (($247) + -48)|0;
       $isdigit12 = ($isdigittmp11>>>0)<(10);
       $249 = (($247) + -55)|0;
       $$pn = $isdigit12 ? $isdigittmp11 : $249;
       $sub$2 = (($$pn) + ($246))|0;
       $250 = ((($t$0)) + 1|0);
       $sub$1 = $sub$2;$t$0 = $250;
      }
      $251 = ($$lcssa91<<24>>24)==(95);
      if (!($251)) {
       $$1 = $first;
       break L1;
      }
      $252 = (($sub$1$lcssa89) + 1)|0;
      $253 = ((($db)) + 16|0);
      $254 = ((($db)) + 20|0);
      $255 = HEAP32[$254>>2]|0;
      $256 = HEAP32[$253>>2]|0;
      $257 = (($255) - ($256))|0;
      $258 = $257 >> 4;
      $259 = ($252>>>0)<($258>>>0);
      $260 = $256;
      if (!($259)) {
       $$1 = $first;
       break L1;
      }
      $261 = (($260) + ($252<<4)|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = (((($260) + ($252<<4)|0)) + 4|0);
      $264 = HEAP32[$263>>2]|0;
      $265 = ((($db)) + 4|0);
      $266 = ((($db)) + 8|0);
      $267 = ((($db)) + 12|0);
      $268 = ((($__v$i$i40)) + 8|0);
      $__begin2$sroa$0$0 = $262;
      while(1) {
       $269 = ($__begin2$sroa$0$0|0)==($264|0);
       if ($269) {
        label = 83;
        break;
       }
       $271 = HEAP32[$265>>2]|0;
       $272 = HEAP32[$266>>2]|0;
       $273 = ($271|0)==($272|0);
       $274 = $272;
       if ($273) {
        $283 = $271;
        $284 = HEAP32[$db>>2]|0;
        $285 = (($283) - ($284))|0;
        $286 = (($285|0) / 24)&-1;
        $287 = (($286) + 1)|0;
        $288 = ($285|0)<(-24);
        if ($288) {
         label = 89;
         break;
        }
        $289 = (($274) - ($284))|0;
        $290 = (($289|0) / 24)&-1;
        $291 = ($290>>>0)<(1073741823);
        if ($291) {
         $292 = $290 << 1;
         $293 = ($292>>>0)<($287>>>0);
         $294 = $293 ? $287 : $292;
         $$0$i$i$i42 = $294;
        } else {
         $$0$i$i$i42 = 2147483647;
        }
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i40,$$0$i$i$i42,$286,$267);
        $295 = HEAP32[$268>>2]|0;
        __THREW__ = 0;
        invoke_vii(100,($295|0),($__begin2$sroa$0$0|0));
        $296 = __THREW__; __THREW__ = 0;
        $297 = $296&1;
        if ($297) {
         label = 95;
         break;
        }
        $298 = ((($295)) + 12|0);
        $299 = ((($__begin2$sroa$0$0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($298|0),($299|0));
        $300 = __THREW__; __THREW__ = 0;
        $301 = $300&1;
        if ($301) {
         $$lcssa88 = $295;
         label = 94;
         break;
        }
        $306 = ((($295)) + 24|0);
        HEAP32[$268>>2] = $306;
        __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i40);
        __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i40);
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($271,$__begin2$sroa$0$0);
        $275 = ((($271)) + 12|0);
        $276 = ((($__begin2$sroa$0$0)) + 12|0);
        __THREW__ = 0;
        invoke_vii(100,($275|0),($276|0));
        $277 = __THREW__; __THREW__ = 0;
        $278 = $277&1;
        if ($278) {
         $$lcssa = $271;
         label = 86;
         break;
        }
        $281 = HEAP32[$265>>2]|0;
        $282 = ((($281)) + 24|0);
        HEAP32[$265>>2] = $282;
       }
       $307 = ((($__begin2$sroa$0$0)) + 24|0);
       $__begin2$sroa$0$0 = $307;
      }
      if ((label|0) == 83) {
       $270 = ((($t$0$lcssa90)) + 1|0);
       $$1 = $270;
       break L1;
      }
      else if ((label|0) == 86) {
       $279 = ___cxa_find_matching_catch_2()|0;
       $280 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa);
       ___resumeException($279|0);
       // unreachable;
      }
      else if ((label|0) == 89) {
       __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
       // unreachable;
      }
      else if ((label|0) == 94) {
       $302 = ___cxa_find_matching_catch_2()|0;
       $303 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($$lcssa88);
       $eh$lpad$body$i$i45$index7Z2D = $303;$eh$lpad$body$i$i45$indexZ2D = $302;
      }
      else if ((label|0) == 95) {
       $304 = ___cxa_find_matching_catch_2()|0;
       $305 = tempRet0;
       $eh$lpad$body$i$i45$index7Z2D = $305;$eh$lpad$body$i$i45$indexZ2D = $304;
      }
      __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i40);
      ___resumeException($eh$lpad$body$i$i45$indexZ2D|0);
      // unreachable;
     }
     }
    } while(0);
    ___resumeException($$05|0);
    // unreachable;
   } else {
    $$1 = $first;
   }
  } else {
   $$1 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i6 = 0, $$0$i$i$i27$i = 0, $$0$i$i$i7$i = 0, $$01$i = 0, $$03$i = 0, $$1 = 0, $$1$i = 0, $$110$i = 0, $$112$i = 0, $$12$i = 0, $$7$i = 0, $$in = 0, $$ph32 = 0, $$pn = 0, $$pn$in = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0;
 var $$pre$i24$i = 0, $$pre$i31$i = 0, $$pre$i33$i = 0, $$pre$i36$i = 0, $$pre$i40$i = 0, $$pre$i42$i = 0, $$pre$i44$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i$i = 0, $__p$0$i$i = 0, $__p$1$i$i = 0, $__v$i$i$i = 0, $__v$i$i$i4 = 0, $__v$i$i26$i = 0, $__v$i$i6$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i$i = 0, $isdigit$i = 0, $isdigit19$i = 0, $isdigit21$i = 0, $isdigit23$i = 0;
 var $isdigittmp$i = 0, $isdigittmp18$i = 0, $isdigittmp20$i = 0, $isdigittmp22$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $or$cond$i$i$i$i$i$i = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i$i$i$i$i = 0, $phitmp$i2$i$i$i$i$i$i = 0, $t0$0$i = 0, $t01$0$i = 0, $t01$0$i$lcssa55 = 0, $t01$2$i = 0, $t01$3$i = 0, $t1$0$i = 0, $t1$0$i$lcssa = 0, $t14$0$i = 0, $t14$0$i$lcssa = 0;
 var $tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i26$i = sp + 252|0;
 $__v$i$i$i4 = sp + 232|0;
 $0 = sp + 208|0;
 $1 = sp + 192|0;
 $2 = sp + 168|0;
 $3 = sp + 152|0;
 $tmp$i = sp + 140|0;
 $4 = sp + 128|0;
 $__v$i$i6$i = sp + 108|0;
 $__v$i$i$i = sp + 88|0;
 $5 = sp + 64|0;
 $6 = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = ($first|0)==($last|0);
 L1: do {
  if ($10) {
   $$1 = $first;
  } else {
   $11 = HEAP8[$first>>0]|0;
   $12 = $11 << 24 >> 24;
   switch ($12|0) {
   case 68: case 67:  {
    $13 = $last;
    $14 = $first;
    $15 = (($13) - ($14))|0;
    $16 = ($15|0)>(1);
    L6: do {
     if ($16) {
      $17 = HEAP32[$db>>2]|0;
      $18 = ((($db)) + 4|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = ($17|0)==($19|0);
      if ($20) {
       $$03$i = $first;
      } else {
       L9: do {
        switch ($12|0) {
        case 67:  {
         $21 = ((($first)) + 1|0);
         $22 = HEAP8[$21>>0]|0;
         $23 = $22 << 24 >> 24;
         switch ($23|0) {
         case 53: case 51: case 50: case 49:  {
          break;
         }
         default: {
          $$03$i = $first;
          break L6;
         }
         }
         $24 = ((($19)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($6,$24);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
         $25 = HEAP32[$18>>2]|0;
         $26 = ((($db)) + 8|0);
         $27 = HEAP32[$26>>2]|0;
         $28 = ($25>>>0)<($27>>>0);
         $29 = $27;
         if ($28) {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($25,$5);
          $30 = HEAP32[$18>>2]|0;
          $31 = ((($30)) + 24|0);
          HEAP32[$18>>2] = $31;
         } else {
          $32 = $25;
          $33 = ((($db)) + 12|0);
          $34 = HEAP32[$db>>2]|0;
          $35 = (($32) - ($34))|0;
          $36 = (($35|0) / 24)&-1;
          $37 = (($36) + 1)|0;
          $38 = ($35|0)<(-24);
          if ($38) {
           __THREW__ = 0;
           invoke_vi(102,($db|0));
           $39 = __THREW__; __THREW__ = 0;
           $40 = ___cxa_find_matching_catch_2()|0;
           $41 = tempRet0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
           $$1$i = $41;$$12$i = $40;
           break L9;
          }
          $42 = (($29) - ($34))|0;
          $43 = (($42|0) / 24)&-1;
          $44 = ($43>>>0)<(1073741823);
          if ($44) {
           $45 = $43 << 1;
           $46 = ($45>>>0)<($37>>>0);
           $47 = $46 ? $37 : $45;
           $$0$i$i$i$i = $47;
          } else {
           $$0$i$i$i$i = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i$i,$36,$33);
          $48 = ((($__v$i$i$i)) + 8|0);
          $49 = HEAP32[$48>>2]|0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($49,$5);
          $50 = ((($49)) + 24|0);
          HEAP32[$48>>2] = $50;
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         $51 = ((($first)) + 2|0);
         $52 = ((($db)) + 60|0);
         HEAP8[$52>>0] = 1;
         $$03$i = $51;
         break L6;
         break;
        }
        case 68:  {
         $53 = ((($first)) + 1|0);
         $54 = HEAP8[$53>>0]|0;
         $55 = $54 << 24 >> 24;
         switch ($55|0) {
         case 53: case 50: case 49: case 48:  {
          break;
         }
         default: {
          $$03$i = $first;
          break L6;
         }
         }
         $56 = ((($19)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($9,$56);
         __THREW__ = 0;
         $57 = (invoke_iiii(92,($9|0),0,(5148|0))|0);
         $58 = __THREW__; __THREW__ = 0;
         $59 = $58&1;
         do {
          if ($59) {
           $90 = ___cxa_find_matching_catch_2()|0;
           $91 = tempRet0;
           $$0$i = $91;$$01$i = $90;
          } else {
           ;HEAP32[$8>>2]=HEAP32[$57>>2]|0;HEAP32[$8+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$57+8>>2]|0;
           $__i$0$i$i$i$i = 0;
           while(1) {
            $exitcond$i$i$i$i = ($__i$0$i$i$i$i|0)==(3);
            if ($exitcond$i$i$i$i) {
             break;
            }
            $60 = (($57) + ($__i$0$i$i$i$i<<2)|0);
            HEAP32[$60>>2] = 0;
            $61 = (($__i$0$i$i$i$i) + 1)|0;
            $__i$0$i$i$i$i = $61;
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($7,$8);
           $62 = HEAP32[$18>>2]|0;
           $63 = ((($db)) + 8|0);
           $64 = HEAP32[$63>>2]|0;
           $65 = ($62>>>0)<($64>>>0);
           $66 = $64;
           if ($65) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($62,$7);
            $67 = HEAP32[$18>>2]|0;
            $68 = ((($67)) + 24|0);
            HEAP32[$18>>2] = $68;
           } else {
            $69 = $62;
            $70 = ((($db)) + 12|0);
            $71 = HEAP32[$db>>2]|0;
            $72 = (($69) - ($71))|0;
            $73 = (($72|0) / 24)&-1;
            $74 = (($73) + 1)|0;
            $75 = ($72|0)<(-24);
            if ($75) {
             __THREW__ = 0;
             invoke_vi(102,($db|0));
             $76 = __THREW__; __THREW__ = 0;
             $77 = ___cxa_find_matching_catch_2()|0;
             $78 = tempRet0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
             $$0$i = $78;$$01$i = $77;
             break;
            }
            $79 = (($66) - ($71))|0;
            $80 = (($79|0) / 24)&-1;
            $81 = ($80>>>0)<(1073741823);
            if ($81) {
             $82 = $80 << 1;
             $83 = ($82>>>0)<($74>>>0);
             $84 = $83 ? $74 : $82;
             $$0$i$i$i7$i = $84;
            } else {
             $$0$i$i$i7$i = 2147483647;
            }
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i6$i,$$0$i$i$i7$i,$73,$70);
            $85 = ((($__v$i$i6$i)) + 8|0);
            $86 = HEAP32[$85>>2]|0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($86,$7);
            $87 = ((($86)) + 24|0);
            HEAP32[$85>>2] = $87;
            __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i6$i);
            __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i6$i);
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
           $88 = ((($first)) + 2|0);
           $89 = ((($db)) + 60|0);
           HEAP8[$89>>0] = 1;
           $$03$i = $88;
           break L6;
          }
         } while(0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
         $$1$i = $$0$i;$$12$i = $$01$i;
         break;
        }
        default: {
         $$03$i = $first;
         break L6;
        }
        }
       } while(0);
       ___resumeException($$12$i|0);
       // unreachable;
      }
     } else {
      $$03$i = $first;
     }
    } while(0);
    $$1 = $$03$i;
    break L1;
    break;
   }
   case 85:  {
    $92 = $last;
    $93 = $first;
    $94 = (($92) - ($93))|0;
    $95 = ($94|0)>(2);
    $96 = ($11<<24>>24)==(85);
    $or$cond = $95 & $96;
    L45: do {
     if ($or$cond) {
      $97 = ((($first)) + 1|0);
      $98 = HEAP8[$97>>0]|0;
      $99 = $98 << 24 >> 24;
      L47: do {
       switch ($99|0) {
       case 116:  {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($1,6072,8);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1);
        $100 = ((($db)) + 4|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = ((($db)) + 8|0);
        $103 = HEAP32[$102>>2]|0;
        $104 = ($101>>>0)<($103>>>0);
        $105 = $103;
        if ($104) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($101,$0);
         $106 = HEAP32[$100>>2]|0;
         $107 = ((($106)) + 24|0);
         HEAP32[$100>>2] = $107;
        } else {
         $108 = $101;
         $109 = ((($db)) + 12|0);
         $110 = HEAP32[$db>>2]|0;
         $111 = (($108) - ($110))|0;
         $112 = (($111|0) / 24)&-1;
         $113 = (($112) + 1)|0;
         $114 = ($111|0)<(-24);
         if ($114) {
          __THREW__ = 0;
          invoke_vi(102,($db|0));
          $115 = __THREW__; __THREW__ = 0;
          $116 = ___cxa_find_matching_catch_2()|0;
          $117 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
          $$110$i = $117;$$112$i = $116;
          break L47;
         }
         $118 = (($105) - ($110))|0;
         $119 = (($118|0) / 24)&-1;
         $120 = ($119>>>0)<(1073741823);
         if ($120) {
          $121 = $119 << 1;
          $122 = ($121>>>0)<($113>>>0);
          $123 = $122 ? $113 : $121;
          $$0$i$i$i$i6 = $123;
         } else {
          $$0$i$i$i$i6 = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i4,$$0$i$i$i$i6,$112,$109);
         $124 = ((($__v$i$i$i4)) + 8|0);
         $125 = HEAP32[$124>>2]|0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($125,$0);
         $126 = ((($125)) + 24|0);
         HEAP32[$124>>2] = $126;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i4);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i4);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
        $127 = ((($first)) + 2|0);
        $128 = ($127|0)==($last|0);
        if ($128) {
         $129 = HEAP32[$100>>2]|0;
         $130 = ((($129)) + -24|0);
         $131 = $129;
         while(1) {
          $132 = ($131|0)==($130|0);
          if ($132) {
           $$7$i = $first;
           break L45;
          }
          $133 = ((($131)) + -24|0);
          HEAP32[$100>>2] = $133;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($133);
          $$pre$i$i = HEAP32[$100>>2]|0;
          $131 = $$pre$i$i;
         }
        }
        $134 = HEAP8[$127>>0]|0;
        $135 = $134 << 24 >> 24;
        $isdigittmp20$i = (($135) + -48)|0;
        $isdigit21$i = ($isdigittmp20$i>>>0)<(10);
        if ($isdigit21$i) {
         $136 = ((($first)) + 3|0);
         $t1$0$i = $136;
         while(1) {
          $137 = ($t1$0$i|0)==($last|0);
          if ($137) {
           $t1$0$i$lcssa = $last;
           break;
          }
          $138 = HEAP8[$t1$0$i>>0]|0;
          $139 = $138 << 24 >> 24;
          $isdigittmp22$i = (($139) + -48)|0;
          $isdigit23$i = ($isdigittmp22$i>>>0)<(10);
          if (!($isdigit23$i)) {
           $t1$0$i$lcssa = $t1$0$i;
           break;
          }
          $140 = ((($t1$0$i)) + 1|0);
          $t1$0$i = $140;
         }
         $141 = HEAP32[$100>>2]|0;
         $142 = ((($141)) + -24|0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS7_E4typeESC_SC_($142,$127,$t1$0$i$lcssa);
         $t0$0$i = $t1$0$i$lcssa;
        } else {
         $t0$0$i = $127;
        }
        $143 = HEAP32[$100>>2]|0;
        $144 = ((($143)) + -24|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($144,39);
        $145 = ($t0$0$i|0)==($last|0);
        if (!($145)) {
         $146 = HEAP8[$t0$0$i>>0]|0;
         $147 = ($146<<24>>24)==(95);
         if ($147) {
          $153 = ((($t0$0$i)) + 1|0);
          $$7$i = $153;
          break L45;
         }
        }
        $148 = HEAP32[$100>>2]|0;
        $149 = ((($148)) + -24|0);
        $150 = $148;
        while(1) {
         $151 = ($150|0)==($149|0);
         if ($151) {
          $$7$i = $first;
          break L45;
         }
         $152 = ((($150)) + -24|0);
         HEAP32[$100>>2] = $152;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($152);
         $$pre$i24$i = HEAP32[$100>>2]|0;
         $150 = $$pre$i24$i;
        }
        break;
       }
       case 108:  {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3,6081,9);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($2,$3);
        $154 = ((($db)) + 4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ((($db)) + 8|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($155>>>0)<($157>>>0);
        $159 = $157;
        if ($158) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($155,$2);
         $160 = HEAP32[$154>>2]|0;
         $161 = ((($160)) + 24|0);
         HEAP32[$154>>2] = $161;
        } else {
         $162 = $155;
         $163 = ((($db)) + 12|0);
         $164 = HEAP32[$db>>2]|0;
         $165 = (($162) - ($164))|0;
         $166 = (($165|0) / 24)&-1;
         $167 = (($166) + 1)|0;
         $168 = ($165|0)<(-24);
         if ($168) {
          __THREW__ = 0;
          invoke_vi(102,($db|0));
          $169 = __THREW__; __THREW__ = 0;
          $170 = ___cxa_find_matching_catch_2()|0;
          $171 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          $$110$i = $171;$$112$i = $170;
          break L47;
         }
         $172 = (($159) - ($164))|0;
         $173 = (($172|0) / 24)&-1;
         $174 = ($173>>>0)<(1073741823);
         if ($174) {
          $175 = $173 << 1;
          $176 = ($175>>>0)<($167>>>0);
          $177 = $176 ? $167 : $175;
          $$0$i$i$i27$i = $177;
         } else {
          $$0$i$i$i27$i = 2147483647;
         }
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i26$i,$$0$i$i$i27$i,$166,$163);
         $178 = ((($__v$i$i26$i)) + 8|0);
         $179 = HEAP32[$178>>2]|0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($179,$2);
         $180 = ((($179)) + 24|0);
         HEAP32[$178>>2] = $180;
         __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i26$i);
         __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i26$i);
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($2);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $181 = ((($first)) + 2|0);
        $182 = HEAP8[$181>>0]|0;
        $183 = ($182<<24>>24)==(118);
        L91: do {
         if ($183) {
          $184 = HEAP32[$154>>2]|0;
          $185 = ((($184)) + -24|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($185,41);
          $186 = ((($first)) + 3|0);
          $t01$2$i = $186;
         } else {
          $187 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($181,$last,$db)|0);
          $188 = ($187|0)==($181|0);
          if ($188) {
           $189 = HEAP32[$154>>2]|0;
           $190 = ((($189)) + -24|0);
           $191 = $189;
           while(1) {
            $192 = ($191|0)==($190|0);
            if ($192) {
             $$7$i = $first;
             break L45;
            }
            $193 = ((($191)) + -24|0);
            HEAP32[$154>>2] = $193;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($193);
            $$pre$i31$i = HEAP32[$154>>2]|0;
            $191 = $$pre$i31$i;
           }
          }
          $194 = HEAP32[$154>>2]|0;
          $195 = HEAP32[$db>>2]|0;
          $196 = (($194) - ($195))|0;
          $197 = (($196|0) / 24)&-1;
          $198 = ($197>>>0)<(2);
          if ($198) {
           $$7$i = $first;
           break L45;
          }
          $199 = $194;
          $200 = ((($199)) + -24|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp$i,$200);
          $201 = HEAP32[$154>>2]|0;
          $202 = ((($201)) + -24|0);
          $203 = $201;
          while(1) {
           $204 = ($203|0)==($202|0);
           if ($204) {
            break;
           }
           $205 = ((($203)) + -24|0);
           HEAP32[$154>>2] = $205;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($205);
           $$pre$i33$i = HEAP32[$154>>2]|0;
           $203 = $$pre$i33$i;
          }
          $206 = ((($201)) + -48|0);
          $207 = HEAP8[$tmp$i>>0]|0;
          $208 = $207 & 1;
          $209 = ($208<<24>>24)==(0);
          $210 = ((($tmp$i)) + 8|0);
          $211 = HEAP32[$210>>2]|0;
          $212 = ((($tmp$i)) + 1|0);
          $213 = $209 ? $212 : $211;
          $214 = ((($tmp$i)) + 4|0);
          $215 = HEAP32[$214>>2]|0;
          $216 = $207&255;
          $217 = $216 >>> 1;
          $218 = $209 ? $217 : $215;
          __THREW__ = 0;
          (invoke_iiii(91,($206|0),($213|0),($218|0))|0);
          $219 = __THREW__; __THREW__ = 0;
          $220 = $219&1;
          do {
           if ($220) {
            label = 79;
           } else {
            $$pre$i$i$i$i = $207;$t01$0$i = $187;
            while(1) {
             __THREW__ = 0;
             $221 = (invoke_iiii(94,($t01$0$i|0),($last|0),($db|0))|0);
             $222 = __THREW__; __THREW__ = 0;
             $223 = $222&1;
             if ($223) {
              label = 78;
              break;
             }
             $224 = ($221|0)==($t01$0$i|0);
             if ($224) {
              $t01$0$i$lcssa55 = $t01$0$i;
              label = 102;
              break;
             }
             $229 = HEAP32[$154>>2]|0;
             $230 = HEAP32[$db>>2]|0;
             $231 = (($229) - ($230))|0;
             $232 = (($231|0) / 24)&-1;
             $233 = ($232>>>0)<(2);
             if ($233) {
              label = 142;
              break;
             }
             $234 = $229;
             $235 = ((($234)) + -24|0);
             __THREW__ = 0;
             invoke_vii(96,($4|0),($235|0));
             $236 = __THREW__; __THREW__ = 0;
             $237 = $236&1;
             if ($237) {
              label = 78;
              break;
             }
             $238 = $$pre$i$i$i$i & 1;
             $239 = ($238<<24>>24)==(0);
             L113: do {
              if ($239) {
               HEAP8[$212>>0] = 0;
               HEAP8[$tmp$i>>0] = 0;
              } else {
               $240 = HEAP32[$210>>2]|0;
               HEAP8[$240>>0] = 0;
               HEAP32[$214>>2] = 0;
               $241 = HEAP32[$tmp$i>>2]|0;
               $242 = $241 & -2;
               $phitmp$i$i$i$i$i$i$i = (($242) + -1)|0;
               $243 = $241&255;
               $244 = $243 & 1;
               $245 = ($244<<24>>24)==(0);
               do {
                if ($245) {
                 $246 = $241 >>> 1;
                 $247 = $246 & 127;
                 $248 = ($243&255)<(22);
                 if ($248) {
                  $255 = $241 >>> 1;
                  $256 = $255 & 127;
                  $257 = (($256) + 1)|0;
                  _memcpy(($212|0),($240|0),($257|0))|0;
                  _free($240);
                  $$ph32 = $247;
                  break;
                 }
                 $249 = (($247) + 16)|0;
                 $250 = $249 & 240;
                 $phitmp$i2$i$i$i$i$i$i = (($250) + -1)|0;
                 $251 = ($phitmp$i2$i$i$i$i$i$i|0)==($phitmp$i$i$i$i$i$i$i|0);
                 if ($251) {
                  break L113;
                 }
                 $252 = ($phitmp$i2$i$i$i$i$i$i>>>0)<=($phitmp$i$i$i$i$i$i$i>>>0);
                 $253 = (_malloc($250)|0);
                 $254 = ($253|0)==(0|0);
                 $or$cond$i$i$i$i$i$i = $252 & $254;
                 if ($or$cond$i$i$i$i$i$i) {
                  break L113;
                 }
                 $258 = $241 >>> 1;
                 $259 = $258 & 127;
                 $260 = (($259) + 1)|0;
                 _memcpy(($253|0),($212|0),($260|0))|0;
                 $261 = $250 | 1;
                 HEAP32[$tmp$i>>2] = $261;
                 HEAP32[$214>>2] = $247;
                 HEAP32[$210>>2] = $253;
                 break L113;
                } else {
                 HEAP8[$212>>0] = 0;
                 _free($240);
                 $$ph32 = 0;
                }
               } while(0);
               $262 = $$ph32 << 1;
               $263 = $262&255;
               HEAP8[$tmp$i>>0] = $263;
              }
             } while(0);
             ;HEAP32[$tmp$i>>2]=HEAP32[$4>>2]|0;HEAP32[$tmp$i+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$tmp$i+8>>2]=HEAP32[$4+8>>2]|0;
             $__i$0$i$i$i$i$i = 0;
             while(1) {
              $exitcond$i$i$i$i$i = ($__i$0$i$i$i$i$i|0)==(3);
              if ($exitcond$i$i$i$i$i) {
               break;
              }
              $264 = (($4) + ($__i$0$i$i$i$i$i<<2)|0);
              HEAP32[$264>>2] = 0;
              $265 = (($__i$0$i$i$i$i$i) + 1)|0;
              $__i$0$i$i$i$i$i = $265;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
             $266 = HEAP32[$154>>2]|0;
             $267 = ((($266)) + -24|0);
             $268 = $266;
             while(1) {
              $269 = ($268|0)==($267|0);
              if ($269) {
               break;
              }
              $270 = ((($268)) + -24|0);
              HEAP32[$154>>2] = $270;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($270);
              $$pre$i36$i = HEAP32[$154>>2]|0;
              $268 = $$pre$i36$i;
             }
             $271 = HEAP8[$tmp$i>>0]|0;
             $272 = $271 & 1;
             $273 = ($272<<24>>24)==(0);
             $274 = HEAP32[$214>>2]|0;
             $275 = $271&255;
             $276 = $275 >>> 1;
             $277 = $273 ? $276 : $274;
             $278 = ($277|0)==(0);
             if ($278) {
              $$pre$i$i$i$i = $271;$t01$0$i = $221;
              continue;
             }
             $279 = ((($266)) + -48|0);
             __THREW__ = 0;
             (invoke_iii(93,($279|0),(5693|0))|0);
             $280 = __THREW__; __THREW__ = 0;
             $281 = $280&1;
             if ($281) {
              label = 78;
              break;
             }
             $282 = HEAP32[$154>>2]|0;
             $283 = ((($282)) + -24|0);
             $284 = HEAP32[$210>>2]|0;
             $285 = $273 ? $212 : $284;
             __THREW__ = 0;
             (invoke_iiii(91,($283|0),($285|0),($277|0))|0);
             $286 = __THREW__; __THREW__ = 0;
             $287 = $286&1;
             if ($287) {
              label = 78;
              break;
             } else {
              $$pre$i$i$i$i = $271;$t01$0$i = $221;
             }
            }
            if ((label|0) == 78) {
             $225 = ___cxa_find_matching_catch_2()|0;
             $226 = tempRet0;
             $lpad$phi$index = $225;$lpad$phi$index2 = $226;
             break;
            }
            else if ((label|0) == 102) {
             $288 = HEAP32[$154>>2]|0;
             $289 = ((($288)) + -24|0);
             __THREW__ = 0;
             (invoke_iii(93,($289|0),(5061|0))|0);
             $290 = __THREW__; __THREW__ = 0;
             $291 = $290&1;
             if ($291) {
              label = 79;
              break;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i);
             $t01$2$i = $t01$0$i$lcssa55;
             break L91;
            }
            else if ((label|0) == 142) {
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i);
             $$7$i = $first;
             break L45;
            }
           }
          } while(0);
          if ((label|0) == 79) {
           $227 = ___cxa_find_matching_catch_2()|0;
           $228 = tempRet0;
           $lpad$phi$index = $227;$lpad$phi$index2 = $228;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp$i);
          $$110$i = $lpad$phi$index2;$$112$i = $lpad$phi$index;
          break L47;
         }
        } while(0);
        $292 = ($t01$2$i|0)==($last|0);
        if (!($292)) {
         $293 = HEAP8[$t01$2$i>>0]|0;
         $294 = ($293<<24>>24)==(69);
         if ($294) {
          $300 = ((($t01$2$i)) + 1|0);
          $301 = ($300|0)==($last|0);
          if ($301) {
           $302 = HEAP32[$154>>2]|0;
           $303 = ((($302)) + -24|0);
           $304 = $302;
           while(1) {
            $305 = ($304|0)==($303|0);
            if ($305) {
             $$7$i = $first;
             break L45;
            }
            $306 = ((($304)) + -24|0);
            HEAP32[$154>>2] = $306;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($306);
            $$pre$i42$i = HEAP32[$154>>2]|0;
            $304 = $$pre$i42$i;
           }
          }
          $307 = HEAP8[$300>>0]|0;
          $308 = $307 << 24 >> 24;
          $isdigittmp$i = (($308) + -48)|0;
          $isdigit$i = ($isdigittmp$i>>>0)<(10);
          L154: do {
           if ($isdigit$i) {
            $309 = ((($t01$2$i)) + 2|0);
            $t14$0$i = $309;
            while(1) {
             $310 = ($t14$0$i|0)==($last|0);
             if ($310) {
              $t14$0$i$lcssa = $last;
              break;
             }
             $311 = HEAP8[$t14$0$i>>0]|0;
             $312 = $311 << 24 >> 24;
             $isdigittmp18$i = (($312) + -48)|0;
             $isdigit19$i = ($isdigittmp18$i>>>0)<(10);
             if (!($isdigit19$i)) {
              $t14$0$i$lcssa = $t14$0$i;
              break;
             }
             $313 = ((($t14$0$i)) + 1|0);
             $t14$0$i = $313;
            }
            $314 = HEAP32[$154>>2]|0;
            $315 = ((($314)) + -24|0);
            $316 = HEAP8[$315>>0]|0;
            $317 = $316 & 1;
            $318 = ($317<<24>>24)==(0);
            $319 = ((($314)) + -16|0);
            if ($318) {
             $320 = ((($315)) + 1|0);
             $321 = $316&255;
             $322 = $321 >>> 1;
             $$in = $319;$$pn$in = $320;$337 = $322;$338 = 10;$341 = $316;
            } else {
             $323 = HEAP32[$319>>2]|0;
             $324 = ((($323)) + 7|0);
             $325 = ((($314)) + -20|0);
             $326 = HEAP32[$325>>2]|0;
             $327 = HEAP32[$315>>2]|0;
             $328 = $327 & -2;
             $phitmp$i$i$i = (($328) + -1)|0;
             $329 = $327&255;
             $$in = $324;$$pn$in = $323;$337 = $326;$338 = $phitmp$i$i$i;$341 = $329;
            }
            $$pn = $$pn$in;
            $330 = $$in;
            $331 = (($330) - ($$pn))|0;
            $332 = $t14$0$i$lcssa;
            $333 = $300;
            $334 = (($332) - ($333))|0;
            $335 = ($t14$0$i$lcssa|0)==($300|0);
            if ($335) {
             $t01$3$i = $300;
            } else {
             $336 = (($338) - ($337))|0;
             $339 = ($336>>>0)<($334>>>0);
             if ($339) {
              $351 = (($337) + ($334))|0;
              $352 = (($351) - ($338))|0;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($315,$338,$352,$337,$331,$334);
              $353 = ((($314)) + -16|0);
              $354 = HEAP32[$353>>2]|0;
              $__p$0$i$i = $354;
             } else {
              $340 = $341 & 1;
              $342 = ($340<<24>>24)==(0);
              if ($342) {
               $345 = ((($315)) + 1|0);
               $349 = $345;
              } else {
               $343 = ((($314)) + -16|0);
               $344 = HEAP32[$343>>2]|0;
               $349 = $344;
              }
              $346 = ($337|0)==($331|0);
              if ($346) {
               $__p$0$i$i = $349;
              } else {
               $347 = (($337) - ($331))|0;
               $348 = (($349) + ($331)|0);
               $350 = (($348) + ($334)|0);
               _memmove(($350|0),($348|0),($347|0))|0;
               $__p$0$i$i = $349;
              }
             }
             $355 = (($337) + ($334))|0;
             $356 = HEAP8[$315>>0]|0;
             $357 = $356 & 1;
             $358 = ($357<<24>>24)==(0);
             if ($358) {
              $360 = $355 << 1;
              $361 = $360&255;
              HEAP8[$315>>0] = $361;
             } else {
              $359 = ((($314)) + -20|0);
              HEAP32[$359>>2] = $355;
             }
             $362 = (($__p$0$i$i) + ($355)|0);
             HEAP8[$362>>0] = 0;
             $363 = (($__p$0$i$i) + ($331)|0);
             $$0$i$i = $300;$__p$1$i$i = $363;
             while(1) {
              $364 = ($$0$i$i|0)==($t14$0$i$lcssa|0);
              if ($364) {
               $t01$3$i = $t14$0$i$lcssa;
               break L154;
              }
              $365 = HEAP8[$$0$i$i>>0]|0;
              HEAP8[$__p$1$i$i>>0] = $365;
              $366 = ((($__p$1$i$i)) + 1|0);
              $367 = ((($$0$i$i)) + 1|0);
              $$0$i$i = $367;$__p$1$i$i = $366;
             }
            }
           } else {
            $t01$3$i = $300;
           }
          } while(0);
          $368 = ($t01$3$i|0)==($last|0);
          if (!($368)) {
           $369 = HEAP8[$t01$3$i>>0]|0;
           $370 = ($369<<24>>24)==(95);
           if ($370) {
            $376 = ((($t01$3$i)) + 1|0);
            $$7$i = $376;
            break L45;
           }
          }
          $371 = HEAP32[$154>>2]|0;
          $372 = ((($371)) + -24|0);
          $373 = $371;
          while(1) {
           $374 = ($373|0)==($372|0);
           if ($374) {
            $$7$i = $first;
            break L45;
           }
           $375 = ((($373)) + -24|0);
           HEAP32[$154>>2] = $375;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($375);
           $$pre$i44$i = HEAP32[$154>>2]|0;
           $373 = $$pre$i44$i;
          }
         }
        }
        $295 = HEAP32[$154>>2]|0;
        $296 = ((($295)) + -24|0);
        $297 = $295;
        while(1) {
         $298 = ($297|0)==($296|0);
         if ($298) {
          $$7$i = $first;
          break L45;
         }
         $299 = ((($297)) + -24|0);
         HEAP32[$154>>2] = $299;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($299);
         $$pre$i40$i = HEAP32[$154>>2]|0;
         $297 = $$pre$i40$i;
        }
        break;
       }
       default: {
        $$7$i = $first;
        break L45;
       }
       }
      } while(0);
      ___resumeException($$112$i|0);
      // unreachable;
     } else {
      $$7$i = $first;
     }
    } while(0);
    $$1 = $$7$i;
    break L1;
    break;
   }
   case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
    $377 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    $$1 = $377;
    break L1;
    break;
   }
   default: {
    $378 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
    STACKTOP = sp;return ($378|0);
   }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__112basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($agg$result,$s) {
 $agg$result = $agg$result|0;
 $s = $s|0;
 var $$$$i$i$i = 0, $$$$i$i$i11 = 0, $$$$i$i$i3 = 0, $$$i$i$i = 0, $$$i$i$i10 = 0, $$$i$i$i2 = 0, $$0$i$i = 0, $$lcssa = 0, $$lcssa28 = 0, $$lcssa29 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $8 = 0, $9 = 0, $__i$0$i$i = 0, $__p$0$i$i = 0, $__p$0$ph$i$i = 0, $c$0$ph = 0, $exitcond$i$i = 0, $p0$0 = 0, $p0$1 = 0, $pe$0 = 0, $pe$0$ph = 0, $pe$2 = 0, $pe$2$pn = 0, $scevgep2$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($s)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($agg$result,$s);
  } else {
   $9 = ((($s)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($s)) + 1|0);
   $12 = $2 ? $11 : $10;
   $13 = ($7>>>0)>(11);
   $14 = $13 ? 11 : $7;
   $15 = (_memcmp($12,5742,$14)|0);
   $16 = ($15|0)==(0);
   $17 = ($7>>>0)<(11);
   $$$i$i$i = $13&1;
   $$$$i$i$i = $17 ? -1 : $$$i$i$i;
   $18 = $16 ? $$$$i$i$i : $15;
   $19 = ($18|0)==(0);
   if ($19) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s,5794,70);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result,5865,12);
    break;
   }
   $20 = ($7>>>0)>(12);
   $21 = $20 ? 12 : $7;
   $22 = (_memcmp($12,5754,$21)|0);
   $23 = ($22|0)==(0);
   $24 = ($7>>>0)<(12);
   $$$i$i$i2 = $20&1;
   $$$$i$i$i3 = $24 ? -1 : $$$i$i$i2;
   $25 = $23 ? $$$$i$i$i3 : $22;
   $26 = ($25|0)==(0);
   if ($26) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s,5878,49);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result,5928,13);
    break;
   }
   $27 = (_memcmp($12,5767,$21)|0);
   $28 = ($27|0)==(0);
   $29 = $28 ? $$$$i$i$i3 : $27;
   $30 = ($29|0)==(0);
   if ($30) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s,5942,49);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result,5992,13);
    break;
   }
   $31 = ($7>>>0)>(13);
   $32 = $31 ? 13 : $7;
   $33 = (_memcmp($12,5780,$32)|0);
   $34 = ($33|0)==(0);
   $35 = ($7>>>0)<(13);
   $$$i$i$i10 = $31&1;
   $$$$i$i$i11 = $35 ? -1 : $$$i$i$i10;
   $36 = $34 ? $$$$i$i$i11 : $33;
   $37 = ($36|0)==(0);
   if ($37) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($s,6006,50);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($agg$result,6057,14);
    break;
   }
   $38 = (($12) + ($7)|0);
   $39 = ((($38)) + -1|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(62);
   L16: do {
    if ($41) {
     $c$0$ph = 1;$pe$0$ph = $38;
     L17: while(1) {
      $pe$0 = $pe$0$ph;
      L19: while(1) {
       $42 = ((($pe$0)) + -1|0);
       $43 = ($42|0)==($12|0);
       if ($43) {
        break L17;
       }
       $46 = ((($pe$0)) + -2|0);
       $47 = HEAP8[$46>>0]|0;
       switch ($47<<24>>24) {
       case 60:  {
        $$lcssa = $46;$$lcssa28 = $42;
        label = 18;
        break L19;
        break;
       }
       case 62:  {
        $$lcssa29 = $42;
        label = 19;
        break L19;
        break;
       }
       default: {
        $pe$0 = $42;
       }
       }
      }
      if ((label|0) == 18) {
       label = 0;
       $48 = (($c$0$ph) + -1)|0;
       $49 = ($48|0)==(0);
       if ($49) {
        $pe$2 = $$lcssa;
        break L16;
       } else {
        $c$0$ph = $48;$pe$0$ph = $$lcssa28;
        continue;
       }
      }
      else if ((label|0) == 19) {
       label = 0;
       $50 = (($c$0$ph) + 1)|0;
       $c$0$ph = $50;$pe$0$ph = $$lcssa29;
       continue;
      }
     }
     $__i$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($__i$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break L1;
      }
      $44 = (($agg$result) + ($__i$0$i$i<<2)|0);
      HEAP32[$44>>2] = 0;
      $45 = (($__i$0$i$i) + 1)|0;
      $__i$0$i$i = $45;
     }
    } else {
     $pe$2 = $38;
    }
   } while(0);
   $pe$2$pn = $pe$2;
   while(1) {
    $p0$0 = ((($pe$2$pn)) + -1|0);
    $51 = ($p0$0|0)==($12|0);
    if ($51) {
     $p0$1 = $12;
     break;
    }
    $52 = HEAP8[$p0$0>>0]|0;
    $53 = ($52<<24>>24)==(58);
    if ($53) {
     $p0$1 = $pe$2$pn;
     break;
    } else {
     $pe$2$pn = $p0$0;
    }
   }
   $54 = $p0$1;
   $55 = $pe$2;
   $56 = (($55) - ($54))|0;
   $57 = ($56>>>0)>(4294967279);
   if ($57) {
    __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
    // unreachable;
   }
   $58 = ($56>>>0)<(11);
   if ($58) {
    $59 = $56 << 1;
    $60 = $59&255;
    HEAP8[$agg$result>>0] = $60;
    $61 = ((($agg$result)) + 1|0);
    $__p$0$ph$i$i = $61;
   } else {
    $62 = (($56) + 16)|0;
    $63 = $62 & -16;
    $64 = (_malloc($63)|0);
    $65 = ((($agg$result)) + 8|0);
    HEAP32[$65>>2] = $64;
    $66 = $63 | 1;
    HEAP32[$agg$result>>2] = $66;
    $67 = ((($agg$result)) + 4|0);
    HEAP32[$67>>2] = $56;
    $__p$0$ph$i$i = $64;
   }
   $$0$i$i = $p0$1;$__p$0$i$i = $__p$0$ph$i$i;
   while(1) {
    $68 = ($$0$i$i|0)==($pe$2|0);
    if ($68) {
     break;
    }
    $69 = HEAP8[$$0$i$i>>0]|0;
    HEAP8[$__p$0$i$i>>0] = $69;
    $70 = ((($$0$i$i)) + 1|0);
    $71 = ((($__p$0$i$i)) + 1|0);
    $$0$i$i = $70;$__p$0$i$i = $71;
   }
   $scevgep2$i$i = (($__p$0$ph$i$i) + ($56)|0);
   HEAP8[$scevgep2$i$i>>0] = 0;
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $6 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $6 = $phitmp$i;$9 = $5;
 }
 $7 = ($6>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($7) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = ((($this)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($6))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$6,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = ((($this)) + 1|0);
    $14 = $13;
   } else {
    $11 = ((($this)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = ((($this)) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$3 = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = ($first|0)==($last|0);
 do {
  if ($0) {
   $$3 = $first;
  } else {
   $1 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db)|0);
   $2 = ($1|0)==($first|0);
   if ($2) {
    $$3 = $first;
   } else {
    $3 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($1,$last,$db)|0);
    $4 = ($3|0)==($1|0);
    if ($4) {
     $$3 = $1;
    } else {
     $5 = ((($db)) + 4|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = HEAP32[$db>>2]|0;
     $8 = (($6) - ($7))|0;
     $9 = (($8|0) / 24)&-1;
     $10 = ($9>>>0)<(2);
     if ($10) {
      $$3 = $first;
     } else {
      $11 = $6;
      $12 = ((($11)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args,$12);
      $13 = HEAP32[$5>>2]|0;
      $14 = ((($13)) + -24|0);
      $15 = $13;
      while(1) {
       $16 = ($15|0)==($14|0);
       if ($16) {
        break;
       }
       $17 = ((($15)) + -24|0);
       HEAP32[$5>>2] = $17;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
       $$pre$i = HEAP32[$5>>2]|0;
       $15 = $$pre$i;
      }
      $18 = ((($13)) + -48|0);
      $19 = HEAP8[$args>>0]|0;
      $20 = $19 & 1;
      $21 = ($20<<24>>24)==(0);
      $22 = ((($args)) + 8|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ((($args)) + 1|0);
      $25 = $21 ? $24 : $23;
      $26 = ((($args)) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $19&255;
      $29 = $28 >>> 1;
      $30 = $21 ? $29 : $27;
      __THREW__ = 0;
      (invoke_iiii(91,($18|0),($25|0),($30|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch_2()|0;
       $34 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
       ___resumeException($33|0);
       // unreachable;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
       $$3 = $3;
       break;
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first,$last,$db) {
 $first = $first|0;
 $last = $last|0;
 $db = $db|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i34$i = 0, $$0$i$i$i41$i = 0, $$0$i$i$i51$i = 0, $$0$i$i$i60$i = 0, $$0$i$i$i70$i = 0, $$0$i23 = 0, $$01 = 0, $$01$i = 0, $$02$i = 0, $$03$i = 0, $$1$i24 = 0, $$12$i = 0, $$13$i$ph = 0, $$2$i25 = 0, $$23$i = 0, $$3 = 0;
 var $$3$i26 = 0, $$34$i = 0, $$4$i = 0, $$4$i27 = 0, $$414$i = 0, $$45$i = 0, $$5$i30 = 0, $$56$i = 0, $$first = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i20 = 0, $$pre$i11 = 0, $$pre$i12$i = 0, $$pre$i14$i = 0, $$pre$i17$i = 0, $$pre$i31$i = 0, $$pre$i35$i = 0, $$pre$i45$i = 0, $$pre$i55$i = 0;
 var $$pre$i64$i = 0, $$pre$i74$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $St$0$off0$i = 0, $__i$0$i$i$i$i$i$i$i = 0;
 var $__i$0$i$i$i$i$i$i$i$i = 0, $__i$0$i$i1$i$i$i$i$i = 0, $__i$0$i$i1$i$i$i$i$i$i = 0, $__v$i$i = 0, $__v$i$i$i = 0, $__v$i$i33$i = 0, $__v$i$i40$i = 0, $__v$i$i50$i = 0, $__v$i$i59$i = 0, $__v$i$i69$i = 0, $brmerge$i = 0, $cv$i = 0, $exitcond$i$i$i$i$i$i$i = 0, $exitcond$i$i$i$i$i$i$i$i = 0, $exitcond$i$i2$i$i$i$i$i = 0, $exitcond$i$i2$i$i$i$i$i$i = 0, $first$ = 0, $first$9 = 0, $first$mux$i = 0, $name$i = 0;
 var $name$i17 = 0, $name1$i = 0, $name2$i = 0, $name2$i18 = 0, $name3$i = 0, $name4$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i22 = 0, $or$cond27$i = 0, $or$cond28$i = 0, $or$cond29$i = 0, $or$cond30$i = 0, $or$cond46 = 0, $pop_subs$0$off0$i$ph = 0, $t0$0$i = 0, $t0$0$i19 = 0, $t0$1$i = 0, $t0$2$i = 0, $t0$2$i$lcssa187 = 0;
 var $t0$2$i$lcssa188 = 0, $t0$2$i$lcssa189 = 0, $t0$2$i$ph = 0, $t0$2$i193 = 0, $tmp = 0, $tmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v$i$i69$i = sp + 416|0;
 $__v$i$i59$i = sp + 396|0;
 $__v$i$i50$i = sp + 376|0;
 $__v$i$i40$i = sp + 356|0;
 $__v$i$i33$i = sp + 336|0;
 $__v$i$i$i = sp + 316|0;
 $cv$i = sp + 312|0;
 $name$i17 = sp + 300|0;
 $0 = sp + 288|0;
 $1 = sp + 272|0;
 $2 = sp + 264|0;
 $name1$i = sp + 252|0;
 $3 = sp + 240|0;
 $4 = sp + 224|0;
 $5 = sp + 216|0;
 $name2$i18 = sp + 204|0;
 $6 = sp + 192|0;
 $7 = sp + 176|0;
 $8 = sp + 172|0;
 $name3$i = sp + 160|0;
 $9 = sp + 144|0;
 $10 = sp + 136|0;
 $name4$i = sp + 124|0;
 $11 = sp + 112|0;
 $12 = sp + 96|0;
 $13 = sp + 92|0;
 $name$i = sp + 80|0;
 $name2$i = sp + 68|0;
 $__v$i$i = sp + 48|0;
 $14 = sp + 32|0;
 $15 = sp + 24|0;
 $tmp = sp + 12|0;
 $tmp3 = sp;
 $16 = $last;
 $17 = $first;
 $18 = (($16) - ($17))|0;
 $19 = ($18|0)>(1);
 L1: do {
  if ($19) {
   $20 = HEAP8[$first>>0]|0;
   $21 = ($20<<24>>24)==(76);
   $22 = ((($first)) + 1|0);
   $$first = $21 ? $22 : $first;
   $23 = HEAP8[$$first>>0]|0;
   $24 = $23 << 24 >> 24;
   switch ($24|0) {
   case 78:  {
    $25 = ($$first|0)==($last|0);
    L54: do {
     if ($25) {
      $$414$i = $last;
     } else {
      $26 = ($23<<24>>24)==(78);
      if ($26) {
       $27 = ((($$first)) + 1|0);
       $28 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($27,$last,$cv$i)|0);
       $29 = ($28|0)==($last|0);
       L57: do {
        if (!($29)) {
         $30 = ((($db)) + 52|0);
         HEAP32[$30>>2] = 0;
         $31 = HEAP8[$28>>0]|0;
         switch ($31<<24>>24) {
         case 82:  {
          HEAP32[$30>>2] = 1;
          $32 = ((($28)) + 1|0);
          $t0$0$i19 = $32;
          break;
         }
         case 79:  {
          HEAP32[$30>>2] = 2;
          $33 = ((($28)) + 1|0);
          $t0$0$i19 = $33;
          break;
         }
         default: {
          $t0$0$i19 = $28;
         }
         }
         $34 = ((($db)) + 4|0);
         $35 = HEAP32[$34>>2]|0;
         $36 = ((($db)) + 8|0);
         $37 = HEAP32[$36>>2]|0;
         $38 = ($35>>>0)<($37>>>0);
         $39 = $37;
         if ($38) {
          ;HEAP32[$35>>2]=0|0;HEAP32[$35+4>>2]=0|0;HEAP32[$35+8>>2]=0|0;HEAP32[$35+12>>2]=0|0;HEAP32[$35+16>>2]=0|0;HEAP32[$35+20>>2]=0|0;
          $__i$0$i$i$i$i$i$i$i = 0;
          while(1) {
           $exitcond$i$i$i$i$i$i$i = ($__i$0$i$i$i$i$i$i$i|0)==(3);
           if ($exitcond$i$i$i$i$i$i$i) {
            break;
           }
           $40 = (($35) + ($__i$0$i$i$i$i$i$i$i<<2)|0);
           HEAP32[$40>>2] = 0;
           $41 = (($__i$0$i$i$i$i$i$i$i) + 1)|0;
           $__i$0$i$i$i$i$i$i$i = $41;
          }
          $42 = ((($35)) + 12|0);
          $__i$0$i$i1$i$i$i$i$i = 0;
          while(1) {
           $exitcond$i$i2$i$i$i$i$i = ($__i$0$i$i1$i$i$i$i$i|0)==(3);
           if ($exitcond$i$i2$i$i$i$i$i) {
            break;
           }
           $43 = (($42) + ($__i$0$i$i1$i$i$i$i$i<<2)|0);
           HEAP32[$43>>2] = 0;
           $44 = (($__i$0$i$i1$i$i$i$i$i) + 1)|0;
           $__i$0$i$i1$i$i$i$i$i = $44;
          }
          $45 = HEAP32[$34>>2]|0;
          $46 = ((($45)) + 24|0);
          HEAP32[$34>>2] = $46;
         } else {
          $47 = $35;
          $48 = ((($db)) + 12|0);
          $49 = HEAP32[$db>>2]|0;
          $50 = (($47) - ($49))|0;
          $51 = (($50|0) / 24)&-1;
          $52 = (($51) + 1)|0;
          $53 = ($50|0)<(-24);
          if ($53) {
           __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($db);
           // unreachable;
          }
          $54 = (($39) - ($49))|0;
          $55 = (($54|0) / 24)&-1;
          $56 = ($55>>>0)<(1073741823);
          if ($56) {
           $57 = $55 << 1;
           $58 = ($57>>>0)<($52>>>0);
           $59 = $58 ? $52 : $57;
           $$0$i$i$i$i = $59;
          } else {
           $$0$i$i$i$i = 2147483647;
          }
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v$i$i$i,$$0$i$i$i$i,$51,$48);
          $60 = ((($__v$i$i$i)) + 8|0);
          $61 = HEAP32[$60>>2]|0;
          ;HEAP32[$61>>2]=0|0;HEAP32[$61+4>>2]=0|0;HEAP32[$61+8>>2]=0|0;HEAP32[$61+12>>2]=0|0;HEAP32[$61+16>>2]=0|0;HEAP32[$61+20>>2]=0|0;
          $__i$0$i$i$i$i$i$i$i$i = 0;
          while(1) {
           $exitcond$i$i$i$i$i$i$i$i = ($__i$0$i$i$i$i$i$i$i$i|0)==(3);
           if ($exitcond$i$i$i$i$i$i$i$i) {
            break;
           }
           $62 = (($61) + ($__i$0$i$i$i$i$i$i$i$i<<2)|0);
           HEAP32[$62>>2] = 0;
           $63 = (($__i$0$i$i$i$i$i$i$i$i) + 1)|0;
           $__i$0$i$i$i$i$i$i$i$i = $63;
          }
          $64 = ((($61)) + 12|0);
          $__i$0$i$i1$i$i$i$i$i$i = 0;
          while(1) {
           $exitcond$i$i2$i$i$i$i$i$i = ($__i$0$i$i1$i$i$i$i$i$i|0)==(3);
           if ($exitcond$i$i2$i$i$i$i$i$i) {
            break;
           }
           $65 = (($64) + ($__i$0$i$i1$i$i$i$i$i$i<<2)|0);
           HEAP32[$65>>2] = 0;
           $66 = (($__i$0$i$i1$i$i$i$i$i$i) + 1)|0;
           $__i$0$i$i1$i$i$i$i$i$i = $66;
          }
          $67 = ((($61)) + 24|0);
          HEAP32[$60>>2] = $67;
          __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($db,$__v$i$i$i);
          __ZNSt3__114__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v$i$i$i);
         }
         $68 = $t0$0$i19;
         $69 = (($16) - ($68))|0;
         $70 = ($69|0)>(1);
         if ($70) {
          $71 = HEAP8[$t0$0$i19>>0]|0;
          $72 = ($71<<24>>24)==(83);
          if ($72) {
           $73 = ((($t0$0$i19)) + 1|0);
           $74 = HEAP8[$73>>0]|0;
           $75 = ($74<<24>>24)==(116);
           if ($75) {
            $76 = ((($t0$0$i19)) + 2|0);
            $77 = HEAP32[$34>>2]|0;
            $78 = ((($77)) + -24|0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($78,6348,3);
            $t0$1$i = $76;
           } else {
            $t0$1$i = $t0$0$i19;
           }
          } else {
           $t0$1$i = $t0$0$i19;
          }
         } else {
          $t0$1$i = $t0$0$i19;
         }
         $79 = ($t0$1$i|0)==($last|0);
         if ($79) {
          $120 = HEAP32[$34>>2]|0;
          $121 = ((($120)) + -24|0);
          $122 = $120;
          while(1) {
           $123 = ($122|0)==($121|0);
           if ($123) {
            break L57;
           }
           $124 = ((($122)) + -24|0);
           HEAP32[$34>>2] = $124;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($124);
           $$pre$i$i20 = HEAP32[$34>>2]|0;
           $122 = $$pre$i$i20;
          }
         }
         $80 = ((($name3$i)) + 8|0);
         $81 = ((($name3$i)) + 1|0);
         $82 = ((($name3$i)) + 4|0);
         $83 = ((($db)) + 12|0);
         $84 = ((($db)) + 16|0);
         $85 = ((($db)) + 20|0);
         $86 = ((($db)) + 24|0);
         $87 = ((($9)) + 12|0);
         $88 = ((($9)) + 4|0);
         $89 = ((($9)) + 8|0);
         $90 = ((($db)) + 28|0);
         $91 = ((($__v$i$i59$i)) + 8|0);
         $92 = ((($12)) + 12|0);
         $93 = ((($12)) + 4|0);
         $94 = ((($12)) + 8|0);
         $95 = ((($__v$i$i69$i)) + 8|0);
         $96 = ((($11)) + 8|0);
         $97 = ((($11)) + 1|0);
         $98 = ((($11)) + 4|0);
         $99 = ((($0)) + 8|0);
         $100 = ((($0)) + 1|0);
         $101 = ((($0)) + 4|0);
         $102 = ((($1)) + 12|0);
         $103 = ((($1)) + 4|0);
         $104 = ((($1)) + 8|0);
         $105 = ((($__v$i$i33$i)) + 8|0);
         $106 = ((($4)) + 12|0);
         $107 = ((($4)) + 4|0);
         $108 = ((($4)) + 8|0);
         $109 = ((($__v$i$i40$i)) + 8|0);
         $110 = ((($3)) + 8|0);
         $111 = ((($3)) + 1|0);
         $112 = ((($3)) + 4|0);
         $113 = ((($7)) + 12|0);
         $114 = ((($7)) + 4|0);
         $115 = ((($7)) + 8|0);
         $116 = ((($__v$i$i50$i)) + 8|0);
         $117 = ((($6)) + 8|0);
         $118 = ((($6)) + 1|0);
         $119 = ((($6)) + 4|0);
         $pop_subs$0$off0$i$ph = 0;$t0$2$i$ph = $t0$1$i;
         L100: while(1) {
          $t0$2$i = $t0$2$i$ph;
          L102: while(1) {
           $125 = HEAP8[$t0$2$i>>0]|0;
           $126 = ($125<<24>>24)==(69);
           if ($126) {
            label = 157;
            break L100;
           }
           $127 = $125 << 24 >> 24;
           switch ($127|0) {
           case 83:  {
            $t0$2$i$lcssa187 = $t0$2$i;
            label = 39;
            break L102;
            break;
           }
           case 84:  {
            $t0$2$i$lcssa188 = $t0$2$i;
            label = 65;
            break L102;
            break;
           }
           case 68:  {
            $t0$2$i$lcssa189 = $t0$2$i;
            label = 89;
            break L102;
            break;
           }
           case 73:  {
            break;
           }
           case 76:  {
            $444 = ((($t0$2$i)) + 1|0);
            $445 = ($444|0)==($last|0);
            if ($445) {
             break L57;
            } else {
             $t0$2$i = $444;
             continue L102;
            }
            break;
           }
           default: {
            $t0$2$i193 = $t0$2$i;
            break L102;
           }
           }
           $378 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($t0$2$i,$last,$db)|0);
           $379 = ($378|0)==($t0$2$i|0);
           $380 = ($378|0)==($last|0);
           $or$cond29$i = $379 | $380;
           if ($or$cond29$i) {
            break L57;
           }
           $381 = HEAP32[$34>>2]|0;
           $382 = ((($381)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name3$i,$382);
           $383 = HEAP32[$34>>2]|0;
           $384 = ((($383)) + -24|0);
           $385 = $383;
           while(1) {
            $386 = ($385|0)==($384|0);
            if ($386) {
             break;
            }
            $387 = ((($385)) + -24|0);
            HEAP32[$34>>2] = $387;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($387);
            $$pre$i55$i = HEAP32[$34>>2]|0;
            $385 = $$pre$i55$i;
           }
           $388 = ((($383)) + -48|0);
           $389 = HEAP8[$name3$i>>0]|0;
           $390 = $389 & 1;
           $391 = ($390<<24>>24)==(0);
           $392 = HEAP32[$80>>2]|0;
           $393 = $391 ? $81 : $392;
           $394 = HEAP32[$82>>2]|0;
           $395 = $389&255;
           $396 = $395 >>> 1;
           $397 = $391 ? $396 : $394;
           __THREW__ = 0;
           (invoke_iiii(91,($388|0),($393|0),($397|0))|0);
           $398 = __THREW__; __THREW__ = 0;
           $399 = $398&1;
           if ($399) {
            label = 129;
            break L100;
           }
           $400 = HEAP32[$34>>2]|0;
           $401 = ((($400)) + -24|0);
           $402 = HEAP32[$83>>2]|0;
           HEAP32[$10>>2] = $402;
           __THREW__ = 0;
           invoke_viii(103,($9|0),($401|0),($10|0));
           $403 = __THREW__; __THREW__ = 0;
           $404 = $403&1;
           if ($404) {
            label = 129;
            break L100;
           }
           $405 = HEAP32[$85>>2]|0;
           $406 = HEAP32[$86>>2]|0;
           $407 = ($405>>>0)<($406>>>0);
           $408 = $406;
           if ($407) {
            $409 = ((($405)) + 4|0);
            $410 = HEAP32[$87>>2]|0;
            $411 = ((($405)) + 12|0);
            HEAP32[$411>>2] = $410;
            $412 = HEAP32[$9>>2]|0;
            HEAP32[$405>>2] = $412;
            $413 = HEAP32[$88>>2]|0;
            HEAP32[$409>>2] = $413;
            $414 = HEAP32[$89>>2]|0;
            $415 = ((($405)) + 8|0);
            HEAP32[$415>>2] = $414;
            HEAP32[$89>>2] = 0;
            HEAP32[$88>>2] = 0;
            HEAP32[$9>>2] = 0;
            $416 = HEAP32[$85>>2]|0;
            $417 = ((($416)) + 16|0);
            HEAP32[$85>>2] = $417;
           } else {
            $418 = $405;
            $419 = HEAP32[$84>>2]|0;
            $420 = (($418) - ($419))|0;
            $421 = $420 >> 4;
            $422 = (($421) + 1)|0;
            $423 = ($420|0)<(-16);
            if ($423) {
             label = 124;
             break L100;
            }
            $427 = (($408) - ($419))|0;
            $428 = $427 >> 4;
            $429 = ($428>>>0)<(1073741823);
            if ($429) {
             $430 = $427 >> 3;
             $431 = ($430>>>0)<($422>>>0);
             $432 = $431 ? $422 : $430;
             $$0$i$i$i60$i = $432;
            } else {
             $$0$i$i$i60$i = 2147483647;
            }
            __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i59$i,$$0$i$i$i60$i,$421,$90);
            $433 = HEAP32[$91>>2]|0;
            $434 = ((($433)) + 4|0);
            $435 = HEAP32[$87>>2]|0;
            $436 = ((($433)) + 12|0);
            HEAP32[$436>>2] = $435;
            $437 = HEAP32[$9>>2]|0;
            HEAP32[$433>>2] = $437;
            $438 = HEAP32[$88>>2]|0;
            HEAP32[$434>>2] = $438;
            $439 = HEAP32[$89>>2]|0;
            $440 = ((($433)) + 8|0);
            HEAP32[$440>>2] = $439;
            HEAP32[$89>>2] = 0;
            HEAP32[$88>>2] = 0;
            HEAP32[$9>>2] = 0;
            $441 = ((($433)) + 16|0);
            HEAP32[$91>>2] = $441;
            __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($84,$__v$i$i59$i);
            __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i59$i);
           }
           __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($9);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name3$i);
           $t0$2$i = $378;
          }
          L123: do {
           if ((label|0) == 39) {
            label = 0;
            $128 = ((($t0$2$i$lcssa187)) + 1|0);
            $129 = ($128|0)==($last|0);
            if (!($129)) {
             $130 = HEAP8[$128>>0]|0;
             $131 = ($130<<24>>24)==(116);
             if ($131) {
              $t0$2$i193 = $t0$2$i$lcssa187;
              break;
             }
            }
            $132 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($t0$2$i$lcssa187,$last,$db)|0);
            $133 = ($132|0)==($t0$2$i$lcssa187|0);
            $134 = ($132|0)==($last|0);
            $or$cond$i22 = $133 | $134;
            if ($or$cond$i22) {
             break L57;
            }
            $135 = HEAP32[$34>>2]|0;
            $136 = ((($135)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i17,$136);
            $137 = HEAP32[$34>>2]|0;
            $138 = ((($137)) + -24|0);
            $139 = $137;
            while(1) {
             $140 = ($139|0)==($138|0);
             if ($140) {
              break;
             }
             $141 = ((($139)) + -24|0);
             HEAP32[$34>>2] = $141;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($141);
             $$pre$i31$i = HEAP32[$34>>2]|0;
             $139 = $$pre$i31$i;
            }
            $142 = ((($137)) + -48|0);
            $143 = HEAP8[$142>>0]|0;
            $144 = $143 & 1;
            $145 = ($144<<24>>24)==(0);
            if ($145) {
             $148 = $143&255;
             $149 = $148 >>> 1;
             $150 = $149;
            } else {
             $146 = ((($137)) + -44|0);
             $147 = HEAP32[$146>>2]|0;
             $150 = $147;
            }
            $151 = ($150|0)==(0);
            if ($151) {
             __THREW__ = 0;
             invoke_vii(115,($142|0),($name$i17|0));
             $211 = __THREW__; __THREW__ = 0;
             $212 = $211&1;
             if ($212) {
              label = 60;
              break L100;
             }
            } else {
             __THREW__ = 0;
             invoke_viii(107,($0|0),(5153|0),($name$i17|0));
             $152 = __THREW__; __THREW__ = 0;
             $153 = $152&1;
             if ($153) {
              label = 60;
              break L100;
             }
             $154 = HEAP8[$0>>0]|0;
             $155 = $154 & 1;
             $156 = ($155<<24>>24)==(0);
             $157 = HEAP32[$99>>2]|0;
             $158 = $156 ? $100 : $157;
             $159 = HEAP32[$101>>2]|0;
             $160 = $154&255;
             $161 = $160 >>> 1;
             $162 = $156 ? $161 : $159;
             __THREW__ = 0;
             (invoke_iiii(91,($142|0),($158|0),($162|0))|0);
             $163 = __THREW__; __THREW__ = 0;
             $164 = $163&1;
             if ($164) {
              label = 61;
              break L100;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
             $165 = HEAP32[$34>>2]|0;
             $166 = ((($165)) + -24|0);
             $167 = HEAP32[$83>>2]|0;
             HEAP32[$2>>2] = $167;
             __THREW__ = 0;
             invoke_viii(103,($1|0),($166|0),($2|0));
             $168 = __THREW__; __THREW__ = 0;
             $169 = $168&1;
             if ($169) {
              label = 60;
              break L100;
             }
             $170 = HEAP32[$85>>2]|0;
             $171 = HEAP32[$86>>2]|0;
             $172 = ($170>>>0)<($171>>>0);
             $173 = $171;
             if ($172) {
              $174 = ((($170)) + 4|0);
              $175 = HEAP32[$102>>2]|0;
              $176 = ((($170)) + 12|0);
              HEAP32[$176>>2] = $175;
              $177 = HEAP32[$1>>2]|0;
              HEAP32[$170>>2] = $177;
              $178 = HEAP32[$103>>2]|0;
              HEAP32[$174>>2] = $178;
              $179 = HEAP32[$104>>2]|0;
              $180 = ((($170)) + 8|0);
              HEAP32[$180>>2] = $179;
              HEAP32[$104>>2] = 0;
              HEAP32[$103>>2] = 0;
              HEAP32[$1>>2] = 0;
              $181 = HEAP32[$85>>2]|0;
              $182 = ((($181)) + 16|0);
              HEAP32[$85>>2] = $182;
             } else {
              $183 = $170;
              $184 = HEAP32[$84>>2]|0;
              $185 = (($183) - ($184))|0;
              $186 = $185 >> 4;
              $187 = (($186) + 1)|0;
              $188 = ($185|0)<(-16);
              if ($188) {
               label = 55;
               break L100;
              }
              $192 = (($173) - ($184))|0;
              $193 = $192 >> 4;
              $194 = ($193>>>0)<(1073741823);
              if ($194) {
               $195 = $192 >> 3;
               $196 = ($195>>>0)<($187>>>0);
               $197 = $196 ? $187 : $195;
               $$0$i$i$i34$i = $197;
              } else {
               $$0$i$i$i34$i = 2147483647;
              }
              __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i33$i,$$0$i$i$i34$i,$186,$90);
              $198 = HEAP32[$105>>2]|0;
              $199 = ((($198)) + 4|0);
              $200 = HEAP32[$102>>2]|0;
              $201 = ((($198)) + 12|0);
              HEAP32[$201>>2] = $200;
              $202 = HEAP32[$1>>2]|0;
              HEAP32[$198>>2] = $202;
              $203 = HEAP32[$103>>2]|0;
              HEAP32[$199>>2] = $203;
              $204 = HEAP32[$104>>2]|0;
              $205 = ((($198)) + 8|0);
              HEAP32[$205>>2] = $204;
              HEAP32[$104>>2] = 0;
              HEAP32[$103>>2] = 0;
              HEAP32[$1>>2] = 0;
              $206 = ((($198)) + 16|0);
              HEAP32[$105>>2] = $206;
              __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($84,$__v$i$i33$i);
              __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i33$i);
             }
             __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($1);
            }
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i17);
            $pop_subs$0$off0$i$ph = 1;$t0$2$i$ph = $132;
            continue L100;
           }
           else if ((label|0) == 65) {
            label = 0;
            $213 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($t0$2$i$lcssa188,$last,$db)|0);
            $214 = ($213|0)==($t0$2$i$lcssa188|0);
            $215 = ($213|0)==($last|0);
            $or$cond27$i = $214 | $215;
            if ($or$cond27$i) {
             break L57;
            }
            $216 = HEAP32[$34>>2]|0;
            $217 = ((($216)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name1$i,$217);
            $218 = HEAP32[$34>>2]|0;
            $219 = ((($218)) + -24|0);
            $220 = $218;
            while(1) {
             $221 = ($220|0)==($219|0);
             if ($221) {
              break;
             }
             $222 = ((($220)) + -24|0);
             HEAP32[$34>>2] = $222;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($222);
             $$pre$i35$i = HEAP32[$34>>2]|0;
             $220 = $$pre$i35$i;
            }
            $223 = ((($218)) + -48|0);
            $224 = HEAP8[$223>>0]|0;
            $225 = $224 & 1;
            $226 = ($225<<24>>24)==(0);
            if ($226) {
             $229 = $224&255;
             $230 = $229 >>> 1;
             $231 = $230;
            } else {
             $227 = ((($218)) + -44|0);
             $228 = HEAP32[$227>>2]|0;
             $231 = $228;
            }
            $232 = ($231|0)==(0);
            if ($232) {
             __THREW__ = 0;
             invoke_vii(115,($223|0),($name1$i|0));
             $250 = __THREW__; __THREW__ = 0;
             $251 = $250&1;
             if ($251) {
              label = 76;
              break L100;
             }
            } else {
             __THREW__ = 0;
             invoke_viii(107,($3|0),(5153|0),($name1$i|0));
             $233 = __THREW__; __THREW__ = 0;
             $234 = $233&1;
             if ($234) {
              label = 76;
              break L100;
             }
             $235 = HEAP8[$3>>0]|0;
             $236 = $235 & 1;
             $237 = ($236<<24>>24)==(0);
             $238 = HEAP32[$110>>2]|0;
             $239 = $237 ? $111 : $238;
             $240 = HEAP32[$112>>2]|0;
             $241 = $235&255;
             $242 = $241 >>> 1;
             $243 = $237 ? $242 : $240;
             __THREW__ = 0;
             (invoke_iiii(91,($223|0),($239|0),($243|0))|0);
             $244 = __THREW__; __THREW__ = 0;
             $245 = $244&1;
             if ($245) {
              label = 77;
              break L100;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
            }
            $252 = HEAP32[$34>>2]|0;
            $253 = ((($252)) + -24|0);
            $254 = HEAP32[$83>>2]|0;
            HEAP32[$5>>2] = $254;
            __THREW__ = 0;
            invoke_viii(103,($4|0),($253|0),($5|0));
            $255 = __THREW__; __THREW__ = 0;
            $256 = $255&1;
            if ($256) {
             label = 76;
             break L100;
            }
            $257 = HEAP32[$85>>2]|0;
            $258 = HEAP32[$86>>2]|0;
            $259 = ($257>>>0)<($258>>>0);
            $260 = $258;
            if ($259) {
             $261 = ((($257)) + 4|0);
             $262 = HEAP32[$106>>2]|0;
             $263 = ((($257)) + 12|0);
             HEAP32[$263>>2] = $262;
             $264 = HEAP32[$4>>2]|0;
             HEAP32[$257>>2] = $264;
             $265 = HEAP32[$107>>2]|0;
             HEAP32[$261>>2] = $265;
             $266 = HEAP32[$108>>2]|0;
             $267 = ((($257)) + 8|0);
             HEAP32[$267>>2] = $266;
             HEAP32[$108>>2] = 0;
             HEAP32[$107>>2] = 0;
             HEAP32[$4>>2] = 0;
             $268 = HEAP32[$85>>2]|0;
             $269 = ((($268)) + 16|0);
             HEAP32[$85>>2] = $269;
            } else {
             $270 = $257;
             $271 = HEAP32[$84>>2]|0;
             $272 = (($270) - ($271))|0;
             $273 = $272 >> 4;
             $274 = (($273) + 1)|0;
             $275 = ($272|0)<(-16);
             if ($275) {
              label = 83;
              break L100;
             }
             $279 = (($260) - ($271))|0;
             $280 = $279 >> 4;
             $281 = ($280>>>0)<(1073741823);
             if ($281) {
              $282 = $279 >> 3;
              $283 = ($282>>>0)<($274>>>0);
              $284 = $283 ? $274 : $282;
              $$0$i$i$i41$i = $284;
             } else {
              $$0$i$i$i41$i = 2147483647;
             }
             __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i40$i,$$0$i$i$i41$i,$273,$90);
             $285 = HEAP32[$109>>2]|0;
             $286 = ((($285)) + 4|0);
             $287 = HEAP32[$106>>2]|0;
             $288 = ((($285)) + 12|0);
             HEAP32[$288>>2] = $287;
             $289 = HEAP32[$4>>2]|0;
             HEAP32[$285>>2] = $289;
             $290 = HEAP32[$107>>2]|0;
             HEAP32[$286>>2] = $290;
             $291 = HEAP32[$108>>2]|0;
             $292 = ((($285)) + 8|0);
             HEAP32[$292>>2] = $291;
             HEAP32[$108>>2] = 0;
             HEAP32[$107>>2] = 0;
             HEAP32[$4>>2] = 0;
             $293 = ((($285)) + 16|0);
             HEAP32[$109>>2] = $293;
             __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($84,$__v$i$i40$i);
             __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i40$i);
            }
            __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name1$i);
            $pop_subs$0$off0$i$ph = 1;$t0$2$i$ph = $213;
            continue L100;
           }
           else if ((label|0) == 89) {
            label = 0;
            $294 = ((($t0$2$i$lcssa189)) + 1|0);
            $295 = ($294|0)==($last|0);
            if (!($295)) {
             $296 = HEAP8[$294>>0]|0;
             switch ($296<<24>>24) {
             case 84: case 116:  {
              break;
             }
             default: {
              $t0$2$i193 = $t0$2$i$lcssa189;
              break L123;
             }
             }
            }
            $297 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($t0$2$i$lcssa189,$last,$db)|0);
            $298 = ($297|0)==($t0$2$i$lcssa189|0);
            $299 = ($297|0)==($last|0);
            $or$cond28$i = $298 | $299;
            if ($or$cond28$i) {
             break L57;
            }
            $300 = HEAP32[$34>>2]|0;
            $301 = ((($300)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name2$i18,$301);
            $302 = HEAP32[$34>>2]|0;
            $303 = ((($302)) + -24|0);
            $304 = $302;
            while(1) {
             $305 = ($304|0)==($303|0);
             if ($305) {
              break;
             }
             $306 = ((($304)) + -24|0);
             HEAP32[$34>>2] = $306;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($306);
             $$pre$i45$i = HEAP32[$34>>2]|0;
             $304 = $$pre$i45$i;
            }
            $307 = ((($302)) + -48|0);
            $308 = HEAP8[$307>>0]|0;
            $309 = $308 & 1;
            $310 = ($309<<24>>24)==(0);
            if ($310) {
             $313 = $308&255;
             $314 = $313 >>> 1;
             $315 = $314;
            } else {
             $311 = ((($302)) + -44|0);
             $312 = HEAP32[$311>>2]|0;
             $315 = $312;
            }
            $316 = ($315|0)==(0);
            if ($316) {
             __THREW__ = 0;
             invoke_vii(115,($307|0),($name2$i18|0));
             $334 = __THREW__; __THREW__ = 0;
             $335 = $334&1;
             if ($335) {
              label = 102;
              break L100;
             }
            } else {
             __THREW__ = 0;
             invoke_viii(107,($6|0),(5153|0),($name2$i18|0));
             $317 = __THREW__; __THREW__ = 0;
             $318 = $317&1;
             if ($318) {
              label = 102;
              break L100;
             }
             $319 = HEAP8[$6>>0]|0;
             $320 = $319 & 1;
             $321 = ($320<<24>>24)==(0);
             $322 = HEAP32[$117>>2]|0;
             $323 = $321 ? $118 : $322;
             $324 = HEAP32[$119>>2]|0;
             $325 = $319&255;
             $326 = $325 >>> 1;
             $327 = $321 ? $326 : $324;
             __THREW__ = 0;
             (invoke_iiii(91,($307|0),($323|0),($327|0))|0);
             $328 = __THREW__; __THREW__ = 0;
             $329 = $328&1;
             if ($329) {
              label = 103;
              break L100;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
            }
            $336 = HEAP32[$34>>2]|0;
            $337 = ((($336)) + -24|0);
            $338 = HEAP32[$83>>2]|0;
            HEAP32[$8>>2] = $338;
            __THREW__ = 0;
            invoke_viii(103,($7|0),($337|0),($8|0));
            $339 = __THREW__; __THREW__ = 0;
            $340 = $339&1;
            if ($340) {
             label = 102;
             break L100;
            }
            $341 = HEAP32[$85>>2]|0;
            $342 = HEAP32[$86>>2]|0;
            $343 = ($341>>>0)<($342>>>0);
            $344 = $342;
            if ($343) {
             $345 = ((($341)) + 4|0);
             $346 = HEAP32[$113>>2]|0;
             $347 = ((($341)) + 12|0);
             HEAP32[$347>>2] = $346;
             $348 = HEAP32[$7>>2]|0;
             HEAP32[$341>>2] = $348;
             $349 = HEAP32[$114>>2]|0;
             HEAP32[$345>>2] = $349;
             $350 = HEAP32[$115>>2]|0;
             $351 = ((($341)) + 8|0);
             HEAP32[$351>>2] = $350;
             HEAP32[$115>>2] = 0;
             HEAP32[$114>>2] = 0;
             HEAP32[$7>>2] = 0;
             $352 = HEAP32[$85>>2]|0;
             $353 = ((($352)) + 16|0);
             HEAP32[$85>>2] = $353;
            } else {
             $354 = $341;
             $355 = HEAP32[$84>>2]|0;
             $356 = (($354) - ($355))|0;
             $357 = $356 >> 4;
             $358 = (($357) + 1)|0;
             $359 = ($356|0)<(-16);
             if ($359) {
              label = 109;
              break L100;
             }
             $363 = (($344) - ($355))|0;
             $364 = $363 >> 4;
             $365 = ($364>>>0)<(1073741823);
             if ($365) {
              $366 = $363 >> 3;
              $367 = ($366>>>0)<($358>>>0);
              $368 = $367 ? $358 : $366;
              $$0$i$i$i51$i = $368;
             } else {
              $$0$i$i$i51$i = 2147483647;
             }
             __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i50$i,$$0$i$i$i51$i,$357,$90);
             $369 = HEAP32[$116>>2]|0;
             $370 = ((($369)) + 4|0);
             $371 = HEAP32[$113>>2]|0;
             $372 = ((($369)) + 12|0);
             HEAP32[$372>>2] = $371;
             $373 = HEAP32[$7>>2]|0;
             HEAP32[$369>>2] = $373;
             $374 = HEAP32[$114>>2]|0;
             HEAP32[$370>>2] = $374;
             $375 = HEAP32[$115>>2]|0;
             $376 = ((($369)) + 8|0);
             HEAP32[$376>>2] = $375;
             HEAP32[$115>>2] = 0;
             HEAP32[$114>>2] = 0;
             HEAP32[$7>>2] = 0;
             $377 = ((($369)) + 16|0);
             HEAP32[$116>>2] = $377;
             __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($84,$__v$i$i50$i);
             __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i50$i);
            }
            __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($7);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name2$i18);
            $pop_subs$0$off0$i$ph = 1;$t0$2$i$ph = $297;
            continue L100;
           }
          } while(0);
          $446 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$2$i193,$last,$db)|0);
          $447 = ($446|0)==($t0$2$i193|0);
          $448 = ($446|0)==($last|0);
          $or$cond30$i = $447 | $448;
          if ($or$cond30$i) {
           break L57;
          }
          $449 = HEAP32[$34>>2]|0;
          $450 = ((($449)) + -24|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name4$i,$450);
          $451 = HEAP32[$34>>2]|0;
          $452 = ((($451)) + -24|0);
          $453 = $451;
          while(1) {
           $454 = ($453|0)==($452|0);
           if ($454) {
            break;
           }
           $455 = ((($453)) + -24|0);
           HEAP32[$34>>2] = $455;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($455);
           $$pre$i64$i = HEAP32[$34>>2]|0;
           $453 = $$pre$i64$i;
          }
          $456 = ((($451)) + -48|0);
          $457 = HEAP8[$456>>0]|0;
          $458 = $457 & 1;
          $459 = ($458<<24>>24)==(0);
          if ($459) {
           $462 = $457&255;
           $463 = $462 >>> 1;
           $464 = $463;
          } else {
           $460 = ((($451)) + -44|0);
           $461 = HEAP32[$460>>2]|0;
           $464 = $461;
          }
          $465 = ($464|0)==(0);
          if ($465) {
           __THREW__ = 0;
           invoke_vii(115,($456|0),($name4$i|0));
           $483 = __THREW__; __THREW__ = 0;
           $484 = $483&1;
           if ($484) {
            label = 143;
            break;
           }
          } else {
           __THREW__ = 0;
           invoke_viii(107,($11|0),(5153|0),($name4$i|0));
           $466 = __THREW__; __THREW__ = 0;
           $467 = $466&1;
           if ($467) {
            label = 143;
            break;
           }
           $468 = HEAP8[$11>>0]|0;
           $469 = $468 & 1;
           $470 = ($469<<24>>24)==(0);
           $471 = HEAP32[$96>>2]|0;
           $472 = $470 ? $97 : $471;
           $473 = HEAP32[$98>>2]|0;
           $474 = $468&255;
           $475 = $474 >>> 1;
           $476 = $470 ? $475 : $473;
           __THREW__ = 0;
           (invoke_iiii(91,($456|0),($472|0),($476|0))|0);
           $477 = __THREW__; __THREW__ = 0;
           $478 = $477&1;
           if ($478) {
            label = 144;
            break;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
          }
          $485 = HEAP32[$34>>2]|0;
          $486 = ((($485)) + -24|0);
          $487 = HEAP32[$83>>2]|0;
          HEAP32[$13>>2] = $487;
          __THREW__ = 0;
          invoke_viii(103,($12|0),($486|0),($13|0));
          $488 = __THREW__; __THREW__ = 0;
          $489 = $488&1;
          if ($489) {
           label = 143;
           break;
          }
          $490 = HEAP32[$85>>2]|0;
          $491 = HEAP32[$86>>2]|0;
          $492 = ($490>>>0)<($491>>>0);
          $493 = $491;
          if ($492) {
           $494 = ((($490)) + 4|0);
           $495 = HEAP32[$92>>2]|0;
           $496 = ((($490)) + 12|0);
           HEAP32[$496>>2] = $495;
           $497 = HEAP32[$12>>2]|0;
           HEAP32[$490>>2] = $497;
           $498 = HEAP32[$93>>2]|0;
           HEAP32[$494>>2] = $498;
           $499 = HEAP32[$94>>2]|0;
           $500 = ((($490)) + 8|0);
           HEAP32[$500>>2] = $499;
           HEAP32[$94>>2] = 0;
           HEAP32[$93>>2] = 0;
           HEAP32[$12>>2] = 0;
           $501 = HEAP32[$85>>2]|0;
           $502 = ((($501)) + 16|0);
           HEAP32[$85>>2] = $502;
          } else {
           $503 = $490;
           $504 = HEAP32[$84>>2]|0;
           $505 = (($503) - ($504))|0;
           $506 = $505 >> 4;
           $507 = (($506) + 1)|0;
           $508 = ($505|0)<(-16);
           if ($508) {
            label = 150;
            break;
           }
           $512 = (($493) - ($504))|0;
           $513 = $512 >> 4;
           $514 = ($513>>>0)<(1073741823);
           if ($514) {
            $515 = $512 >> 3;
            $516 = ($515>>>0)<($507>>>0);
            $517 = $516 ? $507 : $515;
            $$0$i$i$i70$i = $517;
           } else {
            $$0$i$i$i70$i = 2147483647;
           }
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i69$i,$$0$i$i$i70$i,$506,$90);
           $518 = HEAP32[$95>>2]|0;
           $519 = ((($518)) + 4|0);
           $520 = HEAP32[$92>>2]|0;
           $521 = ((($518)) + 12|0);
           HEAP32[$521>>2] = $520;
           $522 = HEAP32[$12>>2]|0;
           HEAP32[$518>>2] = $522;
           $523 = HEAP32[$93>>2]|0;
           HEAP32[$519>>2] = $523;
           $524 = HEAP32[$94>>2]|0;
           $525 = ((($518)) + 8|0);
           HEAP32[$525>>2] = $524;
           HEAP32[$94>>2] = 0;
           HEAP32[$93>>2] = 0;
           HEAP32[$12>>2] = 0;
           $526 = ((($518)) + 16|0);
           HEAP32[$95>>2] = $526;
           __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($84,$__v$i$i69$i);
           __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i69$i);
          }
          __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($12);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name4$i);
          $pop_subs$0$off0$i$ph = 1;$t0$2$i$ph = $446;
         }
         switch (label|0) {
          case 55: {
           __THREW__ = 0;
           invoke_vi(102,($84|0));
           $189 = __THREW__; __THREW__ = 0;
           $190 = ___cxa_find_matching_catch_2()|0;
           $191 = tempRet0;
           __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($1);
           $$0$i23 = $191;$$01$i = $190;
           label = 64;
           break;
          }
          case 60: {
           $207 = ___cxa_find_matching_catch_2()|0;
           $208 = tempRet0;
           $$0$i23 = $208;$$01$i = $207;
           label = 64;
           break;
          }
          case 61: {
           $209 = ___cxa_find_matching_catch_2()|0;
           $210 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
           $$0$i23 = $210;$$01$i = $209;
           label = 64;
           break;
          }
          case 76: {
           $246 = ___cxa_find_matching_catch_2()|0;
           $247 = tempRet0;
           $$1$i24 = $247;$$12$i = $246;
           label = 88;
           break;
          }
          case 77: {
           $248 = ___cxa_find_matching_catch_2()|0;
           $249 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           $$1$i24 = $249;$$12$i = $248;
           label = 88;
           break;
          }
          case 83: {
           __THREW__ = 0;
           invoke_vi(102,($84|0));
           $276 = __THREW__; __THREW__ = 0;
           $277 = ___cxa_find_matching_catch_2()|0;
           $278 = tempRet0;
           __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($4);
           $$1$i24 = $278;$$12$i = $277;
           label = 88;
           break;
          }
          case 102: {
           $330 = ___cxa_find_matching_catch_2()|0;
           $331 = tempRet0;
           $$2$i25 = $331;$$23$i = $330;
           label = 114;
           break;
          }
          case 103: {
           $332 = ___cxa_find_matching_catch_2()|0;
           $333 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
           $$2$i25 = $333;$$23$i = $332;
           label = 114;
           break;
          }
          case 109: {
           __THREW__ = 0;
           invoke_vi(102,($84|0));
           $360 = __THREW__; __THREW__ = 0;
           $361 = ___cxa_find_matching_catch_2()|0;
           $362 = tempRet0;
           __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($7);
           $$2$i25 = $362;$$23$i = $361;
           label = 114;
           break;
          }
          case 124: {
           __THREW__ = 0;
           invoke_vi(102,($84|0));
           $424 = __THREW__; __THREW__ = 0;
           $425 = ___cxa_find_matching_catch_2()|0;
           $426 = tempRet0;
           __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($9);
           $$3$i26 = $426;$$34$i = $425;
           label = 130;
           break;
          }
          case 129: {
           $442 = ___cxa_find_matching_catch_2()|0;
           $443 = tempRet0;
           $$3$i26 = $443;$$34$i = $442;
           label = 130;
           break;
          }
          case 143: {
           $479 = ___cxa_find_matching_catch_2()|0;
           $480 = tempRet0;
           $$4$i27 = $480;$$45$i = $479;
           label = 156;
           break;
          }
          case 144: {
           $481 = ___cxa_find_matching_catch_2()|0;
           $482 = tempRet0;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
           $$4$i27 = $482;$$45$i = $481;
           label = 156;
           break;
          }
          case 150: {
           __THREW__ = 0;
           invoke_vi(102,($84|0));
           $509 = __THREW__; __THREW__ = 0;
           $510 = ___cxa_find_matching_catch_2()|0;
           $511 = tempRet0;
           __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($12);
           $$4$i27 = $511;$$45$i = $510;
           label = 156;
           break;
          }
          case 157: {
           $527 = ((($t0$2$i)) + 1|0);
           $528 = HEAP32[$cv$i>>2]|0;
           $529 = ((($db)) + 48|0);
           HEAP32[$529>>2] = $528;
           L244: do {
            if ($pop_subs$0$off0$i$ph) {
             $530 = ((($db)) + 16|0);
             $531 = HEAP32[$530>>2]|0;
             $532 = HEAP32[$85>>2]|0;
             $533 = ($531|0)==($532|0);
             if (!($533)) {
              $534 = ((($532)) + -16|0);
              $535 = $532;
              while(1) {
               $536 = ($535|0)==($534|0);
               if ($536) {
                break L244;
               }
               $537 = ((($535)) + -16|0);
               HEAP32[$85>>2] = $537;
               __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($537);
               $$pre$i74$i = HEAP32[$85>>2]|0;
               $535 = $$pre$i74$i;
              }
             }
            }
           } while(0);
           $$414$i = $527;
           break L54;
           break;
          }
         }
         if ((label|0) == 64) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i17);
          $$5$i30 = $$0$i23;$$56$i = $$01$i;
         }
         else if ((label|0) == 88) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name1$i);
          $$5$i30 = $$1$i24;$$56$i = $$12$i;
         }
         else if ((label|0) == 114) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name2$i18);
          $$5$i30 = $$2$i25;$$56$i = $$23$i;
         }
         else if ((label|0) == 130) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name3$i);
          $$5$i30 = $$3$i26;$$56$i = $$34$i;
         }
         else if ((label|0) == 156) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name4$i);
          $$5$i30 = $$4$i27;$$56$i = $$45$i;
         }
         ___resumeException($$56$i|0);
         // unreachable;
        }
       } while(0);
       $$414$i = $$first;
      } else {
       $$414$i = $$first;
      }
     }
    } while(0);
    $538 = ($$414$i|0)==($$first|0);
    $first$ = $538 ? $first : $$414$i;
    $$3 = $first$;
    break L1;
    break;
   }
   case 90:  {
    $539 = ($$first|0)!=($last|0);
    $540 = ($23<<24>>24)==(90);
    $or$cond46 = $540 & $539;
    L263: do {
     if ($or$cond46) {
      $541 = ((($$first)) + 1|0);
      $542 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($541,$last,$db)|0);
      $543 = ($542|0)==($541|0);
      $544 = ($542|0)==($last|0);
      $or$cond$i = $543 | $544;
      if ($or$cond$i) {
       $$4$i = $$first;
      } else {
       $545 = HEAP8[$542>>0]|0;
       $546 = ($545<<24>>24)==(69);
       if ($546) {
        $547 = ((($542)) + 1|0);
        $548 = ($547|0)==($last|0);
        if ($548) {
         $$4$i = $$first;
        } else {
         $549 = HEAP8[$547>>0]|0;
         $550 = $549 << 24 >> 24;
         switch ($550|0) {
         case 115:  {
          $551 = ((($542)) + 2|0);
          $552 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($551,$last)|0);
          $553 = HEAP32[$db>>2]|0;
          $554 = ((($db)) + 4|0);
          $555 = HEAP32[$554>>2]|0;
          $556 = ($553|0)==($555|0);
          if ($556) {
           $$4$i = $552;
           break L263;
          }
          $557 = ((($555)) + -24|0);
          (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($557,6352)|0);
          $$4$i = $552;
          break L263;
          break;
         }
         case 100:  {
          $558 = ((($542)) + 2|0);
          $559 = ($558|0)==($last|0);
          if ($559) {
           $$4$i = $$first;
           break L263;
          }
          $560 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($558,$last)|0);
          $561 = ($560|0)==($last|0);
          if ($561) {
           $$4$i = $$first;
           break L263;
          }
          $562 = HEAP8[$560>>0]|0;
          $563 = ($562<<24>>24)==(95);
          if (!($563)) {
           $$4$i = $$first;
           break L263;
          }
          $564 = ((($560)) + 1|0);
          $565 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($564,$last,$db)|0);
          $566 = ($565|0)==($564|0);
          $567 = ((($db)) + 4|0);
          if ($566) {
           $601 = HEAP32[$567>>2]|0;
           $602 = ((($601)) + -24|0);
           $603 = $601;
           while(1) {
            $604 = ($603|0)==($602|0);
            if ($604) {
             $$4$i = $$first;
             break L263;
            }
            $605 = ((($603)) + -24|0);
            HEAP32[$567>>2] = $605;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($605);
            $$pre$i12$i = HEAP32[$567>>2]|0;
            $603 = $$pre$i12$i;
           }
          }
          $568 = HEAP32[$567>>2]|0;
          $569 = HEAP32[$db>>2]|0;
          $570 = (($568) - ($569))|0;
          $571 = (($570|0) / 24)&-1;
          $572 = ($571>>>0)<(2);
          if ($572) {
           $$4$i = $$first;
           break L263;
          }
          $573 = $568;
          $574 = ((($573)) + -24|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name$i,$574);
          $575 = HEAP32[$567>>2]|0;
          $576 = ((($575)) + -24|0);
          $577 = $575;
          while(1) {
           $578 = ($577|0)==($576|0);
           if ($578) {
            break;
           }
           $579 = ((($577)) + -24|0);
           HEAP32[$567>>2] = $579;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($579);
           $$pre$i$i = HEAP32[$567>>2]|0;
           $577 = $$pre$i$i;
          }
          $580 = ((($575)) + -48|0);
          __THREW__ = 0;
          (invoke_iii(93,($580|0),(5153|0))|0);
          $581 = __THREW__; __THREW__ = 0;
          $582 = $581&1;
          if (!($582)) {
           $583 = HEAP32[$567>>2]|0;
           $584 = ((($583)) + -24|0);
           $585 = HEAP8[$name$i>>0]|0;
           $586 = $585 & 1;
           $587 = ($586<<24>>24)==(0);
           $588 = ((($name$i)) + 8|0);
           $589 = HEAP32[$588>>2]|0;
           $590 = ((($name$i)) + 1|0);
           $591 = $587 ? $590 : $589;
           $592 = ((($name$i)) + 4|0);
           $593 = HEAP32[$592>>2]|0;
           $594 = $585&255;
           $595 = $594 >>> 1;
           $596 = $587 ? $595 : $593;
           __THREW__ = 0;
           (invoke_iiii(91,($584|0),($591|0),($596|0))|0);
           $597 = __THREW__; __THREW__ = 0;
           $598 = $597&1;
           if (!($598)) {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i);
            $$4$i = $565;
            break L263;
           }
          }
          $599 = ___cxa_find_matching_catch_2()|0;
          $600 = tempRet0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name$i);
          $$02$i = $600;$$03$i = $599;
          break;
         }
         default: {
          $606 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($547,$last,$db)|0);
          $607 = ($606|0)==($547|0);
          if ($607) {
           $643 = ((($db)) + 4|0);
           $644 = HEAP32[$643>>2]|0;
           $645 = ((($644)) + -24|0);
           $646 = $644;
           while(1) {
            $647 = ($646|0)==($645|0);
            if ($647) {
             $$4$i = $$first;
             break L263;
            }
            $648 = ((($646)) + -24|0);
            HEAP32[$643>>2] = $648;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($648);
            $$pre$i17$i = HEAP32[$643>>2]|0;
            $646 = $$pre$i17$i;
           }
          }
          $608 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($606,$last)|0);
          $609 = ((($db)) + 4|0);
          $610 = HEAP32[$609>>2]|0;
          $611 = HEAP32[$db>>2]|0;
          $612 = (($610) - ($611))|0;
          $613 = (($612|0) / 24)&-1;
          $614 = ($613>>>0)<(2);
          if ($614) {
           $$4$i = $608;
           break L263;
          }
          $615 = $610;
          $616 = ((($615)) + -24|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name2$i,$616);
          $617 = HEAP32[$609>>2]|0;
          $618 = ((($617)) + -24|0);
          $619 = $617;
          while(1) {
           $620 = ($619|0)==($618|0);
           if ($620) {
            break;
           }
           $621 = ((($619)) + -24|0);
           HEAP32[$609>>2] = $621;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($621);
           $$pre$i14$i = HEAP32[$609>>2]|0;
           $619 = $$pre$i14$i;
          }
          $622 = ((($617)) + -48|0);
          __THREW__ = 0;
          (invoke_iii(93,($622|0),(5153|0))|0);
          $623 = __THREW__; __THREW__ = 0;
          $624 = $623&1;
          if (!($624)) {
           $625 = HEAP32[$609>>2]|0;
           $626 = ((($625)) + -24|0);
           $627 = HEAP8[$name2$i>>0]|0;
           $628 = $627 & 1;
           $629 = ($628<<24>>24)==(0);
           $630 = ((($name2$i)) + 8|0);
           $631 = HEAP32[$630>>2]|0;
           $632 = ((($name2$i)) + 1|0);
           $633 = $629 ? $632 : $631;
           $634 = ((($name2$i)) + 4|0);
           $635 = HEAP32[$634>>2]|0;
           $636 = $627&255;
           $637 = $636 >>> 1;
           $638 = $629 ? $637 : $635;
           __THREW__ = 0;
           (invoke_iiii(91,($626|0),($633|0),($638|0))|0);
           $639 = __THREW__; __THREW__ = 0;
           $640 = $639&1;
           if (!($640)) {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name2$i);
            $$4$i = $608;
            break L263;
           }
          }
          $641 = ___cxa_find_matching_catch_2()|0;
          $642 = tempRet0;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name2$i);
          $$02$i = $642;$$03$i = $641;
         }
         }
         ___resumeException($$03$i|0);
         // unreachable;
        }
       } else {
        $$4$i = $$first;
       }
      }
     } else {
      $$4$i = $$first;
     }
    } while(0);
    $649 = ($$4$i|0)==($$first|0);
    $first$9 = $649 ? $first : $$4$i;
    $$3 = $first$9;
    break L1;
    break;
   }
   default: {
    $650 = $$first;
    $651 = (($16) - ($650))|0;
    $652 = ($651|0)>(1);
    do {
     if ($652) {
      $653 = ($23<<24>>24)==(83);
      if ($653) {
       $654 = ((($$first)) + 1|0);
       $655 = HEAP8[$654>>0]|0;
       $656 = ($655<<24>>24)==(116);
       if ($656) {
        $657 = ((($$first)) + 2|0);
        $658 = ($657|0)==($last|0);
        if ($658) {
         $St$0$off0$i = 0;$t0$0$i = $last;
        } else {
         $659 = HEAP8[$657>>0]|0;
         $660 = ($659<<24>>24)==(76);
         $661 = ((($$first)) + 3|0);
         $$$i = $660 ? $661 : $657;
         $St$0$off0$i = 0;$t0$0$i = $$$i;
        }
       } else {
        $St$0$off0$i = 1;$t0$0$i = $$first;
       }
      } else {
       $St$0$off0$i = 1;$t0$0$i = $$first;
      }
      $662 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$0$i,$last,$db)|0);
      $663 = ($662|0)==($t0$0$i|0);
      $brmerge$i = $St$0$off0$i | $663;
      $first$mux$i = $663 ? $$first : $662;
      if ($brmerge$i) {
       $$13$i$ph = $first$mux$i;
      } else {
       $664 = HEAP32[$db>>2]|0;
       $665 = ((($db)) + 4|0);
       $666 = HEAP32[$665>>2]|0;
       $667 = ($664|0)==($666|0);
       if ($667) {
        label = 229;
        break;
       }
       $668 = ((($666)) + -24|0);
       (__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($668,0,6091)|0);
       $$13$i$ph = $662;
      }
      $669 = ($$13$i$ph|0)==($$first|0);
      if ($669) {
       label = 229;
      } else {
       $670 = ($$13$i$ph|0)==($last|0);
       if ($670) {
        $$3 = $last;
        break L1;
       }
       $671 = HEAP8[$$13$i$ph>>0]|0;
       $672 = ($671<<24>>24)==(73);
       if (!($672)) {
        $$3 = $$13$i$ph;
        break L1;
       }
       $673 = HEAP32[$db>>2]|0;
       $674 = ((($db)) + 4|0);
       $675 = HEAP32[$674>>2]|0;
       $676 = ($673|0)==($675|0);
       if ($676) {
        $$3 = $first;
        break L1;
       }
       $677 = ((($db)) + 16|0);
       $678 = ((($675)) + -24|0);
       $679 = ((($db)) + 12|0);
       $680 = HEAP32[$679>>2]|0;
       HEAP32[$15>>2] = $680;
       __ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($14,$678,$15);
       $681 = ((($db)) + 20|0);
       $682 = HEAP32[$681>>2]|0;
       $683 = ((($db)) + 24|0);
       $684 = HEAP32[$683>>2]|0;
       $685 = ($682>>>0)<($684>>>0);
       $686 = $684;
       if ($685) {
        $687 = ((($14)) + 12|0);
        $688 = ((($682)) + 4|0);
        $689 = HEAP32[$687>>2]|0;
        $690 = ((($682)) + 12|0);
        HEAP32[$690>>2] = $689;
        $691 = HEAP32[$14>>2]|0;
        HEAP32[$682>>2] = $691;
        $692 = ((($14)) + 4|0);
        $693 = HEAP32[$692>>2]|0;
        HEAP32[$688>>2] = $693;
        $694 = ((($14)) + 8|0);
        $695 = HEAP32[$694>>2]|0;
        $696 = ((($682)) + 8|0);
        HEAP32[$696>>2] = $695;
        HEAP32[$694>>2] = 0;
        HEAP32[$692>>2] = 0;
        HEAP32[$14>>2] = 0;
        $697 = HEAP32[$681>>2]|0;
        $698 = ((($697)) + 16|0);
        HEAP32[$681>>2] = $698;
       } else {
        $699 = $682;
        $700 = ((($db)) + 28|0);
        $701 = HEAP32[$677>>2]|0;
        $702 = (($699) - ($701))|0;
        $703 = $702 >> 4;
        $704 = (($703) + 1)|0;
        $705 = ($702|0)<(-16);
        if ($705) {
         __THREW__ = 0;
         invoke_vi(102,($677|0));
         $706 = __THREW__; __THREW__ = 0;
         $707 = ___cxa_find_matching_catch_2()|0;
         $708 = tempRet0;
         __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($14);
         $$0 = $708;$$01 = $707;
         break;
        }
        $709 = (($686) - ($701))|0;
        $710 = $709 >> 4;
        $711 = ($710>>>0)<(1073741823);
        if ($711) {
         $712 = $709 >> 3;
         $713 = ($712>>>0)<($704>>>0);
         $714 = $713 ? $704 : $712;
         $$0$i$i$i = $714;
        } else {
         $$0$i$i$i = 2147483647;
        }
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v$i$i,$$0$i$i$i,$703,$700);
        $715 = ((($__v$i$i)) + 8|0);
        $716 = HEAP32[$715>>2]|0;
        $717 = ((($14)) + 12|0);
        $718 = ((($716)) + 4|0);
        $719 = HEAP32[$717>>2]|0;
        $720 = ((($716)) + 12|0);
        HEAP32[$720>>2] = $719;
        $721 = HEAP32[$14>>2]|0;
        HEAP32[$716>>2] = $721;
        $722 = ((($14)) + 4|0);
        $723 = HEAP32[$722>>2]|0;
        HEAP32[$718>>2] = $723;
        $724 = ((($14)) + 8|0);
        $725 = HEAP32[$724>>2]|0;
        $726 = ((($716)) + 8|0);
        HEAP32[$726>>2] = $725;
        HEAP32[$724>>2] = 0;
        HEAP32[$722>>2] = 0;
        HEAP32[$14>>2] = 0;
        $727 = ((($716)) + 16|0);
        HEAP32[$715>>2] = $727;
        __ZNSt3__16vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($677,$__v$i$i);
        __ZNSt3__114__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v$i$i);
       }
       __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($14);
       $728 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($$13$i$ph,$last,$db)|0);
       $729 = ($728|0)==($$13$i$ph|0);
       if ($729) {
        $$3 = $first;
        break L1;
       }
       $730 = HEAP32[$674>>2]|0;
       $731 = HEAP32[$db>>2]|0;
       $732 = (($730) - ($731))|0;
       $733 = (($732|0) / 24)&-1;
       $734 = ($733>>>0)<(2);
       if ($734) {
        $$3 = $first;
        break L1;
       }
       $735 = $730;
       $736 = ((($735)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp,$736);
       $737 = HEAP32[$674>>2]|0;
       $738 = ((($737)) + -24|0);
       $739 = $737;
       while(1) {
        $740 = ($739|0)==($738|0);
        if ($740) {
         break;
        }
        $741 = ((($739)) + -24|0);
        HEAP32[$674>>2] = $741;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($741);
        $$pre$i = HEAP32[$674>>2]|0;
        $739 = $$pre$i;
       }
       $742 = ((($737)) + -48|0);
       $743 = HEAP8[$tmp>>0]|0;
       $744 = $743 & 1;
       $745 = ($744<<24>>24)==(0);
       $746 = ((($tmp)) + 8|0);
       $747 = HEAP32[$746>>2]|0;
       $748 = ((($tmp)) + 1|0);
       $749 = $745 ? $748 : $747;
       $750 = ((($tmp)) + 4|0);
       $751 = HEAP32[$750>>2]|0;
       $752 = $743&255;
       $753 = $752 >>> 1;
       $754 = $745 ? $753 : $751;
       __THREW__ = 0;
       (invoke_iiii(91,($742|0),($749|0),($754|0))|0);
       $755 = __THREW__; __THREW__ = 0;
       $756 = $755&1;
       if ($756) {
        $757 = ___cxa_find_matching_catch_2()|0;
        $758 = tempRet0;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
        $$0 = $758;$$01 = $757;
        break;
       } else {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
        $$3 = $728;
        break L1;
       }
      }
     } else {
      label = 229;
     }
    } while(0);
    do {
     if ((label|0) == 229) {
      $759 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$first,$last,$db)|0);
      $760 = ($759|0)==($$first|0);
      $761 = ($759|0)==($last|0);
      $or$cond = $760 | $761;
      if ($or$cond) {
       $$3 = $first;
       break L1;
      }
      $762 = HEAP8[$759>>0]|0;
      $763 = ($762<<24>>24)==(73);
      if (!($763)) {
       $$3 = $first;
       break L1;
      }
      $764 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($759,$last,$db)|0);
      $765 = ($764|0)==($759|0);
      if ($765) {
       $$3 = $first;
       break L1;
      }
      $766 = ((($db)) + 4|0);
      $767 = HEAP32[$766>>2]|0;
      $768 = HEAP32[$db>>2]|0;
      $769 = (($767) - ($768))|0;
      $770 = (($769|0) / 24)&-1;
      $771 = ($770>>>0)<(2);
      if ($771) {
       $$3 = $first;
       break L1;
      }
      $772 = $767;
      $773 = ((($772)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp3,$773);
      $774 = HEAP32[$766>>2]|0;
      $775 = ((($774)) + -24|0);
      $776 = $774;
      while(1) {
       $777 = ($776|0)==($775|0);
       if ($777) {
        break;
       }
       $778 = ((($776)) + -24|0);
       HEAP32[$766>>2] = $778;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($778);
       $$pre$i11 = HEAP32[$766>>2]|0;
       $776 = $$pre$i11;
      }
      $779 = ((($774)) + -48|0);
      $780 = HEAP8[$tmp3>>0]|0;
      $781 = $780 & 1;
      $782 = ($781<<24>>24)==(0);
      $783 = ((($tmp3)) + 8|0);
      $784 = HEAP32[$783>>2]|0;
      $785 = ((($tmp3)) + 1|0);
      $786 = $782 ? $785 : $784;
      $787 = ((($tmp3)) + 4|0);
      $788 = HEAP32[$787>>2]|0;
      $789 = $780&255;
      $790 = $789 >>> 1;
      $791 = $782 ? $790 : $788;
      __THREW__ = 0;
      (invoke_iiii(91,($779|0),($786|0),($791|0))|0);
      $792 = __THREW__; __THREW__ = 0;
      $793 = $792&1;
      if ($793) {
       $794 = ___cxa_find_matching_catch_2()|0;
       $795 = tempRet0;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp3);
       $$0 = $795;$$01 = $794;
       break;
      } else {
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp3);
       $$3 = $764;
       break L1;
      }
     }
    } while(0);
    ___resumeException($$01|0);
    // unreachable;
   }
   }
  } else {
   $$3 = $first;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if (!($0)) {
  $1 = HEAP8[$__str>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  $4 = ((($__str)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($__str)) + 1|0);
  $7 = $3 ? $6 : $5;
  $8 = ((($__str)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1&255;
  $11 = $10 >>> 1;
  $12 = $3 ? $11 : $9;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this,$7,$12);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $$1 = 0, $$first = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $first$pn = 0, $isdigit = 0, $isdigit3 = 0, $isdigit5 = 0, $isdigit7 = 0, $isdigittmp = 0, $isdigittmp2 = 0, $isdigittmp4 = 0, $isdigittmp6 = 0, $t1$0 = 0, $t1$0$lcssa19 = 0, $t11$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($first|0)==($last|0);
 L1: do {
  if ($0) {
   $$1 = $first;
  } else {
   $1 = HEAP8[$first>>0]|0;
   $2 = ($1<<24>>24)==(95);
   if (!($2)) {
    $16 = $1 << 24 >> 24;
    $isdigittmp = (($16) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $first$pn = $first;
    } else {
     $$1 = $first;
     break;
    }
    while(1) {
     $t11$0 = ((($first$pn)) + 1|0);
     $17 = ($t11$0|0)==($last|0);
     if ($17) {
      $$1 = $last;
      break L1;
     }
     $18 = HEAP8[$t11$0>>0]|0;
     $19 = $18 << 24 >> 24;
     $isdigittmp2 = (($19) + -48)|0;
     $isdigit3 = ($isdigittmp2>>>0)<(10);
     if ($isdigit3) {
      $first$pn = $t11$0;
     } else {
      $$1 = $t11$0;
      break L1;
     }
    }
   }
   $3 = ((($first)) + 1|0);
   $4 = ($3|0)==($last|0);
   if ($4) {
    $$1 = $first;
   } else {
    $5 = HEAP8[$3>>0]|0;
    $6 = $5 << 24 >> 24;
    $isdigittmp4 = (($6) + -48)|0;
    $isdigit5 = ($isdigittmp4>>>0)<(10);
    if ($isdigit5) {
     $7 = ((($first)) + 2|0);
     $$1 = $7;
     break;
    }
    $8 = ($5<<24>>24)==(95);
    if ($8) {
     $9 = ((($first)) + 2|0);
     $t1$0 = $9;
     while(1) {
      $10 = ($t1$0|0)==($last|0);
      if ($10) {
       $$1 = $first;
       break L1;
      }
      $11 = HEAP8[$t1$0>>0]|0;
      $12 = $11 << 24 >> 24;
      $isdigittmp6 = (($12) + -48)|0;
      $isdigit7 = ($isdigittmp6>>>0)<(10);
      if (!($isdigit7)) {
       $$lcssa = $11;$t1$0$lcssa19 = $t1$0;
       break;
      }
      $13 = ((($t1$0)) + 1|0);
      $t1$0 = $13;
     }
     $14 = ($$lcssa<<24>>24)==(95);
     $15 = ((($t1$0$lcssa19)) + 1|0);
     $$first = $14 ? $15 : $first;
     return ($$first|0);
    } else {
     $$1 = $first;
    }
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $$3 = 0, $$first = 0, $$first3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($first|0)==($last|0);
 L1: do {
  if ($0) {
   $$3 = $first;
  } else {
   $1 = HEAP8[$first>>0]|0;
   $2 = $1 << 24 >> 24;
   switch ($2|0) {
   case 104:  {
    $3 = ((($first)) + 1|0);
    $4 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($3,$last)|0);
    $5 = ($4|0)==($3|0);
    $6 = ($4|0)==($last|0);
    $or$cond = $5 | $6;
    if ($or$cond) {
     $$3 = $first;
     break L1;
    }
    $7 = HEAP8[$4>>0]|0;
    $8 = ($7<<24>>24)==(95);
    $9 = ((($4)) + 1|0);
    $$first = $8 ? $9 : $first;
    return ($$first|0);
    break;
   }
   case 118:  {
    break;
   }
   default: {
    $$3 = $first;
    break L1;
   }
   }
   $10 = ((($first)) + 1|0);
   $11 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($10,$last)|0);
   $12 = ($11|0)==($10|0);
   $13 = ($11|0)==($last|0);
   $or$cond1 = $12 | $13;
   if ($or$cond1) {
    $$3 = $first;
   } else {
    $14 = HEAP8[$11>>0]|0;
    $15 = ($14<<24>>24)==(95);
    if ($15) {
     $16 = ((($11)) + 1|0);
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($16,$last)|0);
     $18 = ($17|0)==($16|0);
     $19 = ($17|0)==($last|0);
     $or$cond2 = $18 | $19;
     if ($or$cond2) {
      $$3 = $first;
     } else {
      $20 = HEAP8[$17>>0]|0;
      $21 = ($20<<24>>24)==(95);
      $22 = ((($17)) + 1|0);
      $$first3 = $21 ? $22 : $first;
      $$3 = $$first3;
     }
    } else {
     $$3 = $first;
    }
   }
  }
 } while(0);
 return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 32|0);
 __ZNSt3__113__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($0);
 $1 = ((($this)) + 16|0);
 __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($1);
 __ZNSt3__113__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this);
 return;
}
function __ZNSt3__113__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($this) {
 $this = $this|0;
 var $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($this)) + 4|0);
  while(1) {
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($0|0);
   if ($4) {
    break;
   }
   $5 = ((($3)) + -16|0);
   HEAP32[$2>>2] = $5;
   __ZNSt3__113__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($5);
  }
  $6 = HEAP32[$this>>2]|0;
  $7 = ((($this)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $$cast = $6;
  $9 = (($8) - ($$cast))|0;
  $10 = ((($this)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($11,$6,$9);
 }
 return;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 while(1) {
  $1 = (_malloc($$size)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $$lcssa = $1;
   label = 6;
   break;
  }
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$3 & 127]();
 }
 if ((label|0) == 5) {
  $5 = (___cxa_allocate_exception(4)|0);
  HEAP32[$5>>2] = (940);
  ___cxa_throw(($5|0),(184|0),(50|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($$lcssa|0);
 }
 return (0)|0;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1838]|0;HEAP32[1838] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 127]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,160,280,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&127](a1|0,+a2);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&127]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&127]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&127](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(1);
}
function b2(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(2);
}
function b3() {
 ; nullFunc_i(3);return 0;
}
function b4(p0) {
 p0 = p0|0; nullFunc_vi(4);
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(5);
}
function b6(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7);
}
function b8() {
 ; nullFunc_v(8);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(9);return 0;
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function b11(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(11);return 0;
}
function _clock_gettime__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _clock_gettime(p0|0,p1|0)|0;
}
function b12(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(12);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b0,b0,b0,b0,b0,b0
,b0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b0,b0,b0,b0,b0,b0,b0
,b0,b0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc,b0,__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_,__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_,b0,__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_,b0,b0,b0,b0,b0,b0,b0,__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_,__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_,b0,b0,b0,b0,b0,b0,b0,__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vid = [b1,b1,b1,__ZN12PolygonShape11ComputeMassEf,__ZN12PolygonShape9SetOrientEf,b1,b1,b1,b1,b1,__ZN6Circle11ComputeMassEf,__ZN6Circle9SetOrientEf,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN6CircleC2Ef,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b2,b2,b2,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_i = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,___cxa_get_globals_fast,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vi = [b4,b4,__ZN12PolygonShape10InitializeEv,b4,b4,__ZNK12PolygonShape4DrawEv,b4,b4,b4,__ZN6Circle10InitializeEv,b4,b4,__ZNK6Circle4DrawEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,b4,__ZNSt3__114error_categoryD2Ev,__ZNSt3__124__generic_error_categoryD0Ev,b4
,b4,b4,b4,b4,__ZNSt3__123__system_error_categoryD0Ev,b4,b4,b4,b4,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b4,b4,b4,b4,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b4,b4,b4,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b4,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b4,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev
,__ZNSt12out_of_rangeD0Ev,__ZN5SceneD2Ev,__ZNSt3__16vectorI8ManifoldNS_9allocatorIS1_EEED2Ev,__ZNSt3__16vectorIP4BodyNS_9allocatorIS2_EEED2Ev,__ZN5ClockD2Ev,__ZN4Vec2C2Ev,b4,b4,b4,__ZN12PolygonShapeC2Ev,b4,b4,b4,__ZNSt3__114__split_bufferI8ManifoldRNS_9allocatorIS1_EEED2Ev,b4,b4,__ZNSt3__114__split_bufferIP4BodyRNS_9allocatorIS2_EEED2Ev,_cleanup_550,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_vii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE17__annotate_shrinkEj,__ZNSt3__16vectorI8ManifoldNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE,b5,b5,__ZNSt3__16vectorIP4BodyNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,b5,b5,b5,__ZNSt3__120__throw_system_errorEiPKc,__ZNSt11logic_errorC2EPKc,__ZNSt3__118__libcpp_refstringC2EPKc,b5,b5,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b5,b5,b5,b5,_abort_message
,b5,b5,b5,b5,b5,b5,b5,__ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv,b5,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc,b5,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,__ZNK12PolygonShape5CloneEv,b6,b6,b6,b6,__ZNK12PolygonShape7GetTypeEv,b6,__ZNK6Circle5CloneEv,b6,b6,b6,b6,__ZNK6Circle7GetTypeEv,b6,b6,b6,b6,___stdio_close,b6,b6,b6,b6,b6,b6,__ZNKSt13runtime_error4whatEv,b6,b6,__ZNKSt3__124__generic_error_category4nameEv
,b6,b6,b6,b6,b6,__ZNKSt3__123__system_error_category4nameEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt9bad_alloc4whatEv,b6,b6,__ZNKSt11logic_error4whatEv,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__Z14CircletoCircleP8ManifoldP4BodyS2_,__Z15CircletoPolygonP8ManifoldP4BodyS2_,__Z15PolygontoCircleP8ManifoldP4BodyS2_,__Z16PolygontoPolygonP8ManifoldP4BodyS2_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,__ZNKSt3__114error_category23default_error_conditionEi,b7,b7,__ZNKSt3__124__generic_error_category7messageEi,b7,b7,__ZNKSt3__123__system_error_category23default_error_conditionEi,__ZNKSt3__123__system_error_category7messageEi,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,__Z8Keyboardhii,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b7,__ZNSt3__112system_errorC2ENS_10error_codeEPKc,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj,b7,__ZNSt3__16vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_,__ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_,b7,b7,__ZNSt3__1plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_,b7,b7,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_v = [b8,b8,b8,b8,b8,b8,b8,___cxa_pure_virtual__wrapper,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,__ZL25default_terminate_handlerv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,__Z11PhysicsLoopv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b8,b8,b8
,___cxa_end_catch__wrapper,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj,b9,b9,b9,b9,b9,b9,b9,b9,__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_,__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_,b9,__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_iii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_clock_gettime__wrapper,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_viiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,__Z5Mouseiiii,b12,b12,b12,b12,b12,__ZN4BodyC2EP5Shapejj,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,__ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__112basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12];

  return { ___cxa_demangle: ___cxa_demangle, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, __GLOBAL__sub_I_Scene_cpp: __GLOBAL__sub_I_Scene_cpp, __GLOBAL__sub_I_Render_cpp: __GLOBAL__sub_I_Render_cpp, __GLOBAL__sub_I_Precompiled_cpp: __GLOBAL__sub_I_Precompiled_cpp, __GLOBAL__sub_I_Manifold_cpp: __GLOBAL__sub_I_Manifold_cpp, __GLOBAL__sub_I_Collision_cpp: __GLOBAL__sub_I_Collision_cpp, __GLOBAL__sub_I_Clock_cpp: __GLOBAL__sub_I_Clock_cpp, __GLOBAL__sub_I_Body_cpp: __GLOBAL__sub_I_Body_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vid: dynCall_vid, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_Manifold_cpp = asm["__GLOBAL__sub_I_Manifold_cpp"]; asm["__GLOBAL__sub_I_Manifold_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Manifold_cpp.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real___GLOBAL__sub_I_Body_cpp = asm["__GLOBAL__sub_I_Body_cpp"]; asm["__GLOBAL__sub_I_Body_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Body_cpp.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____cxa_demangle = asm["___cxa_demangle"]; asm["___cxa_demangle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_demangle.apply(null, arguments);
};

var real___GLOBAL__sub_I_Scene_cpp = asm["__GLOBAL__sub_I_Scene_cpp"]; asm["__GLOBAL__sub_I_Scene_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Scene_cpp.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real___GLOBAL__sub_I_Collision_cpp = asm["__GLOBAL__sub_I_Collision_cpp"]; asm["__GLOBAL__sub_I_Collision_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Collision_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_Clock_cpp = asm["__GLOBAL__sub_I_Clock_cpp"]; asm["__GLOBAL__sub_I_Clock_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Clock_cpp.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real___GLOBAL__sub_I_Precompiled_cpp = asm["__GLOBAL__sub_I_Precompiled_cpp"]; asm["__GLOBAL__sub_I_Precompiled_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Precompiled_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_Render_cpp = asm["__GLOBAL__sub_I_Render_cpp"]; asm["__GLOBAL__sub_I_Render_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_Render_cpp.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};
var _main = Module["_main"] = asm["_main"];
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var __GLOBAL__sub_I_Manifold_cpp = Module["__GLOBAL__sub_I_Manifold_cpp"] = asm["__GLOBAL__sub_I_Manifold_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var __GLOBAL__sub_I_Body_cpp = Module["__GLOBAL__sub_I_Body_cpp"] = asm["__GLOBAL__sub_I_Body_cpp"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _memset = Module["_memset"] = asm["_memset"];
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var __GLOBAL__sub_I_Scene_cpp = Module["__GLOBAL__sub_I_Scene_cpp"] = asm["__GLOBAL__sub_I_Scene_cpp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var __GLOBAL__sub_I_Collision_cpp = Module["__GLOBAL__sub_I_Collision_cpp"] = asm["__GLOBAL__sub_I_Collision_cpp"];
var __GLOBAL__sub_I_Clock_cpp = Module["__GLOBAL__sub_I_Clock_cpp"] = asm["__GLOBAL__sub_I_Clock_cpp"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var __GLOBAL__sub_I_Precompiled_cpp = Module["__GLOBAL__sub_I_Precompiled_cpp"] = asm["__GLOBAL__sub_I_Precompiled_cpp"];
var __GLOBAL__sub_I_Render_cpp = Module["__GLOBAL__sub_I_Render_cpp"] = asm["__GLOBAL__sub_I_Render_cpp"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===




function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



